
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v2.0.50727
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 2:0:0:0
}
.assembly extern FSharp.Core
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 2:0:0:0
}
.assembly Objects
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute::.ctor(int32,
                                                                                                      int32,
                                                                                                      int32) = ( 01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 1C 28 63 29 20 32 30 31 30 20 4E 65 77 61   // ...(c) 2010 Newa
                                                                                                  72 64 20 26 20 41 73 73 6F 63 69 61 74 65 73 00   // rd & Associates.
                                                                                                  00 ) 

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 01 01 00 00 00 00 ) 

  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public FSharpSignatureData.Objects
{
  // Offset: 0x00000000 Length: 0x0000C780
}
.mresource public FSharpOptimizationData.Objects
{
  // Offset: 0x0000C788 Length: 0x00003016
}
.module Objects.exe
// MVID: {4F77CC03-1667-03A4-A745-038303CC774F}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0003       // WINDOWS_CUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x012B0000


// =============== CLASS MEMBERS DECLARATION ===================

.class public abstract auto ansi sealed ObjectsDriver
       extends [mscorlib]System.Object
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
  .class auto ansi serializable nested assembly beforefieldinit writeInColor@11
         extends [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::.ctor()
      IL_0006:  ret
    } // end of method writeInColor@11::.ctor

    .method public strict virtual instance object 
            Specialize<a>() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
      IL_0000:  ldarg.0
      IL_0001:  newobj     instance void class ObjectsDriver/writeInColor@11T<!!a>::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc)
      IL_0006:  box        class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!a,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>
      IL_000b:  ret
    } // end of method writeInColor@11::Specialize

  } // end of class writeInColor@11

  .class auto ansi serializable nested assembly beforefieldinit writeInColor@11T<a>
         extends class [FSharp.Core]Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3<valuetype [mscorlib]System.ConsoleColor,!a,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc self0@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc self0@) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3<valuetype [mscorlib]System.ConsoleColor,!a,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc class ObjectsDriver/writeInColor@11T<!a>::self0@
      IL_000d:  ret
    } // end of method writeInColor@11T::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(valuetype [mscorlib]System.ConsoleColor color,
                   !a msg) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       48 (0x30)
      .maxstack  6
      .locals init ([0] valuetype [mscorlib]System.ConsoleColor oldColor,
               [1] !a V_1,
               [2] class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc V_2)
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc class ObjectsDriver/writeInColor@11T<!a>::self0@
      IL_0006:  stloc.2
      .language '{AB4F38C9-B6E6-43BA-BE3B-58080B2CCCE3}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File 'C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Driver.fs' 
//000012:         let oldColor = Console.ForegroundColor
      IL_0007:  nop
      IL_0008:  call       valuetype [mscorlib]System.ConsoleColor [mscorlib]System.Console::get_ForegroundColor()
      IL_000d:  stloc.0
//000013:         Console.ForegroundColor <- color
      IL_000e:  ldarg.1
      IL_000f:  call       void [mscorlib]System.Console::set_ForegroundColor(valuetype [mscorlib]System.ConsoleColor)
//000014:         Console.WriteLine(msg.ToString())
      IL_0014:  ldarg.2
      IL_0015:  stloc.1
      IL_0016:  ldloca.s   V_1
      IL_0018:  constrained. !a
      IL_001e:  callvirt   instance string [mscorlib]System.Object::ToString()
      IL_0023:  call       void [mscorlib]System.Console::WriteLine(string)
//000015:         Console.ForegroundColor <- oldColor
      IL_0028:  ldloc.0
      IL_0029:  call       void [mscorlib]System.Console::set_ForegroundColor(valuetype [mscorlib]System.ConsoleColor)
      IL_002e:  ldnull
      IL_002f:  ret
    } // end of method writeInColor@11T::Invoke

  } // end of class writeInColor@11T

  .class auto ansi serializable nested assembly beforefieldinit result@26
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,bool>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,bool>::.ctor()
      IL_0006:  ret
    } // end of method result@26::.ctor

    .method public strict virtual instance bool 
            Invoke(object attr) cil managed
    {
      // Code size       13 (0xd)
      .maxstack  5
      .locals init ([0] object V_0)
//000016: 
//000017:     writeInColor ConsoleColor.Green "::::::::::: Executing Pro F# Basics samples :::::::::::"
//000018: 
//000019:     let SIPNP = 
//000020:         BindingFlags.Static ||| BindingFlags.Instance ||| 
//000021:         BindingFlags.Public ||| BindingFlags.NonPublic
//000022:     Assembly.GetExecutingAssembly().GetTypes() |> Array.iter (fun typ ->
//000023:             typ.GetMethods(SIPNP) |> Array.iter (fun meth ->
//000024:                 let customAttrs = meth.GetCustomAttributes(false)
//000025:                 try
//000026:                     let result = customAttrs |> Array.find (fun attr -> attr :? ExampleAttribute)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  isinst     ProFSharp/ExampleAttribute
      IL_0009:  ldnull
      IL_000a:  cgt.un
      IL_000c:  ret
    } // end of method result@26::Invoke

  } // end of class result@26

  .class auto ansi serializable nested assembly beforefieldinit 'Main@23-1'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.Reflection.MethodInfo,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc writeInColor
    .method assembly specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc writeInColor) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.Reflection.MethodInfo,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc ObjectsDriver/'Main@23-1'::writeInColor
      IL_000d:  ret
    } // end of method 'Main@23-1'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.Reflection.MethodInfo meth) cil managed
    {
      // Code size       245 (0xf5)
      .maxstack  8
      .locals init ([0] object[] customAttrs,
               [1] class [FSharp.Core]Microsoft.FSharp.Core.Unit V_1,
               [2] object result,
               [3] object V_3,
               [4] class [FSharp.Core]Microsoft.FSharp.Core.Unit V_4,
               [5] object V_5,
               [6] object V_6,
               [7] class [mscorlib]System.Exception ex,
               [8] class [mscorlib]System.Exception V_8,
               [9] string V_9,
               [10] valuetype [mscorlib]System.ConsoleColor V_10,
               [11] string V_11,
               [12] valuetype [mscorlib]System.ConsoleColor V_12,
               [13] string V_13,
               [14] valuetype [mscorlib]System.ConsoleColor V_14)
//000024:                 let customAttrs = meth.GetCustomAttributes(false)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldc.i4.0
      IL_0003:  callvirt   instance object[] [mscorlib]System.Reflection.MemberInfo::GetCustomAttributes(bool)
      IL_0008:  stloc.0
//000025:                 try
      .try
      {
        IL_0009:  nop
//000026:                     let result = customAttrs |> Array.find (fun attr -> attr :? ExampleAttribute)
        IL_000a:  newobj     instance void ObjectsDriver/result@26::.ctor()
        IL_000f:  ldloc.0
        IL_0010:  call       !!0 [FSharp.Core]Microsoft.FSharp.Collections.ArrayModule::Find<object>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,bool>,
                                                                                                     !!0[])
        IL_0015:  stloc.2
//000027:                     if result :? ExampleAttribute then
        IL_0016:  ldloc.2
        IL_0017:  stloc.3
        IL_0018:  ldloc.3
        IL_0019:  isinst     ProFSharp/ExampleAttribute
        IL_001e:  ldnull
        IL_001f:  cgt.un
        IL_0021:  brfalse.s  IL_0025

        IL_0023:  br.s       IL_002a

        IL_0025:  br         IL_00e4

//000028:                         writeInColor ConsoleColor.Blue ("==========> Executing " + (result :?> ExampleAttribute).Value)
        IL_002a:  ldarg.0
        IL_002b:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc ObjectsDriver/'Main@23-1'::writeInColor
        IL_0030:  ldc.i4.s   9
        IL_0032:  ldstr      "==========> Executing "
        IL_0037:  ldloc.2
        IL_0038:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class ProFSharp/ExampleAttribute>(object)
        IL_003d:  call       instance string ProFSharp/ExampleAttribute::get_Value()
        IL_0042:  call       string [mscorlib]System.String::Concat(string,
                                                                    string)
        IL_0047:  stloc.s    V_9
        IL_0049:  stloc.s    V_10
        IL_004b:  callvirt   instance object [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::Specialize<string>()
        IL_0050:  unbox.any  class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<string,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>
        IL_0055:  ldloc.s    V_10
        IL_0057:  ldloc.s    V_9
        IL_0059:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,string>::InvokeFast<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                                  !0,
                                                                                                                                                                                                  !1)
        IL_005e:  pop
//000029:                         try
        .try
        {
          IL_005f:  nop
//000030:                             meth.Invoke(null, [| |]) |> ignore
          IL_0060:  ldarg.1
          IL_0061:  ldnull
          IL_0062:  ldc.i4.0
          IL_0063:  newarr     [mscorlib]System.Object
          IL_0068:  callvirt   instance object [mscorlib]System.Reflection.MethodBase::Invoke(object,
                                                                                              object[])
          IL_006d:  stloc.s    V_5
          IL_006f:  ldloc.s    V_5
          IL_0071:  stloc.s    V_6
          IL_0073:  ldnull
          IL_0074:  stloc.s    V_4
          IL_0076:  leave.s    IL_00df

//000031:                         with
        }  // end .try
        catch [mscorlib]System.Object 
        {
          IL_0078:  castclass  [mscorlib]System.Exception
          IL_007d:  stloc.s    ex
//000032:                         | ex -> 
//000033:                             writeInColor ConsoleColor.Red ("Exception: " + ex.InnerException.Message)
          IL_007f:  ldarg.0
          IL_0080:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc ObjectsDriver/'Main@23-1'::writeInColor
          IL_0085:  ldc.i4.s   12
          IL_0087:  ldstr      "Exception: "
          IL_008c:  ldloc.s    ex
          IL_008e:  callvirt   instance class [mscorlib]System.Exception [mscorlib]System.Exception::get_InnerException()
          IL_0093:  callvirt   instance string [mscorlib]System.Exception::get_Message()
          IL_0098:  call       string [mscorlib]System.String::Concat(string,
                                                                      string)
          IL_009d:  stloc.s    V_11
          IL_009f:  stloc.s    V_12
          IL_00a1:  callvirt   instance object [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::Specialize<string>()
          IL_00a6:  unbox.any  class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<string,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>
          IL_00ab:  ldloc.s    V_12
          IL_00ad:  ldloc.s    V_11
          IL_00af:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,string>::InvokeFast<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                                    !0,
                                                                                                                                                                                                    !1)
          IL_00b4:  pop
//000034:                             writeInColor ConsoleColor.Yellow (ex.StackTrace)
          IL_00b5:  ldarg.0
          IL_00b6:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc ObjectsDriver/'Main@23-1'::writeInColor
          IL_00bb:  ldc.i4.s   14
          IL_00bd:  ldloc.s    ex
          IL_00bf:  callvirt   instance string [mscorlib]System.Exception::get_StackTrace()
          IL_00c4:  stloc.s    V_13
          IL_00c6:  stloc.s    V_14
          IL_00c8:  callvirt   instance object [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::Specialize<string>()
          IL_00cd:  unbox.any  class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<string,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>
          IL_00d2:  ldloc.s    V_14
          IL_00d4:  ldloc.s    V_13
          IL_00d6:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,string>::InvokeFast<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                                    !0,
                                                                                                                                                                                                    !1)
          IL_00db:  stloc.s    V_4
          IL_00dd:  leave.s    IL_00df

//000035:                     else
//000036:                         ()
//000037:                 with
//000038:                 |   ex -> ()
//000039:             )
//000040:         )
//000041:     0
        }  // end handler
        IL_00df:  ldloc.s    V_4
        IL_00e1:  stloc.1
        IL_00e2:  leave.s    IL_00f3

//000036:                         ()
        IL_00e4:  ldnull
        IL_00e5:  stloc.1
        IL_00e6:  leave.s    IL_00f3

//000037:                 with
      }  // end .try
      catch [mscorlib]System.Object 
      {
        IL_00e8:  castclass  [mscorlib]System.Exception
        IL_00ed:  stloc.s    V_8
//000038:                 |   ex -> ()
        IL_00ef:  ldnull
        IL_00f0:  stloc.1
        IL_00f1:  leave.s    IL_00f3

//000039:             )
//000040:         )
//000041:     0
      }  // end handler
      IL_00f3:  ldloc.1
      IL_00f4:  ret
    } // end of method 'Main@23-1'::Invoke

  } // end of class 'Main@23-1'

  .class auto ansi serializable nested assembly beforefieldinit Main@22
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.Type,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc writeInColor
    .field public valuetype [mscorlib]System.Reflection.BindingFlags SIPNP
    .method assembly specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc writeInColor,
                                 valuetype [mscorlib]System.Reflection.BindingFlags SIPNP) cil managed
    {
      // Code size       21 (0x15)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.Type,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc ObjectsDriver/Main@22::writeInColor
      IL_000d:  ldarg.0
      IL_000e:  ldarg.2
      IL_000f:  stfld      valuetype [mscorlib]System.Reflection.BindingFlags ObjectsDriver/Main@22::SIPNP
      IL_0014:  ret
    } // end of method Main@22::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.Type typ) cil managed
    {
      // Code size       107 (0x6b)
      .maxstack  7
      .locals init ([0] class [mscorlib]System.Reflection.MethodInfo[] V_0,
               [1] class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.Reflection.MethodInfo,class [FSharp.Core]Microsoft.FSharp.Core.Unit> V_1,
               [2] class [mscorlib]System.Reflection.MethodInfo[] V_2,
               [3] int32 V_3,
               [4] int32 V_4,
               [5] int32 V_5)
//000023:             typ.GetMethods(SIPNP) |> Array.iter (fun meth ->
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldarg.0
      IL_0003:  ldfld      valuetype [mscorlib]System.Reflection.BindingFlags ObjectsDriver/Main@22::SIPNP
      IL_0008:  callvirt   instance class [mscorlib]System.Reflection.MethodInfo[] [mscorlib]System.Type::GetMethods(valuetype [mscorlib]System.Reflection.BindingFlags)
      IL_000d:  stloc.0
      IL_000e:  ldarg.0
      IL_000f:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc ObjectsDriver/Main@22::writeInColor
      IL_0014:  newobj     instance void ObjectsDriver/'Main@23-1'::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc)
      IL_0019:  stloc.1
      IL_001a:  ldloc.0
      IL_001b:  stloc.2
      IL_001c:  ldloc.2
      IL_001d:  box        class [mscorlib]System.Reflection.MethodInfo[]
      IL_0022:  brfalse.s  IL_0026

      IL_0024:  br.s       IL_0039

//000024:                 let customAttrs = meth.GetCustomAttributes(false)
//000025:                 try
//000026:                     let result = customAttrs |> Array.find (fun attr -> attr :? ExampleAttribute)
//000027:                     if result :? ExampleAttribute then
//000028:                         writeInColor ConsoleColor.Blue ("==========> Executing " + (result :?> ExampleAttribute).Value)
//000029:                         try
//000030:                             meth.Invoke(null, [| |]) |> ignore
//000031:                         with
//000032:                         | ex -> 
//000033:                             writeInColor ConsoleColor.Red ("Exception: " + ex.InnerException.Message)
//000034:                             writeInColor ConsoleColor.Yellow (ex.StackTrace)
//000035:                     else
//000036:                         ()
//000037:                 with
//000038:                 |   ex -> ()
//000039:             )
//000040:         )
//000041:     0
      IL_0026:  ldstr      "array"
      IL_002b:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
      IL_0030:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.Operators::Raise<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [mscorlib]System.Exception)
      IL_0035:  pop
      IL_0036:  nop
      IL_0037:  br.s       IL_003a

      IL_0039:  nop
      IL_003a:  ldloc.2
      IL_003b:  ldlen
      IL_003c:  conv.i4
      IL_003d:  stloc.3
      IL_003e:  ldc.i4.0
      IL_003f:  stloc.s    V_5
      IL_0041:  ldloc.3
      IL_0042:  ldc.i4.1
      IL_0043:  sub
      IL_0044:  stloc.s    V_4
      IL_0046:  ldloc.s    V_4
      IL_0048:  ldloc.s    V_5
      IL_004a:  blt.s      IL_0069

//000023:             typ.GetMethods(SIPNP) |> Array.iter (fun meth ->
      IL_004c:  ldloc.1
      IL_004d:  ldloc.2
      IL_004e:  ldloc.s    V_5
      IL_0050:  ldelem     [mscorlib]System.Reflection.MethodInfo
      IL_0055:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.Reflection.MethodInfo,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::Invoke(!0)
      IL_005a:  pop
      IL_005b:  ldloc.s    V_5
      IL_005d:  ldc.i4.1
      IL_005e:  add
      IL_005f:  stloc.s    V_5
      IL_0061:  ldloc.s    V_5
      IL_0063:  ldloc.s    V_4
      IL_0065:  ldc.i4.1
      IL_0066:  add
      IL_0067:  bne.un.s   IL_004c

      IL_0069:  ldnull
      IL_006a:  ret
    } // end of method Main@22::Invoke

  } // end of class Main@22

  .method public static int32  Main(string[] args) cil managed
  {
    .entrypoint
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.EntryPointAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       151 (0x97)
    .maxstack  5
    .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc writeInColor,
             [1] valuetype [mscorlib]System.Reflection.BindingFlags SIPNP,
             [2] class [mscorlib]System.Type[] V_2,
             [3] class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.Type,class [FSharp.Core]Microsoft.FSharp.Core.Unit> V_3,
             [4] class [mscorlib]System.Type[] V_4,
             [5] int32 V_5,
             [6] int32 V_6,
             [7] int32 V_7,
             [8] string V_8,
             [9] valuetype [mscorlib]System.ConsoleColor V_9)
//000011:     let writeInColor color msg =
    IL_0000:  nop
    IL_0001:  newobj     instance void ObjectsDriver/writeInColor@11::.ctor()
    IL_0006:  stloc.0
//000012:         let oldColor = Console.ForegroundColor
//000013:         Console.ForegroundColor <- color
//000014:         Console.WriteLine(msg.ToString())
//000015:         Console.ForegroundColor <- oldColor
//000016: 
//000017:     writeInColor ConsoleColor.Green "::::::::::: Executing Pro F# Basics samples :::::::::::"
    IL_0007:  ldloc.0
    IL_0008:  ldc.i4.s   10
    IL_000a:  ldstr      "::::::::::: Executing Pro F# Basics samples ::::::"
    + ":::::"
    IL_000f:  stloc.s    V_8
    IL_0011:  stloc.s    V_9
    IL_0013:  callvirt   instance object [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::Specialize<string>()
    IL_0018:  unbox.any  class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<string,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>
    IL_001d:  ldloc.s    V_9
    IL_001f:  ldloc.s    V_8
    IL_0021:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.ConsoleColor,string>::InvokeFast<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                              !0,
                                                                                                                                                                                              !1)
    IL_0026:  pop
//000018: 
//000019:     let SIPNP = 
    IL_0027:  ldc.i4.s   28
    IL_0029:  ldc.i4.s   32
    IL_002b:  or
    IL_002c:  stloc.1
//000020:         BindingFlags.Static ||| BindingFlags.Instance ||| 
//000021:         BindingFlags.Public ||| BindingFlags.NonPublic
//000022:     Assembly.GetExecutingAssembly().GetTypes() |> Array.iter (fun typ ->
    IL_002d:  call       class [mscorlib]System.Reflection.Assembly [mscorlib]System.Reflection.Assembly::GetExecutingAssembly()
    IL_0032:  callvirt   instance class [mscorlib]System.Type[] [mscorlib]System.Reflection.Assembly::GetTypes()
    IL_0037:  stloc.2
    IL_0038:  ldloc.0
    IL_0039:  ldloc.1
    IL_003a:  newobj     instance void ObjectsDriver/Main@22::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc,
                                                                    valuetype [mscorlib]System.Reflection.BindingFlags)
    IL_003f:  stloc.3
    IL_0040:  ldloc.2
    IL_0041:  stloc.s    V_4
    IL_0043:  ldloc.s    V_4
    IL_0045:  box        class [mscorlib]System.Type[]
    IL_004a:  brfalse.s  IL_004e

    IL_004c:  br.s       IL_0061

//000023:             typ.GetMethods(SIPNP) |> Array.iter (fun meth ->
//000024:                 let customAttrs = meth.GetCustomAttributes(false)
//000025:                 try
//000026:                     let result = customAttrs |> Array.find (fun attr -> attr :? ExampleAttribute)
//000027:                     if result :? ExampleAttribute then
//000028:                         writeInColor ConsoleColor.Blue ("==========> Executing " + (result :?> ExampleAttribute).Value)
//000029:                         try
//000030:                             meth.Invoke(null, [| |]) |> ignore
//000031:                         with
//000032:                         | ex -> 
//000033:                             writeInColor ConsoleColor.Red ("Exception: " + ex.InnerException.Message)
//000034:                             writeInColor ConsoleColor.Yellow (ex.StackTrace)
//000035:                     else
//000036:                         ()
//000037:                 with
//000038:                 |   ex -> ()
//000039:             )
//000040:         )
//000041:     0
    IL_004e:  ldstr      "array"
    IL_0053:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
    IL_0058:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.Operators::Raise<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [mscorlib]System.Exception)
    IL_005d:  pop
    IL_005e:  nop
    IL_005f:  br.s       IL_0062

    IL_0061:  nop
    IL_0062:  ldloc.s    V_4
    IL_0064:  ldlen
    IL_0065:  conv.i4
    IL_0066:  stloc.s    V_5
    IL_0068:  ldc.i4.0
    IL_0069:  stloc.s    V_7
    IL_006b:  ldloc.s    V_5
    IL_006d:  ldc.i4.1
    IL_006e:  sub
    IL_006f:  stloc.s    V_6
    IL_0071:  ldloc.s    V_6
    IL_0073:  ldloc.s    V_7
    IL_0075:  blt.s      IL_0095

//000022:     Assembly.GetExecutingAssembly().GetTypes() |> Array.iter (fun typ ->
    IL_0077:  ldloc.3
    IL_0078:  ldloc.s    V_4
    IL_007a:  ldloc.s    V_7
    IL_007c:  ldelem     [mscorlib]System.Type
    IL_0081:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.Type,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::Invoke(!0)
    IL_0086:  pop
    IL_0087:  ldloc.s    V_7
    IL_0089:  ldc.i4.1
    IL_008a:  add
    IL_008b:  stloc.s    V_7
    IL_008d:  ldloc.s    V_7
    IL_008f:  ldloc.s    V_6
    IL_0091:  ldc.i4.1
    IL_0092:  add
    IL_0093:  bne.un.s   IL_0077

//000023:             typ.GetMethods(SIPNP) |> Array.iter (fun meth ->
//000024:                 let customAttrs = meth.GetCustomAttributes(false)
//000025:                 try
//000026:                     let result = customAttrs |> Array.find (fun attr -> attr :? ExampleAttribute)
//000027:                     if result :? ExampleAttribute then
//000028:                         writeInColor ConsoleColor.Blue ("==========> Executing " + (result :?> ExampleAttribute).Value)
//000029:                         try
//000030:                             meth.Invoke(null, [| |]) |> ignore
//000031:                         with
//000032:                         | ex -> 
//000033:                             writeInColor ConsoleColor.Red ("Exception: " + ex.InnerException.Message)
//000034:                             writeInColor ConsoleColor.Yellow (ex.StackTrace)
//000035:                     else
//000036:                         ()
//000037:                 with
//000038:                 |   ex -> ()
//000039:             )
//000040:         )
//000041:     0
    IL_0095:  ldc.i4.0
    IL_0096:  ret
  } // end of method ObjectsDriver::Main

} // end of class ObjectsDriver

.class private abstract auto ansi sealed '<StartupCode$Objects>'.$ObjectsDriver
       extends [mscorlib]System.Object
{
} // end of class '<StartupCode$Objects>'.$ObjectsDriver

.class public abstract auto ansi sealed CustomAttributes
       extends [mscorlib]System.Object
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
  .class auto ansi serializable nested public Person
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.SerializableAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string LastName
    .field assembly string FirstName
    .field assembly int32 Age
    .method public specialname rtspecialname 
            instance void  .ctor(string FirstName,
                                 string LastName,
                                 int32 Age) cil managed
    {
      // Code size       31 (0x1f)
      .maxstack  4
// Source File 'C:\Users\faa634\Desktop\book codes\F#\Code\Objects\CustomAttributes.fs' 
//000014: type Person(FirstName : string, LastName : string, Age : int) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string CustomAttributes/Person::FirstName
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      string CustomAttributes/Person::LastName
      IL_0017:  ldarg.0
      IL_0018:  ldarg.3
      IL_0019:  stfld      int32 CustomAttributes/Person::Age
      IL_001e:  ret
    } // end of method Person::.ctor

    .method public hidebysig virtual instance string 
            ToString() cil managed
    {
      // Code size       35 (0x23)
      .maxstack  6
//000015:     override p.ToString() =
//000016:         String.Format("[Person: {0} {1} {2}",
      IL_0000:  nop
      IL_0001:  ldstr      "[Person: {0} {1} {2}"
      IL_0006:  ldarg.0
      IL_0007:  ldfld      string CustomAttributes/Person::FirstName
      IL_000c:  ldarg.0
      IL_000d:  ldfld      string CustomAttributes/Person::LastName
      IL_0012:  ldarg.0
      IL_0013:  ldfld      int32 CustomAttributes/Person::Age
      IL_0018:  box        [mscorlib]System.Int32
      IL_001d:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object,
                                                                  object)
      IL_0022:  ret
    } // end of method Person::ToString

  } // end of class Person

  .class auto ansi serializable nested public ObsoleteExperiment
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000017:             FirstName, LastName, Age)
//000018: 
//000019: 
//000020: // ============= Obsolete
//000021: 
//000022: type ObsoleteExperiment() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method ObsoleteExperiment::.ctor

    .method public instance void  TestMethod() cil managed
    {
      .custom instance void [mscorlib]System.ObsoleteAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  3
//000023:     [<Obsolete>]
//000024:     member e.TestMethod() =
//000025:         System.Console.WriteLine("Don't use this!")
      IL_0000:  nop
      IL_0001:  ldstr      "Don't use this!"
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_000b:  ret
    } // end of method ObsoleteExperiment::TestMethod

    .method public instance string  AnotherMethod() cil managed
    {
      .custom instance void [mscorlib]System.ObsoleteAttribute::.ctor(string) = ( 01 00 1D 54 68 69 73 20 6D 65 74 68 6F 64 20 72   // ...This method r
                                                                                  65 61 6C 6C 79 20 6A 75 73 74 20 73 75 63 6B 73   // eally just sucks
                                                                                  00 00 ) 
      // Code size       17 (0x11)
      .maxstack  3
      .locals init ([0] object V_0)
//000026:     [<Obsolete("This method really just sucks")>]
//000027:     member e.AnotherMethod() =
//000028:         null.ToString()
      IL_0000:  nop
      IL_0001:  ldnull
      IL_0002:  stloc.0
      IL_0003:  ldloca.s   V_0
      IL_0005:  constrained. [mscorlib]System.Object
      IL_000b:  callvirt   instance string [mscorlib]System.Object::ToString()
      IL_0010:  ret
    } // end of method ObsoleteExperiment::AnotherMethod

  } // end of class ObsoleteExperiment

  .class auto ansi serializable nested public ConditionalDemo
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string data
    .field assembly int32 count
    .method public specialname rtspecialname 
            instance void  .ctor(string data,
                                 int32 count) cil managed
    {
      // Code size       24 (0x18)
      .maxstack  4
//000029: 
//000030: [<Example("Obsolete usage")>]
//000031: let obsoleteUsage() =
//000032:     let e = new ObsoleteExperiment()
//000033:     e.TestMethod()
//000034: 
//000035: 
//000036: // ============= Conditional
//000037: type ConditionalDemo(data : string, count : int) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string CustomAttributes/ConditionalDemo::data
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      int32 CustomAttributes/ConditionalDemo::count
      IL_0017:  ret
    } // end of method ConditionalDemo::.ctor

    .method public instance void  DumpInternals() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = ( 01 00 05 44 45 42 55 47 00 00 )                   // ...DEBUG..
      // Code size       29 (0x1d)
      .maxstack  5
//000038:     [<Conditional("DEBUG")>]
//000039:     member c.DumpInternals() =
//000040:         Console.WriteLine("data: {0}, count: {1}",
      IL_0000:  nop
      IL_0001:  ldstr      "data: {0}, count: {1}"
      IL_0006:  ldarg.0
      IL_0007:  ldfld      string CustomAttributes/ConditionalDemo::data
      IL_000c:  ldarg.0
      IL_000d:  ldfld      int32 CustomAttributes/ConditionalDemo::count
      IL_0012:  box        [mscorlib]System.Int32
      IL_0017:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object,
                                                                    object)
      IL_001c:  ret
    } // end of method ConditionalDemo::DumpInternals

    .method public hidebysig virtual instance string 
            ToString() cil managed
    {
      // Code size       18 (0x12)
      .maxstack  4
//000041:             data, count)
//000042:     override c.ToString() =
//000043:         String.Format("ConditionalDemo()")
      IL_0000:  nop
      IL_0001:  ldstr      "ConditionalDemo()"
      IL_0006:  ldc.i4.0
      IL_0007:  newarr     [mscorlib]System.Object
      IL_000c:  call       string [mscorlib]System.String::Format(string,
                                                                  object[])
      IL_0011:  ret
    } // end of method ConditionalDemo::ToString

  } // end of class ConditionalDemo

  .class auto ansi serializable nested public ParamArrayExperiment
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000044: 
//000045: [<Example("Conditional usage")>]
//000046: let conditionalUsage() =
//000047:     let cd = new ConditionalDemo("password", 5)
//000048:     Console.WriteLine(cd.ToString())
//000049:     cd.DumpInternals()
//000050:     
//000051: 
//000052: // ============= ParamArray
//000053: 
//000054: type ParamArrayExperiment() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method ParamArrayExperiment::.ctor

    .method public instance void  TestMethod(object[] args) cil managed
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       37 (0x25)
      .maxstack  4
      .locals init ([0] object[] V_0,
               [1] int32 V_1,
               [2] object o)
//000055:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000056:         for o in args do
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  stloc.0
      IL_0003:  ldc.i4.0
      IL_0004:  stloc.1
      IL_0005:  br.s       IL_001e

      IL_0007:  ldloc.0
      IL_0008:  ldloc.1
      IL_0009:  ldelem     [mscorlib]System.Object
      IL_000e:  stloc.2
      IL_000f:  ldloc.2
      IL_0010:  callvirt   instance string [mscorlib]System.Object::ToString()
      IL_0015:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_001a:  ldloc.1
      IL_001b:  ldc.i4.1
      IL_001c:  add
      IL_001d:  stloc.1
      IL_001e:  ldloc.1
      IL_001f:  ldloc.0
      IL_0020:  ldlen
      IL_0021:  conv.i4
      IL_0022:  blt.s      IL_0007

      IL_0024:  ret
    } // end of method ParamArrayExperiment::TestMethod

  } // end of class ParamArrayExperiment

  .class auto ansi serializable nested public BlameAttribute
         extends [mscorlib]System.Attribute
  {
    .custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = ( 01 00 7F 05 00 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string owner
    .field assembly string reason
    .method public specialname rtspecialname 
            instance void  .ctor(string owner) cil managed
    {
      // Code size       28 (0x1c)
      .maxstack  4
//000057:             System.Console.WriteLine(o.ToString())
//000058: 
//000059: let varargsFunction([<System.ParamArray>] args : obj array) =
//000060:     for o in args do
//000061:         System.Console.WriteLine(o.ToString())
//000062: 
//000063: [<Example("ParamArray usage")>]
//000064: let paramArrayUsage() =
//000065:     let e = new ParamArrayExperiment()
//000066:     e.TestMethod("one", 2, 3.0)
//000067:     e.TestMethod("This is just one argument")
//000068:     e.TestMethod() // No arguments, empty array
//000069: 
//000070:     //varargsFunction("one", 2, 3.0)
//000071:     // error: This expression was expected to have type obj array
//000072:     // but here has type 'a * 'b * 'c
//000073: 
//000074:     ()        
//000075: 
//000076: 
//000077: // ============= Blame example
//000078: [<AttributeUsage(AttributeTargets.Assembly |||
//000079:                  AttributeTargets.Class |||
//000080:                  AttributeTargets.Constructor |||
//000081:                  AttributeTargets.Enum |||
//000082:                  AttributeTargets.Field |||
//000083:                  AttributeTargets.Interface |||
//000084:                  AttributeTargets.Method |||
//000085:                  AttributeTargets.Module |||
//000086:                  AttributeTargets.Struct)>]
//000087: type BlameAttribute(owner : string) =
//000088:     inherit Attribute()
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Attribute::.ctor()
      IL_0007:  ldarg.0
      IL_0008:  pop
//000087: type BlameAttribute(owner : string) =
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string CustomAttributes/BlameAttribute::owner
//000088:     inherit Attribute()
//000089:     
//000090:     let mutable reason = ""
      IL_0010:  ldarg.0
      IL_0011:  ldstr      ""
      IL_0016:  stfld      string CustomAttributes/BlameAttribute::reason
//000087: type BlameAttribute(owner : string) =
      IL_001b:  ret
    } // end of method BlameAttribute::.ctor

    .method public specialname instance string 
            get_Owner() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000088:     inherit Attribute()
//000089:     
//000090:     let mutable reason = ""
//000091:     
//000092:     member public b.Owner 
//000093:         with get() = owner
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string CustomAttributes/BlameAttribute::owner
      IL_0007:  ret
    } // end of method BlameAttribute::get_Owner

    .method public specialname instance string 
            get_Reason() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000094:     member public b.Reason
//000095:         with get() = reason
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string CustomAttributes/BlameAttribute::reason
      IL_0007:  ret
    } // end of method BlameAttribute::get_Reason

    .method public specialname instance void 
            set_Reason(string 'value') cil managed
    {
      // Code size       9 (0x9)
      .maxstack  4
//000096:         and set(value) = reason <- value
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  stfld      string CustomAttributes/BlameAttribute::reason
      IL_0008:  ret
    } // end of method BlameAttribute::set_Reason

    .method public hidebysig virtual instance string 
            ToString() cil managed
    {
      // Code size       65 (0x41)
      .maxstack  6
//000097:     
//000098:     override b.ToString() =
//000099:         String.Format("Blame {0}{1}",
      IL_0000:  nop
      IL_0001:  ldstr      "Blame {0}{1}"
      IL_0006:  ldarg.0
      IL_0007:  call       instance string CustomAttributes/BlameAttribute::get_Owner()
//000100:             b.Owner, 
//000101:             if b.Reason = "" 
      IL_000c:  ldarg.0
      IL_000d:  call       instance string CustomAttributes/BlameAttribute::get_Reason()
      IL_0012:  ldstr      ""
      IL_0017:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_001c:  brfalse.s  IL_0020

      IL_001e:  br.s       IL_0022

      IL_0020:  br.s       IL_002a

//000102:                 then ", just because!" 
      IL_0022:  ldstr      ", just because!"
//000103:                 else ", because " + b.Reason)
//000104: 
//000105: [<Blame("Aaron Erickson", Reason="I told you not to use this!")>]
//000106: let faultyMethod() =
//000107:     null.ToString()
//000108: 
//000109: [<Example("Custom attribute creation and consumption example")>]
//000110: let blameExample() =
//000111:     try
//000112:         faultyMethod() |> ignore
//000113:     with
//000114:     | ex -> 
//000115:         let target = ex.TargetSite
//000116:         let custAttrs = 
//000117:             target.GetCustomAttributes(typeof<BlameAttribute>, true)
//000118:         if custAttrs.Length > 0 then
//000119:             let blame = (custAttrs.[0]) :?> BlameAttribute
//000120:             Console.WriteLine("Aha! {0} did it!", blame.Owner)
//000121:         else
//000122:             Console.WriteLine("Nobody to blame, sorry!")
//000123:     ()
//000124: 
//000125: 
//000126: // ============= Attributes
//000127: 
//000128: [<assembly:AssemblyVersion("1.0.0.0")>]
//000129: [<assembly:AssemblyCopyright("(c) 2010 Neward & Associates")>]
//000130: do
//000131:     ()
//000132: 
//000133: 
      IL_0027:  nop
      IL_0028:  br.s       IL_003b

//000103:                 else ", because " + b.Reason)
      IL_002a:  ldstr      ", because "
      IL_002f:  ldarg.0
      IL_0030:  call       instance string CustomAttributes/BlameAttribute::get_Reason()
      IL_0035:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
//000104: 
//000105: [<Blame("Aaron Erickson", Reason="I told you not to use this!")>]
//000106: let faultyMethod() =
//000107:     null.ToString()
//000108: 
//000109: [<Example("Custom attribute creation and consumption example")>]
//000110: let blameExample() =
//000111:     try
//000112:         faultyMethod() |> ignore
//000113:     with
//000114:     | ex -> 
//000115:         let target = ex.TargetSite
//000116:         let custAttrs = 
//000117:             target.GetCustomAttributes(typeof<BlameAttribute>, true)
//000118:         if custAttrs.Length > 0 then
//000119:             let blame = (custAttrs.[0]) :?> BlameAttribute
//000120:             Console.WriteLine("Aha! {0} did it!", blame.Owner)
//000121:         else
//000122:             Console.WriteLine("Nobody to blame, sorry!")
//000123:     ()
//000124: 
//000125: 
//000126: // ============= Attributes
//000127: 
//000128: [<assembly:AssemblyVersion("1.0.0.0")>]
//000129: [<assembly:AssemblyCopyright("(c) 2010 Neward & Associates")>]
//000130: do
//000131:     ()
//000132: 
//000133: 
      IL_003a:  nop
      IL_003b:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object)
      IL_0040:  ret
    } // end of method BlameAttribute::ToString

    .property instance string Owner()
    {
      .get instance string CustomAttributes/BlameAttribute::get_Owner()
    } // end of property BlameAttribute::Owner
    .property instance string Reason()
    {
      .set instance void CustomAttributes/BlameAttribute::set_Reason(string)
      .get instance string CustomAttributes/BlameAttribute::get_Reason()
    } // end of property BlameAttribute::Reason
  } // end of class BlameAttribute

  .method public static void  obsoleteUsage() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 0E 4F 62 73 6F 6C 65 74 65 20 75 73 61 67   // ...Obsolete usag
                                                                        65 00 00 )                                        // e..
    // Code size       15 (0xf)
    .maxstack  3
    .locals init ([0] class CustomAttributes/ObsoleteExperiment e)
//000032:     let e = new ObsoleteExperiment()
    IL_0000:  nop
    IL_0001:  newobj     instance void CustomAttributes/ObsoleteExperiment::.ctor()
    IL_0006:  stloc.0
//000033:     e.TestMethod()
    IL_0007:  ldloc.0
    IL_0008:  call       instance void CustomAttributes/ObsoleteExperiment::TestMethod()
    IL_000d:  nop
    IL_000e:  ret
  } // end of method CustomAttributes::obsoleteUsage

  .method public static void  conditionalUsage() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 11 43 6F 6E 64 69 74 69 6F 6E 61 6C 20 75   // ...Conditional u
                                                                        73 61 67 65 00 00 )                               // sage..
    // Code size       32 (0x20)
    .maxstack  4
    .locals init ([0] class CustomAttributes/ConditionalDemo cd)
//000034: 
//000035: 
//000036: // ============= Conditional
//000037: type ConditionalDemo(data : string, count : int) =
//000038:     [<Conditional("DEBUG")>]
//000039:     member c.DumpInternals() =
//000040:         Console.WriteLine("data: {0}, count: {1}",
//000041:             data, count)
//000042:     override c.ToString() =
//000043:         String.Format("ConditionalDemo()")
//000044: 
//000045: [<Example("Conditional usage")>]
//000046: let conditionalUsage() =
//000047:     let cd = new ConditionalDemo("password", 5)
    IL_0000:  nop
    IL_0001:  ldstr      "password"
    IL_0006:  ldc.i4.5
    IL_0007:  newobj     instance void CustomAttributes/ConditionalDemo::.ctor(string,
                                                                               int32)
    IL_000c:  stloc.0
//000048:     Console.WriteLine(cd.ToString())
    IL_000d:  ldloc.0
    IL_000e:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0013:  call       void [mscorlib]System.Console::WriteLine(string)
//000049:     cd.DumpInternals()
    IL_0018:  ldloc.0
    IL_0019:  call       instance void CustomAttributes/ConditionalDemo::DumpInternals()
    IL_001e:  nop
    IL_001f:  ret
  } // end of method CustomAttributes::conditionalUsage

  .method public static void  varargsFunction(object[] args) cil managed
  {
    .param [1]
    .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       37 (0x25)
    .maxstack  4
    .locals init ([0] object[] V_0,
             [1] int32 V_1,
             [2] object o)
//000050:     
//000051: 
//000052: // ============= ParamArray
//000053: 
//000054: type ParamArrayExperiment() =
//000055:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000056:         for o in args do
//000057:             System.Console.WriteLine(o.ToString())
//000058: 
//000059: let varargsFunction([<System.ParamArray>] args : obj array) =
//000060:     for o in args do
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  stloc.0
    IL_0003:  ldc.i4.0
    IL_0004:  stloc.1
    IL_0005:  br.s       IL_001e

    IL_0007:  ldloc.0
    IL_0008:  ldloc.1
    IL_0009:  ldelem     [mscorlib]System.Object
    IL_000e:  stloc.2
    IL_000f:  ldloc.2
    IL_0010:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0015:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_001a:  ldloc.1
    IL_001b:  ldc.i4.1
    IL_001c:  add
    IL_001d:  stloc.1
    IL_001e:  ldloc.1
    IL_001f:  ldloc.0
    IL_0020:  ldlen
    IL_0021:  conv.i4
    IL_0022:  blt.s      IL_0007

    IL_0024:  ret
  } // end of method CustomAttributes::varargsFunction

  .method public static void  paramArrayUsage() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 10 50 61 72 61 6D 41 72 72 61 79 20 75 73   // ...ParamArray us
                                                                        61 67 65 00 00 )                                  // age..
    // Code size       105 (0x69)
    .maxstack  7
    .locals init ([0] class CustomAttributes/ParamArrayExperiment e)
//000061:         System.Console.WriteLine(o.ToString())
//000062: 
//000063: [<Example("ParamArray usage")>]
//000064: let paramArrayUsage() =
//000065:     let e = new ParamArrayExperiment()
    IL_0000:  nop
    IL_0001:  newobj     instance void CustomAttributes/ParamArrayExperiment::.ctor()
    IL_0006:  stloc.0
//000066:     e.TestMethod("one", 2, 3.0)
    IL_0007:  ldloc.0
    IL_0008:  ldc.i4.3
    IL_0009:  newarr     [mscorlib]System.Object
    IL_000e:  dup
    IL_000f:  ldc.i4.0
    IL_0010:  ldstr      "one"
    IL_0015:  stelem     [mscorlib]System.Object
    IL_001a:  dup
    IL_001b:  ldc.i4.1
    IL_001c:  ldc.i4.2
    IL_001d:  box        [mscorlib]System.Int32
    IL_0022:  stelem     [mscorlib]System.Object
    IL_0027:  dup
    IL_0028:  ldc.i4.2
    IL_0029:  ldc.r8     3.
    IL_0032:  box        [mscorlib]System.Double
    IL_0037:  stelem     [mscorlib]System.Object
    IL_003c:  call       instance void CustomAttributes/ParamArrayExperiment::TestMethod(object[])
    IL_0041:  nop
//000067:     e.TestMethod("This is just one argument")
    IL_0042:  ldloc.0
    IL_0043:  ldc.i4.1
    IL_0044:  newarr     [mscorlib]System.Object
    IL_0049:  dup
    IL_004a:  ldc.i4.0
    IL_004b:  ldstr      "This is just one argument"
    IL_0050:  stelem     [mscorlib]System.Object
    IL_0055:  call       instance void CustomAttributes/ParamArrayExperiment::TestMethod(object[])
    IL_005a:  nop
//000068:     e.TestMethod() // No arguments, empty array
    IL_005b:  ldloc.0
    IL_005c:  ldc.i4.0
    IL_005d:  newarr     [mscorlib]System.Object
    IL_0062:  call       instance void CustomAttributes/ParamArrayExperiment::TestMethod(object[])
    IL_0067:  nop
//000069: 
//000070:     //varargsFunction("one", 2, 3.0)
//000071:     // error: This expression was expected to have type obj array
//000072:     // but here has type 'a * 'b * 'c
//000073: 
//000074:     ()        
    IL_0068:  ret
  } // end of method CustomAttributes::paramArrayUsage

  .method public static string  faultyMethod() cil managed
  {
    .custom instance void CustomAttributes/BlameAttribute::.ctor(string) = ( 01 00 0E 41 61 72 6F 6E 20 45 72 69 63 6B 73 6F   // ...Aaron Erickso
                                                                             6E 01 00 54 0E 06 52 65 61 73 6F 6E 1B 49 20 74   // n..T..Reason.I t
                                                                             6F 6C 64 20 79 6F 75 20 6E 6F 74 20 74 6F 20 75   // old you not to u
                                                                             73 65 20 74 68 69 73 21 )                         // se this!
    // Code size       17 (0x11)
    .maxstack  3
    .locals init ([0] object V_0)
//000075: 
//000076: 
//000077: // ============= Blame example
//000078: [<AttributeUsage(AttributeTargets.Assembly |||
//000079:                  AttributeTargets.Class |||
//000080:                  AttributeTargets.Constructor |||
//000081:                  AttributeTargets.Enum |||
//000082:                  AttributeTargets.Field |||
//000083:                  AttributeTargets.Interface |||
//000084:                  AttributeTargets.Method |||
//000085:                  AttributeTargets.Module |||
//000086:                  AttributeTargets.Struct)>]
//000087: type BlameAttribute(owner : string) =
//000088:     inherit Attribute()
//000089:     
//000090:     let mutable reason = ""
//000091:     
//000092:     member public b.Owner 
//000093:         with get() = owner
//000094:     member public b.Reason
//000095:         with get() = reason
//000096:         and set(value) = reason <- value
//000097:     
//000098:     override b.ToString() =
//000099:         String.Format("Blame {0}{1}",
//000100:             b.Owner, 
//000101:             if b.Reason = "" 
//000102:                 then ", just because!" 
//000103:                 else ", because " + b.Reason)
//000104: 
//000105: [<Blame("Aaron Erickson", Reason="I told you not to use this!")>]
//000106: let faultyMethod() =
//000107:     null.ToString()
    IL_0000:  nop
    IL_0001:  ldnull
    IL_0002:  stloc.0
    IL_0003:  ldloca.s   V_0
    IL_0005:  constrained. [mscorlib]System.Object
    IL_000b:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0010:  ret
  } // end of method CustomAttributes::faultyMethod

  .method public static void  blameExample() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 31 43 75 73 74 6F 6D 20 61 74 74 72 69 62   // ..1Custom attrib
                                                                        75 74 65 20 63 72 65 61 74 69 6F 6E 20 61 6E 64   // ute creation and
                                                                        20 63 6F 6E 73 75 6D 70 74 69 6F 6E 20 65 78 61   //  consumption exa
                                                                        6D 70 6C 65 00 00 )                               // mple..
    // Code size       112 (0x70)
    .maxstack  5
    .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Core.Unit V_0,
             [1] string V_1,
             [2] string V_2,
             [3] class [mscorlib]System.Exception ex,
             [4] class [mscorlib]System.Reflection.MethodBase target,
             [5] object[] custAttrs,
             [6] class CustomAttributes/BlameAttribute blame)
//000108: 
//000109: [<Example("Custom attribute creation and consumption example")>]
//000110: let blameExample() =
//000111:     try
    IL_0000:  nop
    .try
    {
      IL_0001:  nop
//000112:         faultyMethod() |> ignore
      IL_0002:  call       string CustomAttributes::faultyMethod()
      IL_0007:  stloc.1
      IL_0008:  ldloc.1
      IL_0009:  stloc.2
      IL_000a:  ldnull
      IL_000b:  stloc.0
      IL_000c:  leave.s    IL_006d

//000113:     with
    }  // end .try
    catch [mscorlib]System.Object 
    {
      IL_000e:  castclass  [mscorlib]System.Exception
      IL_0013:  stloc.3
//000114:     | ex -> 
//000115:         let target = ex.TargetSite
      IL_0014:  ldloc.3
      IL_0015:  callvirt   instance class [mscorlib]System.Reflection.MethodBase [mscorlib]System.Exception::get_TargetSite()
      IL_001a:  stloc.s    target
//000116:         let custAttrs = 
      IL_001c:  ldloc.s    target
      IL_001e:  ldtoken    CustomAttributes/BlameAttribute
      IL_0023:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_0028:  ldc.i4.1
      IL_0029:  callvirt   instance object[] [mscorlib]System.Reflection.MemberInfo::GetCustomAttributes(class [mscorlib]System.Type,
                                                                                                         bool)
      IL_002e:  stloc.s    custAttrs
//000117:             target.GetCustomAttributes(typeof<BlameAttribute>, true)
//000118:         if custAttrs.Length > 0 then
      IL_0030:  ldloc.s    custAttrs
      IL_0032:  ldlen
      IL_0033:  conv.i4
      IL_0034:  ldc.i4.0
      IL_0035:  ble.s      IL_0039

      IL_0037:  br.s       IL_003b

      IL_0039:  br.s       IL_005f

//000119:             let blame = (custAttrs.[0]) :?> BlameAttribute
      IL_003b:  ldloc.s    custAttrs
      IL_003d:  ldc.i4.0
      IL_003e:  ldelem     [mscorlib]System.Object
      IL_0043:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class CustomAttributes/BlameAttribute>(object)
      IL_0048:  stloc.s    blame
//000120:             Console.WriteLine("Aha! {0} did it!", blame.Owner)
      IL_004a:  ldstr      "Aha! {0} did it!"
      IL_004f:  ldloc.s    blame
      IL_0051:  call       instance string CustomAttributes/BlameAttribute::get_Owner()
      IL_0056:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object)
      IL_005b:  ldnull
      IL_005c:  stloc.0
      IL_005d:  leave.s    IL_006d

//000121:         else
//000122:             Console.WriteLine("Nobody to blame, sorry!")
      IL_005f:  ldstr      "Nobody to blame, sorry!"
      IL_0064:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_0069:  ldnull
      IL_006a:  stloc.0
      IL_006b:  leave.s    IL_006d

//000123:     ()
//000124: 
//000125: 
//000126: // ============= Attributes
//000127: 
//000128: [<assembly:AssemblyVersion("1.0.0.0")>]
//000129: [<assembly:AssemblyCopyright("(c) 2010 Neward & Associates")>]
//000130: do
//000131:     ()
//000132: 
//000133: 
    }  // end handler
    IL_006d:  ldloc.0
    IL_006e:  pop
//000123:     ()
    IL_006f:  ret
  } // end of method CustomAttributes::blameExample

} // end of class CustomAttributes

.class private abstract auto ansi sealed '<StartupCode$Objects>'.$CustomAttributes
       extends [mscorlib]System.Object
{
} // end of class '<StartupCode$Objects>'.$CustomAttributes

.class public abstract auto ansi sealed Packaging
       extends [mscorlib]System.Object
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
  .class abstract auto ansi sealed nested public FunctionalExample
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
    .method public static void  doSomething() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
// Source File 'C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Packaging.fs' 
//000032:         Console.WriteLine("I did something!")
      IL_0000:  nop
      IL_0001:  ldstr      "I did something!"
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_000b:  ret
    } // end of method FunctionalExample::doSomething

    .method public specialname static int32 
            get_aValue() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       3 (0x3)
      .maxstack  3
      IL_0000:  nop
      IL_0001:  ldc.i4.5
      IL_0002:  ret
    } // end of method FunctionalExample::get_aValue

    .property int32 aValue()
    {
      .get int32 Packaging/FunctionalExample::get_aValue()
    } // end of property FunctionalExample::aValue
  } // end of class FunctionalExample

  .class abstract auto ansi sealed nested public MoreExamples
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
    .class auto ansi serializable nested public Student
           extends [mscorlib]System.Object
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        // Code size       10 (0xa)
        .maxstack  3
//000027:     type Student() =
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  pop
        IL_0008:  nop
        IL_0009:  ret
      } // end of method Student::.ctor

      .method public hidebysig virtual instance string 
              ToString() cil managed
      {
        // Code size       7 (0x7)
        .maxstack  3
//000028:         override this.ToString() = "Student"
        IL_0000:  nop
        IL_0001:  ldstr      "Student"
        IL_0006:  ret
      } // end of method Student::ToString

    } // end of class Student

  } // end of class MoreExamples

  .class abstract auto ansi sealed nested public Examples
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
    .class auto ansi serializable nested public Person
           extends [mscorlib]System.Object
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
      .field assembly string ln
      .field assembly string fn
      .field assembly int32 a
      .method public specialname rtspecialname 
              instance void  .ctor(string fn,
                                   string ln,
                                   int32 a) cil managed
      {
        // Code size       31 (0x1f)
        .maxstack  4
//000017:     type Person(fn : string, ln : string, a : int) =
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  pop
        IL_0008:  nop
        IL_0009:  ldarg.0
        IL_000a:  ldarg.1
        IL_000b:  stfld      string Packaging/Examples/Person::fn
        IL_0010:  ldarg.0
        IL_0011:  ldarg.2
        IL_0012:  stfld      string Packaging/Examples/Person::ln
        IL_0017:  ldarg.0
        IL_0018:  ldarg.3
        IL_0019:  stfld      int32 Packaging/Examples/Person::a
        IL_001e:  ret
      } // end of method Person::.ctor

      .method public specialname instance string 
              get_FirstName() cil managed
      {
        // Code size       8 (0x8)
        .maxstack  3
//000018:         member this.FirstName = fn
        IL_0000:  nop
        IL_0001:  ldarg.0
        IL_0002:  ldfld      string Packaging/Examples/Person::fn
        IL_0007:  ret
      } // end of method Person::get_FirstName

      .method public specialname instance string 
              get_LastName() cil managed
      {
        // Code size       8 (0x8)
        .maxstack  3
//000019:         member this.LastName = ln
        IL_0000:  nop
        IL_0001:  ldarg.0
        IL_0002:  ldfld      string Packaging/Examples/Person::ln
        IL_0007:  ret
      } // end of method Person::get_LastName

      .method public specialname instance int32 
              get_Age() cil managed
      {
        // Code size       8 (0x8)
        .maxstack  3
//000020:         member this.Age = a
        IL_0000:  nop
        IL_0001:  ldarg.0
        IL_0002:  ldfld      int32 Packaging/Examples/Person::a
        IL_0007:  ret
      } // end of method Person::get_Age

      .method public hidebysig virtual instance string 
              ToString() cil managed
      {
        // Code size       35 (0x23)
        .maxstack  6
//000021:         override this.ToString() =
//000022:             String.Format("{0} {1} is {2} years old",
        IL_0000:  nop
        IL_0001:  ldstr      "{0} {1} is {2} years old"
        IL_0006:  ldarg.0
        IL_0007:  call       instance string Packaging/Examples/Person::get_FirstName()
        IL_000c:  ldarg.0
        IL_000d:  call       instance string Packaging/Examples/Person::get_LastName()
        IL_0012:  ldarg.0
        IL_0013:  call       instance int32 Packaging/Examples/Person::get_Age()
        IL_0018:  box        [mscorlib]System.Int32
        IL_001d:  call       string [mscorlib]System.String::Format(string,
                                                                    object,
                                                                    object,
                                                                    object)
        IL_0022:  ret
      } // end of method Person::ToString

      .property instance string FirstName()
      {
        .get instance string Packaging/Examples/Person::get_FirstName()
      } // end of property Person::FirstName
      .property instance string LastName()
      {
        .get instance string Packaging/Examples/Person::get_LastName()
      } // end of property Person::LastName
      .property instance int32 Age()
      {
        .get instance int32 Packaging/Examples/Person::get_Age()
      } // end of property Person::Age
    } // end of class Person

  } // end of class Examples

  .method public static void  open_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 0D 4F 70 65 6E 20 65 78 61 6D 70 6C 65 73   // ...Open examples
                                                                        00 00 ) 
    // Code size       12 (0xc)
    .maxstack  3
//000009:     Console.WriteLine("Much shorter, thank you")
    IL_0000:  nop
    IL_0001:  ldstr      "Much shorter, thank you"
    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
//000010:     
//000011:     ()
    IL_000b:  ret
  } // end of method Packaging::open_examples

} // end of class Packaging

.class private abstract auto ansi sealed '<StartupCode$Objects>'.$Packaging
       extends [mscorlib]System.Object
{
  .field static assembly int32 init@
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       8 (0x8)
    .maxstack  3
    .locals init ([0] int32 aValue)
//000012:     
//000013: module Examples =
//000014: 
//000015:     open System
//000016: 
//000017:     type Person(fn : string, ln : string, a : int) =
//000018:         member this.FirstName = fn
//000019:         member this.LastName = ln
//000020:         member this.Age = a
//000021:         override this.ToString() =
//000022:             String.Format("{0} {1} is {2} years old",
//000023:                 this.FirstName, this.LastName, this.Age)
//000024: 
//000025: module MoreExamples =
//000026: 
//000027:     type Student() =
//000028:         override this.ToString() = "Student"
//000029: 
//000030: module FunctionalExample =
//000031:     let doSomething() =
//000032:         Console.WriteLine("I did something!")
//000033:     let aValue = 5
    IL_0000:  nop
    IL_0001:  call       int32 Packaging/FunctionalExample::get_aValue()
    IL_0006:  stloc.0
    IL_0007:  ret
  } // end of method $Packaging::.cctor

} // end of class '<StartupCode$Objects>'.$Packaging

.class public abstract auto ansi sealed Generics
       extends [mscorlib]System.Object
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
  .class auto ansi serializable nested public beforefieldinit Stack`1<a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!a> data
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       21 (0x15)
      .maxstack  4
// Source File 'C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Generics.fs' 
//000008:     let mutable data = []
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!a>::get_Empty()
      IL_000f:  stfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class Generics/Stack`1<!a>::data
//000007: type Stack<'a>() =
      IL_0014:  ret
    } // end of method Stack`1::.ctor

    .method public instance void  Push(!a elem) cil managed
    {
      // Code size       20 (0x14)
      .maxstack  5
//000008:     let mutable data = []
//000009:     member this.Push(elem : 'a) =
//000010:         data <- elem :: data
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  ldarg.0
      IL_0004:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class Generics/Stack`1<!a>::data
      IL_0009:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!a>::Cons(!0,
                                                                                                                                                                   class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
      IL_000e:  stfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class Generics/Stack`1<!a>::data
      IL_0013:  ret
    } // end of method Stack`1::Push

    .method public instance !a  Pop() cil managed
    {
      // Code size       32 (0x20)
      .maxstack  4
      .locals init ([0] !a temp)
//000011:     member this.Pop() =
//000012:         let temp = data.Head
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class Generics/Stack`1<!a>::data
      IL_0007:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!a>::get_Head()
      IL_000c:  stloc.0
//000013:         data <- data.Tail
      IL_000d:  ldarg.0
      IL_000e:  ldarg.0
      IL_000f:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class Generics/Stack`1<!a>::data
      IL_0014:  call       instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!a>::get_Tail()
      IL_0019:  stfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class Generics/Stack`1<!a>::data
//000014:         temp
      IL_001e:  ldloc.0
      IL_001f:  ret
    } // end of method Stack`1::Pop

    .method public instance int32  Length() cil managed
    {
      // Code size       13 (0xd)
      .maxstack  3
//000015:     member this.Length() =
//000016:         data.Length
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class Generics/Stack`1<!a>::data
      IL_0007:  call       instance int32 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!a>::get_Length()
      IL_000c:  ret
    } // end of method Stack`1::Length

  } // end of class Stack`1

  .class auto ansi serializable nested public beforefieldinit TwoArgGeneric`2<a,b>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly !b b
    .field assembly !a a
    .method public specialname rtspecialname 
            instance void  .ctor(!a a,
                                 !b b) cil managed
    {
      // Code size       38 (0x26)
      .maxstack  4
      .locals init ([0] !a vA,
               [1] !b vB)
//000017: 
//000018: let s1 = new Stack<System.String>()
//000019: 
//000020: type TwoArgGeneric<'a, 'b>(a : 'a, b : 'b) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      !0 class Generics/TwoArgGeneric`2<!a,!b>::a
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      !1 class Generics/TwoArgGeneric`2<!a,!b>::b
//000021:     let vA = a
      IL_0017:  ldarg.0
      IL_0018:  ldfld      !0 class Generics/TwoArgGeneric`2<!a,!b>::a
      IL_001d:  stloc.0
//000022:     let vB = b
      IL_001e:  ldarg.0
      IL_001f:  ldfld      !1 class Generics/TwoArgGeneric`2<!a,!b>::b
      IL_0024:  stloc.1
//000020: type TwoArgGeneric<'a, 'b>(a : 'a, b : 'b) =
      IL_0025:  ret
    } // end of method TwoArgGeneric`2::.ctor

    .method public hidebysig virtual instance string 
            ToString() cil managed
    {
      // Code size       34 (0x22)
      .maxstack  5
//000021:     let vA = a
//000022:     let vB = b
//000023:     override tag.ToString() =
//000024:         System.String.Format("TwoArgGeneric({0},{1})", a, b)
      IL_0000:  nop
      IL_0001:  ldstr      "TwoArgGeneric({0},{1})"
      IL_0006:  ldarg.0
      IL_0007:  ldfld      !0 class Generics/TwoArgGeneric`2<!a,!b>::a
      IL_000c:  box        !a
      IL_0011:  ldarg.0
      IL_0012:  ldfld      !1 class Generics/TwoArgGeneric`2<!a,!b>::b
      IL_0017:  box        !b
      IL_001c:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object)
      IL_0021:  ret
    } // end of method TwoArgGeneric`2::ToString

  } // end of class TwoArgGeneric`2

  .class auto ansi serializable nested public beforefieldinit Reflector`1<a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000025:         
//000026: type Reflector<'a>() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method Reflector`1::.ctor

    .method public instance class [mscorlib]System.Reflection.MemberInfo[] 
            GetMembers() cil managed
    {
      // Code size       19 (0x13)
      .maxstack  3
      .locals init ([0] class [mscorlib]System.Type ty)
//000027:     member r.GetMembers() =
//000028:         let ty = typeof<'a>
      IL_0000:  nop
      IL_0001:  ldtoken    !a
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  stloc.0
//000029:         ty.GetMembers()
      IL_000c:  ldloc.0
      IL_000d:  callvirt   instance class [mscorlib]System.Reflection.MemberInfo[] [mscorlib]System.Type::GetMembers()
      IL_0012:  ret
    } // end of method Reflector`1::GetMembers

  } // end of class Reflector`1

  .class auto ansi serializable nested public Reflector2
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000030: 
//000031: type Reflector2() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method Reflector2::.ctor

    .method public static class [mscorlib]System.Reflection.MemberInfo[] 
            GetMembers<a>() cil managed
    {
      // Code size       17 (0x11)
      .maxstack  3
//000032:     static member GetMembers<'a>() =
//000033:         typeof<'a>.GetMembers()
      IL_0000:  nop
      IL_0001:  ldtoken    !!a
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  callvirt   instance class [mscorlib]System.Reflection.MemberInfo[] [mscorlib]System.Type::GetMembers()
      IL_0010:  ret
    } // end of method Reflector2::GetMembers

  } // end of class Reflector2

  .class interface abstract auto ansi serializable nested public IDoSomething
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.InterfaceAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public hidebysig abstract virtual 
            instance void  DoSomething() cil managed
    {
    } // end of method IDoSomething::DoSomething

  } // end of class IDoSomething

  .class auto ansi serializable nested public OOInterestingType
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly class Generics/IDoSomething data
    .method public specialname rtspecialname 
            instance void  .ctor(class Generics/IDoSomething data) cil managed
    {
      // Code size       17 (0x11)
      .maxstack  4
//000034: 
//000035: 
//000036: let stringMembers = Reflector2.GetMembers<System.String>()
//000037: 
//000038: [<Interface>]
//000039: type IDoSomething =
//000040:     abstract DoSomething : unit -> unit
//000041:     
//000042: type OOInterestingType(data : IDoSomething) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      class Generics/IDoSomething Generics/OOInterestingType::data
      IL_0010:  ret
    } // end of method OOInterestingType::.ctor

    .method public instance void  DoIt() cil managed
    {
      // Code size       13 (0xd)
      .maxstack  3
//000043:     member it.DoIt() =
//000044:         data.DoSomething()
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Generics/IDoSomething Generics/OOInterestingType::data
      IL_0007:  callvirt   instance void Generics/IDoSomething::DoSomething()
      IL_000c:  ret
    } // end of method OOInterestingType::DoIt

  } // end of class OOInterestingType

  .class auto ansi serializable nested public beforefieldinit InterestingType`1<(Generics/IDoSomething) a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly !a data
    .method public specialname rtspecialname 
            instance void  .ctor(!a data) cil managed
    {
      // Code size       17 (0x11)
      .maxstack  4
//000045: 
//000046: type InterestingType<'a when 'a :> IDoSomething>(data : 'a) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      !0 class Generics/InterestingType`1<!a>::data
      IL_0010:  ret
    } // end of method InterestingType`1::.ctor

    .method public instance void  DoIt() cil managed
    {
      // Code size       23 (0x17)
      .maxstack  3
      .locals init ([0] !a V_0)
//000047:     member it.DoIt() =
//000048:         data.DoSomething()
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      !0 class Generics/InterestingType`1<!a>::data
      IL_0007:  stloc.0
      IL_0008:  ldloca.s   V_0
      IL_000a:  constrained. !a
      IL_0010:  callvirt   instance void Generics/IDoSomething::DoSomething()
      IL_0015:  nop
      IL_0016:  ret
    } // end of method InterestingType`1::DoIt

  } // end of class InterestingType`1

  .class auto ansi serializable nested public beforefieldinit MustBeEquallable`1<a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly !a data
    .method public specialname rtspecialname 
            instance void  .ctor(!a data) cil managed
    {
      // Code size       17 (0x11)
      .maxstack  4
//000049: 
//000050: type MustBeEquallable<'a when 'a : equality>(data : 'a) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      !0 class Generics/MustBeEquallable`1<!a>::data
      IL_0010:  ret
    } // end of method MustBeEquallable`1::.ctor

    .method public instance bool  Equal(!a other) cil managed
    {
      // Code size       18 (0x12)
      .maxstack  4
      .locals init ([0] !a V_0,
               [1] !a V_1)
//000051:     member it.Equal(other : 'a) =
//000052:         data = other
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      !0 class Generics/MustBeEquallable`1<!a>::data
      IL_0007:  stloc.0
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldloc.0
      IL_000b:  ldloc.1
      IL_000c:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericEqualityIntrinsic<!a>(!!0,
                                                                                                                                !!0)
      IL_0011:  ret
    } // end of method MustBeEquallable`1::Equal

  } // end of class MustBeEquallable`1

  .class auto ansi serializable nested public beforefieldinit MustBeComparable`1<a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly !a data
    .method public specialname rtspecialname 
            instance void  .ctor(!a data) cil managed
    {
      // Code size       17 (0x11)
      .maxstack  4
//000053:         
//000054: type MustBeComparable<'a when 'a : comparison>(data : 'a) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      !0 class Generics/MustBeComparable`1<!a>::data
      IL_0010:  ret
    } // end of method MustBeComparable`1::.ctor

    .method public instance bool  Greater(!a other) cil managed
    {
      // Code size       18 (0x12)
      .maxstack  4
      .locals init ([0] !a V_0,
               [1] !a V_1)
//000055:     member it.Greater(other : 'a) =
//000056:         data > other
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      !0 class Generics/MustBeComparable`1<!a>::data
      IL_0007:  stloc.0
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldloc.0
      IL_000b:  ldloc.1
      IL_000c:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericGreaterThanIntrinsic<!a>(!!0,
                                                                                                                                   !!0)
      IL_0011:  ret
    } // end of method MustBeComparable`1::Greater

    .method public instance bool  Lesser(!a other) cil managed
    {
      // Code size       18 (0x12)
      .maxstack  4
      .locals init ([0] !a V_0,
               [1] !a V_1)
//000057:     member it.Lesser(other : 'a) =
//000058:         data < other
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      !0 class Generics/MustBeComparable`1<!a>::data
      IL_0007:  stloc.0
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldloc.0
      IL_000b:  ldloc.1
      IL_000c:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericLessThanIntrinsic<!a>(!!0,
                                                                                                                                !!0)
      IL_0011:  ret
    } // end of method MustBeComparable`1::Lesser

  } // end of class MustBeComparable`1

  .class auto ansi serializable nested public beforefieldinit MustBeNullable`1<class a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor(!a data) cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000059: 
//000060: type MustBeNullable<'a when 'a : null>(data : 'a) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MustBeNullable`1::.ctor

  } // end of class MustBeNullable`1

  .class auto ansi serializable nested public beforefieldinit MustBeDoItable`1<a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000061:     class
//000062:     end
//000063: 
//000064: type MustBeDoItable<'a when 'a : (member DoIt : unit -> 'a)>() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MustBeDoItable`1::.ctor

  } // end of class MustBeDoItable`1

  .class auto ansi serializable nested public beforefieldinit MustBeConstructible`1<.ctor a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public instance !a  NewIt() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  3
//000065:     class
//000066:     end
//000067: 
//000068: type MustBeConstructible<'a when 'a : (new : unit -> 'a)> =
//000069:     member it.NewIt() =
//000070:         new 'a()
      IL_0000:  nop
      IL_0001:  call       !!0 [mscorlib]System.Activator::CreateInstance<!a>()
      IL_0006:  ret
    } // end of method MustBeConstructible`1::NewIt

  } // end of class MustBeConstructible`1

  .class auto ansi serializable nested public beforefieldinit MustBeStruct`1<valuetype a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000071: 
//000072: type MustBeStruct<'a when 'a : struct>() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MustBeStruct`1::.ctor

  } // end of class MustBeStruct`1

  .class auto ansi serializable nested public beforefieldinit MustBeClass`1<class a>
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000073:     class
//000074:     end
//000075: type MustBeClass<'a when 'a : not struct>() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MustBeClass`1::.ctor

  } // end of class MustBeClass`1

  .method public specialname static class Generics/Stack`1<string> 
          get_s1() cil managed
  {
    // Code size       6 (0x6)
    .maxstack  4
    IL_0000:  ldsfld     class Generics/Stack`1<string> '<StartupCode$Objects>'.$Generics::s1@18
    IL_0005:  ret
  } // end of method Generics::get_s1

  .method public specialname static class [mscorlib]System.Reflection.MemberInfo[] 
          get_stringMembers() cil managed
  {
    // Code size       6 (0x6)
    .maxstack  4
    IL_0000:  ldsfld     class [mscorlib]System.Reflection.MemberInfo[] '<StartupCode$Objects>'.$Generics::stringMembers@36
    IL_0005:  ret
  } // end of method Generics::get_stringMembers

  .property class Generics/Stack`1<string>
          s1()
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 09 00 00 00 00 00 ) 
    .get class Generics/Stack`1<string> Generics::get_s1()
  } // end of property Generics::s1
  .property class [mscorlib]System.Reflection.MemberInfo[]
          stringMembers()
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 09 00 00 00 00 00 ) 
    .get class [mscorlib]System.Reflection.MemberInfo[] Generics::get_stringMembers()
  } // end of property Generics::stringMembers
} // end of class Generics

.class private abstract auto ansi sealed '<StartupCode$Objects>'.$Generics
       extends [mscorlib]System.Object
{
  .field static assembly initonly class Generics/Stack`1<string> s1@18
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field static assembly initonly class [mscorlib]System.Reflection.MemberInfo[] stringMembers@36
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field static assembly int32 init@
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       26 (0x1a)
    .maxstack  4
    .locals init ([0] class Generics/Stack`1<string> s1,
             [1] class [mscorlib]System.Reflection.MemberInfo[] stringMembers)
//000018: let s1 = new Stack<System.String>()
    IL_0000:  nop
    IL_0001:  newobj     instance void class Generics/Stack`1<string>::.ctor()
    IL_0006:  dup
    IL_0007:  stsfld     class Generics/Stack`1<string> '<StartupCode$Objects>'.$Generics::s1@18
    IL_000c:  stloc.0
//000019: 
//000020: type TwoArgGeneric<'a, 'b>(a : 'a, b : 'b) =
//000021:     let vA = a
//000022:     let vB = b
//000023:     override tag.ToString() =
//000024:         System.String.Format("TwoArgGeneric({0},{1})", a, b)
//000025:         
//000026: type Reflector<'a>() =
//000027:     member r.GetMembers() =
//000028:         let ty = typeof<'a>
//000029:         ty.GetMembers()
//000030: 
//000031: type Reflector2() =
//000032:     static member GetMembers<'a>() =
//000033:         typeof<'a>.GetMembers()
//000034: 
//000035: 
//000036: let stringMembers = Reflector2.GetMembers<System.String>()
    IL_000d:  call       class [mscorlib]System.Reflection.MemberInfo[] Generics/Reflector2::GetMembers<string>()
    IL_0012:  dup
    IL_0013:  stsfld     class [mscorlib]System.Reflection.MemberInfo[] '<StartupCode$Objects>'.$Generics::stringMembers@36
    IL_0018:  stloc.1
    IL_0019:  ret
  } // end of method $Generics::.cctor

} // end of class '<StartupCode$Objects>'.$Generics

.class public abstract auto ansi sealed Inheritance
       extends [mscorlib]System.Object
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
  .class interface abstract auto ansi serializable nested public IDrinker
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.InterfaceAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public hidebysig abstract virtual 
            instance void  Drink() cil managed
    {
    } // end of method IDrinker::Drink

    .method public hidebysig specialname abstract virtual 
            instance string  get_FavoriteDrink() cil managed
    {
    } // end of method IDrinker::get_FavoriteDrink

    .property instance string FavoriteDrink()
    {
      .get instance string Inheritance/IDrinker::get_FavoriteDrink()
    } // end of property IDrinker::FavoriteDrink
  } // end of class IDrinker

  .class interface abstract auto ansi serializable nested public IEater
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.InterfaceAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public hidebysig abstract virtual 
            instance void  Eat() cil managed
    {
    } // end of method IEater::Eat

    .method public hidebysig specialname abstract virtual 
            instance string  get_FavoriteFood() cil managed
    {
    } // end of method IEater::get_FavoriteFood

    .property instance string FavoriteFood()
    {
      .get instance string Inheritance/IEater::get_FavoriteFood()
    } // end of property IEater::FavoriteFood
  } // end of class IEater

  .class interface abstract auto ansi serializable nested public IGlutton
         implements Inheritance/IEater,
                    Inheritance/IDrinker
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.InterfaceAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public hidebysig abstract virtual 
            instance void  EatAndDrink() cil managed
    {
    } // end of method IGlutton::EatAndDrink

  } // end of class IGlutton

  .class abstract auto ansi serializable nested public Person
         extends [mscorlib]System.Object
         implements [mscorlib]System.IComparable,
                    [mscorlib]System.ICloneable,
                    [mscorlib]System.IFormattable
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.AbstractClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string ln
    .field assembly string fn
    .field assembly int32 a
    .method public hidebysig abstract virtual 
            instance object  DoTheCloneThing() cil managed
    {
    } // end of method Person::DoTheCloneThing

    .method family specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln,
                                 int32 a) cil managed
    {
      // Code size       31 (0x1f)
      .maxstack  4
// Source File 'C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Inheritance.fs' 
//000025:     inherit System.Object()
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  ldarg.0
      IL_0008:  pop
//000024: type Person(fn : string, ln : string, a : int) =
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Inheritance/Person::fn
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      string Inheritance/Person::ln
      IL_0017:  ldarg.0
      IL_0018:  ldarg.3
      IL_0019:  stfld      int32 Inheritance/Person::a
      IL_001e:  ret
    } // end of method Person::.ctor

    .method public hidebysig virtual instance int32 
            GetHashCode() cil managed
    {
      // Code size       113 (0x71)
      .maxstack  5
      .locals init ([0] class [FSharp.Core]System.Tuple`3<string,string,int32> V_0,
               [1] class [mscorlib]System.Collections.IEqualityComparer V_1,
               [2] class [FSharp.Core]System.Tuple`3<string,string,int32> V_2,
               [3] string V_3,
               [4] string V_4,
               [5] int32 V_5,
               [6] int32 V_6,
               [7] int32 V_7)
//000025:     inherit System.Object()
//000026:     override this.GetHashCode() =
//000027:         hash (fn, ln, a)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Person::fn
      IL_0007:  ldarg.0
      IL_0008:  ldfld      string Inheritance/Person::ln
      IL_000d:  ldarg.0
      IL_000e:  ldfld      int32 Inheritance/Person::a
      IL_0013:  newobj     instance void class [FSharp.Core]System.Tuple`3<string,string,int32>::.ctor(!0,
                                                                                                       !1,
                                                                                                       !2)
      IL_0018:  stloc.0
      IL_0019:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityERComparer()
      IL_001e:  stloc.1
      IL_001f:  ldloc.0
      IL_0020:  stloc.2
      IL_0021:  ldloc.2
      IL_0022:  call       instance !0 class [FSharp.Core]System.Tuple`3<string,string,int32>::get_Item1()
      IL_0027:  stloc.3
      IL_0028:  ldloc.2
      IL_0029:  call       instance !1 class [FSharp.Core]System.Tuple`3<string,string,int32>::get_Item2()
      IL_002e:  stloc.s    V_4
      IL_0030:  ldloc.2
      IL_0031:  call       instance !2 class [FSharp.Core]System.Tuple`3<string,string,int32>::get_Item3()
      IL_0036:  stloc.s    V_5
      IL_0038:  ldloc.3
      IL_0039:  brfalse.s  IL_003d

      IL_003b:  br.s       IL_0041

//000028:     override this.Equals(other) =
//000029:         compare this (other :?> Person) = 0
//000030:     interface System.IFormattable with
//000031:         member this.ToString(s : string, fp : System.IFormatProvider) : string =
//000032:             "Not implemented yet"
//000033:     interface System.ICloneable with
//000034:         member this.Clone() : obj =
//000035:             this.DoTheCloneThing()
//000036:     abstract DoTheCloneThing : unit -> obj
//000037:     member p.FirstName = fn
//000038:     member p.LastName = ln
//000039:     member p.Age = a
//000040:     interface System.IComparable with
//000041:         member this.CompareTo(other) =
//000042:             let other = other :?> Person
//000043:             let ln = this.LastName.CompareTo(other.LastName)
//000044:             if ln <> 0 then
//000045:                 let fn = this.FirstName.CompareTo(other.FirstName)
//000046:                 if fn <> 0 then
//000047:                     this.Age.CompareTo(other.Age)
//000048:                 else
//000049:                     fn
//000050:             else
//000051:                 ln
//000052:     member p.Greet(other : Person) =
//000053:         System.Console.WriteLine("Howdy, {0}, from {1}!",
//000054:             other.FirstName, p.FirstName)
//000055:     override p.ToString() =
//000056:         let typename = base.ToString()
//000057:         System.String.Format("[{3}: {0} {1} {2}]",
//000058:             fn, ln, a, "")
//000059:     abstract Work : unit -> unit
//000060:     default p.Work() =
//000061:         System.Console.WriteLine("Working!")
//000062:     abstract Salary : int32 with get, set
//000063:     default p.Salary
//000064:         with get() = 0
//000065:     default p.Salary 
//000066:         with set(v : int32) = System.Console.WriteLine(v)
//000067:     static member op_Equality (l, r) = (compare l r) = 0
//000068:     static member op_LessThan (l, r) = (compare l r) < 0
//000069:     static member op_GreaterThan (l, r) = (compare l r) > 0
//000070: 
//000071: [<Class>]
//000072: type Student(fn, ln, a, sub, sch) =
//000073:     inherit Person(fn, ln, a)
//000074:     let gpa = 0.0
//000075:     do System.Console.WriteLine("Whoo-hoo! College!")
//000076:     new() = Student("", "", 0, "", "")
//000077:     new(fn, ln, a) = Student(fn, ln, a, "", "")
//000078:     interface IDrinker with
//000079:         member this.Drink() =
//000080:             System.Console.WriteLine("Chug! Chug! Chug!")
//000081:         member this.FavoriteDrink = "Keystone Light"
//000082:     member s.FormalName = s.FirstName + " " + " of " + sch
//000083:     member s.Subject = sub
//000084:     member s.School = sch
//000085:     override s.Work() =
//000086:         System.Console.WriteLine("Studying!")
//000087:     override s.Salary
//000088:         with set(v) = System.Console.WriteLine(v)
//000089:     override s.DoTheCloneThing() =
//000090:         new Student(fn, ln, a, sub, sch) :> obj
//000091: 
//000092: 
//000093: [<Class>]
//000094: type Person2(fn, ln, a) =
//000095:     let firstName = fn
//000096:     let lastName = ln
//000097:     let age = a
//000098:     new() = Person2("", "", 0)
//000099:     member p.FirstName = firstName
//000100:     member p.LastName = lastName
//000101:     member p.Age = age
//000102: 
//000103: [<Class>]
//000104: type Student2 =
//000105:     inherit Person2
//000106:     val subject : string
//000107:     val school : string
//000108:     new(fn, ln, a, subj, sch) = 
//000109:         { inherit Person2(fn, ln, a); subject = subj; school = sch}
//000110:     new() =
//000111:         { inherit Person2(); subject = ""; school = "" }
//000112:     member s.Subject = s.subject
//000113:     member s.School = s.school
//000114: 
//000115: [<Example("Inheritance basics")>]
//000116: let inheritance_examples() =
//000117:     let s = new Student("Ted", "Pattison", 50, "Beer", "DevelopMentor")
//000118:     System.Console.WriteLine("{0} {1} attends {2} and is studying {3}",
//000119:         s.FirstName, s.LastName, s.School, s.Subject)
//000120: 
//000121:     let p = new Student("Ted", "Neward", 38)
//000122:     p.Greet(s)
//000123:     ()
//000124: 
//000125: type Printer() =
//000126:     member this.PrintName(p : #Person) =
//000127:         System.Console.WriteLine("{0}", p.FirstName)
//000128:     member this.GenericPrintName(p : 'a when 'a :> Person) =
//000129:         System.Console.WriteLine("{0}", p.FirstName)
//000130:     
//000131: [<Example("Overriding examples")>]    
//000132: let overriding_examples() =
//000133:     let p = new Student("Ken", "Sipe", 40)
//000134:     let p_str = p.ToString()
//000135:     System.Console.WriteLine(p_str)
//000136:         // prints "Inheritance+Person"
//000137:     ()
//000138: 
//000139: [<Example("Casting examples")>]
//000140: let casting_examples() =
//000141:     // This will NOT compile
//000142:     //let p : Person = new Student("Ken", "Sipe", 40)
//000143:     
//000144:     let p : Person = new Student("Ken", "Sipe", 40) :> Person
//000145:     let s = p :?> Student
//000146:     let pToStudent = p :? Student
//000147: 
//000148:     let printer = new Printer()
//000149:     printer.PrintName(p)
//000150:     printer.PrintName(s)
//000151:     
//000152:     let p2 : Person = upcast new Student("Ken", "Sipe", 40)
//000153:     let s2 : Student = downcast p2
//000154:     
//000155:     let oi = box 42
//000156:     System.Console.WriteLine("oi's type is {0}", oi.GetType())
//000157:     let i : int32 = unbox oi
//000158:     System.Console.WriteLine("i's type is {0}", i.GetType())
//000159: 
//000160:     ()
//000161: 
//000162: [<Example("Equality and comparison examples")>]
//000163: let eqcom_examples() =
//000164:     let t1 = (1, 1)
//000165:     let t2 = (1, 1)
//000166:     let t3 = (1, 2)
//000167:     System.Console.WriteLine("{0}", (t1 = t2)) // true
//000168:     System.Console.WriteLine("{0}", (t1 < t3)) // true
//000169:     System.Console.WriteLine("{0}", (t3 < t1)) // false
//000170:     ()
//000171: 
//000172: [<Example("Interface examples")>]
//000173: let interface_examples() =
//000174:     let p = new Student("Rachel", "Reese", 28, "Silverlight", "Agilitrain")
//000175:     let pclone = (p :> System.ICloneable).Clone()
//000176: 
//000177:     ()
//000178: 
//000179: [<Example("Object expression examples")>]
//000180: let obj_expr_examples() =
//000181:     let p = { new IDrinker with
//000182:                 member this.Drink() =
//000183:                     System.Console.WriteLine("Sip")
//000184:                 member this.FavoriteDrink =
//000185:                     "Macallan 25" }
//000186:     p.Drink()
//000187:     
//000188:     let p2 = { new Person("Ted", "Neward", 38) with
//000189:                 member this.DoTheCloneThing() = null
//000190:                 member this.Work() =
//000191:                     System.Console.WriteLine("Writing a book!") }
//000192:     p2.Work()
//000193: 
//000194:     ()
      IL_003d:  ldc.i4.0
      IL_003e:  nop
      IL_003f:  br.s       IL_0048

      IL_0041:  ldloc.3
      IL_0042:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0047:  nop
      IL_0048:  stloc.s    V_7
      IL_004a:  ldloc.s    V_7
      IL_004c:  ldc.i4.5
      IL_004d:  shl
      IL_004e:  ldloc.s    V_7
      IL_0050:  add
      IL_0051:  ldloc.s    V_4
      IL_0053:  brfalse.s  IL_0057

      IL_0055:  br.s       IL_005b

      IL_0057:  ldc.i4.0
      IL_0058:  nop
      IL_0059:  br.s       IL_0063

      IL_005b:  ldloc.s    V_4
      IL_005d:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0062:  nop
      IL_0063:  xor
      IL_0064:  stloc.s    V_6
      IL_0066:  ldloc.s    V_6
      IL_0068:  ldc.i4.5
      IL_0069:  shl
      IL_006a:  ldloc.s    V_6
      IL_006c:  add
      IL_006d:  ldloc.s    V_5
      IL_006f:  xor
      IL_0070:  ret
    } // end of method Person::GetHashCode

    .method public hidebysig virtual instance bool 
            Equals(object other) cil managed
    {
      // Code size       17 (0x11)
      .maxstack  4
//000029:         compare this (other :?> Person) = 0
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class Inheritance/Person>(object)
      IL_0008:  call       int32 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericComparisonIntrinsic<class Inheritance/Person>(!!0,
                                                                                                                                                         !!0)
      IL_000d:  ldc.i4.0
      IL_000e:  ceq
      IL_0010:  ret
    } // end of method Person::Equals

    .method public specialname instance string 
            get_FirstName() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000030:     interface System.IFormattable with
//000031:         member this.ToString(s : string, fp : System.IFormatProvider) : string =
//000032:             "Not implemented yet"
//000033:     interface System.ICloneable with
//000034:         member this.Clone() : obj =
//000035:             this.DoTheCloneThing()
//000036:     abstract DoTheCloneThing : unit -> obj
//000037:     member p.FirstName = fn
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Person::fn
      IL_0007:  ret
    } // end of method Person::get_FirstName

    .method public specialname instance string 
            get_LastName() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000038:     member p.LastName = ln
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Person::ln
      IL_0007:  ret
    } // end of method Person::get_LastName

    .method public specialname instance int32 
            get_Age() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000039:     member p.Age = a
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 Inheritance/Person::a
      IL_0007:  ret
    } // end of method Person::get_Age

    .method public instance void  Greet(class Inheritance/Person other) cil managed
    {
      // Code size       24 (0x18)
      .maxstack  5
//000040:     interface System.IComparable with
//000041:         member this.CompareTo(other) =
//000042:             let other = other :?> Person
//000043:             let ln = this.LastName.CompareTo(other.LastName)
//000044:             if ln <> 0 then
//000045:                 let fn = this.FirstName.CompareTo(other.FirstName)
//000046:                 if fn <> 0 then
//000047:                     this.Age.CompareTo(other.Age)
//000048:                 else
//000049:                     fn
//000050:             else
//000051:                 ln
//000052:     member p.Greet(other : Person) =
//000053:         System.Console.WriteLine("Howdy, {0}, from {1}!",
      IL_0000:  nop
      IL_0001:  ldstr      "Howdy, {0}, from {1}!"
      IL_0006:  ldarg.1
      IL_0007:  call       instance string Inheritance/Person::get_FirstName()
      IL_000c:  ldarg.0
      IL_000d:  call       instance string Inheritance/Person::get_FirstName()
      IL_0012:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object,
                                                                    object)
      IL_0017:  ret
    } // end of method Person::Greet

    .method public hidebysig virtual instance string 
            ToString() cil managed
    {
      // Code size       81 (0x51)
      .maxstack  7
      .locals init ([0] string typename)
//000054:             other.FirstName, p.FirstName)
//000055:     override p.ToString() =
//000056:         let typename = base.ToString()
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string [mscorlib]System.Object::ToString()
      IL_0007:  stloc.0
//000057:         System.String.Format("[{3}: {0} {1} {2}]",
      IL_0008:  ldstr      "[{3}: {0} {1} {2}]"
      IL_000d:  ldc.i4.4
      IL_000e:  newarr     [mscorlib]System.Object
      IL_0013:  dup
      IL_0014:  ldc.i4.0
      IL_0015:  ldarg.0
      IL_0016:  ldfld      string Inheritance/Person::fn
      IL_001b:  stelem     [mscorlib]System.Object
      IL_0020:  dup
      IL_0021:  ldc.i4.1
      IL_0022:  ldarg.0
      IL_0023:  ldfld      string Inheritance/Person::ln
      IL_0028:  stelem     [mscorlib]System.Object
      IL_002d:  dup
      IL_002e:  ldc.i4.2
      IL_002f:  ldarg.0
      IL_0030:  ldfld      int32 Inheritance/Person::a
      IL_0035:  box        [mscorlib]System.Int32
      IL_003a:  stelem     [mscorlib]System.Object
      IL_003f:  dup
      IL_0040:  ldc.i4.3
      IL_0041:  ldstr      ""
      IL_0046:  stelem     [mscorlib]System.Object
      IL_004b:  call       string [mscorlib]System.String::Format(string,
                                                                  object[])
      IL_0050:  ret
    } // end of method Person::ToString

    .method public hidebysig virtual instance void 
            Work() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
//000058:             fn, ln, a, "")
//000059:     abstract Work : unit -> unit
//000060:     default p.Work() =
//000061:         System.Console.WriteLine("Working!")
      IL_0000:  nop
      IL_0001:  ldstr      "Working!"
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_000b:  ret
    } // end of method Person::Work

    .method public hidebysig specialname virtual 
            instance int32  get_Salary() cil managed
    {
      // Code size       3 (0x3)
      .maxstack  3
//000062:     abstract Salary : int32 with get, set
//000063:     default p.Salary
//000064:         with get() = 0
      IL_0000:  nop
      IL_0001:  ldc.i4.0
      IL_0002:  ret
    } // end of method Person::get_Salary

    .method public hidebysig specialname virtual 
            instance void  set_Salary(int32 v) cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000065:     default p.Salary 
//000066:         with set(v : int32) = System.Console.WriteLine(v)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       void [mscorlib]System.Console::WriteLine(int32)
      IL_0007:  ret
    } // end of method Person::set_Salary

    .method public specialname static bool 
            op_Equality<c>(!!c l,
                           !!c r) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  4
      .locals init ([0] !!c V_0,
               [1] !!c V_1)
//000067:     static member op_Equality (l, r) = (compare l r) = 0
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldarg.1
      IL_0004:  stloc.1
      IL_0005:  ldloc.0
      IL_0006:  ldloc.1
      IL_0007:  call       int32 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericComparisonIntrinsic<!!0>(!!0,
                                                                                                                                    !!0)
      IL_000c:  ldc.i4.0
      IL_000d:  ceq
      IL_000f:  ret
    } // end of method Person::op_Equality

    .method public specialname static bool 
            op_LessThan<b>(!!b l,
                           !!b r) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  4
      .locals init ([0] !!b V_0,
               [1] !!b V_1)
//000068:     static member op_LessThan (l, r) = (compare l r) < 0
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldarg.1
      IL_0004:  stloc.1
      IL_0005:  ldloc.0
      IL_0006:  ldloc.1
      IL_0007:  call       int32 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericComparisonIntrinsic<!!0>(!!0,
                                                                                                                                    !!0)
      IL_000c:  ldc.i4.0
      IL_000d:  clt
      IL_000f:  ret
    } // end of method Person::op_LessThan

    .method public specialname static bool 
            op_GreaterThan<a>(!!a l,
                              !!a r) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  4
      .locals init ([0] !!a V_0,
               [1] !!a V_1)
//000069:     static member op_GreaterThan (l, r) = (compare l r) > 0
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldarg.1
      IL_0004:  stloc.1
      IL_0005:  ldloc.0
      IL_0006:  ldloc.1
      IL_0007:  call       int32 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericComparisonIntrinsic<!!0>(!!0,
                                                                                                                                    !!0)
      IL_000c:  ldc.i4.0
      IL_000d:  cgt
      IL_000f:  ret
    } // end of method Person::op_GreaterThan

    .method private hidebysig newslot virtual 
            instance string  'System-IFormattable-ToString'(string s,
                                                            class [mscorlib]System.IFormatProvider fp) cil managed
    {
      .override [mscorlib]System.IFormattable::ToString
      // Code size       7 (0x7)
      .maxstack  3
//000032:             "Not implemented yet"
      IL_0000:  nop
      IL_0001:  ldstr      "Not implemented yet"
      IL_0006:  ret
    } // end of method Person::'System-IFormattable-ToString'

    .method private hidebysig newslot virtual 
            instance object  'System-ICloneable-Clone'() cil managed
    {
      .override [mscorlib]System.ICloneable::Clone
      // Code size       8 (0x8)
      .maxstack  3
//000033:     interface System.ICloneable with
//000034:         member this.Clone() : obj =
//000035:             this.DoTheCloneThing()
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  callvirt   instance object Inheritance/Person::DoTheCloneThing()
      IL_0007:  ret
    } // end of method Person::'System-ICloneable-Clone'

    .method private hidebysig newslot virtual 
            instance int32  'System-IComparable-CompareTo'(object other) cil managed
    {
      .override [mscorlib]System.IComparable::CompareTo
      // Code size       111 (0x6f)
      .maxstack  4
      .locals init ([0] class Inheritance/Person other,
               [1] int32 ln,
               [2] int32 V_2,
               [3] int32 V_3,
               [4] int32 fn,
               [5] int32 V_5,
               [6] int32 V_6,
               [7] int32 V_7)
//000036:     abstract DoTheCloneThing : unit -> obj
//000037:     member p.FirstName = fn
//000038:     member p.LastName = ln
//000039:     member p.Age = a
//000040:     interface System.IComparable with
//000041:         member this.CompareTo(other) =
//000042:             let other = other :?> Person
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class Inheritance/Person>(object)
      IL_0007:  stloc.0
//000043:             let ln = this.LastName.CompareTo(other.LastName)
      IL_0008:  ldarg.0
      IL_0009:  call       instance string Inheritance/Person::get_LastName()
      IL_000e:  ldloc.0
      IL_000f:  call       instance string Inheritance/Person::get_LastName()
      IL_0014:  callvirt   instance int32 [mscorlib]System.String::CompareTo(string)
      IL_0019:  stloc.1
//000044:             if ln <> 0 then
      IL_001a:  ldloc.1
      IL_001b:  stloc.2
      IL_001c:  ldc.i4.0
      IL_001d:  stloc.3
      IL_001e:  ldloc.2
      IL_001f:  ldloc.3
      IL_0020:  ceq
      IL_0022:  ldc.i4.0
      IL_0023:  ceq
      IL_0025:  brfalse.s  IL_0029

      IL_0027:  br.s       IL_002b

      IL_0029:  br.s       IL_006d

//000045:                 let fn = this.FirstName.CompareTo(other.FirstName)
      IL_002b:  ldarg.0
      IL_002c:  call       instance string Inheritance/Person::get_FirstName()
      IL_0031:  ldloc.0
      IL_0032:  call       instance string Inheritance/Person::get_FirstName()
      IL_0037:  callvirt   instance int32 [mscorlib]System.String::CompareTo(string)
      IL_003c:  stloc.s    fn
//000046:                 if fn <> 0 then
      IL_003e:  ldloc.s    fn
      IL_0040:  stloc.s    V_5
      IL_0042:  ldc.i4.0
      IL_0043:  stloc.s    V_6
      IL_0045:  ldloc.s    V_5
      IL_0047:  ldloc.s    V_6
      IL_0049:  ceq
      IL_004b:  ldc.i4.0
      IL_004c:  ceq
      IL_004e:  brfalse.s  IL_0052

      IL_0050:  br.s       IL_0054

      IL_0052:  br.s       IL_006a

//000047:                     this.Age.CompareTo(other.Age)
      IL_0054:  ldarg.0
      IL_0055:  call       instance int32 Inheritance/Person::get_Age()
      IL_005a:  stloc.s    V_7
      IL_005c:  ldloca.s   V_7
      IL_005e:  ldloc.0
      IL_005f:  call       instance int32 Inheritance/Person::get_Age()
      IL_0064:  call       instance int32 [mscorlib]System.Int32::CompareTo(int32)
      IL_0069:  ret

//000048:                 else
//000049:                     fn
      IL_006a:  ldloc.s    fn
      IL_006c:  ret

//000050:             else
//000051:                 ln
      IL_006d:  ldloc.1
      IL_006e:  ret
    } // end of method Person::'System-IComparable-CompareTo'

    .property instance string FirstName()
    {
      .get instance string Inheritance/Person::get_FirstName()
    } // end of property Person::FirstName
    .property instance string LastName()
    {
      .get instance string Inheritance/Person::get_LastName()
    } // end of property Person::LastName
    .property instance int32 Age()
    {
      .get instance int32 Inheritance/Person::get_Age()
    } // end of property Person::Age
    .property instance int32 Salary()
    {
      .set instance void Inheritance/Person::set_Salary(int32)
      .get instance int32 Inheritance/Person::get_Salary()
    } // end of property Person::Salary
  } // end of class Person

  .class auto ansi serializable nested public Student
         extends Inheritance/Person
         implements Inheritance/IDrinker
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string 'sub'
    .field assembly string sch
    .field assembly string ln
    .field assembly string fn
    .field assembly int32 a
    .method public specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln,
                                 int32 a,
                                 string 'sub',
                                 string sch) cil managed
    {
      // Code size       70 (0x46)
      .maxstack  6
      .locals init ([0] float64 gpa)
//000052:     member p.Greet(other : Person) =
//000053:         System.Console.WriteLine("Howdy, {0}, from {1}!",
//000054:             other.FirstName, p.FirstName)
//000055:     override p.ToString() =
//000056:         let typename = base.ToString()
//000057:         System.String.Format("[{3}: {0} {1} {2}]",
//000058:             fn, ln, a, "")
//000059:     abstract Work : unit -> unit
//000060:     default p.Work() =
//000061:         System.Console.WriteLine("Working!")
//000062:     abstract Salary : int32 with get, set
//000063:     default p.Salary
//000064:         with get() = 0
//000065:     default p.Salary 
//000066:         with set(v : int32) = System.Console.WriteLine(v)
//000067:     static member op_Equality (l, r) = (compare l r) = 0
//000068:     static member op_LessThan (l, r) = (compare l r) < 0
//000069:     static member op_GreaterThan (l, r) = (compare l r) > 0
//000070: 
//000071: [<Class>]
//000072: type Student(fn, ln, a, sub, sch) =
//000073:     inherit Person(fn, ln, a)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  ldarg.2
      IL_0004:  ldarg.3
      IL_0005:  call       instance void Inheritance/Person::.ctor(string,
                                                                   string,
                                                                   int32)
      IL_000a:  ldarg.0
      IL_000b:  pop
//000072: type Student(fn, ln, a, sub, sch) =
      IL_000c:  ldarg.0
      IL_000d:  ldarg.1
      IL_000e:  stfld      string Inheritance/Student::fn
      IL_0013:  ldarg.0
      IL_0014:  ldarg.2
      IL_0015:  stfld      string Inheritance/Student::ln
      IL_001a:  ldarg.0
      IL_001b:  ldarg.3
      IL_001c:  stfld      int32 Inheritance/Student::a
      IL_0021:  ldarg.0
      IL_0022:  ldarg.s    'sub'
      IL_0024:  stfld      string Inheritance/Student::'sub'
      IL_0029:  ldarg.0
      IL_002a:  ldarg.s    sch
      IL_002c:  stfld      string Inheritance/Student::sch
//000073:     inherit Person(fn, ln, a)
//000074:     let gpa = 0.0
      IL_0031:  ldc.r8     0.0
      IL_003a:  stloc.0
//000075:     do System.Console.WriteLine("Whoo-hoo! College!")
      IL_003b:  ldstr      "Whoo-hoo! College!"
      IL_0040:  call       void [mscorlib]System.Console::WriteLine(string)
//000072: type Student(fn, ln, a, sub, sch) =
      IL_0045:  ret
    } // end of method Student::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       29 (0x1d)
      .maxstack  8
//000073:     inherit Person(fn, ln, a)
//000074:     let gpa = 0.0
//000075:     do System.Console.WriteLine("Whoo-hoo! College!")
//000076:     new() = Student("", "", 0, "", "")
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldstr      ""
      IL_0007:  ldstr      ""
      IL_000c:  ldc.i4.0
      IL_000d:  ldstr      ""
      IL_0012:  ldstr      ""
      IL_0017:  call       instance void Inheritance/Student::.ctor(string,
                                                                    string,
                                                                    int32,
                                                                    string,
                                                                    string)
      IL_001c:  ret
    } // end of method Student::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln,
                                 int32 a) cil managed
    {
      // Code size       21 (0x15)
      .maxstack  8
//000077:     new(fn, ln, a) = Student(fn, ln, a, "", "")
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  ldarg.2
      IL_0004:  ldarg.3
      IL_0005:  ldstr      ""
      IL_000a:  ldstr      ""
      IL_000f:  call       instance void Inheritance/Student::.ctor(string,
                                                                    string,
                                                                    int32,
                                                                    string,
                                                                    string)
      IL_0014:  ret
    } // end of method Student::.ctor

    .method public specialname instance string 
            get_FormalName() cil managed
    {
      // Code size       39 (0x27)
      .maxstack  4
//000078:     interface IDrinker with
//000079:         member this.Drink() =
//000080:             System.Console.WriteLine("Chug! Chug! Chug!")
//000081:         member this.FavoriteDrink = "Keystone Light"
//000082:     member s.FormalName = s.FirstName + " " + " of " + sch
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string Inheritance/Person::get_FirstName()
      IL_0007:  ldstr      " "
      IL_000c:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0011:  ldstr      " of "
      IL_0016:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_001b:  ldarg.0
      IL_001c:  ldfld      string Inheritance/Student::sch
      IL_0021:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0026:  ret
    } // end of method Student::get_FormalName

    .method public specialname instance string 
            get_Subject() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000083:     member s.Subject = sub
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Student::'sub'
      IL_0007:  ret
    } // end of method Student::get_Subject

    .method public specialname instance string 
            get_School() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000084:     member s.School = sch
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Student::sch
      IL_0007:  ret
    } // end of method Student::get_School

    .method public hidebysig virtual instance void 
            Work() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
//000085:     override s.Work() =
//000086:         System.Console.WriteLine("Studying!")
      IL_0000:  nop
      IL_0001:  ldstr      "Studying!"
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_000b:  ret
    } // end of method Student::Work

    .method public hidebysig specialname virtual 
            instance void  set_Salary(int32 v) cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000087:     override s.Salary
//000088:         with set(v) = System.Console.WriteLine(v)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       void [mscorlib]System.Console::WriteLine(int32)
      IL_0007:  ret
    } // end of method Student::set_Salary

    .method public hidebysig virtual instance object 
            DoTheCloneThing() cil managed
    {
      // Code size       37 (0x25)
      .maxstack  7
//000089:     override s.DoTheCloneThing() =
//000090:         new Student(fn, ln, a, sub, sch) :> obj
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Student::fn
      IL_0007:  ldarg.0
      IL_0008:  ldfld      string Inheritance/Student::ln
      IL_000d:  ldarg.0
      IL_000e:  ldfld      int32 Inheritance/Student::a
      IL_0013:  ldarg.0
      IL_0014:  ldfld      string Inheritance/Student::'sub'
      IL_0019:  ldarg.0
      IL_001a:  ldfld      string Inheritance/Student::sch
      IL_001f:  newobj     instance void Inheritance/Student::.ctor(string,
                                                                    string,
                                                                    int32,
                                                                    string,
                                                                    string)
      IL_0024:  ret
    } // end of method Student::DoTheCloneThing

    .method private hidebysig newslot virtual 
            instance void  'Inheritance-IDrinker-Drink'() cil managed
    {
      .override Inheritance/IDrinker::Drink
      // Code size       12 (0xc)
      .maxstack  3
//000080:             System.Console.WriteLine("Chug! Chug! Chug!")
      IL_0000:  nop
      IL_0001:  ldstr      "Chug! Chug! Chug!"
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_000b:  ret
    } // end of method Student::'Inheritance-IDrinker-Drink'

    .method private hidebysig newslot specialname virtual 
            instance string  'Inheritance-IDrinker-get_FavoriteDrink'() cil managed
    {
      .override Inheritance/IDrinker::get_FavoriteDrink
      // Code size       7 (0x7)
      .maxstack  3
//000081:         member this.FavoriteDrink = "Keystone Light"
      IL_0000:  nop
      IL_0001:  ldstr      "Keystone Light"
      IL_0006:  ret
    } // end of method Student::'Inheritance-IDrinker-get_FavoriteDrink'

    .property instance string FormalName()
    {
      .get instance string Inheritance/Student::get_FormalName()
    } // end of property Student::FormalName
    .property instance string Subject()
    {
      .get instance string Inheritance/Student::get_Subject()
    } // end of property Student::Subject
    .property instance string School()
    {
      .get instance string Inheritance/Student::get_School()
    } // end of property Student::School
    .property instance int32 Salary()
    {
      .set instance void Inheritance/Student::set_Salary(int32)
    } // end of property Student::Salary
  } // end of class Student

  .class auto ansi serializable nested public Person2
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string firstName
    .field assembly string lastName
    .field assembly int32 age
    .method public specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln,
                                 int32 a) cil managed
    {
      // Code size       31 (0x1f)
      .maxstack  4
//000082:     member s.FormalName = s.FirstName + " " + " of " + sch
//000083:     member s.Subject = sub
//000084:     member s.School = sch
//000085:     override s.Work() =
//000086:         System.Console.WriteLine("Studying!")
//000087:     override s.Salary
//000088:         with set(v) = System.Console.WriteLine(v)
//000089:     override s.DoTheCloneThing() =
//000090:         new Student(fn, ln, a, sub, sch) :> obj
//000091: 
//000092: 
//000093: [<Class>]
//000094: type Person2(fn, ln, a) =
//000095:     let firstName = fn
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Inheritance/Person2::firstName
//000096:     let lastName = ln
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      string Inheritance/Person2::lastName
//000097:     let age = a
      IL_0017:  ldarg.0
      IL_0018:  ldarg.3
      IL_0019:  stfld      int32 Inheritance/Person2::age
//000094: type Person2(fn, ln, a) =
      IL_001e:  ret
    } // end of method Person2::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       19 (0x13)
      .maxstack  6
//000095:     let firstName = fn
//000096:     let lastName = ln
//000097:     let age = a
//000098:     new() = Person2("", "", 0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldstr      ""
      IL_0007:  ldstr      ""
      IL_000c:  ldc.i4.0
      IL_000d:  call       instance void Inheritance/Person2::.ctor(string,
                                                                    string,
                                                                    int32)
      IL_0012:  ret
    } // end of method Person2::.ctor

    .method public specialname instance string 
            get_FirstName() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000099:     member p.FirstName = firstName
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Person2::firstName
      IL_0007:  ret
    } // end of method Person2::get_FirstName

    .method public specialname instance string 
            get_LastName() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000100:     member p.LastName = lastName
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Person2::lastName
      IL_0007:  ret
    } // end of method Person2::get_LastName

    .method public specialname instance int32 
            get_Age() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000101:     member p.Age = age
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 Inheritance/Person2::age
      IL_0007:  ret
    } // end of method Person2::get_Age

    .property instance string FirstName()
    {
      .get instance string Inheritance/Person2::get_FirstName()
    } // end of property Person2::FirstName
    .property instance string LastName()
    {
      .get instance string Inheritance/Person2::get_LastName()
    } // end of property Person2::LastName
    .property instance int32 Age()
    {
      .get instance int32 Inheritance/Person2::get_Age()
    } // end of property Person2::Age
  } // end of class Person2

  .class auto ansi serializable nested public Student2
         extends Inheritance/Person2
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string subject@
    .field assembly string school@
    .method public specialname instance string 
            get_subject() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string Inheritance/Student2::subject@
      IL_0006:  ret
    } // end of method Student2::get_subject

    .method public specialname instance string 
            get_school() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string Inheritance/Student2::school@
      IL_0006:  ret
    } // end of method Student2::get_school

    .method public specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln,
                                 int32 a,
                                 string subj,
                                 string sch) cil managed
    {
      // Code size       29 (0x1d)
      .maxstack  6
//000102: 
//000103: [<Class>]
//000104: type Student2 =
//000105:     inherit Person2
//000106:     val subject : string
//000107:     val school : string
//000108:     new(fn, ln, a, subj, sch) = 
//000109:         { inherit Person2(fn, ln, a); subject = subj; school = sch}
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  ldarg.2
      IL_0003:  ldarg.3
      IL_0004:  call       instance void Inheritance/Person2::.ctor(string,
                                                                    string,
                                                                    int32)
      IL_0009:  ldarg.0
      IL_000a:  pop
      IL_000b:  nop
      IL_000c:  ldarg.0
      IL_000d:  ldarg.s    subj
      IL_000f:  stfld      string Inheritance/Student2::subject@
      IL_0014:  ldarg.0
      IL_0015:  ldarg.s    sch
      IL_0017:  stfld      string Inheritance/Student2::school@
      IL_001c:  ret
    } // end of method Student2::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       32 (0x20)
      .maxstack  4
//000110:     new() =
//000111:         { inherit Person2(); subject = ""; school = "" }
      IL_0000:  ldarg.0
      IL_0001:  call       instance void Inheritance/Person2::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldstr      ""
      IL_000f:  stfld      string Inheritance/Student2::subject@
      IL_0014:  ldarg.0
      IL_0015:  ldstr      ""
      IL_001a:  stfld      string Inheritance/Student2::school@
      IL_001f:  ret
    } // end of method Student2::.ctor

    .method public specialname instance string 
            get_Subject() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000112:     member s.Subject = s.subject
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Student2::subject@
      IL_0007:  ret
    } // end of method Student2::get_Subject

    .method public specialname instance string 
            get_School() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000113:     member s.School = s.school
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Inheritance/Student2::school@
      IL_0007:  ret
    } // end of method Student2::get_School

    .property instance string subject()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 ) 
      .get instance string Inheritance/Student2::get_subject()
    } // end of property Student2::subject
    .property instance string school()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 ) 
      .get instance string Inheritance/Student2::get_school()
    } // end of property Student2::school
    .property instance string Subject()
    {
      .get instance string Inheritance/Student2::get_Subject()
    } // end of property Student2::Subject
    .property instance string School()
    {
      .get instance string Inheritance/Student2::get_School()
    } // end of property Student2::School
  } // end of class Student2

  .class auto ansi serializable nested public Printer
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000114: 
//000115: [<Example("Inheritance basics")>]
//000116: let inheritance_examples() =
//000117:     let s = new Student("Ted", "Pattison", 50, "Beer", "DevelopMentor")
//000118:     System.Console.WriteLine("{0} {1} attends {2} and is studying {3}",
//000119:         s.FirstName, s.LastName, s.School, s.Subject)
//000120: 
//000121:     let p = new Student("Ted", "Neward", 38)
//000122:     p.Greet(s)
//000123:     ()
//000124: 
//000125: type Printer() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method Printer::.ctor

    .method public instance void  PrintName<(Inheritance/Person) a>(!!a p) cil managed
    {
      // Code size       28 (0x1c)
      .maxstack  4
//000126:     member this.PrintName(p : #Person) =
//000127:         System.Console.WriteLine("{0}", p.FirstName)
      IL_0000:  nop
      IL_0001:  ldstr      "{0}"
      IL_0006:  ldarg.1
      IL_0007:  box        !!a
      IL_000c:  unbox.any  Inheritance/Person
      IL_0011:  call       instance string Inheritance/Person::get_FirstName()
      IL_0016:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object)
      IL_001b:  ret
    } // end of method Printer::PrintName

    .method public instance void  GenericPrintName<(Inheritance/Person) a>(!!a p) cil managed
    {
      // Code size       28 (0x1c)
      .maxstack  4
//000128:     member this.GenericPrintName(p : 'a when 'a :> Person) =
//000129:         System.Console.WriteLine("{0}", p.FirstName)
      IL_0000:  nop
      IL_0001:  ldstr      "{0}"
      IL_0006:  ldarg.1
      IL_0007:  box        !!a
      IL_000c:  unbox.any  Inheritance/Person
      IL_0011:  call       instance string Inheritance/Person::get_FirstName()
      IL_0016:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object)
      IL_001b:  ret
    } // end of method Printer::GenericPrintName

  } // end of class Printer

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname p@181
         extends [mscorlib]System.Object
         implements Inheritance/IDrinker
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  5
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  ldarg.0
      IL_0008:  pop
      IL_0009:  ret
    } // end of method p@181::.ctor

    .method public hidebysig virtual instance void 
            Drink() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  5
//000130:     
//000131: [<Example("Overriding examples")>]    
//000132: let overriding_examples() =
//000133:     let p = new Student("Ken", "Sipe", 40)
//000134:     let p_str = p.ToString()
//000135:     System.Console.WriteLine(p_str)
//000136:         // prints "Inheritance+Person"
//000137:     ()
//000138: 
//000139: [<Example("Casting examples")>]
//000140: let casting_examples() =
//000141:     // This will NOT compile
//000142:     //let p : Person = new Student("Ken", "Sipe", 40)
//000143:     
//000144:     let p : Person = new Student("Ken", "Sipe", 40) :> Person
//000145:     let s = p :?> Student
//000146:     let pToStudent = p :? Student
//000147: 
//000148:     let printer = new Printer()
//000149:     printer.PrintName(p)
//000150:     printer.PrintName(s)
//000151:     
//000152:     let p2 : Person = upcast new Student("Ken", "Sipe", 40)
//000153:     let s2 : Student = downcast p2
//000154:     
//000155:     let oi = box 42
//000156:     System.Console.WriteLine("oi's type is {0}", oi.GetType())
//000157:     let i : int32 = unbox oi
//000158:     System.Console.WriteLine("i's type is {0}", i.GetType())
//000159: 
//000160:     ()
//000161: 
//000162: [<Example("Equality and comparison examples")>]
//000163: let eqcom_examples() =
//000164:     let t1 = (1, 1)
//000165:     let t2 = (1, 1)
//000166:     let t3 = (1, 2)
//000167:     System.Console.WriteLine("{0}", (t1 = t2)) // true
//000168:     System.Console.WriteLine("{0}", (t1 < t3)) // true
//000169:     System.Console.WriteLine("{0}", (t3 < t1)) // false
//000170:     ()
//000171: 
//000172: [<Example("Interface examples")>]
//000173: let interface_examples() =
//000174:     let p = new Student("Rachel", "Reese", 28, "Silverlight", "Agilitrain")
//000175:     let pclone = (p :> System.ICloneable).Clone()
//000176: 
//000177:     ()
//000178: 
//000179: [<Example("Object expression examples")>]
//000180: let obj_expr_examples() =
//000181:     let p = { new IDrinker with
//000182:                 member this.Drink() =
//000183:                     System.Console.WriteLine("Sip")
      IL_0000:  nop
      IL_0001:  ldstr      "Sip"
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_000b:  ret
    } // end of method p@181::Drink

    .method public hidebysig virtual instance string 
            get_FavoriteDrink() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  5
//000184:                 member this.FavoriteDrink =
//000185:                     "Macallan 25" }
      IL_0000:  nop
      IL_0001:  ldstr      "Macallan 25"
      IL_0006:  ret
    } // end of method p@181::get_FavoriteDrink

  } // end of class p@181

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname p2@188
         extends Inheritance/Person
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       22 (0x16)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldstr      "Ted"
      IL_0007:  ldstr      "Neward"
      IL_000c:  ldc.i4.s   38
      IL_000e:  call       instance void Inheritance/Person::.ctor(string,
                                                                   string,
                                                                   int32)
      IL_0013:  ldarg.0
      IL_0014:  pop
      IL_0015:  ret
    } // end of method p2@188::.ctor

    .method public hidebysig virtual instance object 
            DoTheCloneThing() cil managed
    {
      // Code size       3 (0x3)
      .maxstack  5
//000186:     p.Drink()
//000187:     
//000188:     let p2 = { new Person("Ted", "Neward", 38) with
//000189:                 member this.DoTheCloneThing() = null
      IL_0000:  nop
      IL_0001:  ldnull
      IL_0002:  ret
    } // end of method p2@188::DoTheCloneThing

    .method public hidebysig virtual instance void 
            Work() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  5
//000190:                 member this.Work() =
//000191:                     System.Console.WriteLine("Writing a book!") }
      IL_0000:  nop
      IL_0001:  ldstr      "Writing a book!"
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_000b:  ret
    } // end of method p2@188::Work

  } // end of class p2@188

  .method public static void  inheritance_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 12 49 6E 68 65 72 69 74 61 6E 63 65 20 62   // ...Inheritance b
                                                                        61 73 69 63 73 00 00 )                            // asics..
    // Code size       90 (0x5a)
    .maxstack  7
    .locals init ([0] class Inheritance/Student s,
             [1] class Inheritance/Student p)
//000117:     let s = new Student("Ted", "Pattison", 50, "Beer", "DevelopMentor")
    IL_0000:  nop
    IL_0001:  ldstr      "Ted"
    IL_0006:  ldstr      "Pattison"
    IL_000b:  ldc.i4.s   50
    IL_000d:  ldstr      "Beer"
    IL_0012:  ldstr      "DevelopMentor"
    IL_0017:  newobj     instance void Inheritance/Student::.ctor(string,
                                                                  string,
                                                                  int32,
                                                                  string,
                                                                  string)
    IL_001c:  stloc.0
//000118:     System.Console.WriteLine("{0} {1} attends {2} and is studying {3}",
    IL_001d:  ldstr      "{0} {1} attends {2} and is studying {3}"
    IL_0022:  ldloc.0
    IL_0023:  call       instance string Inheritance/Person::get_FirstName()
    IL_0028:  ldloc.0
    IL_0029:  call       instance string Inheritance/Person::get_LastName()
    IL_002e:  ldloc.0
    IL_002f:  call       instance string Inheritance/Student::get_School()
    IL_0034:  ldloc.0
    IL_0035:  call       instance string Inheritance/Student::get_Subject()
    IL_003a:  call       vararg void [mscorlib]System.Console::WriteLine(string,
                                                                         object,
                                                                         object,
                                                                         object,
                                                                         object)
//000119:         s.FirstName, s.LastName, s.School, s.Subject)
//000120: 
//000121:     let p = new Student("Ted", "Neward", 38)
    IL_003f:  ldstr      "Ted"
    IL_0044:  ldstr      "Neward"
    IL_0049:  ldc.i4.s   38
    IL_004b:  newobj     instance void Inheritance/Student::.ctor(string,
                                                                  string,
                                                                  int32)
    IL_0050:  stloc.1
//000122:     p.Greet(s)
    IL_0051:  ldloc.1
    IL_0052:  ldloc.0
    IL_0053:  call       instance void Inheritance/Person::Greet(class Inheritance/Person)
    IL_0058:  nop
//000123:     ()
    IL_0059:  ret
  } // end of method Inheritance::inheritance_examples

  .method public static void  overriding_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 13 4F 76 65 72 72 69 64 69 6E 67 20 65 78   // ...Overriding ex
                                                                        61 6D 70 6C 65 73 00 00 )                         // amples..
    // Code size       33 (0x21)
    .maxstack  5
    .locals init ([0] class Inheritance/Student p,
             [1] string p_str)
//000124: 
//000125: type Printer() =
//000126:     member this.PrintName(p : #Person) =
//000127:         System.Console.WriteLine("{0}", p.FirstName)
//000128:     member this.GenericPrintName(p : 'a when 'a :> Person) =
//000129:         System.Console.WriteLine("{0}", p.FirstName)
//000130:     
//000131: [<Example("Overriding examples")>]    
//000132: let overriding_examples() =
//000133:     let p = new Student("Ken", "Sipe", 40)
    IL_0000:  nop
    IL_0001:  ldstr      "Ken"
    IL_0006:  ldstr      "Sipe"
    IL_000b:  ldc.i4.s   40
    IL_000d:  newobj     instance void Inheritance/Student::.ctor(string,
                                                                  string,
                                                                  int32)
    IL_0012:  stloc.0
//000134:     let p_str = p.ToString()
    IL_0013:  ldloc.0
    IL_0014:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0019:  stloc.1
//000135:     System.Console.WriteLine(p_str)
    IL_001a:  ldloc.1
    IL_001b:  call       void [mscorlib]System.Console::WriteLine(string)
//000136:         // prints "Inheritance+Person"
//000137:     ()
    IL_0020:  ret
  } // end of method Inheritance::overriding_examples

  .method public static void  casting_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 10 43 61 73 74 69 6E 67 20 65 78 61 6D 70   // ...Casting examp
                                                                        6C 65 73 00 00 )                                  // les..
    // Code size       150 (0x96)
    .maxstack  5
    .locals init ([0] class Inheritance/Person p,
             [1] class Inheritance/Student s,
             [2] bool pToStudent,
             [3] object V_3,
             [4] class Inheritance/Printer printer,
             [5] class Inheritance/Person p2,
             [6] class Inheritance/Student s2,
             [7] object oi,
             [8] int32 i)
//000138: 
//000139: [<Example("Casting examples")>]
//000140: let casting_examples() =
//000141:     // This will NOT compile
//000142:     //let p : Person = new Student("Ken", "Sipe", 40)
//000143:     
//000144:     let p : Person = new Student("Ken", "Sipe", 40) :> Person
    IL_0000:  nop
    IL_0001:  ldstr      "Ken"
    IL_0006:  ldstr      "Sipe"
    IL_000b:  ldc.i4.s   40
    IL_000d:  newobj     instance void Inheritance/Student::.ctor(string,
                                                                  string,
                                                                  int32)
    IL_0012:  stloc.0
//000145:     let s = p :?> Student
    IL_0013:  ldloc.0
    IL_0014:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class Inheritance/Student>(object)
    IL_0019:  stloc.1
//000146:     let pToStudent = p :? Student
    IL_001a:  ldloc.0
    IL_001b:  stloc.3
    IL_001c:  ldloc.3
    IL_001d:  isinst     Inheritance/Student
    IL_0022:  ldnull
    IL_0023:  cgt.un
    IL_0025:  stloc.2
//000147: 
//000148:     let printer = new Printer()
    IL_0026:  newobj     instance void Inheritance/Printer::.ctor()
    IL_002b:  stloc.s    printer
//000149:     printer.PrintName(p)
    IL_002d:  ldloc.s    printer
    IL_002f:  ldloc.0
    IL_0030:  call       instance void Inheritance/Printer::PrintName<class Inheritance/Person>(!!0)
    IL_0035:  nop
//000150:     printer.PrintName(s)
    IL_0036:  ldloc.s    printer
    IL_0038:  ldloc.1
    IL_0039:  call       instance void Inheritance/Printer::PrintName<class Inheritance/Student>(!!0)
    IL_003e:  nop
//000151:     
//000152:     let p2 : Person = upcast new Student("Ken", "Sipe", 40)
    IL_003f:  ldstr      "Ken"
    IL_0044:  ldstr      "Sipe"
    IL_0049:  ldc.i4.s   40
    IL_004b:  newobj     instance void Inheritance/Student::.ctor(string,
                                                                  string,
                                                                  int32)
    IL_0050:  stloc.s    p2
//000153:     let s2 : Student = downcast p2
    IL_0052:  ldloc.s    p2
    IL_0054:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class Inheritance/Student>(object)
    IL_0059:  stloc.s    s2
//000154:     
//000155:     let oi = box 42
    IL_005b:  ldc.i4.s   42
    IL_005d:  box        [mscorlib]System.Int32
    IL_0062:  stloc.s    oi
//000156:     System.Console.WriteLine("oi's type is {0}", oi.GetType())
    IL_0064:  ldstr      "oi's type is {0}"
    IL_0069:  ldloc.s    oi
    IL_006b:  call       instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
    IL_0070:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000157:     let i : int32 = unbox oi
    IL_0075:  ldloc.s    oi
    IL_0077:  unbox.any  [mscorlib]System.Int32
    IL_007c:  stloc.s    i
//000158:     System.Console.WriteLine("i's type is {0}", i.GetType())
    IL_007e:  ldstr      "i's type is {0}"
    IL_0083:  ldloca.s   i
    IL_0085:  constrained. [mscorlib]System.Int32
    IL_008b:  callvirt   instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
    IL_0090:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000159: 
//000160:     ()
    IL_0095:  ret
  } // end of method Inheritance::casting_examples

  .method public static void  eqcom_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 20 45 71 75 61 6C 69 74 79 20 61 6E 64 20   // .. Equality and 
                                                                        63 6F 6D 70 61 72 69 73 6F 6E 20 65 78 61 6D 70   // comparison examp
                                                                        6C 65 73 00 00 )                                  // les..
    // Code size       177 (0xb1)
    .maxstack  5
    .locals init ([0] class [FSharp.Core]System.Tuple`2<int32,int32> t1,
             [1] class [FSharp.Core]System.Tuple`2<int32,int32> t2,
             [2] class [FSharp.Core]System.Tuple`2<int32,int32> t3,
             [3] class [FSharp.Core]System.Tuple`2<int32,int32> V_3,
             [4] class [FSharp.Core]System.Tuple`2<int32,int32> V_4,
             [5] class [mscorlib]System.Collections.IEqualityComparer V_5,
             [6] class [FSharp.Core]System.Tuple`2<int32,int32> V_6,
             [7] class [FSharp.Core]System.Tuple`2<int32,int32> V_7,
             [8] int32 V_8,
             [9] int32 V_9,
             [10] int32 V_10,
             [11] int32 V_11,
             [12] class [FSharp.Core]System.Tuple`2<int32,int32> V_12,
             [13] class [FSharp.Core]System.Tuple`2<int32,int32> V_13,
             [14] class [FSharp.Core]System.Tuple`2<int32,int32> V_14,
             [15] class [FSharp.Core]System.Tuple`2<int32,int32> V_15)
//000161: 
//000162: [<Example("Equality and comparison examples")>]
//000163: let eqcom_examples() =
//000164:     let t1 = (1, 1)
    IL_0000:  nop
    IL_0001:  ldc.i4.1
    IL_0002:  ldc.i4.1
    IL_0003:  newobj     instance void class [FSharp.Core]System.Tuple`2<int32,int32>::.ctor(!0,
                                                                                             !1)
    IL_0008:  stloc.0
//000165:     let t2 = (1, 1)
    IL_0009:  ldc.i4.1
    IL_000a:  ldc.i4.1
    IL_000b:  newobj     instance void class [FSharp.Core]System.Tuple`2<int32,int32>::.ctor(!0,
                                                                                             !1)
    IL_0010:  stloc.1
//000166:     let t3 = (1, 2)
    IL_0011:  ldc.i4.1
    IL_0012:  ldc.i4.2
    IL_0013:  newobj     instance void class [FSharp.Core]System.Tuple`2<int32,int32>::.ctor(!0,
                                                                                             !1)
    IL_0018:  stloc.2
//000167:     System.Console.WriteLine("{0}", (t1 = t2)) // true
    IL_0019:  ldstr      "{0}"
    IL_001e:  ldloc.0
    IL_001f:  stloc.3
    IL_0020:  ldloc.1
    IL_0021:  stloc.s    V_4
    IL_0023:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
    IL_0028:  stloc.s    V_5
    IL_002a:  ldloc.3
    IL_002b:  stloc.s    V_6
    IL_002d:  ldloc.s    V_4
    IL_002f:  stloc.s    V_7
    IL_0031:  ldloc.s    V_6
    IL_0033:  call       instance !0 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item1()
    IL_0038:  stloc.s    V_8
    IL_003a:  ldloc.s    V_6
    IL_003c:  call       instance !1 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item2()
    IL_0041:  stloc.s    V_9
    IL_0043:  ldloc.s    V_7
    IL_0045:  call       instance !0 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item1()
    IL_004a:  stloc.s    V_10
    IL_004c:  ldloc.s    V_7
    IL_004e:  call       instance !1 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item2()
    IL_0053:  stloc.s    V_11
    IL_0055:  ldloc.s    V_8
    IL_0057:  ldloc.s    V_10
    IL_0059:  bne.un.s   IL_005d

    IL_005b:  br.s       IL_005f

    IL_005d:  br.s       IL_0068

//000168:     System.Console.WriteLine("{0}", (t1 < t3)) // true
//000169:     System.Console.WriteLine("{0}", (t3 < t1)) // false
//000170:     ()
//000171: 
//000172: [<Example("Interface examples")>]
//000173: let interface_examples() =
//000174:     let p = new Student("Rachel", "Reese", 28, "Silverlight", "Agilitrain")
//000175:     let pclone = (p :> System.ICloneable).Clone()
//000176: 
//000177:     ()
//000178: 
//000179: [<Example("Object expression examples")>]
//000180: let obj_expr_examples() =
//000181:     let p = { new IDrinker with
//000182:                 member this.Drink() =
//000183:                     System.Console.WriteLine("Sip")
//000184:                 member this.FavoriteDrink =
//000185:                     "Macallan 25" }
//000186:     p.Drink()
//000187:     
//000188:     let p2 = { new Person("Ted", "Neward", 38) with
//000189:                 member this.DoTheCloneThing() = null
//000190:                 member this.Work() =
//000191:                     System.Console.WriteLine("Writing a book!") }
//000192:     p2.Work()
//000193: 
//000194:     ()
    IL_005f:  ldloc.s    V_9
    IL_0061:  ldloc.s    V_11
    IL_0063:  ceq
    IL_0065:  nop
    IL_0066:  br.s       IL_006a

    IL_0068:  ldc.i4.0
    IL_0069:  nop
    IL_006a:  box        [mscorlib]System.Boolean
    IL_006f:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000168:     System.Console.WriteLine("{0}", (t1 < t3)) // true
    IL_0074:  ldstr      "{0}"
    IL_0079:  ldloc.0
    IL_007a:  stloc.s    V_12
    IL_007c:  ldloc.2
    IL_007d:  stloc.s    V_13
    IL_007f:  ldloc.s    V_12
    IL_0081:  ldloc.s    V_13
    IL_0083:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericLessThanIntrinsic<class [FSharp.Core]System.Tuple`2<int32,int32>>(!!0,
                                                                                                                                                                          !!0)
    IL_0088:  box        [mscorlib]System.Boolean
    IL_008d:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000169:     System.Console.WriteLine("{0}", (t3 < t1)) // false
    IL_0092:  ldstr      "{0}"
    IL_0097:  ldloc.2
    IL_0098:  stloc.s    V_14
    IL_009a:  ldloc.0
    IL_009b:  stloc.s    V_15
    IL_009d:  ldloc.s    V_14
    IL_009f:  ldloc.s    V_15
    IL_00a1:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericLessThanIntrinsic<class [FSharp.Core]System.Tuple`2<int32,int32>>(!!0,
                                                                                                                                                                          !!0)
    IL_00a6:  box        [mscorlib]System.Boolean
    IL_00ab:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000170:     ()
    IL_00b0:  ret
  } // end of method Inheritance::eqcom_examples

  .method public static void  interface_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 12 49 6E 74 65 72 66 61 63 65 20 65 78 61   // ...Interface exa
                                                                        6D 70 6C 65 73 00 00 )                            // mples..
    // Code size       42 (0x2a)
    .maxstack  7
    .locals init ([0] class Inheritance/Student p,
             [1] object pclone)
//000171: 
//000172: [<Example("Interface examples")>]
//000173: let interface_examples() =
//000174:     let p = new Student("Rachel", "Reese", 28, "Silverlight", "Agilitrain")
    IL_0000:  nop
    IL_0001:  ldstr      "Rachel"
    IL_0006:  ldstr      "Reese"
    IL_000b:  ldc.i4.s   28
    IL_000d:  ldstr      "Silverlight"
    IL_0012:  ldstr      "Agilitrain"
    IL_0017:  newobj     instance void Inheritance/Student::.ctor(string,
                                                                  string,
                                                                  int32,
                                                                  string,
                                                                  string)
    IL_001c:  stloc.0
//000175:     let pclone = (p :> System.ICloneable).Clone()
    IL_001d:  ldloc.0
    IL_001e:  unbox.any  [mscorlib]System.ICloneable
    IL_0023:  callvirt   instance object [mscorlib]System.ICloneable::Clone()
    IL_0028:  stloc.1
//000176: 
//000177:     ()
    IL_0029:  ret
  } // end of method Inheritance::interface_examples

  .method public static void  obj_expr_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 1A 4F 62 6A 65 63 74 20 65 78 70 72 65 73   // ...Object expres
                                                                        73 69 6F 6E 20 65 78 61 6D 70 6C 65 73 00 00 )    // sion examples..
    // Code size       28 (0x1c)
    .maxstack  3
    .locals init ([0] class Inheritance/IDrinker p,
             [1] class Inheritance/Person p2)
//000178: 
//000179: [<Example("Object expression examples")>]
//000180: let obj_expr_examples() =
//000181:     let p = { new IDrinker with
    IL_0000:  nop
    IL_0001:  newobj     instance void Inheritance/p@181::.ctor()
    IL_0006:  stloc.0
//000182:                 member this.Drink() =
//000183:                     System.Console.WriteLine("Sip")
//000184:                 member this.FavoriteDrink =
//000185:                     "Macallan 25" }
//000186:     p.Drink()
    IL_0007:  ldloc.0
    IL_0008:  callvirt   instance void Inheritance/IDrinker::Drink()
    IL_000d:  nop
//000187:     
//000188:     let p2 = { new Person("Ted", "Neward", 38) with
    IL_000e:  newobj     instance void Inheritance/p2@188::.ctor()
    IL_0013:  stloc.1
//000189:                 member this.DoTheCloneThing() = null
//000190:                 member this.Work() =
//000191:                     System.Console.WriteLine("Writing a book!") }
//000192:     p2.Work()
    IL_0014:  ldloc.1
    IL_0015:  callvirt   instance void Inheritance/Person::Work()
    IL_001a:  nop
//000193: 
//000194:     ()
    IL_001b:  ret
  } // end of method Inheritance::obj_expr_examples

} // end of class Inheritance

.class private abstract auto ansi sealed '<StartupCode$Objects>'.$Inheritance
       extends [mscorlib]System.Object
{
} // end of class '<StartupCode$Objects>'.$Inheritance

.class public abstract auto ansi sealed Class
       extends [mscorlib]System.Object
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
  .class auto ansi serializable nested public Person
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = ( 01 00 04 49 74 65 6D 00 00 )                      // ...Item..
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string ln
    .field assembly string fn
    .field assembly int32 age
    .field assembly string fullName
    .field assembly int32 init@7
    .method public specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln,
                                 int32 a) cil managed
    {
      // Code size       145 (0x91)
      .maxstack  5
      .locals init ([0] valuetype [mscorlib]System.DateTime constructionDate,
               [1] bool leapYearBaby)
// Source File 'C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs' 
//000007: type Person(fn : string, ln : string, a : int) = 
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Class/Person::fn
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      string Class/Person::ln
//000008:     let mutable age = a
      IL_0017:  ldarg.0
      IL_0018:  ldarg.3
      IL_0019:  stfld      int32 Class/Person::age
//000009:     let fullName = fn + " " + ln
      IL_001e:  ldarg.0
      IL_001f:  ldarg.0
      IL_0020:  ldfld      string Class/Person::fn
      IL_0025:  ldstr      " "
      IL_002a:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_002f:  ldarg.0
      IL_0030:  ldfld      string Class/Person::ln
      IL_0035:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_003a:  stfld      string Class/Person::fullName
//000010:     let constructionDate = System.DateTime.Now
      IL_003f:  call       valuetype [mscorlib]System.DateTime [mscorlib]System.DateTime::get_Now()
      IL_0044:  stloc.0
//000007: type Person(fn : string, ln : string, a : int) = 
      IL_0045:  nop
//000008:     let mutable age = a
//000009:     let fullName = fn + " " + ln
//000010:     let constructionDate = System.DateTime.Now
//000011:     let leapYearBaby =
//000012:         if constructionDate.Month = 2 &&
      IL_0046:  ldloca.s   constructionDate
      IL_0048:  call       instance int32 [mscorlib]System.DateTime::get_Month()
      IL_004d:  ldc.i4.2
      IL_004e:  bne.un.s   IL_0052

      IL_0050:  br.s       IL_0054

      IL_0052:  br.s       IL_0062

//000013:            constructionDate.Day = 29 
//000014:         then true
//000015:         else false
//000016:     do
//000017:         if constructionDate = System.DateTime.Now then age <- age + 1
//000018:     new () as this = Person("", "",0) then
//000019:         System.Console.WriteLine(this)
//000020:     new (fn,ln) as this = Person(fn, ln, 0) then
//000021:         System.Console.WriteLine(this)
//000022:     member p.IsPerson = true
//000023:     member p.FirstName = fn
//000024:     member p.LastName = ln
//000025:     member p.Age
//000026:         with get() = age
//000027:         and set(newAge) = 
//000028:             match newAge with
//000029:             | newAge when newAge > 0 ->
//000030:                 age <- newAge
//000031:             | _ ->
//000032:                 failwith "Age cannot be 0 or less"
//000033:     member p.FullName with get() = fullName
//000034:     member p.NameAndAge 
//000035:         with get() = 
//000036:             System.String.Format("{0} ({1} years old)",
//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_0054:  ldloca.s   constructionDate
      IL_0056:  call       instance int32 [mscorlib]System.DateTime::get_Day()
      IL_005b:  ldc.i4.s   29
      IL_005d:  ceq
      IL_005f:  nop
      IL_0060:  br.s       IL_0064

      IL_0062:  ldc.i4.0
      IL_0063:  nop
      IL_0064:  nop
      IL_0065:  stloc.1
//000007: type Person(fn : string, ln : string, a : int) = 
      IL_0066:  ldarg.0
      IL_0067:  ldc.i4.1
      IL_0068:  stfld      int32 Class/Person::init@7
//000008:     let mutable age = a
//000009:     let fullName = fn + " " + ln
//000010:     let constructionDate = System.DateTime.Now
//000011:     let leapYearBaby =
//000012:         if constructionDate.Month = 2 &&
//000013:            constructionDate.Day = 29 
//000014:         then true
//000015:         else false
//000016:     do
//000017:         if constructionDate = System.DateTime.Now then age <- age + 1
      IL_006d:  ldloc.0
      IL_006e:  call       valuetype [mscorlib]System.DateTime [mscorlib]System.DateTime::get_Now()
      IL_0073:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericEqualityIntrinsic<valuetype [mscorlib]System.DateTime>(!!0,
                                                                                                                                                                 !!0)
      IL_0078:  brfalse.s  IL_007c

      IL_007a:  br.s       IL_007e

      IL_007c:  br.s       IL_008f

      IL_007e:  ldarg.0
      IL_007f:  ldarg.0
      IL_0080:  ldfld      int32 Class/Person::age
      IL_0085:  ldc.i4.1
      IL_0086:  add
      IL_0087:  stfld      int32 Class/Person::age
//000018:     new () as this = Person("", "",0) then
//000019:         System.Console.WriteLine(this)
//000020:     new (fn,ln) as this = Person(fn, ln, 0) then
//000021:         System.Console.WriteLine(this)
//000022:     member p.IsPerson = true
//000023:     member p.FirstName = fn
//000024:     member p.LastName = ln
//000025:     member p.Age
//000026:         with get() = age
//000027:         and set(newAge) = 
//000028:             match newAge with
//000029:             | newAge when newAge > 0 ->
//000030:                 age <- newAge
//000031:             | _ ->
//000032:                 failwith "Age cannot be 0 or less"
//000033:     member p.FullName with get() = fullName
//000034:     member p.NameAndAge 
//000035:         with get() = 
//000036:             System.String.Format("{0} ({1} years old)",
//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_008c:  nop
      IL_008d:  br.s       IL_0090

      IL_008f:  nop
//000007: type Person(fn : string, ln : string, a : int) = 
      IL_0090:  ret
    } // end of method Person::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       56 (0x38)
      .maxstack  6
      .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Person> this)
//000008:     let mutable age = a
//000009:     let fullName = fn + " " + ln
//000010:     let constructionDate = System.DateTime.Now
//000011:     let leapYearBaby =
//000012:         if constructionDate.Month = 2 &&
//000013:            constructionDate.Day = 29 
//000014:         then true
//000015:         else false
//000016:     do
//000017:         if constructionDate = System.DateTime.Now then age <- age + 1
//000018:     new () as this = Person("", "",0) then
      IL_0000:  nop
      IL_0001:  ldnull
      IL_0002:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Person>::.ctor(!0)
      IL_0007:  stloc.0
      IL_0008:  ldarg.0
      IL_0009:  ldstr      ""
      IL_000e:  ldstr      ""
      IL_0013:  ldc.i4.0
      IL_0014:  call       instance void Class/Person::.ctor(string,
                                                             string,
                                                             int32)
      IL_0019:  ldloc.0
      IL_001a:  ldarg.0
      IL_001b:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Person>::set_contents(!0)
      IL_0020:  ldarg.0
      IL_0021:  ldc.i4.1
      IL_0022:  stfld      int32 Class/Person::init@7
//000019:         System.Console.WriteLine(this)
      IL_0027:  ldloc.0
      IL_0028:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Person>::get_contents()
      IL_002d:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::CheckThis<class Class/Person>(!!0)
      IL_0032:  call       void [mscorlib]System.Console::WriteLine(object)
      IL_0037:  ret
    } // end of method Person::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln) cil managed
    {
      // Code size       48 (0x30)
      .maxstack  6
      .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Person> this)
//000020:     new (fn,ln) as this = Person(fn, ln, 0) then
      IL_0000:  nop
      IL_0001:  ldnull
      IL_0002:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Person>::.ctor(!0)
      IL_0007:  stloc.0
      IL_0008:  ldarg.0
      IL_0009:  ldarg.1
      IL_000a:  ldarg.2
      IL_000b:  ldc.i4.0
      IL_000c:  call       instance void Class/Person::.ctor(string,
                                                             string,
                                                             int32)
      IL_0011:  ldloc.0
      IL_0012:  ldarg.0
      IL_0013:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Person>::set_contents(!0)
      IL_0018:  ldarg.0
      IL_0019:  ldc.i4.1
      IL_001a:  stfld      int32 Class/Person::init@7
//000021:         System.Console.WriteLine(this)
      IL_001f:  ldloc.0
      IL_0020:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Person>::get_contents()
      IL_0025:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::CheckThis<class Class/Person>(!!0)
      IL_002a:  call       void [mscorlib]System.Console::WriteLine(object)
      IL_002f:  ret
    } // end of method Person::.ctor

    .method public specialname instance bool 
            get_IsPerson() cil managed
    {
      // Code size       28 (0x1c)
      .maxstack  4
//000022:     member p.IsPerson = true
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000023:     member p.FirstName = fn
//000024:     member p.LastName = ln
//000025:     member p.Age
//000026:         with get() = age
//000027:         and set(newAge) = 
//000028:             match newAge with
//000029:             | newAge when newAge > 0 ->
//000030:                 age <- newAge
//000031:             | _ ->
//000032:                 failwith "Age cannot be 0 or less"
//000033:     member p.FullName with get() = fullName
//000034:     member p.NameAndAge 
//000035:         with get() = 
//000036:             System.String.Format("{0} ({1} years old)",
//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldc.i4.1
      IL_001b:  ret
    } // end of method Person::get_IsPerson

    .method public specialname instance string 
            get_FirstName() cil managed
    {
      // Code size       33 (0x21)
      .maxstack  4
//000023:     member p.FirstName = fn
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000024:     member p.LastName = ln
//000025:     member p.Age
//000026:         with get() = age
//000027:         and set(newAge) = 
//000028:             match newAge with
//000029:             | newAge when newAge > 0 ->
//000030:                 age <- newAge
//000031:             | _ ->
//000032:                 failwith "Age cannot be 0 or less"
//000033:     member p.FullName with get() = fullName
//000034:     member p.NameAndAge 
//000035:         with get() = 
//000036:             System.String.Format("{0} ({1} years old)",
//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.0
      IL_001b:  ldfld      string Class/Person::fn
      IL_0020:  ret
    } // end of method Person::get_FirstName

    .method public specialname instance string 
            get_LastName() cil managed
    {
      // Code size       33 (0x21)
      .maxstack  4
//000024:     member p.LastName = ln
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000025:     member p.Age
//000026:         with get() = age
//000027:         and set(newAge) = 
//000028:             match newAge with
//000029:             | newAge when newAge > 0 ->
//000030:                 age <- newAge
//000031:             | _ ->
//000032:                 failwith "Age cannot be 0 or less"
//000033:     member p.FullName with get() = fullName
//000034:     member p.NameAndAge 
//000035:         with get() = 
//000036:             System.String.Format("{0} ({1} years old)",
//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.0
      IL_001b:  ldfld      string Class/Person::ln
      IL_0020:  ret
    } // end of method Person::get_LastName

    .method public specialname instance int32 
            get_Age() cil managed
    {
      // Code size       33 (0x21)
      .maxstack  4
//000026:         with get() = age
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000027:         and set(newAge) = 
//000028:             match newAge with
//000029:             | newAge when newAge > 0 ->
//000030:                 age <- newAge
//000031:             | _ ->
//000032:                 failwith "Age cannot be 0 or less"
//000033:     member p.FullName with get() = fullName
//000034:     member p.NameAndAge 
//000035:         with get() = 
//000036:             System.String.Format("{0} ({1} years old)",
//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.0
      IL_001b:  ldfld      int32 Class/Person::age
      IL_0020:  ret
    } // end of method Person::get_Age

    .method public specialname instance void 
            set_Age(int32 newAge) cil managed
    {
      // Code size       62 (0x3e)
      .maxstack  4
      .locals init ([0] int32 V_0,
               [1] int32 newAge,
               [2] int32 V_2)
//000028:             match newAge with
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000029:             | newAge when newAge > 0 ->
//000030:                 age <- newAge
//000031:             | _ ->
//000032:                 failwith "Age cannot be 0 or less"
//000033:     member p.FullName with get() = fullName
//000034:     member p.NameAndAge 
//000035:         with get() = 
//000036:             System.String.Format("{0} ({1} years old)",
//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.1
      IL_001b:  stloc.0
      IL_001c:  ldloc.0
      IL_001d:  stloc.1
      IL_001e:  ldloc.1
      IL_001f:  ldc.i4.0
      IL_0020:  cgt
      IL_0022:  brfalse.s  IL_0026

      IL_0024:  br.s       IL_0028

      IL_0026:  br.s       IL_0032

      IL_0028:  ldloc.0
      IL_0029:  stloc.2
//000030:                 age <- newAge
      IL_002a:  ldarg.0
      IL_002b:  ldloc.2
      IL_002c:  stfld      int32 Class/Person::age
      IL_0031:  ret

//000031:             | _ ->
//000032:                 failwith "Age cannot be 0 or less"
      IL_0032:  ldstr      "Age cannot be 0 or less"
      IL_0037:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.Operators::FailWith<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(string)
      IL_003c:  pop
      IL_003d:  ret
    } // end of method Person::set_Age

    .method public specialname instance string 
            get_FullName() cil managed
    {
      // Code size       33 (0x21)
      .maxstack  4
//000033:     member p.FullName with get() = fullName
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000034:     member p.NameAndAge 
//000035:         with get() = 
//000036:             System.String.Format("{0} ({1} years old)",
//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.0
      IL_001b:  ldfld      string Class/Person::fullName
      IL_0020:  ret
    } // end of method Person::get_FullName

    .method public specialname instance string 
            get_NameAndAge() cil managed
    {
      // Code size       54 (0x36)
      .maxstack  5
//000036:             System.String.Format("{0} ({1} years old)",
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000037:                 p.FullName, p.Age)
//000038:     member p.AgeGracefully() =
//000039:         System.Console.WriteLine("I feel wiser!")
//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldstr      "{0} ({1} years old)"
      IL_001f:  ldarg.0
      IL_0020:  call       instance string Class/Person::get_FullName()
      IL_0025:  ldarg.0
      IL_0026:  call       instance int32 Class/Person::get_Age()
      IL_002b:  box        [mscorlib]System.Int32
      IL_0030:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object)
      IL_0035:  ret
    } // end of method Person::get_NameAndAge

    .method public instance void  AgeGracefully() cil managed
    {
      // Code size       51 (0x33)
      .maxstack  5
//000039:         System.Console.WriteLine("I feel wiser!")
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000040:         p.Age <- p.Age + 1
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldstr      "I feel wiser!"
      IL_001f:  call       void [mscorlib]System.Console::WriteLine(string)
//000040:         p.Age <- p.Age + 1
      IL_0024:  ldarg.0
      IL_0025:  ldarg.0
      IL_0026:  call       instance int32 Class/Person::get_Age()
      IL_002b:  ldc.i4.1
      IL_002c:  add
      IL_002d:  call       instance void Class/Person::set_Age(int32)
      IL_0032:  ret
    } // end of method Person::AgeGracefully

    .method public specialname instance string 
            get_Item(string organ) cil managed
    {
      // Code size       120 (0x78)
      .maxstack  4
      .locals init ([0] string V_0)
//000041:     member p.Item 
//000042:         with get(organ) = 
//000043:             match organ with
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000044:             | "Heart" -> "Ba-dump"
//000045:             | "Stomach" -> "Growl"
//000046:             | "Mouth" -> "Chomp chomp swallow"
//000047:             | "Brain" -> "Crackle crackle"
//000048:             | _ -> ""
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.1
      IL_001b:  stloc.0
      IL_001c:  ldloc.0
      IL_001d:  ldstr      "Heart"
      IL_0022:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0027:  brfalse.s  IL_002b

      IL_0029:  br.s       IL_005a

      IL_002b:  ldloc.0
      IL_002c:  ldstr      "Stomach"
      IL_0031:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0036:  brfalse.s  IL_003a

      IL_0038:  br.s       IL_0060

      IL_003a:  ldloc.0
      IL_003b:  ldstr      "Mouth"
      IL_0040:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0045:  brfalse.s  IL_0049

      IL_0047:  br.s       IL_0066

      IL_0049:  ldloc.0
      IL_004a:  ldstr      "Brain"
      IL_004f:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0054:  brfalse.s  IL_0058

      IL_0056:  br.s       IL_006c

      IL_0058:  br.s       IL_0072

//000044:             | "Heart" -> "Ba-dump"
      IL_005a:  ldstr      "Ba-dump"
      IL_005f:  ret

//000045:             | "Stomach" -> "Growl"
      IL_0060:  ldstr      "Growl"
      IL_0065:  ret

//000046:             | "Mouth" -> "Chomp chomp swallow"
      IL_0066:  ldstr      "Chomp chomp swallow"
      IL_006b:  ret

//000047:             | "Brain" -> "Crackle crackle"
      IL_006c:  ldstr      "Crackle crackle"
      IL_0071:  ret

//000048:             | _ -> ""
      IL_0072:  ldstr      ""
      IL_0077:  ret
    } // end of method Person::get_Item

    .method public specialname instance string 
            get_Organ(string name) cil managed
    {
      // Code size       120 (0x78)
      .maxstack  4
      .locals init ([0] string V_0)
//000049:     member p.Organ
//000050:         with get(name) =
//000051:             match name with
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000052:             | "Heart" -> "Ba-dump"
//000053:             | "Stomach" -> "Growl"
//000054:             | "Mouth" -> "Chomp chomp swallow"
//000055:             | "Brain" -> "Crackle crackle"
//000056:             | _ -> ""
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.1
      IL_001b:  stloc.0
      IL_001c:  ldloc.0
      IL_001d:  ldstr      "Heart"
      IL_0022:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0027:  brfalse.s  IL_002b

      IL_0029:  br.s       IL_005a

      IL_002b:  ldloc.0
      IL_002c:  ldstr      "Stomach"
      IL_0031:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0036:  brfalse.s  IL_003a

      IL_0038:  br.s       IL_0060

      IL_003a:  ldloc.0
      IL_003b:  ldstr      "Mouth"
      IL_0040:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0045:  brfalse.s  IL_0049

      IL_0047:  br.s       IL_0066

      IL_0049:  ldloc.0
      IL_004a:  ldstr      "Brain"
      IL_004f:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0054:  brfalse.s  IL_0058

      IL_0056:  br.s       IL_006c

      IL_0058:  br.s       IL_0072

//000052:             | "Heart" -> "Ba-dump"
      IL_005a:  ldstr      "Ba-dump"
      IL_005f:  ret

//000053:             | "Stomach" -> "Growl"
      IL_0060:  ldstr      "Growl"
      IL_0065:  ret

//000054:             | "Mouth" -> "Chomp chomp swallow"
      IL_0066:  ldstr      "Chomp chomp swallow"
      IL_006b:  ret

//000055:             | "Brain" -> "Crackle crackle"
      IL_006c:  ldstr      "Crackle crackle"
      IL_0071:  ret

//000056:             | _ -> ""
      IL_0072:  ldstr      ""
      IL_0077:  ret
    } // end of method Person::get_Organ

    .method public specialname instance string 
            get_Organ(int32 id) cil managed
    {
      // Code size       90 (0x5a)
      .maxstack  4
//000057:     member p.Organ
//000058:         with get(id) =
//000059:             match id with
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000060:             | 1 -> "Ba-dump"
//000061:             | 2 -> "Growl"
//000062:             | 3 -> "Chomp chomp swallow"
//000063:             | 4 -> "Crackle crackle"
//000064:             | _ -> ""
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.1
      IL_001b:  ldc.i4.1
      IL_001c:  sub
      IL_001d:  switch     ( 
                            IL_0034,
                            IL_0036,
                            IL_0038,
                            IL_003a)
      IL_0032:  br.s       IL_0054

      IL_0034:  br.s       IL_003c

      IL_0036:  br.s       IL_0042

      IL_0038:  br.s       IL_0048

      IL_003a:  br.s       IL_004e

//000060:             | 1 -> "Ba-dump"
      IL_003c:  ldstr      "Ba-dump"
      IL_0041:  ret

//000061:             | 2 -> "Growl"
      IL_0042:  ldstr      "Growl"
      IL_0047:  ret

//000062:             | 3 -> "Chomp chomp swallow"
      IL_0048:  ldstr      "Chomp chomp swallow"
      IL_004d:  ret

//000063:             | 4 -> "Crackle crackle"
      IL_004e:  ldstr      "Crackle crackle"
      IL_0053:  ret

//000064:             | _ -> ""
      IL_0054:  ldstr      ""
      IL_0059:  ret
    } // end of method Person::get_Organ

    .method public instance void  Greet<g>(class Class/Person otherPerson,
                                           !!g message) cil managed
    {
      // Code size       55 (0x37)
      .maxstack  6
//000065:     member p.Greet(otherPerson : Person, message) =
//000066:         System.Console.WriteLine("{0} says {1} to {2}",
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000067:             p.FullName, message, otherPerson.FullName)
//000068:     member p.Greet(otherPerson : Person) =
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldstr      "{0} says {1} to {2}"
      IL_001f:  ldarg.0
      IL_0020:  call       instance string Class/Person::get_FullName()
      IL_0025:  ldarg.2
      IL_0026:  box        !!g
      IL_002b:  ldarg.1
      IL_002c:  call       instance string Class/Person::get_FullName()
      IL_0031:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object,
                                                                    object,
                                                                    object)
      IL_0036:  ret
    } // end of method Person::Greet

    .method public instance void  Greet(class Class/Person otherPerson) cil managed
    {
      // Code size       49 (0x31)
      .maxstack  5
//000069:         System.Console.WriteLine("{0} says 'Howdy!' to {1}",
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000070:             p.FullName, otherPerson.FullName)
//000071:     member p.CurriedGreet target message =
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldstr      "{0} says 'Howdy!' to {1}"
      IL_001f:  ldarg.0
      IL_0020:  call       instance string Class/Person::get_FullName()
      IL_0025:  ldarg.1
      IL_0026:  call       instance string Class/Person::get_FullName()
      IL_002b:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object,
                                                                    object)
      IL_0030:  ret
    } // end of method Person::Greet

    .method public instance void  CurriedGreet<e,f>(!!e target,
                                                    !!f message) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationArgumentCountsAttribute::.ctor(int32[]) = ( 01 00 02 00 00 00 01 00 00 00 01 00 00 00 00 00 ) 
      // Code size       55 (0x37)
      .maxstack  6
//000072:         System.Console.WriteLine("{0} says {1} to {2}",
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000073:             p.FullName, message, target)
//000074:     member p.CreateGreeting(otherPerson : Person, message) =
//000075:         System.String.Format("{0} says {1} to {2}",
//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldstr      "{0} says {1} to {2}"
      IL_001f:  ldarg.0
      IL_0020:  call       instance string Class/Person::get_FullName()
      IL_0025:  ldarg.2
      IL_0026:  box        !!f
      IL_002b:  ldarg.1
      IL_002c:  box        !!e
      IL_0031:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object,
                                                                    object,
                                                                    object)
      IL_0036:  ret
    } // end of method Person::CurriedGreet

    .method public instance string  CreateGreeting<d>(class Class/Person otherPerson,
                                                      !!d message) cil managed
    {
      // Code size       55 (0x37)
      .maxstack  6
//000075:         System.String.Format("{0} says {1} to {2}",
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000076:             p.FullName, message, otherPerson.FullName)
//000077:     member p.WhoWhatWhereWhenWhy(what, 
//000078:                                  where, 
//000079:                                  whenn : System.DateTime, 
//000080:                                  why) =
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldstr      "{0} says {1} to {2}"
      IL_001f:  ldarg.0
      IL_0020:  call       instance string Class/Person::get_FullName()
      IL_0025:  ldarg.2
      IL_0026:  box        !!d
      IL_002b:  ldarg.1
      IL_002c:  call       instance string Class/Person::get_FullName()
      IL_0031:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object,
                                                                  object)
      IL_0036:  ret
    } // end of method Person::CreateGreeting

    .method public instance string  WhoWhatWhereWhenWhy<a,b,c>(!!a what,
                                                               !!b where,
                                                               valuetype [mscorlib]System.DateTime whenn,
                                                               !!c why) cil managed
    {
      // Code size       119 (0x77)
      .maxstack  7
//000081:         System.String.Format("{0} is doing {1} at {2} on {3} " +
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000082:             "because {4}",
//000083:             p.FullName, what, where, whenn, why)
//000084:     member p.Alibi(?what : string,
//000085:                    ?where : string,
//000086:                    ?whenn : System.DateTime,
//000087:                    ?why : string) =
//000088:         match (what, where, whenn, why) with
//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldstr      "{0} is doing {1} at {2} on {3} "
      IL_001f:  ldstr      "because {4}"
      IL_0024:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0029:  ldc.i4.5
      IL_002a:  newarr     [mscorlib]System.Object
      IL_002f:  dup
      IL_0030:  ldc.i4.0
      IL_0031:  ldarg.0
      IL_0032:  call       instance string Class/Person::get_FullName()
      IL_0037:  stelem     [mscorlib]System.Object
      IL_003c:  dup
      IL_003d:  ldc.i4.1
      IL_003e:  ldarg.1
      IL_003f:  box        !!a
      IL_0044:  stelem     [mscorlib]System.Object
      IL_0049:  dup
      IL_004a:  ldc.i4.2
      IL_004b:  ldarg.2
      IL_004c:  box        !!b
      IL_0051:  stelem     [mscorlib]System.Object
      IL_0056:  dup
      IL_0057:  ldc.i4.3
      IL_0058:  ldarg.3
      IL_0059:  box        [mscorlib]System.DateTime
      IL_005e:  stelem     [mscorlib]System.Object
      IL_0063:  dup
      IL_0064:  ldc.i4.4
      IL_0065:  ldarg.s    why
      IL_0067:  box        !!c
      IL_006c:  stelem     [mscorlib]System.Object
      IL_0071:  call       string [mscorlib]System.String::Format(string,
                                                                  object[])
      IL_0076:  ret
    } // end of method Person::WhoWhatWhereWhenWhy

    .method public instance string  Alibi(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> what,
                                          class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> where,
                                          class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime> whenn,
                                          class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> why) cil managed
    {
      .param [1]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      .param [2]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      .param [3]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      .param [4]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       268 (0x10c)
      .maxstack  7
      .locals init ([0] class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>> V_0,
               [1] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> V_1,
               [2] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> V_2,
               [3] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime> V_3,
               [4] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> V_4,
               [5] string why,
               [6] string wht,
               [7] string whr,
               [8] valuetype [mscorlib]System.DateTime whn)
//000088:         match (what, where, whenn, why) with
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000089:         | (Some(wht), Some(whr), Some(whn), Some(why)) ->
//000090:             System.String.Format("{0} did {1} {2} because {3}",
//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  ldarg.1
      IL_001b:  ldarg.2
      IL_001c:  ldarg.3
      IL_001d:  ldarg.s    why
      IL_001f:  newobj     instance void class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::.ctor(!0,
                                                                                                                                                                                                                                                                                                                                                                                !1,
                                                                                                                                                                                                                                                                                                                                                                                !2,
                                                                                                                                                                                                                                                                                                                                                                                !3)
      IL_0024:  stloc.0
      IL_0025:  ldloc.0
      IL_0026:  call       instance !0 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item1()
      IL_002b:  brtrue.s   IL_0055

      IL_002d:  ldloc.0
      IL_002e:  call       instance !1 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item2()
      IL_0033:  brtrue     IL_00fb

      IL_0038:  ldloc.0
      IL_0039:  call       instance !2 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item3()
      IL_003e:  brtrue     IL_00fb

      IL_0043:  ldloc.0
      IL_0044:  call       instance !3 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item4()
      IL_0049:  brtrue.s   IL_0050

      IL_004b:  br         IL_00ea

      IL_0050:  br         IL_00fb

      IL_0055:  ldloc.0
      IL_0056:  call       instance !0 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item1()
      IL_005b:  stloc.1
      IL_005c:  ldloc.0
      IL_005d:  call       instance !1 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item2()
      IL_0062:  brfalse    IL_00fb

      IL_0067:  ldloc.0
      IL_0068:  call       instance !1 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item2()
      IL_006d:  stloc.2
      IL_006e:  ldloc.0
      IL_006f:  call       instance !2 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item3()
      IL_0074:  brfalse    IL_00fb

      IL_0079:  ldloc.0
      IL_007a:  call       instance !2 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item3()
      IL_007f:  stloc.3
      IL_0080:  ldloc.0
      IL_0081:  call       instance !3 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item4()
      IL_0086:  brfalse.s  IL_00fb

      IL_0088:  ldloc.0
      IL_0089:  call       instance !3 class [FSharp.Core]System.Tuple`4<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>>::get_Item4()
      IL_008e:  stloc.s    V_4
      IL_0090:  ldloc.s    V_4
      IL_0092:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::get_Value()
      IL_0097:  stloc.s    why
      IL_0099:  ldloc.1
      IL_009a:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::get_Value()
      IL_009f:  stloc.s    wht
      IL_00a1:  ldloc.2
      IL_00a2:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::get_Value()
      IL_00a7:  stloc.s    whr
      IL_00a9:  ldloc.3
      IL_00aa:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>::get_Value()
      IL_00af:  stloc.s    whn
//000090:             System.String.Format("{0} did {1} {2} because {3}",
      IL_00b1:  ldstr      "{0} did {1} {2} because {3}"
      IL_00b6:  ldc.i4.4
      IL_00b7:  newarr     [mscorlib]System.Object
      IL_00bc:  dup
      IL_00bd:  ldc.i4.0
      IL_00be:  ldarg.0
      IL_00bf:  call       instance string Class/Person::get_FullName()
      IL_00c4:  stelem     [mscorlib]System.Object
      IL_00c9:  dup
      IL_00ca:  ldc.i4.1
      IL_00cb:  ldloc.s    wht
      IL_00cd:  stelem     [mscorlib]System.Object
      IL_00d2:  dup
      IL_00d3:  ldc.i4.2
      IL_00d4:  ldloc.s    whr
      IL_00d6:  stelem     [mscorlib]System.Object
      IL_00db:  dup
      IL_00dc:  ldc.i4.3
      IL_00dd:  ldloc.s    why
      IL_00df:  stelem     [mscorlib]System.Object
      IL_00e4:  call       string [mscorlib]System.String::Format(string,
                                                                  object[])
      IL_00e9:  ret

//000091:                 p.FullName, wht, whr, why)
//000092:         | (None, None, None, None) ->
//000093:             System.String.Format("{0} has no alibi at all",
      IL_00ea:  ldstr      "{0} has no alibi at all"
      IL_00ef:  ldarg.0
      IL_00f0:  call       instance string Class/Person::get_FullName()
      IL_00f5:  call       string [mscorlib]System.String::Format(string,
                                                                  object)
      IL_00fa:  ret

//000094:                 p.FullName)
//000095:         | (_, _, _, _) ->
//000096:             System.String.Format("{0} has no alibi at all",
      IL_00fb:  ldstr      "{0} has no alibi at all"
      IL_0100:  ldarg.0
      IL_0101:  call       instance string Class/Person::get_FullName()
      IL_0106:  call       string [mscorlib]System.String::Format(string,
                                                                  object)
      IL_010b:  ret
    } // end of method Person::Alibi

    .method public instance string  AnotherAlibi(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> what,
                                                 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> where,
                                                 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime> whenn,
                                                 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> why) cil managed
    {
      .param [1]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      .param [2]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      .param [3]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      .param [4]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       213 (0xd5)
      .maxstack  7
      .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc defaultArg,
               [1] string wht,
               [2] string whr,
               [3] valuetype [mscorlib]System.DateTime whn,
               [4] string why,
               [5] string V_5,
               [6] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> V_6,
               [7] string V_7,
               [8] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> V_8,
               [9] valuetype [mscorlib]System.DateTime V_9,
               [10] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime> V_10,
               [11] string V_11,
               [12] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> V_12)
//000097:                 p.FullName)
//000098:     member p.AnotherAlibi(?what : string, ?where : string,
//000099:                           ?whenn : System.DateTime,
//000100:                           ?why : string) =
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Person::init@7
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  nop
      IL_001a:  newobj     instance void Class/defaultArg@101::.ctor()
      IL_001f:  stloc.0
//000102:         let wht = defaultArg what "nothing"
      IL_0020:  ldloc.0
      IL_0021:  ldarg.1
      IL_0022:  ldstr      "nothing"
      IL_0027:  stloc.s    V_5
      IL_0029:  stloc.s    V_6
      IL_002b:  callvirt   instance object [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::Specialize<string>()
      IL_0030:  unbox.any  class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<string,string>>
      IL_0035:  ldloc.s    V_6
      IL_0037:  ldloc.s    V_5
      IL_0039:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,string>::InvokeFast<string>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                 !0,
                                                                                                                                                                                 !1)
      IL_003e:  stloc.1
//000103:         let whr = defaultArg where "noplace"
      IL_003f:  ldloc.0
      IL_0040:  ldarg.2
      IL_0041:  ldstr      "noplace"
      IL_0046:  stloc.s    V_7
      IL_0048:  stloc.s    V_8
      IL_004a:  callvirt   instance object [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::Specialize<string>()
      IL_004f:  unbox.any  class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<string,string>>
      IL_0054:  ldloc.s    V_8
      IL_0056:  ldloc.s    V_7
      IL_0058:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,string>::InvokeFast<string>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                 !0,
                                                                                                                                                                                 !1)
      IL_005d:  stloc.2
//000104:         let whn = defaultArg whenn System.DateTime.Now
      IL_005e:  ldloc.0
      IL_005f:  ldarg.3
      IL_0060:  call       valuetype [mscorlib]System.DateTime [mscorlib]System.DateTime::get_Now()
      IL_0065:  stloc.s    V_9
      IL_0067:  stloc.s    V_10
      IL_0069:  callvirt   instance object [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::Specialize<valuetype [mscorlib]System.DateTime>()
      IL_006e:  unbox.any  class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype [mscorlib]System.DateTime,valuetype [mscorlib]System.DateTime>>
      IL_0073:  ldloc.s    V_10
      IL_0075:  ldloc.s    V_9
      IL_0077:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,valuetype [mscorlib]System.DateTime>::InvokeFast<valuetype [mscorlib]System.DateTime>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                                                                                                        !0,
                                                                                                                                                                                                                                                                        !1)
      IL_007c:  stloc.3
//000105:         let why = defaultArg why "of no reason"
      IL_007d:  ldloc.0
      IL_007e:  ldarg.s    why
      IL_0080:  ldstr      "of no reason"
      IL_0085:  stloc.s    V_11
      IL_0087:  stloc.s    V_12
      IL_0089:  callvirt   instance object [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::Specialize<string>()
      IL_008e:  unbox.any  class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<string,string>>
      IL_0093:  ldloc.s    V_12
      IL_0095:  ldloc.s    V_11
      IL_0097:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,string>::InvokeFast<string>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                 !0,
                                                                                                                                                                                 !1)
      IL_009c:  stloc.s    why
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
      IL_009e:  ldstr      "{0} did '{1}' '{2}' because '{3}'"
      IL_00a3:  ldc.i4.4
      IL_00a4:  newarr     [mscorlib]System.Object
      IL_00a9:  dup
      IL_00aa:  ldc.i4.0
      IL_00ab:  ldarg.0
      IL_00ac:  call       instance string Class/Person::get_FullName()
      IL_00b1:  stelem     [mscorlib]System.Object
      IL_00b6:  dup
      IL_00b7:  ldc.i4.1
      IL_00b8:  ldloc.1
      IL_00b9:  stelem     [mscorlib]System.Object
      IL_00be:  dup
      IL_00bf:  ldc.i4.2
      IL_00c0:  ldloc.2
      IL_00c1:  stelem     [mscorlib]System.Object
      IL_00c6:  dup
      IL_00c7:  ldc.i4.3
      IL_00c8:  ldloc.s    why
      IL_00ca:  stelem     [mscorlib]System.Object
      IL_00cf:  call       string [mscorlib]System.String::Format(string,
                                                                  object[])
      IL_00d4:  ret
    } // end of method Person::AnotherAlibi

    .method public specialname static int32 
            op_LessEqualsEqualsGreater(class Class/Person lhs,
                                       class Class/Person rhs) cil managed
    {
      // Code size       69 (0x45)
      .maxstack  4
      .locals init ([0] int32 V_0,
               [1] int32 x,
               [2] int32 V_2,
               [3] int32 V_3)
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string Class/Person::get_FullName()
      IL_0007:  ldarg.1
      IL_0008:  call       instance string Class/Person::get_FullName()
      IL_000d:  callvirt   instance int32 [mscorlib]System.String::CompareTo(string)
      IL_0012:  stloc.0
      IL_0013:  ldloc.0
      IL_0014:  stloc.1
      IL_0015:  ldloc.1
      IL_0016:  ldc.i4.0
      IL_0017:  ble.s      IL_001b

      IL_0019:  br.s       IL_001d

      IL_001b:  br.s       IL_0021

//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
//000130:     member fp.FirstName 
//000131:         with get() = firstName
//000132:     member fp.LastName 
//000133:         with get() = lastName
//000134:     member fp.Age 
//000135:         with get() = age
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_001d:  ldc.i4.1
      IL_001e:  nop
      IL_001f:  br.s       IL_0026

      IL_0021:  ldloc.1
      IL_0022:  ldc.i4.0
      IL_0023:  clt
      IL_0025:  nop
      IL_0026:  brfalse.s  IL_002a

      IL_0028:  br.s       IL_002c

      IL_002a:  br.s       IL_0030

      IL_002c:  ldloc.0
      IL_002d:  stloc.2
//000110:         | x when x > 0 || x < 0 -> x
      IL_002e:  ldloc.2
      IL_002f:  ret

//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
      IL_0030:  ldarg.0
      IL_0031:  call       instance int32 Class/Person::get_Age()
      IL_0036:  stloc.3
      IL_0037:  ldloca.s   V_3
      IL_0039:  ldarg.1
      IL_003a:  call       instance int32 Class/Person::get_Age()
      IL_003f:  call       instance int32 [mscorlib]System.Int32::CompareTo(int32)
      IL_0044:  ret
    } // end of method Person::op_LessEqualsEqualsGreater

    .property instance bool IsPerson()
    {
      .get instance bool Class/Person::get_IsPerson()
    } // end of property Person::IsPerson
    .property instance string FirstName()
    {
      .get instance string Class/Person::get_FirstName()
    } // end of property Person::FirstName
    .property instance string LastName()
    {
      .get instance string Class/Person::get_LastName()
    } // end of property Person::LastName
    .property instance int32 Age()
    {
      .set instance void Class/Person::set_Age(int32)
      .get instance int32 Class/Person::get_Age()
    } // end of property Person::Age
    .property instance string FullName()
    {
      .get instance string Class/Person::get_FullName()
    } // end of property Person::FullName
    .property instance string NameAndAge()
    {
      .get instance string Class/Person::get_NameAndAge()
    } // end of property Person::NameAndAge
    .property instance string Item(string)
    {
      .get instance string Class/Person::get_Item(string)
    } // end of property Person::Item
    .property instance string Organ(string)
    {
      .get instance string Class/Person::get_Organ(string)
    } // end of property Person::Organ
    .property instance string Organ(int32)
    {
      .get instance string Class/Person::get_Organ(int32)
    } // end of property Person::Organ
  } // end of class Person

  .class auto ansi serializable nested assembly beforefieldinit defaultArg@101
         extends [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc::.ctor()
      IL_0006:  ret
    } // end of method defaultArg@101::.ctor

    .method public strict virtual instance object 
            Specialize<h>() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
      IL_0000:  ldarg.0
      IL_0001:  newobj     instance void class Class/defaultArg@101T<!!h>::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc)
      IL_0006:  box        class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!!h>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!h,!!h>>
      IL_000b:  ret
    } // end of method defaultArg@101::Specialize

  } // end of class defaultArg@101

  .class auto ansi serializable nested assembly beforefieldinit defaultArg@101T<h>
         extends class [FSharp.Core]Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!h>,!h,!h>
  {
    .field public class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc self0@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc self0@) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3<class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!h>,!h,!h>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc class Class/defaultArg@101T<!h>::self0@
      IL_000d:  ret
    } // end of method defaultArg@101T::.ctor

    .method public strict virtual instance !h 
            Invoke(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!h> x,
                   !h y) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       28 (0x1c)
      .maxstack  6
      .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!h> V_0,
               [1] class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!h> V_1,
               [2] !h v,
               [3] class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc V_3)
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpTypeFunc class Class/defaultArg@101T<!h>::self0@
      IL_0006:  stloc.3
//000101:         let defaultArg x y = match x with None -> y | Some(v) -> v
      IL_0007:  nop
      IL_0008:  ldarg.1
      IL_0009:  stloc.0
      IL_000a:  ldloc.0
      IL_000b:  brfalse.s  IL_000f

      IL_000d:  br.s       IL_0011

      IL_000f:  ldarg.2
      IL_0010:  ret

      IL_0011:  ldloc.0
      IL_0012:  stloc.1
      IL_0013:  ldloc.1
      IL_0014:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!h>::get_Value()
      IL_0019:  stloc.2
      IL_001a:  ldloc.2
      IL_001b:  ret
    } // end of method defaultArg@101T::Invoke

  } // end of class defaultArg@101T

  .class auto ansi serializable nested public FlexiPerson
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string firstName
    .field assembly string lastName
    .field assembly int32 age
    .method public specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln,
                                 int32 a) cil managed
    {
      // Code size       31 (0x1f)
      .maxstack  4
//000102:         let wht = defaultArg what "nothing"
//000103:         let whr = defaultArg where "noplace"
//000104:         let whn = defaultArg whenn System.DateTime.Now
//000105:         let why = defaultArg why "of no reason"
//000106:         System.String.Format("{0} did '{1}' '{2}' because '{3}'",
//000107:             p.FullName, wht, whr, why)
//000108:     static member (<==>) (lhs : Person, rhs: Person) =
//000109:         match (lhs.FullName.CompareTo(rhs.FullName)) with
//000110:         | x when x > 0 || x < 0 -> x
//000111:         | _ -> lhs.Age.CompareTo(rhs.Age)
//000112:             
//000113: 
//000114: [<Class>]
//000115: type FlexiPerson(fn, ln, a) =
//000116:     let mutable firstName = fn
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Class/FlexiPerson::firstName
//000117:     let mutable lastName = ln 
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      string Class/FlexiPerson::lastName
//000118:     let mutable age = a
      IL_0017:  ldarg.0
      IL_0018:  ldarg.3
      IL_0019:  stfld      int32 Class/FlexiPerson::age
//000115: type FlexiPerson(fn, ln, a) =
      IL_001e:  ret
    } // end of method FlexiPerson::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       19 (0x13)
      .maxstack  6
//000116:     let mutable firstName = fn
//000117:     let mutable lastName = ln 
//000118:     let mutable age = a
//000119:     new() = FlexiPerson("", "", 0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldstr      ""
      IL_0007:  ldstr      ""
      IL_000c:  ldc.i4.0
      IL_000d:  call       instance void Class/FlexiPerson::.ctor(string,
                                                                  string,
                                                                  int32)
      IL_0012:  ret
    } // end of method FlexiPerson::.ctor

    .method public specialname instance string 
            get_FirstName() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000120:     member fp.FirstName 
//000121:         with get() = firstName and set(n) = firstName <- n
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/FlexiPerson::firstName
      IL_0007:  ret
    } // end of method FlexiPerson::get_FirstName

    .method public specialname instance void 
            set_FirstName(string n) cil managed
    {
      // Code size       9 (0x9)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  stfld      string Class/FlexiPerson::firstName
      IL_0008:  ret
    } // end of method FlexiPerson::set_FirstName

    .method public specialname instance string 
            get_LastName() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000122:     member fp.LastName 
//000123:         with get() = lastName and set(n) = lastName <- n
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/FlexiPerson::lastName
      IL_0007:  ret
    } // end of method FlexiPerson::get_LastName

    .method public specialname instance void 
            set_LastName(string n) cil managed
    {
      // Code size       9 (0x9)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  stfld      string Class/FlexiPerson::lastName
      IL_0008:  ret
    } // end of method FlexiPerson::set_LastName

    .method public specialname instance int32 
            get_Age() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000124:     member fp.Age 
//000125:         with get() = age and set(n) = age <- n
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 Class/FlexiPerson::age
      IL_0007:  ret
    } // end of method FlexiPerson::get_Age

    .method public specialname instance void 
            set_Age(int32 n) cil managed
    {
      // Code size       9 (0x9)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  stfld      int32 Class/FlexiPerson::age
      IL_0008:  ret
    } // end of method FlexiPerson::set_Age

    .property instance string FirstName()
    {
      .set instance void Class/FlexiPerson::set_FirstName(string)
      .get instance string Class/FlexiPerson::get_FirstName()
    } // end of property FlexiPerson::FirstName
    .property instance string LastName()
    {
      .set instance void Class/FlexiPerson::set_LastName(string)
      .get instance string Class/FlexiPerson::get_LastName()
    } // end of property FlexiPerson::LastName
    .property instance int32 Age()
    {
      .set instance void Class/FlexiPerson::set_Age(int32)
      .get instance int32 Class/FlexiPerson::get_Age()
    } // end of property FlexiPerson::Age
  } // end of class FlexiPerson

  .class auto ansi serializable nested public OptiPerson
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object> lastName
    .field assembly class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> firstName
    .field assembly class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32> age
    .method public specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> firstName,
                                 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object> lastName,
                                 class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32> age) cil managed
    {
      .param [1]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      .param [2]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      .param [3]
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.OptionalArgumentAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       31 (0x1f)
      .maxstack  4
//000126: 
//000127: 
//000128: [<Class>]
//000129: type OptiPerson(?firstName, ?lastName, ?age) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> Class/OptiPerson::firstName
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object> Class/OptiPerson::lastName
      IL_0017:  ldarg.0
      IL_0018:  ldarg.3
      IL_0019:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32> Class/OptiPerson::age
      IL_001e:  ret
    } // end of method OptiPerson::.ctor

    .method public specialname instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> 
            get_FirstName() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000130:     member fp.FirstName 
//000131:         with get() = firstName
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> Class/OptiPerson::firstName
      IL_0007:  ret
    } // end of method OptiPerson::get_FirstName

    .method public specialname instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object> 
            get_LastName() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000132:     member fp.LastName 
//000133:         with get() = lastName
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object> Class/OptiPerson::lastName
      IL_0007:  ret
    } // end of method OptiPerson::get_LastName

    .method public specialname instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32> 
            get_Age() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000134:     member fp.Age 
//000135:         with get() = age
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32> Class/OptiPerson::age
      IL_0007:  ret
    } // end of method OptiPerson::get_Age

    .property instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>
            FirstName()
    {
      .get instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string> Class/OptiPerson::get_FirstName()
    } // end of property OptiPerson::FirstName
    .property instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object>
            LastName()
    {
      .get instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object> Class/OptiPerson::get_LastName()
    } // end of property OptiPerson::LastName
    .property instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32>
            Age()
    {
      .get instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32> Class/OptiPerson::get_Age()
    } // end of property OptiPerson::Age
  } // end of class OptiPerson

  .class auto ansi serializable nested public Skynet
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field static assembly int32 'init@139-1'
    .field static assembly int64 terminatorsBuilt@
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.DefaultValueAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname static int64 
            get_terminatorsBuilt() cil managed
    {
      // Code size       6 (0x6)
      .maxstack  4
      IL_0000:  ldsfld     int64 Class/Skynet::terminatorsBuilt@
      IL_0005:  ret
    } // end of method Skynet::get_terminatorsBuilt

    .method assembly specialname static void 
            set_terminatorsBuilt(int64 'value') cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  stsfld     int64 Class/Skynet::terminatorsBuilt@
      IL_0006:  ret
    } // end of method Skynet::set_terminatorsBuilt

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000136: 
//000137: 
//000138: [<Class>]
//000139: type Skynet() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method Skynet::.ctor

    .method public static class Class/Person 
            CreateTerminator() cil managed
    {
      // Code size       38 (0x26)
      .maxstack  5
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
      IL_0000:  nop
      IL_0001:  ldsfld     int64 Class/Skynet::terminatorsBuilt@
      IL_0006:  ldc.i8     0x1
      IL_000f:  add
      IL_0010:  call       void Class/Skynet::set_terminatorsBuilt(int64)
//000144:         new Person("T", "800", 0)
      IL_0015:  ldstr      "T"
      IL_001a:  ldstr      "800"
      IL_001f:  ldc.i4.0
      IL_0020:  newobj     instance void Class/Person::.ctor(string,
                                                             string,
                                                             int32)
      IL_0025:  ret
    } // end of method Skynet::CreateTerminator

    .method public specialname static bool 
            get_AfterJudgmentDay() cil managed
    {
      // Code size       38 (0x26)
      .maxstack  5
      .locals init ([0] valuetype [mscorlib]System.DateTime jd,
               [1] valuetype [mscorlib]System.DateTime V_1)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
      IL_0000:  nop
      IL_0001:  ldc.i4     0x7cd
      IL_0006:  ldc.i4.8
      IL_0007:  ldc.i4.s   29
      IL_0009:  newobj     instance void [mscorlib]System.DateTime::.ctor(int32,
                                                                          int32,
                                                                          int32)
      IL_000e:  stloc.0
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
      IL_000f:  call       valuetype [mscorlib]System.DateTime [mscorlib]System.DateTime::get_Now()
      IL_0014:  stloc.1
      IL_0015:  ldloca.s   V_1
      IL_0017:  call       instance int64 [mscorlib]System.DateTime::ToBinary()
      IL_001c:  ldloca.s   jd
      IL_001e:  call       instance int64 [mscorlib]System.DateTime::ToBinary()
      IL_0023:  cgt
      IL_0025:  ret
    } // end of method Skynet::get_AfterJudgmentDay

    .method private specialname rtspecialname static 
            void  .cctor() cil managed
    {
      // Code size       13 (0xd)
      .maxstack  3
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_0000:  ldc.i4.0
      IL_0001:  stsfld     int32 '<StartupCode$Objects>'.$Class::init@
      IL_0006:  ldsfld     int32 '<StartupCode$Objects>'.$Class::init@
      IL_000b:  pop
      IL_000c:  ret
    } // end of method Skynet::.cctor

    .property int64 terminatorsBuilt()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 ) 
      .set void Class/Skynet::set_terminatorsBuilt(int64)
      .get int64 Class/Skynet::get_terminatorsBuilt()
    } // end of property Skynet::terminatorsBuilt
    .property bool AfterJudgmentDay()
    {
      .get bool Class/Skynet::get_AfterJudgmentDay()
    } // end of property Skynet::AfterJudgmentDay
  } // end of class Skynet

  .class auto ansi serializable nested public Complex
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly int32 r
    .field assembly int32 i
    .method public specialname rtspecialname 
            instance void  .ctor(int32 r,
                                 int32 i) cil managed
    {
      // Code size       24 (0x18)
      .maxstack  4
//000154: type Complex(r : int32, i : int32) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      int32 Class/Complex::r
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      int32 Class/Complex::i
      IL_0017:  ret
    } // end of method Complex::.ctor

    .method public specialname instance int32 
            get_R() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000155:     member c.R = r
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 Class/Complex::r
      IL_0007:  ret
    } // end of method Complex::get_R

    .method public specialname instance int32 
            get_I() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000156:     member c.I = i
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 Class/Complex::i
      IL_0007:  ret
    } // end of method Complex::get_I

    .method public specialname static class Class/Complex 
            op_Addition(class Class/Complex c1,
                        class Class/Complex c2) cil managed
    {
      // Code size       33 (0x21)
      .maxstack  5
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 Class/Complex::get_R()
      IL_0007:  ldarg.1
      IL_0008:  call       instance int32 Class/Complex::get_R()
      IL_000d:  add
      IL_000e:  ldarg.0
      IL_000f:  call       instance int32 Class/Complex::get_I()
      IL_0014:  ldarg.1
      IL_0015:  call       instance int32 Class/Complex::get_I()
      IL_001a:  add
      IL_001b:  newobj     instance void Class/Complex::.ctor(int32,
                                                              int32)
      IL_0020:  ret
    } // end of method Complex::op_Addition

    .method public specialname static class Class/Complex 
            op_Subtraction(class Class/Complex c1,
                           class Class/Complex c2) cil managed
    {
      // Code size       33 (0x21)
      .maxstack  5
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 Class/Complex::get_R()
      IL_0007:  ldarg.1
      IL_0008:  call       instance int32 Class/Complex::get_R()
      IL_000d:  sub
      IL_000e:  ldarg.0
      IL_000f:  call       instance int32 Class/Complex::get_I()
      IL_0014:  ldarg.1
      IL_0015:  call       instance int32 Class/Complex::get_I()
      IL_001a:  sub
      IL_001b:  newobj     instance void Class/Complex::.ctor(int32,
                                                              int32)
      IL_0020:  ret
    } // end of method Complex::op_Subtraction

    .method public specialname static class Class/Complex 
            op_UnaryNegation(class Class/Complex c) cil managed
    {
      // Code size       20 (0x14)
      .maxstack  4
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 Class/Complex::get_R()
      IL_0007:  neg
      IL_0008:  ldarg.0
      IL_0009:  call       instance int32 Class/Complex::get_I()
      IL_000e:  newobj     instance void Class/Complex::.ctor(int32,
                                                              int32)
      IL_0013:  ret
    } // end of method Complex::op_UnaryNegation

    .property instance int32 R()
    {
      .get instance int32 Class/Complex::get_R()
    } // end of property Complex::R
    .property instance int32 I()
    {
      .get instance int32 Class/Complex::get_I()
    } // end of property Complex::I
  } // end of class Complex

  .class auto ansi serializable nested public PrivatePerson
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(string fn,
                                 string ln,
                                 int32 a) cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method PrivatePerson::.ctor

    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       19 (0x13)
      .maxstack  6
//000166:     private new() = PrivatePerson("", "", 0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldstr      ""
      IL_0007:  ldstr      ""
      IL_000c:  ldc.i4.0
      IL_000d:  call       instance void Class/PrivatePerson::.ctor(string,
                                                                    string,
                                                                    int32)
      IL_0012:  ret
    } // end of method PrivatePerson::.ctor

    .method public static class Class/PrivatePerson 
            Create(string fn,
                   string ln,
                   int32 a) cil managed
    {
      // Code size       10 (0xa)
      .maxstack  5
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  ldarg.2
      IL_0004:  newobj     instance void Class/PrivatePerson::.ctor(string,
                                                                    string,
                                                                    int32)
      IL_0009:  ret
    } // end of method PrivatePerson::Create

    .method public static class Class/PrivatePerson 
            Create() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  3
//000168:     static member Create() = new PrivatePerson()
      IL_0000:  nop
      IL_0001:  newobj     instance void Class/PrivatePerson::.ctor()
      IL_0006:  ret
    } // end of method PrivatePerson::Create

  } // end of class PrivatePerson

  .class auto autochar serializable nested public beforefieldinit Location
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class Class/Location>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class Class/Location>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                   61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 01 00 00 00 00 00 ) 
    .class abstract auto ansi sealed nested public Tags
           extends [mscorlib]System.Object
    {
      .field public static literal int32 Headgear = int32(0x00000000)
      .field public static literal int32 Footwear = int32(0x00000001)
      .field public static literal int32 Armor = int32(0x00000002)
      .field public static literal int32 OneHanded = int32(0x00000003)
      .field public static literal int32 TwoHanded = int32(0x00000004)
      .field public static literal int32 None = int32(0x00000005)
    } // end of class Tags

    .field assembly initonly int32 _tag
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class Class/Location _unique_Headgear
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class Class/Location _unique_Footwear
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class Class/Location _unique_Armor
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class Class/Location _unique_OneHanded
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class Class/Location _unique_TwoHanded
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class Class/Location _unique_None
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method private specialname rtspecialname static 
            void  .cctor() cil managed
    {
      // Code size       67 (0x43)
      .maxstack  1
      IL_0000:  ldc.i4.0
      IL_0001:  newobj     instance void Class/Location::.ctor(int32)
      IL_0006:  stsfld     class Class/Location Class/Location::_unique_Headgear
      IL_000b:  ldc.i4.1
      IL_000c:  newobj     instance void Class/Location::.ctor(int32)
      IL_0011:  stsfld     class Class/Location Class/Location::_unique_Footwear
      IL_0016:  ldc.i4.2
      IL_0017:  newobj     instance void Class/Location::.ctor(int32)
      IL_001c:  stsfld     class Class/Location Class/Location::_unique_Armor
      IL_0021:  ldc.i4.3
      IL_0022:  newobj     instance void Class/Location::.ctor(int32)
      IL_0027:  stsfld     class Class/Location Class/Location::_unique_OneHanded
      IL_002c:  ldc.i4.4
      IL_002d:  newobj     instance void Class/Location::.ctor(int32)
      IL_0032:  stsfld     class Class/Location Class/Location::_unique_TwoHanded
      IL_0037:  ldc.i4.5
      IL_0038:  newobj     instance void Class/Location::.ctor(int32)
      IL_003d:  stsfld     class Class/Location Class/Location::_unique_None
      IL_0042:  ret
    } // end of method Location::.cctor

    .method assembly specialname rtspecialname 
            instance void  .ctor(int32 _tag) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  2
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      int32 Class/Location::_tag
      IL_000d:  ret
    } // end of method Location::.ctor

    .method public static class Class/Location 
            get_None() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 05 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class Class/Location Class/Location::_unique_None
      IL_0005:  ret
    } // end of method Location::get_None

    .method public instance bool  get_IsNone() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 Class/Location::get_Tag()
      IL_0006:  ldc.i4.5
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Location::get_IsNone

    .method public static class Class/Location 
            get_TwoHanded() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 04 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class Class/Location Class/Location::_unique_TwoHanded
      IL_0005:  ret
    } // end of method Location::get_TwoHanded

    .method public instance bool  get_IsTwoHanded() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 Class/Location::get_Tag()
      IL_0006:  ldc.i4.4
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Location::get_IsTwoHanded

    .method public static class Class/Location 
            get_OneHanded() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 03 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class Class/Location Class/Location::_unique_OneHanded
      IL_0005:  ret
    } // end of method Location::get_OneHanded

    .method public instance bool  get_IsOneHanded() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 Class/Location::get_Tag()
      IL_0006:  ldc.i4.3
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Location::get_IsOneHanded

    .method public static class Class/Location 
            get_Armor() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 02 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class Class/Location Class/Location::_unique_Armor
      IL_0005:  ret
    } // end of method Location::get_Armor

    .method public instance bool  get_IsArmor() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 Class/Location::get_Tag()
      IL_0006:  ldc.i4.2
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Location::get_IsArmor

    .method public static class Class/Location 
            get_Footwear() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 01 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class Class/Location Class/Location::_unique_Footwear
      IL_0005:  ret
    } // end of method Location::get_Footwear

    .method public instance bool  get_IsFootwear() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 Class/Location::get_Tag()
      IL_0006:  ldc.i4.1
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Location::get_IsFootwear

    .method public static class Class/Location 
            get_Headgear() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 00 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class Class/Location Class/Location::_unique_Headgear
      IL_0005:  ret
    } // end of method Location::get_Headgear

    .method public instance bool  get_IsHeadgear() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 Class/Location::get_Tag()
      IL_0006:  ldc.i4.0
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Location::get_IsHeadgear

    .method public instance int32  get_Tag() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 Class/Location::_tag
      IL_0006:  ret
    } // end of method Location::get_Tag

    .method assembly specialname instance object 
            __DebugDisplay() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       22 (0x16)
      .maxstack  4
      IL_0000:  ldstr      "%+0.8A"
      IL_0005:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Location,string>,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string,string>::.ctor(string)
      IL_000a:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.ExtraTopLevelOperators::PrintFormatToString<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Location,string>>(class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string>)
      IL_000f:  ldarg.0
      IL_0010:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Location,string>::Invoke(!0)
      IL_0015:  ret
    } // end of method Location::__DebugDisplay

    .method public hidebysig virtual final 
            instance int32  CompareTo(class Class/Location obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       65 (0x41)
      .maxstack  4
      .locals init (int32 V_0,
               int32 V_1)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0033

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_0031

      IL_0015:  ldarg.0
      IL_0016:  ldfld      int32 Class/Location::_tag
      IL_001b:  stloc.0
      IL_001c:  ldarg.1
      IL_001d:  ldfld      int32 Class/Location::_tag
      IL_0022:  stloc.1
      IL_0023:  ldloc.0
      IL_0024:  ldloc.1
      IL_0025:  bne.un.s   IL_0029

      IL_0027:  br.s       IL_002b

      IL_0029:  br.s       IL_002d

      IL_002b:  ldc.i4.0
      IL_002c:  ret

      IL_002d:  ldloc.0
      IL_002e:  ldloc.1
      IL_002f:  sub
      IL_0030:  ret

      IL_0031:  ldc.i4.1
      IL_0032:  ret

      IL_0033:  ldarg.1
      IL_0034:  ldnull
      IL_0035:  cgt.un
      IL_0037:  brfalse.s  IL_003b

      IL_0039:  br.s       IL_003d

      IL_003b:  br.s       IL_003f

      IL_003d:  ldc.i4.m1
      IL_003e:  ret

      IL_003f:  ldc.i4.0
      IL_0040:  ret
    } // end of method Location::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000169: 
//000170: 
//000171: 
//000172: type Location =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  Class/Location
      IL_0008:  call       instance int32 Class/Location::CompareTo(class Class/Location)
      IL_000d:  ret
    } // end of method Location::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       82 (0x52)
      .maxstack  4
      .locals init ([0] class Class/Location V_0,
               [1] int32 V_1,
               [2] int32 V_2)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  Class/Location
      IL_0007:  stloc.0
      IL_0008:  ldarg.0
      IL_0009:  ldnull
      IL_000a:  cgt.un
      IL_000c:  brfalse.s  IL_0010

      IL_000e:  br.s       IL_0012

      IL_0010:  br.s       IL_003f

//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_0012:  ldarg.1
      IL_0013:  unbox.any  Class/Location
      IL_0018:  ldnull
      IL_0019:  cgt.un
      IL_001b:  brfalse.s  IL_001f

      IL_001d:  br.s       IL_0021

      IL_001f:  br.s       IL_003d

      IL_0021:  ldarg.0
      IL_0022:  ldfld      int32 Class/Location::_tag
      IL_0027:  stloc.1
      IL_0028:  ldloc.0
      IL_0029:  ldfld      int32 Class/Location::_tag
      IL_002e:  stloc.2
      IL_002f:  ldloc.1
      IL_0030:  ldloc.2
      IL_0031:  bne.un.s   IL_0035

      IL_0033:  br.s       IL_0037

      IL_0035:  br.s       IL_0039

      IL_0037:  ldc.i4.0
      IL_0038:  ret

      IL_0039:  ldloc.1
      IL_003a:  ldloc.2
      IL_003b:  sub
      IL_003c:  ret

      IL_003d:  ldc.i4.1
      IL_003e:  ret

      IL_003f:  ldarg.1
      IL_0040:  unbox.any  Class/Location
      IL_0045:  ldnull
      IL_0046:  cgt.un
      IL_0048:  brfalse.s  IL_004c

      IL_004a:  br.s       IL_004e

      IL_004c:  br.s       IL_0050

      IL_004e:  ldc.i4.m1
      IL_004f:  ret

      IL_0050:  ldc.i4.0
      IL_0051:  ret
    } // end of method Location::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       101 (0x65)
      .maxstack  3
      .locals init (int32 V_0,
               class Class/Location V_1,
               class Class/Location V_2,
               class Class/Location V_3,
               class Class/Location V_4,
               class Class/Location V_5,
               class Class/Location V_6)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0063

      IL_000b:  ldc.i4.0
      IL_000c:  stloc.0
      IL_000d:  ldarg.0
      IL_000e:  call       instance int32 Class/Location::get_Tag()
      IL_0013:  switch     ( 
                            IL_0030,
                            IL_0032,
                            IL_0034,
                            IL_0036,
                            IL_0038,
                            IL_003a)
      IL_0030:  br.s       IL_003c

      IL_0032:  br.s       IL_0042

      IL_0034:  br.s       IL_0048

      IL_0036:  br.s       IL_004e

      IL_0038:  br.s       IL_0055

      IL_003a:  br.s       IL_005c

      IL_003c:  ldarg.0
      IL_003d:  stloc.1
      IL_003e:  ldc.i4.0
      IL_003f:  stloc.0
      IL_0040:  ldloc.0
      IL_0041:  ret

      IL_0042:  ldarg.0
      IL_0043:  stloc.2
      IL_0044:  ldc.i4.1
      IL_0045:  stloc.0
      IL_0046:  ldloc.0
      IL_0047:  ret

      IL_0048:  ldarg.0
      IL_0049:  stloc.3
      IL_004a:  ldc.i4.2
      IL_004b:  stloc.0
      IL_004c:  ldloc.0
      IL_004d:  ret

      IL_004e:  ldarg.0
      IL_004f:  stloc.s    V_4
      IL_0051:  ldc.i4.3
      IL_0052:  stloc.0
      IL_0053:  ldloc.0
      IL_0054:  ret

      IL_0055:  ldarg.0
      IL_0056:  stloc.s    V_5
      IL_0058:  ldc.i4.4
      IL_0059:  stloc.0
      IL_005a:  ldloc.0
      IL_005b:  ret

      IL_005c:  ldarg.0
      IL_005d:  stloc.s    V_6
      IL_005f:  ldc.i4.5
      IL_0060:  stloc.0
      IL_0061:  ldloc.0
      IL_0062:  ret

      IL_0063:  ldc.i4.0
      IL_0064:  ret
    } // end of method Location::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000172: type Location =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 Class/Location::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method Location::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       56 (0x38)
      .maxstack  4
      .locals init (class Class/Location V_0,
               class Class/Location V_1,
               int32 V_2,
               int32 V_3)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0030

      IL_000b:  ldarg.1
      IL_000c:  isinst     Class/Location
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  brfalse.s  IL_0017

      IL_0015:  br.s       IL_0019

      IL_0017:  br.s       IL_002e

      IL_0019:  ldloc.0
      IL_001a:  stloc.1
      IL_001b:  ldarg.0
      IL_001c:  ldfld      int32 Class/Location::_tag
      IL_0021:  stloc.2
      IL_0022:  ldloc.1
      IL_0023:  ldfld      int32 Class/Location::_tag
      IL_0028:  stloc.3
      IL_0029:  ldloc.2
      IL_002a:  ldloc.3
      IL_002b:  ceq
      IL_002d:  ret

      IL_002e:  ldc.i4.0
      IL_002f:  ret

      IL_0030:  ldarg.1
      IL_0031:  ldnull
      IL_0032:  cgt.un
      IL_0034:  ldc.i4.0
      IL_0035:  ceq
      IL_0037:  ret
    } // end of method Location::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(class Class/Location obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       50 (0x32)
      .maxstack  4
      .locals init (int32 V_0,
               int32 V_1)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_002a

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_0028

      IL_0015:  ldarg.0
      IL_0016:  ldfld      int32 Class/Location::_tag
      IL_001b:  stloc.0
      IL_001c:  ldarg.1
      IL_001d:  ldfld      int32 Class/Location::_tag
      IL_0022:  stloc.1
      IL_0023:  ldloc.0
      IL_0024:  ldloc.1
      IL_0025:  ceq
      IL_0027:  ret

      IL_0028:  ldc.i4.0
      IL_0029:  ret

      IL_002a:  ldarg.1
      IL_002b:  ldnull
      IL_002c:  cgt.un
      IL_002e:  ldc.i4.0
      IL_002f:  ceq
      IL_0031:  ret
    } // end of method Location::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class Class/Location V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     Class/Location
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool Class/Location::Equals(class Class/Location)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method Location::Equals

    .property instance int32 Tag()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance int32 Class/Location::get_Tag()
    } // end of property Location::Tag
    .property class Class/Location None()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class Class/Location Class/Location::get_None()
    } // end of property Location::None
    .property instance bool IsNone()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool Class/Location::get_IsNone()
    } // end of property Location::IsNone
    .property class Class/Location TwoHanded()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class Class/Location Class/Location::get_TwoHanded()
    } // end of property Location::TwoHanded
    .property instance bool IsTwoHanded()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool Class/Location::get_IsTwoHanded()
    } // end of property Location::IsTwoHanded
    .property class Class/Location OneHanded()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class Class/Location Class/Location::get_OneHanded()
    } // end of property Location::OneHanded
    .property instance bool IsOneHanded()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool Class/Location::get_IsOneHanded()
    } // end of property Location::IsOneHanded
    .property class Class/Location Armor()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class Class/Location Class/Location::get_Armor()
    } // end of property Location::Armor
    .property instance bool IsArmor()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool Class/Location::get_IsArmor()
    } // end of property Location::IsArmor
    .property class Class/Location Footwear()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class Class/Location Class/Location::get_Footwear()
    } // end of property Location::Footwear
    .property instance bool IsFootwear()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool Class/Location::get_IsFootwear()
    } // end of property Location::IsFootwear
    .property class Class/Location Headgear()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class Class/Location Class/Location::get_Headgear()
    } // end of property Location::Headgear
    .property instance bool IsHeadgear()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool Class/Location::get_IsHeadgear()
    } // end of property Location::IsHeadgear
  } // end of class Location

  .class auto ansi serializable nested public Item
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string name
    .field assembly class Class/Location loc
    .field assembly int32 bonus
    .method public specialname rtspecialname 
            instance void  .ctor(string name,
                                 class Class/Location loc,
                                 int32 bonus,
                                 int32 GPValue) cil managed
    {
      // Code size       31 (0x1f)
      .maxstack  4
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Class/Item::name
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      class Class/Location Class/Item::loc
//000182:                   bonus : int32, GPValue : int32) =
      IL_0017:  ldarg.0
      IL_0018:  ldarg.3
      IL_0019:  stfld      int32 Class/Item::bonus
//000181: type Item(name : string, loc : Location, 
      IL_001e:  ret
    } // end of method Item::.ctor

    .method public specialname instance string 
            get_Name() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/Item::name
      IL_0007:  ret
    } // end of method Item::get_Name

    .method public specialname instance int32 
            get_Bonus() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000184:     member mi.Bonus = bonus
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 Class/Item::bonus
      IL_0007:  ret
    } // end of method Item::get_Bonus

    .method public specialname instance class Class/Location 
            get_Location() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000185:     member mi.Location = loc
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/Location Class/Item::loc
      IL_0007:  ret
    } // end of method Item::get_Location

    .method public hidebysig virtual instance string 
            ToString() cil managed
    {
      // Code size       29 (0x1d)
      .maxstack  5
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
      IL_0000:  nop
      IL_0001:  ldstr      "{0} ({1})"
      IL_0006:  ldarg.0
      IL_0007:  call       instance string Class/Item::get_Name()
      IL_000c:  ldarg.0
      IL_000d:  call       instance int32 Class/Item::get_Bonus()
      IL_0012:  box        [mscorlib]System.Int32
      IL_0017:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object)
      IL_001c:  ret
    } // end of method Item::ToString

    .property instance string Name()
    {
      .get instance string Class/Item::get_Name()
    } // end of property Item::Name
    .property instance int32 Bonus()
    {
      .get instance int32 Class/Item::get_Bonus()
    } // end of property Item::Bonus
    .property instance class Class/Location
            Location()
    {
      .get instance class Class/Location Class/Item::get_Location()
    } // end of property Item::Location
  } // end of class Item

  .class auto ansi serializable nested public Munchkin
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly int32 level
    .field assembly class Class/Item armor
    .field assembly class Class/Item headgear
    .field assembly class Class/Item footwear
    .field assembly class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> miscItems
    .method public specialname rtspecialname 
            instance void  .ctor(int32 level,
                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> items) cil managed
    {
      // Code size       110 (0x6e)
      .maxstack  7
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      int32 Class/Munchkin::level
//000191:     let mutable armor : Item = 
      IL_0010:  ldarg.0
      IL_0011:  ldstr      "Clothes of Ineptitude"
      IL_0016:  call       class Class/Location Class/Location::get_Armor()
      IL_001b:  ldc.i4.0
      IL_001c:  ldc.i4.0
      IL_001d:  newobj     instance void Class/Item::.ctor(string,
                                                           class Class/Location,
                                                           int32,
                                                           int32)
      IL_0022:  stfld      class Class/Item Class/Munchkin::armor
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
      IL_0027:  ldarg.0
      IL_0028:  ldstr      "Hair"
      IL_002d:  call       class Class/Location Class/Location::get_Headgear()
      IL_0032:  ldc.i4.0
      IL_0033:  ldc.i4.0
      IL_0034:  newobj     instance void Class/Item::.ctor(string,
                                                           class Class/Location,
                                                           int32,
                                                           int32)
      IL_0039:  stfld      class Class/Item Class/Munchkin::headgear
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
      IL_003e:  ldarg.0
      IL_003f:  ldstr      "Bare Feet"
      IL_0044:  call       class Class/Location Class/Location::get_Footwear()
      IL_0049:  ldc.i4.0
      IL_004a:  ldc.i4.0
      IL_004b:  newobj     instance void Class/Item::.ctor(string,
                                                           class Class/Location,
                                                           int32,
                                                           int32)
      IL_0050:  stfld      class Class/Item Class/Munchkin::footwear
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
      IL_0055:  ldarg.0
      IL_0056:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::get_Empty()
      IL_005b:  stfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> Class/Munchkin::miscItems
//000198:     do
//000199:         List.iter
      IL_0060:  ldarg.0
      IL_0061:  newobj     instance void Class/'-ctor@200'::.ctor(class Class/Munchkin)
      IL_0066:  ldarg.2
      IL_0067:  call       void [FSharp.Core]Microsoft.FSharp.Collections.ListModule::Iterate<class Class/Item>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>,
                                                                                                                class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!!0>)
      IL_006c:  nop
//000190: type Munchkin(level : int32, items : Item list) =
      IL_006d:  ret
    } // end of method Munchkin::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       14 (0xe)
      .maxstack  5
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldc.i4.1
      IL_0003:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::get_Empty()
      IL_0008:  call       instance void Class/Munchkin::.ctor(int32,
                                                               class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>)
      IL_000d:  ret
    } // end of method Munchkin::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(int32 level) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  5
//000210:     new(level : int32) = Munchkin(level, [])
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::get_Empty()
      IL_0008:  call       instance void Class/Munchkin::.ctor(int32,
                                                               class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>)
      IL_000d:  ret
    } // end of method Munchkin::.ctor

    .method public specialname instance int32 
            get_Level() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000211:     member m.Level
//000212:         with get() = level
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 Class/Munchkin::level
      IL_0007:  ret
    } // end of method Munchkin::get_Level

    .method public specialname instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> 
            get_Items() cil managed
    {
      // Code size       51 (0x33)
      .maxstack  6
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/Item Class/Munchkin::armor
      IL_0007:  ldarg.0
      IL_0008:  ldfld      class Class/Item Class/Munchkin::headgear
      IL_000d:  ldarg.0
      IL_000e:  ldfld      class Class/Item Class/Munchkin::footwear
      IL_0013:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::get_Empty()
      IL_0018:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::Cons(!0,
                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
      IL_001d:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::Cons(!0,
                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
      IL_0022:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::Cons(!0,
                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
      IL_0027:  ldarg.0
      IL_0028:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> Class/Munchkin::miscItems
      IL_002d:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!!0> [FSharp.Core]Microsoft.FSharp.Core.Operators::op_Append<class Class/Item>(class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!!0>,
                                                                                                                                                                       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!!0>)
      IL_0032:  ret
    } // end of method Munchkin::get_Items

    .method public specialname instance int32 
            get_TotalBonus() cil managed
    {
      // Code size       108 (0x6c)
      .maxstack  5
      .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Item,int32> V_0,
               [1] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> V_1,
               [2] class [mscorlib]System.Collections.Generic.IEnumerable`1<class Class/Item> V_2,
               [3] class [mscorlib]System.Collections.Generic.IEnumerator`1<class Class/Item> V_3,
               [4] int32 V_4,
               [5] int32 V_5,
               [6] int32 V_6,
               [7] class [mscorlib]System.IDisposable V_7)
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 Class/Munchkin::level
      IL_0007:  newobj     instance void Class/get_TotalBonus@216::.ctor()
      IL_000c:  stloc.0
      IL_000d:  ldarg.0
      IL_000e:  call       instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> Class/Munchkin::get_Items()
      IL_0013:  stloc.1
      IL_0014:  ldloc.1
      IL_0015:  unbox.any  class [mscorlib]System.Collections.Generic.IEnumerable`1<class Class/Item>
      IL_001a:  stloc.2
      IL_001b:  ldloc.2
      IL_001c:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class Class/Item>::GetEnumerator()
      IL_0021:  stloc.3
      IL_0022:  stloc.s    V_4
      .try
      {
        IL_0024:  ldc.i4.0
        IL_0025:  stloc.s    V_6
        IL_0027:  ldloc.3
        IL_0028:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
        IL_002d:  brfalse.s  IL_0043

        IL_002f:  ldloc.s    V_6
        IL_0031:  ldloc.0
        IL_0032:  ldloc.3
        IL_0033:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class Class/Item>::get_Current()
        IL_0038:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Item,int32>::Invoke(!0)
        IL_003d:  add.ovf
        IL_003e:  stloc.s    V_6
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
        IL_0040:  nop
        IL_0041:  br.s       IL_0027

        IL_0043:  ldloc.s    V_6
        IL_0045:  stloc.s    V_5
        IL_0047:  leave.s    IL_0066

      }  // end .try
      finally
      {
        IL_0049:  ldloc.3
        IL_004a:  isinst     [mscorlib]System.IDisposable
        IL_004f:  stloc.s    V_7
        IL_0051:  ldloc.s    V_7
        IL_0053:  brfalse.s  IL_0057

        IL_0055:  br.s       IL_0059

        IL_0057:  br.s       IL_0063

        IL_0059:  ldloc.s    V_7
        IL_005b:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
        IL_0060:  ldnull
        IL_0061:  pop
        IL_0062:  endfinally
        IL_0063:  ldnull
        IL_0064:  pop
        IL_0065:  endfinally
      }  // end handler
      IL_0066:  ldloc.s    V_4
      IL_0068:  ldloc.s    V_5
      IL_006a:  add
      IL_006b:  ret
    } // end of method Munchkin::get_TotalBonus

    .method public specialname static class Class/Munchkin 
            op_LessLessEqualsEquals(class Class/Munchkin m,
                                    class Class/Item mi) cil managed
    {
      // Code size       25 (0x19)
      .maxstack  5
//000218:         new Munchkin( m.Level, mi :: m.Items )
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 Class/Munchkin::get_Level()
      IL_0007:  ldarg.1
      IL_0008:  ldarg.0
      IL_0009:  call       instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> Class/Munchkin::get_Items()
      IL_000e:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::Cons(!0,
                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
      IL_0013:  newobj     instance void Class/Munchkin::.ctor(int32,
                                                               class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>)
      IL_0018:  ret
    } // end of method Munchkin::op_LessLessEqualsEquals

    .method public specialname static class Class/Munchkin 
            op_UnaryPlus(class Class/Munchkin m) cil managed
    {
      // Code size       21 (0x15)
      .maxstack  4
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 Class/Munchkin::get_Level()
      IL_0007:  ldc.i4.1
      IL_0008:  add
      IL_0009:  ldarg.0
      IL_000a:  call       instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> Class/Munchkin::get_Items()
      IL_000f:  newobj     instance void Class/Munchkin::.ctor(int32,
                                                               class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>)
      IL_0014:  ret
    } // end of method Munchkin::op_UnaryPlus

    .property instance int32 Level()
    {
      .get instance int32 Class/Munchkin::get_Level()
    } // end of property Munchkin::Level
    .property instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>
            Items()
    {
      .get instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> Class/Munchkin::get_Items()
    } // end of property Munchkin::Items
    .property instance int32 TotalBonus()
    {
      .get instance int32 Class/Munchkin::get_TotalBonus()
    } // end of property Munchkin::TotalBonus
  } // end of class Munchkin

  .class auto ansi serializable nested assembly beforefieldinit '-ctor@200'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Item,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class Class/Munchkin this
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class Class/Munchkin this) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Item,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class Class/Munchkin Class/'-ctor@200'::this
      IL_000d:  ret
    } // end of method '-ctor@200'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class Class/Item it) cil managed
    {
      // Code size       134 (0x86)
      .maxstack  7
//000201:                 match it.Location with
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       instance class Class/Location Class/Item::get_Location()
      IL_0007:  call       instance int32 Class/Location::get_Tag()
      IL_000c:  switch     ( 
                            IL_002d,
                            IL_002f,
                            IL_002b,
                            IL_0029,
                            IL_0029,
                            IL_0031)
      IL_0029:  br.s       IL_007b

      IL_002b:  br.s       IL_0033

      IL_002d:  br.s       IL_0041

      IL_002f:  br.s       IL_004f

      IL_0031:  br.s       IL_005d

//000202:                 | Armor -> armor <- it
      IL_0033:  ldarg.0
      IL_0034:  ldfld      class Class/Munchkin Class/'-ctor@200'::this
      IL_0039:  ldarg.1
      IL_003a:  stfld      class Class/Item Class/Munchkin::armor
      IL_003f:  ldnull
      IL_0040:  ret

//000203:                 | Headgear -> headgear <- it
      IL_0041:  ldarg.0
      IL_0042:  ldfld      class Class/Munchkin Class/'-ctor@200'::this
      IL_0047:  ldarg.1
      IL_0048:  stfld      class Class/Item Class/Munchkin::headgear
      IL_004d:  ldnull
      IL_004e:  ret

//000204:                 | Footwear -> footwear <- it
      IL_004f:  ldarg.0
      IL_0050:  ldfld      class Class/Munchkin Class/'-ctor@200'::this
      IL_0055:  ldarg.1
      IL_0056:  stfld      class Class/Item Class/Munchkin::footwear
      IL_005b:  ldnull
      IL_005c:  ret

//000205:                 | None -> miscItems <- it :: miscItems
      IL_005d:  ldarg.0
      IL_005e:  ldfld      class Class/Munchkin Class/'-ctor@200'::this
      IL_0063:  ldarg.1
      IL_0064:  ldarg.0
      IL_0065:  ldfld      class Class/Munchkin Class/'-ctor@200'::this
      IL_006a:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> Class/Munchkin::miscItems
      IL_006f:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item>::Cons(!0,
                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
      IL_0074:  stfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Item> Class/Munchkin::miscItems
      IL_0079:  ldnull
      IL_007a:  ret

//000206:                 | _ -> failwith "E_NOTIMPL"
      IL_007b:  ldstr      "E_NOTIMPL"
      IL_0080:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.Operators::FailWith<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(string)
      IL_0085:  ret
    } // end of method '-ctor@200'::Invoke

  } // end of class '-ctor@200'

  .class auto ansi serializable nested assembly beforefieldinit get_TotalBonus@216
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Item,int32>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class Class/Item,int32>::.ctor()
      IL_0006:  ret
    } // end of method get_TotalBonus@216::.ctor

    .method public strict virtual instance int32 
            Invoke(class Class/Item it) cil managed
    {
      // Code size       8 (0x8)
      .maxstack  5
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       instance int32 Class/Item::get_Bonus()
      IL_0007:  ret
    } // end of method get_TotalBonus@216::Invoke

  } // end of class get_TotalBonus@216

  .class auto ansi serializable nested public Student
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string subject
    .field assembly string name
    .method public specialname rtspecialname 
            instance void  .ctor(string name,
                                 string subject) cil managed
    {
      // Code size       24 (0x18)
      .maxstack  4
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Class/Student::name
      IL_0010:  ldarg.0
      IL_0011:  ldarg.2
      IL_0012:  stfld      string Class/Student::subject
      IL_0017:  ret
    } // end of method Student::.ctor

    .method public specialname instance string 
            get_Name() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000288:     member s.Name = name
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/Student::name
      IL_0007:  ret
    } // end of method Student::get_Name

    .method public specialname instance string 
            get_Subject() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000289:     member s.Subject = subject
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/Student::subject
      IL_0007:  ret
    } // end of method Student::get_Subject

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       18 (0x12)
      .maxstack  5
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldstr      ""
      IL_0007:  ldstr      ""
      IL_000c:  call       instance void Class/Student::.ctor(string,
                                                              string)
      IL_0011:  ret
    } // end of method Student::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(string name,
                                 string subject,
                                 object school) cil managed
    {
      // Code size       10 (0xa)
      .maxstack  5
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  ldarg.2
      IL_0004:  call       instance void Class/Student::.ctor(string,
                                                              string)
      IL_0009:  ret
    } // end of method Student::.ctor

    .method public specialname instance string 
            get_FullDescription() cil managed
    {
      // Code size       29 (0x1d)
      .maxstack  4
//000295:     member s.FullDescription = s.Name + " " + s.Subject
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string Class/Student::get_Name()
      IL_0007:  ldstr      " "
      IL_000c:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0011:  ldarg.0
      IL_0012:  call       instance string Class/Student::get_Subject()
      IL_0017:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_001c:  ret
    } // end of method Student::get_FullDescription

    .property instance string Name()
    {
      .get instance string Class/Student::get_Name()
    } // end of property Student::Name
    .property instance string Subject()
    {
      .get instance string Class/Student::get_Subject()
    } // end of property Student::Subject
    .property instance string FullDescription()
    {
      .get instance string Class/Student::get_FullDescription()
    } // end of property Student::FullDescription
  } // end of class Student

  .class auto ansi serializable nested assembly Sport
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor(object name) cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method Sport::.ctor

    .method assembly specialname instance string 
            get_Rules() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  3
//000314:     member private p.Rules
//000315:         with get() = ""
      IL_0000:  nop
      IL_0001:  ldstr      ""
      IL_0006:  ret
    } // end of method Sport::get_Rules

    .property instance string Rules()
    {
      .get instance string Class/Sport::get_Rules()
    } // end of property Sport::Rules
  } // end of class Sport

  .class auto ansi serializable nested public ExampleClass
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.ClassAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string field1
    .field assembly string mutField2
    .field public string valField
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.DefaultValueAttribute::.ctor() = ( 01 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor(string field1) cil managed
    {
      // Code size       45 (0x2d)
      .maxstack  4
      .locals init ([0] string helper)
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Class/ExampleClass::field1
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
      IL_0010:  ldarg.0
      IL_0011:  ldstr      "Changeable"
      IL_0016:  stfld      string Class/ExampleClass::mutField2
//000324:     let helper = field1 + ", helped"
      IL_001b:  ldarg.0
      IL_001c:  ldfld      string Class/ExampleClass::field1
      IL_0021:  ldstr      ", helped"
      IL_0026:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_002b:  stloc.0
//000318: type (* public *) ExampleClass(field1 : string) =
      IL_002c:  ret
    } // end of method ExampleClass::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       13 (0xd)
      .maxstack  4
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldstr      ""
      IL_0007:  call       instance void Class/ExampleClass::.ctor(string)
      IL_000c:  ret
    } // end of method ExampleClass::.ctor

    .method public specialname instance string 
            get_Property() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/ExampleClass::field1
      IL_0007:  ret
    } // end of method ExampleClass::get_Property

    .method public specialname instance string 
            get_ReadWriteProp() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/ExampleClass::mutField2
      IL_0007:  ret
    } // end of method ExampleClass::get_ReadWriteProp

    .method public specialname instance void 
            set_ReadWriteProp(string 'value') cil managed
    {
      // Code size       9 (0x9)
      .maxstack  4
//000334:         and (* public *) set(value) = mutField2 <- value
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  stfld      string Class/ExampleClass::mutField2
      IL_0008:  ret
    } // end of method ExampleClass::set_ReadWriteProp

    .property instance string Property()
    {
      .get instance string Class/ExampleClass::get_Property()
    } // end of property ExampleClass::Property
    .property instance string ReadWriteProp()
    {
      .set instance void Class/ExampleClass::set_ReadWriteProp(string)
      .get instance string Class/ExampleClass::get_ReadWriteProp()
    } // end of property ExampleClass::ReadWriteProp
  } // end of class ExampleClass

  .class auto ansi serializable nested public Watcher
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method Watcher::.ctor

    .method public static void  GoingAway(class [mscorlib]System.EventArgs args) cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
      IL_0000:  nop
      IL_0001:  ldstr      "Going away now...."
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_000b:  ret
    } // end of method Watcher::GoingAway

  } // end of class Watcher

  .class auto ansi serializable sealed nested public Notify
         extends [mscorlib]System.MulticastDelegate
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor(object 'object',
                                 native int 'method') runtime managed
    {
    } // end of method Notify::.ctor

    .method public hidebysig strict virtual 
            instance string  Invoke(string A_1) runtime managed
    {
    } // end of method Notify::Invoke

    .method public hidebysig strict virtual 
            instance class [mscorlib]System.IAsyncResult 
            BeginInvoke(string A_1,
                        class [mscorlib]System.AsyncCallback callback,
                        object objects) runtime managed
    {
    } // end of method Notify::BeginInvoke

    .method public hidebysig strict virtual 
            instance string  EndInvoke(class [mscorlib]System.IAsyncResult result) runtime managed
    {
    } // end of method Notify::EndInvoke

  } // end of class Notify

  .class auto ansi serializable nested public Child
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method Child::.ctor

    .method public instance string  Respond(string msg) cil managed
    {
      // Code size       17 (0x11)
      .maxstack  3
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
      IL_0000:  nop
      IL_0001:  ldstr      "You want me to {0}\? No!"
      IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
//000348:         "No!"
      IL_000b:  ldstr      "No!"
      IL_0010:  ret
    } // end of method Child::Respond

  } // end of class Child

  .class auto ansi serializable sealed nested public CurriedDelegate
         extends [mscorlib]System.MulticastDelegate
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor(object 'object',
                                 native int 'method') runtime managed
    {
    } // end of method CurriedDelegate::.ctor

    .method public hidebysig strict virtual 
            instance int32  Invoke(int32 A_1,
                                   int32 A_2) runtime managed
    {
    } // end of method CurriedDelegate::Invoke

    .method public hidebysig strict virtual 
            instance class [mscorlib]System.IAsyncResult 
            BeginInvoke(int32 A_1,
                        int32 A_2,
                        class [mscorlib]System.AsyncCallback callback,
                        object objects) runtime managed
    {
    } // end of method CurriedDelegate::BeginInvoke

    .method public hidebysig strict virtual 
            instance int32  EndInvoke(class [mscorlib]System.IAsyncResult result) runtime managed
    {
    } // end of method CurriedDelegate::EndInvoke

  } // end of class CurriedDelegate

  .class auto ansi serializable sealed nested public TupledDelegate
         extends [mscorlib]System.MulticastDelegate
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor(object 'object',
                                 native int 'method') runtime managed
    {
    } // end of method TupledDelegate::.ctor

    .method public hidebysig strict virtual 
            instance int32  Invoke(class [FSharp.Core]System.Tuple`2<int32,int32> A_1) runtime managed
    {
    } // end of method TupledDelegate::Invoke

    .method public hidebysig strict virtual 
            instance class [mscorlib]System.IAsyncResult 
            BeginInvoke(class [FSharp.Core]System.Tuple`2<int32,int32> A_1,
                        class [mscorlib]System.AsyncCallback callback,
                        object objects) runtime managed
    {
    } // end of method TupledDelegate::BeginInvoke

    .method public hidebysig strict virtual 
            instance int32  EndInvoke(class [mscorlib]System.IAsyncResult result) runtime managed
    {
    } // end of method TupledDelegate::EndInvoke

  } // end of class TupledDelegate

  .class auto ansi serializable nested public DelegateTarget
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method DelegateTarget::.ctor

    .method public instance int32  CurriedAdd(int32 x,
                                              int32 y) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationArgumentCountsAttribute::.ctor(int32[]) = ( 01 00 02 00 00 00 01 00 00 00 01 00 00 00 00 00 ) 
      // Code size       5 (0x5)
      .maxstack  4
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldarg.2
      IL_0003:  add
      IL_0004:  ret
    } // end of method DelegateTarget::CurriedAdd

    .method public instance int32  TupledAdd(int32 x,
                                             int32 y) cil managed
    {
      // Code size       5 (0x5)
      .maxstack  4
//000354:     member this.TupledAdd (x : int, y : int) = x + y
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldarg.2
      IL_0003:  add
      IL_0004:  ret
    } // end of method DelegateTarget::TupledAdd

  } // end of class DelegateTarget

  .class auto ansi serializable nested public ConcertEventArgs
         extends [mscorlib]System.EventArgs
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string city
    .method public specialname rtspecialname 
            instance void  .ctor(string city) cil managed
    {
      // Code size       17 (0x11)
      .maxstack  4
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.EventArgs::.ctor()
      IL_0007:  ldarg.0
      IL_0008:  pop
//000356: type ConcertEventArgs(city : string) =
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Class/ConcertEventArgs::city
      IL_0010:  ret
    } // end of method ConcertEventArgs::.ctor

    .method public specialname instance string 
            get_City() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/ConcertEventArgs::city
      IL_0007:  ret
    } // end of method ConcertEventArgs::get_City

    .method public hidebysig virtual instance string 
            ToString() cil managed
    {
      // Code size       18 (0x12)
      .maxstack  4
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
      IL_0000:  nop
      IL_0001:  ldstr      "city:{0}"
      IL_0006:  ldarg.0
      IL_0007:  ldfld      string Class/ConcertEventArgs::city
      IL_000c:  call       string [mscorlib]System.String::Format(string,
                                                                  object)
      IL_0011:  ret
    } // end of method ConcertEventArgs::ToString

    .property instance string City()
    {
      .get instance string Class/ConcertEventArgs::get_City()
    } // end of property ConcertEventArgs::City
  } // end of class ConcertEventArgs

  .class auto ansi serializable nested public RockBand
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string name
    .field assembly class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler> concertEvent
    .method public specialname rtspecialname 
            instance void  .ctor(string name) cil managed
    {
      // Code size       28 (0x1c)
      .maxstack  4
//000361:     
//000362: type RockBand(name : string) =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string Class/RockBand::name
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
      IL_0010:  ldarg.0
      IL_0011:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler>::.ctor()
      IL_0016:  stfld      class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler> Class/RockBand::concertEvent
//000362: type RockBand(name : string) =
      IL_001b:  ret
    } // end of method RockBand::.ctor

    .method public specialname instance string 
            get_Name() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string Class/RockBand::name
      IL_0007:  ret
    } // end of method RockBand::get_Name

    .method public instance void  add_OnConcert(class [mscorlib]System.EventHandler 'handler') cil managed
    {
      // Code size       19 (0x13)
      .maxstack  4
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler> Class/RockBand::concertEvent
      IL_0007:  call       instance class [FSharp.Core]Microsoft.FSharp.Control.IDelegateEvent`1<!0> class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler>::get_Publish()
      IL_000c:  ldarg.1
      IL_000d:  callvirt   instance void class [FSharp.Core]Microsoft.FSharp.Control.IDelegateEvent`1<class [mscorlib]System.EventHandler>::AddHandler(!0)
      IL_0012:  ret
    } // end of method RockBand::add_OnConcert

    .method public instance void  remove_OnConcert(class [mscorlib]System.EventHandler 'handler') cil managed
    {
      // Code size       19 (0x13)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler> Class/RockBand::concertEvent
      IL_0007:  call       instance class [FSharp.Core]Microsoft.FSharp.Control.IDelegateEvent`1<!0> class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler>::get_Publish()
      IL_000c:  ldarg.1
      IL_000d:  callvirt   instance void class [FSharp.Core]Microsoft.FSharp.Control.IDelegateEvent`1<class [mscorlib]System.EventHandler>::RemoveHandler(!0)
      IL_0012:  ret
    } // end of method RockBand::remove_OnConcert

    .method public instance void  HoldConcert(string city) cil managed
    {
      // Code size       51 (0x33)
      .maxstack  7
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler> Class/RockBand::concertEvent
      IL_0007:  ldc.i4.2
      IL_0008:  newarr     [mscorlib]System.Object
      IL_000d:  dup
      IL_000e:  ldc.i4.0
      IL_000f:  ldarg.0
      IL_0010:  stelem     [mscorlib]System.Object
      IL_0015:  dup
      IL_0016:  ldc.i4.1
      IL_0017:  ldarg.1
      IL_0018:  newobj     instance void Class/ConcertEventArgs::.ctor(string)
      IL_001d:  stelem     [mscorlib]System.Object
      IL_0022:  call       instance void class [FSharp.Core]Microsoft.FSharp.Control.FSharpDelegateEvent`1<class [mscorlib]System.EventHandler>::Trigger(object[])
      IL_0027:  nop
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
      IL_0028:  ldstr      "Rockin' {0}!"
      IL_002d:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_0032:  ret
    } // end of method RockBand::HoldConcert

    .event [mscorlib]System.EventHandler OnConcert
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CLIEventAttribute::.ctor() = ( 01 00 00 00 ) 
      .addon instance void Class/RockBand::add_OnConcert(class [mscorlib]System.EventHandler)
      .removeon instance void Class/RockBand::remove_OnConcert(class [mscorlib]System.EventHandler)
    } // end of event RockBand::OnConcert
    .property instance string Name()
    {
      .get instance string Class/RockBand::get_Name()
    } // end of property RockBand::Name
  } // end of class RockBand

  .class auto ansi serializable nested public Fan
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string home
    .field assembly int32 'init@374-2'
    .method public specialname rtspecialname 
            instance void  .ctor(string home,
                                 class Class/RockBand favBand) cil managed
    {
      // Code size       87 (0x57)
      .maxstack  5
      .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan> f,
               [1] class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan> V_1,
               [2] class Class/RockBand V_2)
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
      IL_0000:  nop
      IL_0001:  ldnull
      IL_0002:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan>::.ctor(!0)
      IL_0007:  stloc.0
      IL_0008:  ldloc.1
      IL_0009:  stloc.1
      IL_000a:  ldarg.0
      IL_000b:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0010:  ldarg.0
      IL_0011:  pop
      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  stfld      string Class/Fan::home
      IL_0019:  ldloc.0
      IL_001a:  ldarg.0
      IL_001b:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan>::set_contents(!0)
      IL_0020:  ldarg.0
      IL_0021:  ldc.i4.1
      IL_0022:  stfld      int32 Class/Fan::'init@374-2'
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
      IL_0027:  ldarg.2
      IL_0028:  stloc.2
      IL_0029:  ldloc.2
      IL_002a:  newobj     instance void Class/'-ctor@376-1'::.ctor(class Class/RockBand)
      IL_002f:  ldloc.2
      IL_0030:  newobj     instance void Class/'-ctor@376-2'::.ctor(class Class/RockBand)
      IL_0035:  newobj     instance void Class/'-ctor@376-3'::.ctor()
      IL_003a:  call       class [FSharp.Core]Microsoft.FSharp.Control.IEvent`2<!!0,!!1> [FSharp.Core]Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers::CreateEvent<class [mscorlib]System.EventHandler,class [mscorlib]System.EventArgs>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>,
                                                                                                                                                                                                                                               class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>,
                                                                                                                                                                                                                                               class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!1,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,!!0>)
      IL_003f:  ldloc.0
      IL_0040:  newobj     instance void Class/'-ctor@377-5'::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan>)
      IL_0045:  ldftn      instance void Class/'-ctor@377-5'::Invoke(object,
                                                                     class [mscorlib]System.EventArgs)
      IL_004b:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                              native int)
      IL_0050:  callvirt   instance void class [FSharp.Core]Microsoft.FSharp.Control.IDelegateEvent`1<class [mscorlib]System.EventHandler>::AddHandler(!0)
      IL_0055:  nop
//000374: type Fan(home : string, favBand : RockBand) as f =
      IL_0056:  ret
    } // end of method Fan::.ctor

    .method public instance void  FavoriteBandComingToTown(object _arg7,
                                                           class [mscorlib]System.EventArgs args) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationArgumentCountsAttribute::.ctor(int32[]) = ( 01 00 02 00 00 00 01 00 00 00 01 00 00 00 00 00 ) 
      // Code size       80 (0x50)
      .maxstack  4
      .locals init ([0] object V_0,
               [1] class Class/ConcertEventArgs cea)
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
      IL_0000:  ldarg.0
      IL_0001:  volatile.
      IL_0003:  ldfld      int32 Class/Fan::'init@374-2'
      IL_0008:  ldc.i4.1
      IL_0009:  bge.s      IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0018

//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_000f:  call       void [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::FailInit()
      IL_0014:  nop
      IL_0015:  nop
      IL_0016:  br.s       IL_0019

      IL_0018:  nop
      IL_0019:  ldarg.1
      IL_001a:  stloc.0
      IL_001b:  nop
      IL_001c:  ldarg.2
      IL_001d:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class Class/ConcertEventArgs>(object)
      IL_0022:  stloc.1
//000382:         if home = cea.City then
      IL_0023:  ldarg.0
      IL_0024:  ldfld      string Class/Fan::home
      IL_0029:  ldloc.1
      IL_002a:  call       instance string Class/ConcertEventArgs::get_City()
      IL_002f:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0034:  brfalse.s  IL_0038

      IL_0036:  br.s       IL_003a

      IL_0038:  br.s       IL_0045

//000383:             System.Console.WriteLine("I'm SO going!")
      IL_003a:  ldstr      "I'm SO going!"
      IL_003f:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_0044:  ret

//000384:         else
//000385:             System.Console.WriteLine("Darn")
      IL_0045:  ldstr      "Darn"
      IL_004a:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_004f:  ret
    } // end of method Fan::FavoriteBandComingToTown

  } // end of class Fan

  .class auto ansi serializable nested assembly beforefieldinit '-ctor@376-1'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class Class/RockBand eventTarget
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class Class/RockBand eventTarget) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class Class/RockBand Class/'-ctor@376-1'::eventTarget
      IL_000d:  ret
    } // end of method '-ctor@376-1'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.EventHandler eventDelegate) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  6
//000376:         favBand.OnConcert.AddHandler(
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/RockBand Class/'-ctor@376-1'::eventTarget
      IL_0007:  ldarg.1
      IL_0008:  call       instance void Class/RockBand::add_OnConcert(class [mscorlib]System.EventHandler)
      IL_000d:  nop
      IL_000e:  ldnull
      IL_000f:  ret
    } // end of method '-ctor@376-1'::Invoke

  } // end of class '-ctor@376-1'

  .class auto ansi serializable nested assembly beforefieldinit '-ctor@376-2'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class Class/RockBand eventTarget
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class Class/RockBand eventTarget) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class Class/RockBand Class/'-ctor@376-2'::eventTarget
      IL_000d:  ret
    } // end of method '-ctor@376-2'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.EventHandler eventDelegate) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  6
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/RockBand Class/'-ctor@376-2'::eventTarget
      IL_0007:  ldarg.1
      IL_0008:  call       instance void Class/RockBand::remove_OnConcert(class [mscorlib]System.EventHandler)
      IL_000d:  nop
      IL_000e:  ldnull
      IL_000f:  ret
    } // end of method '-ctor@376-2'::Invoke

  } // end of class '-ctor@376-2'

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname '-ctor@376-4'
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .field public class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  6
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> Class/'-ctor@376-4'::callback
      IL_0007:  ldarg.0
      IL_0008:  call       instance void [mscorlib]System.Object::.ctor()
      IL_000d:  ret
    } // end of method '-ctor@376-4'::.ctor

    .method assembly instance void  Invoke(object sender,
                                           class [mscorlib]System.EventArgs e) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  7
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> Class/'-ctor@376-4'::callback
      IL_0007:  ldarg.1
      IL_0008:  ldarg.2
      IL_0009:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [mscorlib]System.EventArgs>::InvokeFast<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                         !0,
                                                                                                                                                                                         !1)
      IL_000e:  pop
      IL_000f:  ret
    } // end of method '-ctor@376-4'::Invoke

  } // end of class '-ctor@376-4'

  .class auto ansi serializable nested assembly beforefieldinit '-ctor@376-3'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,class [mscorlib]System.EventHandler>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,class [mscorlib]System.EventHandler>::.ctor()
      IL_0006:  ret
    } // end of method '-ctor@376-3'::.ctor

    .method public strict virtual instance class [mscorlib]System.EventHandler 
            Invoke(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback) cil managed
    {
      // Code size       19 (0x13)
      .maxstack  6
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  newobj     instance void Class/'-ctor@376-4'::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>)
      IL_0007:  ldftn      instance void Class/'-ctor@376-4'::Invoke(object,
                                                                     class [mscorlib]System.EventArgs)
      IL_000d:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                              native int)
      IL_0012:  ret
    } // end of method '-ctor@376-3'::Invoke

  } // end of class '-ctor@376-3'

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname '-ctor@377-5'
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .field public class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan> f
    .method public specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan> f) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  6
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan> Class/'-ctor@377-5'::f
      IL_0007:  ldarg.0
      IL_0008:  call       instance void [mscorlib]System.Object::.ctor()
      IL_000d:  ret
    } // end of method '-ctor@377-5'::.ctor

    .method assembly instance void  Invoke(object sender,
                                           class [mscorlib]System.EventArgs e) cil managed
    {
      // Code size       32 (0x20)
      .maxstack  7
      .locals init ([0] class Class/Fan V_0,
               [1] object V_1,
               [2] class [mscorlib]System.EventArgs V_2)
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan> Class/'-ctor@377-5'::f
      IL_0007:  call       instance !0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpRef`1<class Class/Fan>::get_contents()
      IL_000c:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::CheckThis<class Class/Fan>(!!0)
      IL_0011:  stloc.0
      IL_0012:  ldarg.1
      IL_0013:  stloc.1
      IL_0014:  ldarg.2
      IL_0015:  stloc.2
      IL_0016:  ldloc.0
      IL_0017:  ldloc.1
      IL_0018:  ldloc.2
      IL_0019:  call       instance void Class/Fan::FavoriteBandComingToTown(object,
                                                                             class [mscorlib]System.EventArgs)
      IL_001e:  nop
      IL_001f:  ret
    } // end of method '-ctor@377-5'::Invoke

  } // end of class '-ctor@377-5'

  .class auto ansi nested assembly beforefieldinit events_examples@390
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class [mscorlib]System.AppDomain eventTarget
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class [mscorlib]System.AppDomain eventTarget) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class [mscorlib]System.AppDomain Class/events_examples@390::eventTarget
      IL_000d:  ret
    } // end of method events_examples@390::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.EventHandler eventDelegate) cil managed
    {
      // Code size       15 (0xf)
      .maxstack  6
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [mscorlib]System.AppDomain Class/events_examples@390::eventTarget
      IL_0007:  ldarg.1
      IL_0008:  callvirt   instance void [mscorlib]System.AppDomain::add_ProcessExit(class [mscorlib]System.EventHandler)
      IL_000d:  ldnull
      IL_000e:  ret
    } // end of method events_examples@390::Invoke

  } // end of class events_examples@390

  .class auto ansi nested assembly beforefieldinit 'events_examples@390-1'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class [mscorlib]System.AppDomain eventTarget
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class [mscorlib]System.AppDomain eventTarget) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class [mscorlib]System.AppDomain Class/'events_examples@390-1'::eventTarget
      IL_000d:  ret
    } // end of method 'events_examples@390-1'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.EventHandler eventDelegate) cil managed
    {
      // Code size       15 (0xf)
      .maxstack  6
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [mscorlib]System.AppDomain Class/'events_examples@390-1'::eventTarget
      IL_0007:  ldarg.1
      IL_0008:  callvirt   instance void [mscorlib]System.AppDomain::remove_ProcessExit(class [mscorlib]System.EventHandler)
      IL_000d:  ldnull
      IL_000e:  ret
    } // end of method 'events_examples@390-1'::Invoke

  } // end of class 'events_examples@390-1'

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname 'events_examples@390-3'
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .field public class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  6
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> Class/'events_examples@390-3'::callback
      IL_0007:  ldarg.0
      IL_0008:  call       instance void [mscorlib]System.Object::.ctor()
      IL_000d:  ret
    } // end of method 'events_examples@390-3'::.ctor

    .method assembly instance void  Invoke(object sender,
                                           class [mscorlib]System.EventArgs e) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  7
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> Class/'events_examples@390-3'::callback
      IL_0007:  ldarg.1
      IL_0008:  ldarg.2
      IL_0009:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [mscorlib]System.EventArgs>::InvokeFast<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                         !0,
                                                                                                                                                                                         !1)
      IL_000e:  pop
      IL_000f:  ret
    } // end of method 'events_examples@390-3'::Invoke

  } // end of class 'events_examples@390-3'

  .class auto ansi serializable nested assembly beforefieldinit 'events_examples@390-2'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,class [mscorlib]System.EventHandler>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,class [mscorlib]System.EventHandler>::.ctor()
      IL_0006:  ret
    } // end of method 'events_examples@390-2'::.ctor

    .method public strict virtual instance class [mscorlib]System.EventHandler 
            Invoke(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback) cil managed
    {
      // Code size       19 (0x13)
      .maxstack  6
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  newobj     instance void Class/'events_examples@390-3'::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>)
      IL_0007:  ldftn      instance void Class/'events_examples@390-3'::Invoke(object,
                                                                               class [mscorlib]System.EventArgs)
      IL_000d:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                              native int)
      IL_0012:  ret
    } // end of method 'events_examples@390-2'::Invoke

  } // end of class 'events_examples@390-2'

  .class auto ansi serializable nested assembly beforefieldinit 'events_examples@390-4'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ret
    } // end of method 'events_examples@390-4'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.EventArgs arg00) cil managed
    {
      // Code size       10 (0xa)
      .maxstack  5
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       void Class/Watcher::GoingAway(class [mscorlib]System.EventArgs)
      IL_0007:  nop
      IL_0008:  ldnull
      IL_0009:  ret
    } // end of method 'events_examples@390-4'::Invoke

  } // end of class 'events_examples@390-4'

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname np@393
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .field public class Class/Child c
    .method public specialname rtspecialname 
            instance void  .ctor(class Class/Child c) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  6
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  stfld      class Class/Child Class/np@393::c
      IL_0007:  ldarg.0
      IL_0008:  call       instance void [mscorlib]System.Object::.ctor()
      IL_000d:  ret
    } // end of method np@393::.ctor

    .method assembly instance string  Invoke(string A_1) cil managed
    {
      // Code size       18 (0x12)
      .maxstack  6
      .locals init ([0] class Class/Child V_0,
               [1] string V_1)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/Child Class/np@393::c
      IL_0007:  stloc.0
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldloc.0
      IL_000b:  ldloc.1
      IL_000c:  call       instance string Class/Child::Respond(string)
      IL_0011:  ret
    } // end of method np@393::Invoke

  } // end of class np@393

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname cd1@398
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .field public class Class/DelegateTarget dt
    .method public specialname rtspecialname 
            instance void  .ctor(class Class/DelegateTarget dt) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  6
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  stfld      class Class/DelegateTarget Class/cd1@398::dt
      IL_0007:  ldarg.0
      IL_0008:  call       instance void [mscorlib]System.Object::.ctor()
      IL_000d:  ret
    } // end of method cd1@398::.ctor

    .method assembly instance int32  Invoke(int32 A_1,
                                            int32 A_2) cil managed
    {
      // Code size       21 (0x15)
      .maxstack  7
      .locals init ([0] class Class/DelegateTarget V_0,
               [1] int32 V_1,
               [2] int32 V_2)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/DelegateTarget Class/cd1@398::dt
      IL_0007:  stloc.0
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldarg.2
      IL_000b:  stloc.2
      IL_000c:  ldloc.0
      IL_000d:  ldloc.1
      IL_000e:  ldloc.2
      IL_000f:  call       instance int32 Class/DelegateTarget::CurriedAdd(int32,
                                                                           int32)
      IL_0014:  ret
    } // end of method cd1@398::Invoke

  } // end of class cd1@398

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname td1@400
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .field public class Class/DelegateTarget dt
    .method public specialname rtspecialname 
            instance void  .ctor(class Class/DelegateTarget dt) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  6
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  stfld      class Class/DelegateTarget Class/td1@400::dt
      IL_0007:  ldarg.0
      IL_0008:  call       instance void [mscorlib]System.Object::.ctor()
      IL_000d:  ret
    } // end of method td1@400::.ctor

    .method assembly instance int32  Invoke(class [FSharp.Core]System.Tuple`2<int32,int32> A_1) cil managed
    {
      // Code size       33 (0x21)
      .maxstack  7
      .locals init ([0] class Class/DelegateTarget V_0,
               [1] class [FSharp.Core]System.Tuple`2<int32,int32> V_1,
               [2] int32 V_2,
               [3] int32 V_3)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/DelegateTarget Class/td1@400::dt
      IL_0007:  stloc.0
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldloc.1
      IL_000b:  call       instance !0 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item1()
      IL_0010:  stloc.2
      IL_0011:  ldloc.1
      IL_0012:  call       instance !1 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item2()
      IL_0017:  stloc.3
      IL_0018:  ldloc.0
      IL_0019:  ldloc.2
      IL_001a:  ldloc.3
      IL_001b:  call       instance int32 Class/DelegateTarget::TupledAdd(int32,
                                                                          int32)
      IL_0020:  ret
    } // end of method td1@400::Invoke

  } // end of class td1@400

  .class auto ansi serializable nested assembly beforefieldinit 'events_examples@412-5'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class Class/RockBand rb
    .method assembly specialname rtspecialname 
            instance void  .ctor(class Class/RockBand rb) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class Class/RockBand Class/'events_examples@412-5'::rb
      IL_000d:  ret
    } // end of method 'events_examples@412-5'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.EventArgs evArgs) cil managed
    {
      // Code size       37 (0x25)
      .maxstack  7
      .locals init ([0] class Class/ConcertEventArgs cea)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class Class/ConcertEventArgs>(object)
      IL_0007:  stloc.0
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
      IL_0008:  ldstr      "{0} is rockin' {1}"
      IL_000d:  ldarg.0
      IL_000e:  ldfld      class Class/RockBand Class/'events_examples@412-5'::rb
      IL_0013:  call       instance string Class/RockBand::get_Name()
      IL_0018:  ldloc.0
      IL_0019:  call       instance string Class/ConcertEventArgs::get_City()
      IL_001e:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object,
                                                                    object)
      IL_0023:  ldnull
      IL_0024:  ret
    } // end of method 'events_examples@412-5'::Invoke

  } // end of class 'events_examples@412-5'

  .class auto ansi serializable nested assembly beforefieldinit 'events_examples@406-6'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,bool>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,bool>::.ctor()
      IL_0006:  ret
    } // end of method 'events_examples@406-6'::.ctor

    .method public strict virtual instance bool 
            Invoke(class [mscorlib]System.EventArgs evArgs) cil managed
    {
      // Code size       28 (0x1c)
      .maxstack  6
      .locals init ([0] class Class/ConcertEventArgs cea)
//000407:                 let cea = evArgs :?> ConcertEventArgs
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::UnboxGeneric<class Class/ConcertEventArgs>(object)
      IL_0007:  stloc.0
//000408:                 if cea.City = "Sacramento" then false
      IL_0008:  ldloc.0
      IL_0009:  call       instance string Class/ConcertEventArgs::get_City()
      IL_000e:  ldstr      "Sacramento"
      IL_0013:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0018:  ldc.i4.0
      IL_0019:  ceq
      IL_001b:  ret
    } // end of method 'events_examples@406-6'::Invoke

  } // end of class 'events_examples@406-6'

  .class auto ansi serializable nested assembly beforefieldinit 'events_examples@404-7'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class Class/RockBand eventTarget
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class Class/RockBand eventTarget) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class Class/RockBand Class/'events_examples@404-7'::eventTarget
      IL_000d:  ret
    } // end of method 'events_examples@404-7'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.EventHandler eventDelegate) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  6
//000404:     rb.OnConcert 
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/RockBand Class/'events_examples@404-7'::eventTarget
      IL_0007:  ldarg.1
      IL_0008:  call       instance void Class/RockBand::add_OnConcert(class [mscorlib]System.EventHandler)
      IL_000d:  nop
      IL_000e:  ldnull
      IL_000f:  ret
    } // end of method 'events_examples@404-7'::Invoke

  } // end of class 'events_examples@404-7'

  .class auto ansi serializable nested assembly beforefieldinit 'events_examples@404-8'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .field public class Class/RockBand eventTarget
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname rtspecialname 
            instance void  .ctor(class Class/RockBand eventTarget) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventHandler,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      class Class/RockBand Class/'events_examples@404-8'::eventTarget
      IL_000d:  ret
    } // end of method 'events_examples@404-8'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(class [mscorlib]System.EventHandler eventDelegate) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  6
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Class/RockBand Class/'events_examples@404-8'::eventTarget
      IL_0007:  ldarg.1
      IL_0008:  call       instance void Class/RockBand::remove_OnConcert(class [mscorlib]System.EventHandler)
      IL_000d:  nop
      IL_000e:  ldnull
      IL_000f:  ret
    } // end of method 'events_examples@404-8'::Invoke

  } // end of class 'events_examples@404-8'

  .class auto autochar serializable sealed nested assembly beforefieldinit specialname 'events_examples@404-10'
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 06 00 00 00 00 00 ) 
    .field public class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback) cil managed
    {
      // Code size       14 (0xe)
      .maxstack  6
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  stfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> Class/'events_examples@404-10'::callback
      IL_0007:  ldarg.0
      IL_0008:  call       instance void [mscorlib]System.Object::.ctor()
      IL_000d:  ret
    } // end of method 'events_examples@404-10'::.ctor

    .method assembly instance void  Invoke(object sender,
                                           class [mscorlib]System.EventArgs e) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  7
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> Class/'events_examples@404-10'::callback
      IL_0007:  ldarg.1
      IL_0008:  ldarg.2
      IL_0009:  call       !!0 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [mscorlib]System.EventArgs>::InvokeFast<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!0,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!1,!!0>>,
                                                                                                                                                                                         !0,
                                                                                                                                                                                         !1)
      IL_000e:  pop
      IL_000f:  ret
    } // end of method 'events_examples@404-10'::Invoke

  } // end of class 'events_examples@404-10'

  .class auto ansi serializable nested assembly beforefieldinit 'events_examples@404-9'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,class [mscorlib]System.EventHandler>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,class [mscorlib]System.EventHandler>::.ctor()
      IL_0006:  ret
    } // end of method 'events_examples@404-9'::.ctor

    .method public strict virtual instance class [mscorlib]System.EventHandler 
            Invoke(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>> callback) cil managed
    {
      // Code size       19 (0x13)
      .maxstack  6
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  newobj     instance void Class/'events_examples@404-10'::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>)
      IL_0007:  ldftn      instance void Class/'events_examples@404-10'::Invoke(object,
                                                                                class [mscorlib]System.EventArgs)
      IL_000d:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                              native int)
      IL_0012:  ret
    } // end of method 'events_examples@404-9'::Invoke

  } // end of class 'events_examples@404-9'

  .class auto ansi serializable nested public Experiment
         extends [mscorlib]System.Object
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       10 (0xa)
      .maxstack  3
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  pop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method Experiment::.ctor

    .method public instance void  TestMethod(object[] args) cil managed
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       37 (0x25)
      .maxstack  4
      .locals init ([0] object[] V_0,
               [1] int32 V_1,
               [2] object o)
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  stloc.0
      IL_0003:  ldc.i4.0
      IL_0004:  stloc.1
      IL_0005:  br.s       IL_001e

      IL_0007:  ldloc.0
      IL_0008:  ldloc.1
      IL_0009:  ldelem     [mscorlib]System.Object
      IL_000e:  stloc.2
      IL_000f:  ldloc.2
      IL_0010:  callvirt   instance string [mscorlib]System.Object::ToString()
      IL_0015:  call       void [mscorlib]System.Console::WriteLine(string)
      IL_001a:  ldloc.1
      IL_001b:  ldc.i4.1
      IL_001c:  add
      IL_001d:  stloc.1
      IL_001e:  ldloc.1
      IL_001f:  ldloc.0
      IL_0020:  ldlen
      IL_0021:  conv.i4
      IL_0022:  blt.s      IL_0007

      IL_0024:  ret
    } // end of method Experiment::TestMethod

  } // end of class Experiment

  .method public static void  class_usage() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 11 42 61 73 69 63 20 63 6C 61 73 73 20 75   // ...Basic class u
                                                                        73 61 67 65 00 00 )                               // sage..
    // Code size       726 (0x2d6)
    .maxstack  7
    .locals init ([0] class Class/Person p1,
             [1] class Class/Person p2,
             [2] class Class/Person p3,
             [3] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Person> V_3,
             [4] class [mscorlib]System.Collections.Generic.IEnumerator`1<class Class/Person> V_4,
             [5] class [FSharp.Core]Microsoft.FSharp.Core.Unit V_5,
             [6] class Class/Person p,
             [7] class [mscorlib]System.IDisposable V_7,
             [8] class Class/Person p4,
             [9] class Class/Person V_9,
             [10] class Class/FlexiPerson p5,
             [11] class Class/FlexiPerson p6,
             [12] class Class/FlexiPerson V_12,
             [13] class Class/FlexiPerson p7,
             [14] class Class/FlexiPerson V_14,
             [15] class Class/OptiPerson op5,
             [16] class Class/OptiPerson op6,
             [17] class Class/OptiPerson op7,
             [18] string greeting,
             [19] string wwwww,
             [20] string alibi1,
             [21] string alibi2,
             [22] string alibi3,
             [23] class Class/Person T800,
             [24] class Class/Munchkin ted,
             [25] class Class/Item coolArmor,
             [26] class Class/Munchkin V_26,
             [27] class Class/Munchkin V_27,
             [28] class Class/Item V_28,
             [29] int32 compare,
             [30] class Class/Person V_30,
             [31] class Class/Person V_31)
//000225:     let p1 = new Person("Ted", "Neward", 38)
    IL_0000:  nop
    IL_0001:  ldstr      "Ted"
    IL_0006:  ldstr      "Neward"
    IL_000b:  ldc.i4.s   38
    IL_000d:  newobj     instance void Class/Person::.ctor(string,
                                                           string,
                                                           int32)
    IL_0012:  stloc.0
//000226:     let p2 = new Person("Aaron", "Erickson")
    IL_0013:  ldstr      "Aaron"
    IL_0018:  ldstr      "Erickson"
    IL_001d:  newobj     instance void Class/Person::.ctor(string,
                                                           string)
    IL_0022:  stloc.1
//000227:     let p3 = new Person()
    IL_0023:  newobj     instance void Class/Person::.ctor()
    IL_0028:  stloc.2
//000228:     for p in [p1; p2; p3] do
    IL_0029:  ldloc.0
    IL_002a:  ldloc.1
    IL_002b:  ldloc.2
    IL_002c:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Person>::get_Empty()
    IL_0031:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Person>::Cons(!0,
                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_0036:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Person>::Cons(!0,
                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_003b:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class Class/Person>::Cons(!0,
                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_0040:  stloc.3
    IL_0041:  ldloc.3
    IL_0042:  unbox.any  class [mscorlib]System.Collections.Generic.IEnumerable`1<class Class/Person>
    IL_0047:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class Class/Person>::GetEnumerator()
    IL_004c:  stloc.s    V_4
    .try
    {
      IL_004e:  ldloc.s    V_4
      IL_0050:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_0055:  brfalse.s  IL_0080

//000229:         System.Console.WriteLine("{0} is {1} years old",
      IL_0057:  ldloc.s    V_4
      IL_0059:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class Class/Person>::get_Current()
      IL_005e:  stloc.s    p
      IL_0060:  ldstr      "{0} is {1} years old"
      IL_0065:  ldloc.s    p
      IL_0067:  call       instance string Class/Person::get_FullName()
      IL_006c:  ldloc.s    p
      IL_006e:  call       instance int32 Class/Person::get_Age()
      IL_0073:  box        [mscorlib]System.Int32
      IL_0078:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object,
                                                                    object)
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
      IL_007d:  nop
      IL_007e:  br.s       IL_004e

      IL_0080:  ldnull
      IL_0081:  stloc.s    V_5
      IL_0083:  leave.s    IL_00a3

    }  // end .try
    finally
    {
      IL_0085:  ldloc.s    V_4
      IL_0087:  isinst     [mscorlib]System.IDisposable
      IL_008c:  stloc.s    V_7
      IL_008e:  ldloc.s    V_7
      IL_0090:  brfalse.s  IL_0094

      IL_0092:  br.s       IL_0096

      IL_0094:  br.s       IL_00a0

      IL_0096:  ldloc.s    V_7
      IL_0098:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_009d:  ldnull
      IL_009e:  pop
      IL_009f:  endfinally
      IL_00a0:  ldnull
      IL_00a1:  pop
      IL_00a2:  endfinally
    }  // end handler
    IL_00a3:  ldloc.s    V_5
    IL_00a5:  pop
//000231:     p1.Age <- p1.Age+1
    IL_00a6:  ldloc.0
    IL_00a7:  ldloc.0
    IL_00a8:  call       instance int32 Class/Person::get_Age()
    IL_00ad:  ldc.i4.1
    IL_00ae:  add
    IL_00af:  call       instance void Class/Person::set_Age(int32)
    IL_00b4:  nop
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
    IL_00b5:  ldstr      "Ted"
    IL_00ba:  ldstr      "Neward"
    IL_00bf:  newobj     instance void Class/Person::.ctor(string,
                                                           string)
    IL_00c4:  stloc.s    V_9
    IL_00c6:  ldloc.s    V_9
    IL_00c8:  ldc.i4.s   38
    IL_00ca:  call       instance void Class/Person::set_Age(int32)
    IL_00cf:  nop
    IL_00d0:  ldloc.s    V_9
    IL_00d2:  stloc.s    p4
//000233:     
//000234:     let p5 = new FlexiPerson()
    IL_00d4:  newobj     instance void Class/FlexiPerson::.ctor()
    IL_00d9:  stloc.s    p5
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
    IL_00db:  newobj     instance void Class/FlexiPerson::.ctor()
    IL_00e0:  stloc.s    V_12
    IL_00e2:  ldloc.s    V_12
    IL_00e4:  ldstr      "Ted"
    IL_00e9:  call       instance void Class/FlexiPerson::set_FirstName(string)
    IL_00ee:  nop
    IL_00ef:  ldloc.s    V_12
    IL_00f1:  stloc.s    p6
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
    IL_00f3:  newobj     instance void Class/FlexiPerson::.ctor()
    IL_00f8:  stloc.s    V_14
    IL_00fa:  ldloc.s    V_14
    IL_00fc:  ldstr      "Neward"
    IL_0101:  call       instance void Class/FlexiPerson::set_LastName(string)
    IL_0106:  nop
    IL_0107:  ldloc.s    V_14
    IL_0109:  ldc.i4.s   38
    IL_010b:  call       instance void Class/FlexiPerson::set_Age(int32)
    IL_0110:  nop
    IL_0111:  ldloc.s    V_14
    IL_0113:  stloc.s    p7
//000237:     let op5 = new OptiPerson()
    IL_0115:  ldnull
    IL_0116:  ldnull
    IL_0117:  ldnull
    IL_0118:  newobj     instance void Class/OptiPerson::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                               class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object>,
                                                               class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32>)
    IL_011d:  stloc.s    op5
//000238:     let op6 = new OptiPerson(firstName="Ted")
    IL_011f:  ldstr      "Ted"
    IL_0124:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_0129:  ldnull
    IL_012a:  ldnull
    IL_012b:  newobj     instance void Class/OptiPerson::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                               class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object>,
                                                               class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32>)
    IL_0130:  stloc.s    op6
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
    IL_0132:  ldstr      "Neward"
    IL_0137:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_013c:  ldnull
    IL_013d:  ldc.i4.s   38
    IL_013f:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32>::Some(!0)
    IL_0144:  newobj     instance void Class/OptiPerson::.ctor(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                               class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<object>,
                                                               class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<int32>)
    IL_0149:  stloc.s    op7
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
    IL_014b:  ldstr      "{0}'s heart says {1}"
    IL_0150:  ldloc.0
    IL_0151:  call       instance string Class/Person::get_FullName()
    IL_0156:  ldloc.0
    IL_0157:  ldstr      "Heart"
    IL_015c:  call       instance string Class/Person::get_Item(string)
    IL_0161:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object,
                                                                  object)
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
    IL_0166:  ldstr      "{0}'s heart says {1}"
    IL_016b:  ldloc.0
    IL_016c:  call       instance string Class/Person::get_FullName()
    IL_0171:  ldloc.0
    IL_0172:  ldstr      "Heart"
    IL_0177:  call       instance string Class/Person::get_Organ(string)
    IL_017c:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object,
                                                                  object)
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
    IL_0181:  ldloc.0
    IL_0182:  ldloc.1
    IL_0183:  ldstr      "Howdy!"
    IL_0188:  call       instance void Class/Person::Greet<string>(class Class/Person,
                                                                   !!0)
    IL_018d:  nop
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
    IL_018e:  ldloc.0
    IL_018f:  ldloc.1
    IL_0190:  ldstr      "Howdy!"
    IL_0195:  call       instance string Class/Person::CreateGreeting<string>(class Class/Person,
                                                                              !!0)
    IL_019a:  stloc.s    greeting
//000249:     System.Console.WriteLine(greeting)
    IL_019c:  ldloc.s    greeting
    IL_019e:  call       void [mscorlib]System.Console::WriteLine(string)
//000250:     p1.Greet(p2)
    IL_01a3:  ldloc.0
    IL_01a4:  ldloc.1
    IL_01a5:  call       instance void Class/Person::Greet(class Class/Person)
    IL_01aa:  nop
//000251:     
//000252:     let wwwww = 
    IL_01ab:  ldloc.0
    IL_01ac:  ldstr      "relaxing"
    IL_01b1:  ldstr      "in the sitting room"
    IL_01b6:  call       valuetype [mscorlib]System.DateTime [mscorlib]System.DateTime::get_Now()
    IL_01bb:  ldstr      "because I'm tired"
    IL_01c0:  call       instance string Class/Person::WhoWhatWhereWhenWhy<string,string,string>(!!0,
                                                                                                 !!1,
                                                                                                 valuetype [mscorlib]System.DateTime,
                                                                                                 !!2)
    IL_01c5:  stloc.s    wwwww
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
    IL_01c7:  ldloc.s    wwwww
    IL_01c9:  call       void [mscorlib]System.Console::WriteLine(string)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
    IL_01ce:  ldstr      "This is a message"
    IL_01d3:  ldc.i4.0
    IL_01d4:  newarr     [mscorlib]System.Object
    IL_01d9:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object[])
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
    IL_01de:  ldloc.0
    IL_01df:  ldstr      "relaxing"
    IL_01e4:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_01e9:  ldstr      "in the sitting room"
    IL_01ee:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_01f3:  call       valuetype [mscorlib]System.DateTime [mscorlib]System.DateTime::get_Now()
    IL_01f8:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>::Some(!0)
    IL_01fd:  ldstr      "because I'm tired"
    IL_0202:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_0207:  call       instance string Class/Person::Alibi(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>)
    IL_020c:  stloc.s    alibi1
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
    IL_020e:  ldloc.0
    IL_020f:  ldstr      "relaxing"
    IL_0214:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_0219:  ldstr      "in the sitting room"
    IL_021e:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_0223:  call       valuetype [mscorlib]System.DateTime [mscorlib]System.DateTime::get_Now()
    IL_0228:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>::Some(!0)
    IL_022d:  ldstr      "because I'm tired"
    IL_0232:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_0237:  call       instance string Class/Person::Alibi(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>)
    IL_023c:  stloc.s    alibi2
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
    IL_023e:  ldloc.0
    IL_023f:  ldstr      "relaxing"
    IL_0244:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_0249:  ldstr      "in the sitting room"
    IL_024e:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_0253:  call       valuetype [mscorlib]System.DateTime [mscorlib]System.DateTime::get_Now()
    IL_0258:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>::Some(!0)
    IL_025d:  ldstr      "because I'm tired"
    IL_0262:  call       class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<!0> class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>::Some(!0)
    IL_0267:  call       instance string Class/Person::Alibi(class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<valuetype [mscorlib]System.DateTime>,
                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpOption`1<string>)
    IL_026c:  stloc.s    alibi3
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
    IL_026e:  nop
//000272:         if Skynet.AfterJudgmentDay then
    IL_026f:  call       bool Class/Skynet::get_AfterJudgmentDay()
    IL_0274:  brfalse.s  IL_0278

    IL_0276:  br.s       IL_027a

    IL_0278:  br.s       IL_0282

//000273:             Skynet.CreateTerminator()
    IL_027a:  call       class Class/Person Class/Skynet::CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
    IL_027f:  nop
    IL_0280:  br.s       IL_0294

//000275:             new Person("Arnold", "Schwarzenegger", 50)
    IL_0282:  ldstr      "Arnold"
    IL_0287:  ldstr      "Schwarzenegger"
    IL_028c:  ldc.i4.s   50
    IL_028e:  newobj     instance void Class/Person::.ctor(string,
                                                           string,
                                                           int32)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
    IL_0293:  nop
    IL_0294:  stloc.s    T800
//000277:     let ted = new Munchkin(1)
    IL_0296:  ldc.i4.1
    IL_0297:  newobj     instance void Class/Munchkin::.ctor(int32)
    IL_029c:  stloc.s    ted
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
    IL_029e:  ldstr      "Functional Plate"
    IL_02a3:  call       class Class/Location Class/Location::get_Armor()
    IL_02a8:  ldc.i4.5
    IL_02a9:  ldc.i4.0
    IL_02aa:  newobj     instance void Class/Item::.ctor(string,
                                                         class Class/Location,
                                                         int32,
                                                         int32)
    IL_02af:  stloc.s    coolArmor
//000279:     let ted = ted <<== coolArmor
    IL_02b1:  ldloc.s    ted
    IL_02b3:  stloc.s    V_27
    IL_02b5:  ldloc.s    coolArmor
    IL_02b7:  stloc.s    V_28
    IL_02b9:  ldloc.s    V_27
    IL_02bb:  ldloc.s    V_28
    IL_02bd:  call       class Class/Munchkin Class/Munchkin::op_LessLessEqualsEquals(class Class/Munchkin,
                                                                                      class Class/Item)
    IL_02c2:  stloc.s    V_26
//000280:     
//000281:     let compare = p1 <==> p2
    IL_02c4:  ldloc.0
    IL_02c5:  stloc.s    V_30
    IL_02c7:  ldloc.1
    IL_02c8:  stloc.s    V_31
    IL_02ca:  ldloc.s    V_30
    IL_02cc:  ldloc.s    V_31
    IL_02ce:  call       int32 Class/Person::op_LessEqualsEqualsGreater(class Class/Person,
                                                                        class Class/Person)
    IL_02d3:  stloc.s    compare
//000282: 
//000283:     ()
    IL_02d5:  ret
  } // end of method Class::class_usage

  .method public static bool  String.get_IsUpper(string A_0) cil managed
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationArgumentCountsAttribute::.ctor(int32[]) = ( 01 00 02 00 00 00 01 00 00 00 00 00 00 00 00 00 ) 
    // Code size       14 (0xe)
    .maxstack  4
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance string [mscorlib]System.String::ToUpper()
    IL_0007:  ldarg.0
    IL_0008:  call       bool [mscorlib]System.String::Equals(string,
                                                              string)
    IL_000d:  ret
  } // end of method Class::String.get_IsUpper

  .method public static void  typeExtensionExample() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 14 54 79 70 65 20 65 78 74 65 6E 73 69 6F   // ...Type extensio
                                                                        6E 20 75 73 61 67 65 00 00 )                      // n usage..
    // Code size       18 (0x12)
    .maxstack  4
    .locals init ([0] class Class/Student ted)
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
    IL_0000:  nop
    IL_0001:  ldstr      "Ted"
    IL_0006:  ldstr      "International Relations"
    IL_000b:  newobj     instance void Class/Student::.ctor(string,
                                                            string)
    IL_0010:  stloc.0
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
    IL_0011:  ret
  } // end of method Class::typeExtensionExample

  .method public static void  events_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
    // Code size       252 (0xfc)
    .maxstack  7
    .locals init ([0] class [mscorlib]System.AppDomain ad,
             [1] class [mscorlib]System.AppDomain V_1,
             [2] class Class/Child c,
             [3] class Class/Notify np,
             [4] string response,
             [5] class Class/DelegateTarget dt,
             [6] class Class/CurriedDelegate cd1,
             [7] class Class/TupledDelegate td1,
             [8] class Class/RockBand rb,
             [9] class Class/RockBand V_9,
             [10] class Class/Fan f1,
             [11] class Class/Fan f2,
             [12] class Class/Fan f3)
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
    IL_0000:  nop
    IL_0001:  call       class [mscorlib]System.AppDomain [mscorlib]System.AppDomain::get_CurrentDomain()
    IL_0006:  stloc.0
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
    IL_0007:  ldloc.0
    IL_0008:  stloc.1
    IL_0009:  ldloc.1
    IL_000a:  newobj     instance void Class/events_examples@390::.ctor(class [mscorlib]System.AppDomain)
    IL_000f:  ldloc.1
    IL_0010:  newobj     instance void Class/'events_examples@390-1'::.ctor(class [mscorlib]System.AppDomain)
    IL_0015:  newobj     instance void Class/'events_examples@390-2'::.ctor()
    IL_001a:  call       class [FSharp.Core]Microsoft.FSharp.Control.IEvent`2<!!0,!!1> [FSharp.Core]Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers::CreateEvent<class [mscorlib]System.EventHandler,class [mscorlib]System.EventArgs>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>,
                                                                                                                                                                                                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>,
                                                                                                                                                                                                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!1,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,!!0>)
    IL_001f:  newobj     instance void Class/'events_examples@390-4'::.ctor()
    IL_0024:  call       void [FSharp.Core]Microsoft.FSharp.Control.CommonExtensions::AddToObservable<class [mscorlib]System.EventArgs>(class [FSharp.Core]System.IObservable`1<!!0>,
                                                                                                                                        class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>)
    IL_0029:  nop
//000391: 
//000392:     let c = new Child()
    IL_002a:  newobj     instance void Class/Child::.ctor()
    IL_002f:  stloc.2
//000393:     let np = new Notify(c.Respond)
    IL_0030:  ldloc.2
    IL_0031:  newobj     instance void Class/np@393::.ctor(class Class/Child)
    IL_0036:  ldftn      instance string Class/np@393::Invoke(string)
    IL_003c:  newobj     instance void Class/Notify::.ctor(object,
                                                           native int)
    IL_0041:  stloc.3
//000394:     let response = np.Invoke("Clean your room!")
    IL_0042:  ldloc.3
    IL_0043:  ldstr      "Clean your room!"
    IL_0048:  callvirt   instance string Class/Notify::Invoke(string)
    IL_004d:  stloc.s    response
//000395:     System.Console.WriteLine(response)
    IL_004f:  ldloc.s    response
    IL_0051:  call       void [mscorlib]System.Console::WriteLine(string)
//000396:     
//000397:     let dt = new DelegateTarget()
    IL_0056:  newobj     instance void Class/DelegateTarget::.ctor()
    IL_005b:  stloc.s    dt
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
    IL_005d:  ldloc.s    dt
    IL_005f:  newobj     instance void Class/cd1@398::.ctor(class Class/DelegateTarget)
    IL_0064:  ldftn      instance int32 Class/cd1@398::Invoke(int32,
                                                              int32)
    IL_006a:  newobj     instance void Class/CurriedDelegate::.ctor(object,
                                                                    native int)
    IL_006f:  stloc.s    cd1
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
    IL_0071:  ldloc.s    dt
    IL_0073:  newobj     instance void Class/td1@400::.ctor(class Class/DelegateTarget)
    IL_0078:  ldftn      instance int32 Class/td1@400::Invoke(class [FSharp.Core]System.Tuple`2<int32,int32>)
    IL_007e:  newobj     instance void Class/TupledDelegate::.ctor(object,
                                                                   native int)
    IL_0083:  stloc.s    td1
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
    IL_0085:  ldstr      "The Functional Ya-Yas"
    IL_008a:  newobj     instance void Class/RockBand::.ctor(string)
    IL_008f:  stloc.s    rb
//000404:     rb.OnConcert 
    IL_0091:  ldloc.s    rb
    IL_0093:  newobj     instance void Class/'events_examples@412-5'::.ctor(class Class/RockBand)
    IL_0098:  newobj     instance void Class/'events_examples@406-6'::.ctor()
    IL_009d:  ldloc.s    rb
    IL_009f:  stloc.s    V_9
    IL_00a1:  ldloc.s    V_9
    IL_00a3:  newobj     instance void Class/'events_examples@404-7'::.ctor(class Class/RockBand)
    IL_00a8:  ldloc.s    V_9
    IL_00aa:  newobj     instance void Class/'events_examples@404-8'::.ctor(class Class/RockBand)
    IL_00af:  newobj     instance void Class/'events_examples@404-9'::.ctor()
    IL_00b4:  call       class [FSharp.Core]Microsoft.FSharp.Control.IEvent`2<!!0,!!1> [FSharp.Core]Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers::CreateEvent<class [mscorlib]System.EventHandler,class [mscorlib]System.EventArgs>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>,
                                                                                                                                                                                                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>,
                                                                                                                                                                                                                                             class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!1,class [FSharp.Core]Microsoft.FSharp.Core.Unit>>,!!0>)
    IL_00b9:  call       class [FSharp.Core]Microsoft.FSharp.Control.IEvent`2<class [FSharp.Core]Microsoft.FSharp.Control.FSharpHandler`1<!!0>,!!0> [FSharp.Core]Microsoft.FSharp.Control.EventModule::Filter<class [mscorlib]System.EventArgs,class [mscorlib]System.EventHandler>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,bool>,
                                                                                                                                                                                                                                                                                    class [FSharp.Core]Microsoft.FSharp.Control.IEvent`2<!!1,!!0>)
    IL_00be:  call       void [FSharp.Core]Microsoft.FSharp.Control.EventModule::Add<class [mscorlib]System.EventArgs,class [FSharp.Core]Microsoft.FSharp.Control.FSharpHandler`1<class [mscorlib]System.EventArgs>>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit>,
                                                                                                                                                                                                                     class [FSharp.Core]Microsoft.FSharp.Control.IEvent`2<!!1,!!0>)
    IL_00c3:  nop
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
    IL_00c4:  ldstr      "Detroit"
    IL_00c9:  ldloc.s    rb
    IL_00cb:  newobj     instance void Class/Fan::.ctor(string,
                                                        class Class/RockBand)
    IL_00d0:  stloc.s    f1
//000417:     let f2 = new Fan("Cleveland", rb)
    IL_00d2:  ldstr      "Cleveland"
    IL_00d7:  ldloc.s    rb
    IL_00d9:  newobj     instance void Class/Fan::.ctor(string,
                                                        class Class/RockBand)
    IL_00de:  stloc.s    f2
//000418:     let f3 = new Fan("Detroit", rb)
    IL_00e0:  ldstr      "Detroit"
    IL_00e5:  ldloc.s    rb
    IL_00e7:  newobj     instance void Class/Fan::.ctor(string,
                                                        class Class/RockBand)
    IL_00ec:  stloc.s    f3
//000419:     rb.HoldConcert("Detroit")
    IL_00ee:  ldloc.s    rb
    IL_00f0:  ldstr      "Detroit"
    IL_00f5:  call       instance void Class/RockBand::HoldConcert(string)
    IL_00fa:  nop
//000420: 
//000421:     ()
    IL_00fb:  ret
  } // end of method Class::events_examples

  .method public specialname static class Class/Experiment 
          get_e() cil managed
  {
    // Code size       6 (0x6)
    .maxstack  4
    IL_0000:  ldsfld     class Class/Experiment '<StartupCode$Objects>'.$Class::e@434
    IL_0005:  ret
  } // end of method Class::get_e

  .method public static void  varargsFunction(object[] args) cil managed
  {
    .param [1]
    .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       37 (0x25)
    .maxstack  4
    .locals init ([0] object[] V_0,
             [1] int32 V_1,
             [2] object o)
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
//000435: e.TestMethod("one", 2, 3.0)
//000436: e.TestMethod("This is just one argument")
//000437: e.TestMethod() // No arguments, empty array
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  stloc.0
    IL_0003:  ldc.i4.0
    IL_0004:  stloc.1
    IL_0005:  br.s       IL_001e

    IL_0007:  ldloc.0
    IL_0008:  ldloc.1
    IL_0009:  ldelem     [mscorlib]System.Object
    IL_000e:  stloc.2
    IL_000f:  ldloc.2
    IL_0010:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0015:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_001a:  ldloc.1
    IL_001b:  ldc.i4.1
    IL_001c:  add
    IL_001d:  stloc.1
    IL_001e:  ldloc.1
    IL_001f:  ldloc.0
    IL_0020:  ldlen
    IL_0021:  conv.i4
    IL_0022:  blt.s      IL_0007

    IL_0024:  ret
  } // end of method Class::varargsFunction

  .method assembly static void  privateFunction() cil managed
  {
    // Code size       18 (0x12)
    .maxstack  3
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
    IL_0000:  nop
    IL_0001:  ldstr      "You can't call me!"
    IL_0006:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5<class [FSharp.Core]Microsoft.FSharp.Core.Unit,class [mscorlib]System.IO.TextWriter,class [FSharp.Core]Microsoft.FSharp.Core.Unit,class [FSharp.Core]Microsoft.FSharp.Core.Unit,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor(string)
    IL_000b:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.ExtraTopLevelOperators::PrintFormatLine<class [FSharp.Core]Microsoft.FSharp.Core.Unit>(class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4<!!0,class [mscorlib]System.IO.TextWriter,class [FSharp.Core]Microsoft.FSharp.Core.Unit,class [FSharp.Core]Microsoft.FSharp.Core.Unit>)
    IL_0010:  pop
    IL_0011:  ret
  } // end of method Class::privateFunction

  .method public static int32  f(int32 x) cil managed
  {
    // Code size       5 (0x5)
    .maxstack  4
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  add
    IL_0004:  ret
  } // end of method Class::f

  .method public static !!b  fi<a,b>(!!a x) cil managed
  {
    // Code size       13 (0xd)
    .maxstack  4
    .locals init ([0] !!a V_0,
             [1] !!a V_1)
//000451: 
//000452: let inline fi x = x + x
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  stloc.0
    IL_0003:  ldarg.0
    IL_0004:  stloc.1
    IL_0005:  ldloc.0
    IL_0006:  ldloc.1
    IL_0007:  call       !!2 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::AdditionDynamic<!!0,!!0,!!1>(!!0,
                                                                                                                 !!1)
    IL_000c:  ret
  } // end of method Class::fi

  .method public specialname static string 
          get_r() cil managed
  {
    // Code size       6 (0x6)
    .maxstack  4
    IL_0000:  ldsfld     string '<StartupCode$Objects>'.$Class::r@454
    IL_0005:  ret
  } // end of method Class::get_r

  .property class Class/Experiment e()
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 09 00 00 00 00 00 ) 
    .get class Class/Experiment Class::get_e()
  } // end of property Class::e
  .property string r()
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 09 00 00 00 00 00 ) 
    .get string Class::get_r()
  } // end of property Class::r
} // end of class Class

.class private abstract auto ansi sealed '<StartupCode$Objects>'.$Class
       extends [mscorlib]System.Object
{
  .field static assembly initonly class Class/Experiment e@434
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field static assembly initonly string r@454
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field static assembly int32 init@
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       154 (0x9a)
    .maxstack  7
    .locals init ([0] class Class/Experiment e,
             [1] string r,
             [2] int64 humansKilled,
             [3] string V_3)
//000149:     static let humansKilled = 3000000000L
    IL_0000:  nop
    IL_0001:  ldc.i8     0xb2d05e00
    IL_000a:  stloc.2
//000139: type Skynet() =
    IL_000b:  nop
//000140:     [<DefaultValue>]
//000141:     static val mutable private terminatorsBuilt : int64
//000142:     static member CreateTerminator() = 
//000143:         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
//000144:         new Person("T", "800", 0)
//000145:     static member AfterJudgmentDay 
//000146:         with get() = 
//000147:             let jd = new System.DateTime(1997, 8, 29)
//000148:             System.DateTime.Now.ToBinary() > jd.ToBinary()
//000149:     static let humansKilled = 3000000000L
//000150: 
//000151: 
//000152: 
//000153: [<Class>]
//000154: type Complex(r : int32, i : int32) =
//000155:     member c.R = r
//000156:     member c.I = i
//000157:     static member (+) (c1 : Complex, c2 : Complex) =
//000158:         new Complex(c1.R + c2.R, c1.I + c2.I)
//000159:     static member (-) (c1 : Complex, c2 : Complex) =
//000160:         new Complex(c1.R - c2.R, c1.I - c2.I)
//000161:     static member (~-) (c : Complex) =
//000162:         new Complex(-(c.R), c.I)
//000163: 
//000164: [<Class>]
//000165: type PrivatePerson private(fn, ln, a) =
//000166:     private new() = PrivatePerson("", "", 0)
//000167:     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
//000168:     static member Create() = new PrivatePerson()
//000169: 
//000170: 
//000171: 
//000172: type Location =
//000173:     | Headgear
//000174:     | Footwear
//000175:     | Armor
//000176:     | OneHanded
//000177:     | TwoHanded
//000178:     | None
//000179: 
//000180: [<Class>]
//000181: type Item(name : string, loc : Location, 
//000182:                   bonus : int32, GPValue : int32) =
//000183:     member mi.Name = name
//000184:     member mi.Bonus = bonus
//000185:     member mi.Location = loc
//000186:     override mi.ToString() =
//000187:         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
//000188:     
//000189: [<Class>]
//000190: type Munchkin(level : int32, items : Item list) =
//000191:     let mutable armor : Item = 
//000192:         new Item("Clothes of Ineptitude", Armor, 0, 0)
//000193:     let mutable headgear : Item =
//000194:         new Item("Hair", Headgear, 0, 0)
//000195:     let mutable footwear : Item =
//000196:         new Item("Bare Feet", Footwear, 0, 0)
//000197:     let mutable miscItems : Item list = []
//000198:     do
//000199:         List.iter
//000200:             (fun (it : Item) ->
//000201:                 match it.Location with
//000202:                 | Armor -> armor <- it
//000203:                 | Headgear -> headgear <- it
//000204:                 | Footwear -> footwear <- it
//000205:                 | None -> miscItems <- it :: miscItems
//000206:                 | _ -> failwith "E_NOTIMPL"
//000207:             )
//000208:             items
//000209:     new() = Munchkin(1, [])
//000210:     new(level : int32) = Munchkin(level, [])
//000211:     member m.Level
//000212:         with get() = level
//000213:     member m.Items
//000214:         with get() = [ armor; headgear; footwear ] @ miscItems
//000215:     member m.TotalBonus =
//000216:         level + (List.sumBy (fun (it : Item) -> it.Bonus) m.Items)
//000217:     static member (<<==) (m : Munchkin, mi : Item) =
//000218:         new Munchkin( m.Level, mi :: m.Items )
//000219:     static member (~+) (m: Munchkin) =
//000220:         new Munchkin( m.Level + 1, m.Items)
//000221: 
//000222: 
//000223: [<Example("Basic class usage")>]
//000224: let class_usage() =
//000225:     let p1 = new Person("Ted", "Neward", 38)
//000226:     let p2 = new Person("Aaron", "Erickson")
//000227:     let p3 = new Person()
//000228:     for p in [p1; p2; p3] do
//000229:         System.Console.WriteLine("{0} is {1} years old",
//000230:             p.FullName, p.Age)
//000231:     p1.Age <- p1.Age+1
//000232:     let p4 = new Person("Ted", "Neward", Age = 38)
//000233:     
//000234:     let p5 = new FlexiPerson()
//000235:     let p6 = new FlexiPerson(FirstName="Ted")
//000236:     let p7 = new FlexiPerson(LastName="Neward", Age=38)
//000237:     let op5 = new OptiPerson()
//000238:     let op6 = new OptiPerson(firstName="Ted")
//000239:     let op7 = new OptiPerson(firstName="Neward", age=38)
//000240:     
//000241:     System.Console.WriteLine("{0}'s heart says {1}",
//000242:         p1.FullName, p1.["Heart"])
//000243:     
//000244:     System.Console.WriteLine("{0}'s heart says {1}",
//000245:         p1.FullName, p1.Organ("Heart"))
//000246:     
//000247:     p1.Greet(p2, "Howdy!")
//000248:     let greeting = p1.CreateGreeting(p2, "Howdy!")
//000249:     System.Console.WriteLine(greeting)
//000250:     p1.Greet(p2)
//000251:     
//000252:     let wwwww = 
//000253:         p1.WhoWhatWhereWhenWhy(
//000254:             whenn=System.DateTime.Now,
//000255:             where="in the sitting room",
//000256:             what="relaxing",
//000257:             why="because I'm tired")
//000258:     System.Console.WriteLine(wwwww)
//000259:     
//000260:     System.Console.WriteLine(arg=[||], format="This is a message")
//000261:     
//000262:     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
//000263:                     System.DateTime.Now, "because I'm tired")
//000264:     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
//000265:                     why="because I'm tired",
//000266:                     whenn=System.DateTime.Now)
//000267:     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
//000268:                     ?why=Some("because I'm tired"),
//000269:                     whenn=System.DateTime.Now)
//000270:     
//000271:     let T800 = 
//000272:         if Skynet.AfterJudgmentDay then
//000273:             Skynet.CreateTerminator()
//000274:         else
//000275:             new Person("Arnold", "Schwarzenegger", 50)
//000276:             
//000277:     let ted = new Munchkin(1)
//000278:     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
//000279:     let ted = ted <<== coolArmor
//000280:     
//000281:     let compare = p1 <==> p2
//000282: 
//000283:     ()
//000284: 
//000285: 
//000286: [<Class>]
//000287: type Student(name : string, subject : string) =
//000288:     member s.Name = name
//000289:     member s.Subject = subject
//000290: 
//000291: type Student with
//000292:     new() = Student("", "")
//000293:     new(name, subject, school) = 
//000294:         Student(name, subject)
//000295:     member s.FullDescription = s.Name + " " + s.Subject
//000296: 
//000297: type System.String with
//000298:     member s.IsUpper =
//000299:         s.ToUpper() = s
//000300: 
//000301: 
//000302: [<Example("Type extension usage")>]
//000303: let typeExtensionExample() =
//000304:     let ted = 
//000305:         new Student("Ted", "International Relations")
//000306: 
//000307:     ()
//000308: 
//000309: 
//000310: // ======================== Access Modifiers
//000311: 
//000312: [<Class>]
//000313: type private Sport(name) =
//000314:     member private p.Rules
//000315:         with get() = ""
//000316: 
//000317: [<Class>]
//000318: type (* public *) ExampleClass(field1 : string) =
//000319:     [<DefaultValue>]
//000320:     val mutable (* private *) valField : string
//000321: 
//000322:     // Always private
//000323:     let mutable mutField2 = "Changeable"
//000324:     let helper = field1 + ", helped"
//000325: 
//000326:     (* public *)
//000327:     new () =
//000328:         ExampleClass("")
//000329: 
//000330:     member (* public *) e.Property 
//000331:         with (* public *) get() = field1
//000332:     member (* public *) e.ReadWriteProp
//000333:         with (* public *) get() = mutField2
//000334:         and (* public *) set(value) = mutField2 <- value
//000335: 
//000336: 
//000337: // ======================== Delegates and Events
//000338: 
//000339: type Watcher() =
//000340:     static member GoingAway(args : System.EventArgs) =
//000341:         System.Console.WriteLine("Going away now....")
//000342: 
//000343: type Notify = delegate of string -> string
//000344: 
//000345: type Child() =
//000346:     member this.Respond(msg : string) =
//000347:         System.Console.WriteLine("You want me to {0}? No!")
//000348:         "No!"
//000349: 
//000350: type CurriedDelegate = delegate of int * int -> int
//000351: type TupledDelegate = delegate of (int * int) -> int
//000352: type DelegateTarget() =
//000353:     member this.CurriedAdd (x : int) (y : int) = x + y
//000354:     member this.TupledAdd (x : int, y : int) = x + y
//000355: 
//000356: type ConcertEventArgs(city : string) =
//000357:     inherit System.EventArgs()
//000358:     member cea.City = city
//000359:     override cea.ToString() =
//000360:         System.String.Format("city:{0}", city)
//000361:     
//000362: type RockBand(name : string) =
//000363:     let concertEvent = new DelegateEvent<System.EventHandler>()
//000364: 
//000365:     member rb.Name = name
//000366: 
//000367:     [<CLIEvent>]
//000368:     member rb.OnConcert = concertEvent.Publish
//000369:     member rb.HoldConcert(city : string) =
//000370:         concertEvent.Trigger([| rb; 
//000371:             new ConcertEventArgs(city) |])
//000372:         System.Console.WriteLine("Rockin' {0}!")
//000373: 
//000374: type Fan(home : string, favBand : RockBand) as f =
//000375:     do
//000376:         favBand.OnConcert.AddHandler(
//000377:             System.EventHandler(f.FavoriteBandComingToTown))
//000378:     member f.FavoriteBandComingToTown 
//000379:             (_ : obj) 
//000380:             (args : System.EventArgs) =
//000381:         let cea = args :?> ConcertEventArgs
//000382:         if home = cea.City then
//000383:             System.Console.WriteLine("I'm SO going!")
//000384:         else
//000385:             System.Console.WriteLine("Darn")
//000386: 
//000387: [<Example("")>]
//000388: let events_examples() =
//000389:     let ad = System.AppDomain.CurrentDomain
//000390:     ad.ProcessExit.Add(Watcher.GoingAway)
//000391: 
//000392:     let c = new Child()
//000393:     let np = new Notify(c.Respond)
//000394:     let response = np.Invoke("Clean your room!")
//000395:     System.Console.WriteLine(response)
//000396:     
//000397:     let dt = new DelegateTarget()
//000398:     let cd1 = new CurriedDelegate(dt.CurriedAdd)
//000399:     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
//000400:     let td1 = new TupledDelegate(dt.TupledAdd)
//000401:     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
//000402:     
//000403:     let rb = new RockBand("The Functional Ya-Yas")
//000404:     rb.OnConcert 
//000405:         |> Event.filter 
//000406:             (fun evArgs ->
//000407:                 let cea = evArgs :?> ConcertEventArgs
//000408:                 if cea.City = "Sacramento" then false
//000409:                     // Nobody wants to tour in Sacramento
//000410:                 else true)
//000411:         |> Event.add
//000412:             (fun evArgs ->
//000413:                 let cea = evArgs :?> ConcertEventArgs
//000414:                 System.Console.WriteLine("{0} is rockin' {1}",
//000415:                     rb.Name, cea.City))
//000416:     let f1 = new Fan("Detroit", rb)
//000417:     let f2 = new Fan("Cleveland", rb)
//000418:     let f3 = new Fan("Detroit", rb)
//000419:     rb.HoldConcert("Detroit")
//000420: 
//000421:     ()
//000422: 
//000423: 
//000424: 
//000425: 
//000426: 
//000427: // ======================== Experiments; not for publication
//000428: 
//000429: type Experiment() =
//000430:     member e.TestMethod( [<System.ParamArray>] args : obj array) =
//000431:         for o in args do
//000432:             System.Console.WriteLine(o.ToString())
//000433: 
//000434: let e = new Experiment()
    IL_000c:  newobj     instance void Class/Experiment::.ctor()
    IL_0011:  dup
    IL_0012:  stsfld     class Class/Experiment '<StartupCode$Objects>'.$Class::e@434
    IL_0017:  stloc.0
//000435: e.TestMethod("one", 2, 3.0)
    IL_0018:  call       class Class/Experiment Class::get_e()
    IL_001d:  ldc.i4.3
    IL_001e:  newarr     [mscorlib]System.Object
    IL_0023:  dup
    IL_0024:  ldc.i4.0
    IL_0025:  ldstr      "one"
    IL_002a:  stelem     [mscorlib]System.Object
    IL_002f:  dup
    IL_0030:  ldc.i4.1
    IL_0031:  ldc.i4.2
    IL_0032:  box        [mscorlib]System.Int32
    IL_0037:  stelem     [mscorlib]System.Object
    IL_003c:  dup
    IL_003d:  ldc.i4.2
    IL_003e:  ldc.r8     3.
    IL_0047:  box        [mscorlib]System.Double
    IL_004c:  stelem     [mscorlib]System.Object
    IL_0051:  call       instance void Class/Experiment::TestMethod(object[])
    IL_0056:  nop
//000436: e.TestMethod("This is just one argument")
    IL_0057:  call       class Class/Experiment Class::get_e()
    IL_005c:  ldc.i4.1
    IL_005d:  newarr     [mscorlib]System.Object
    IL_0062:  dup
    IL_0063:  ldc.i4.0
    IL_0064:  ldstr      "This is just one argument"
    IL_0069:  stelem     [mscorlib]System.Object
    IL_006e:  call       instance void Class/Experiment::TestMethod(object[])
    IL_0073:  nop
//000437: e.TestMethod() // No arguments, empty array
    IL_0074:  call       class Class/Experiment Class::get_e()
    IL_0079:  ldc.i4.0
    IL_007a:  newarr     [mscorlib]System.Object
    IL_007f:  call       instance void Class/Experiment::TestMethod(object[])
    IL_0084:  nop
//000438: 
//000439: let varargsFunction([<System.ParamArray>] args : obj array) =
//000440:     for o in args do
//000441:         System.Console.WriteLine(o.ToString())
//000442: 
//000443: let private privateFunction() =
//000444:     printfn "You can't call me!"
//000445:         
//000446: //varargsFunction("one", 2, 3.0)
//000447: // error: This expression was expected to have type obj array
//000448: // but here has type 'a * 'b * 'c
//000449: 
//000450: let f x = x + x
//000451: 
//000452: let inline fi x = x + x
//000453: 
//000454: let r = fi "Hello"
    IL_0085:  ldstr      "Hello"
    IL_008a:  stloc.3
    IL_008b:  ldloc.3
    IL_008c:  ldloc.3
    IL_008d:  call       string [mscorlib]System.String::Concat(string,
                                                                string)
    IL_0092:  dup
    IL_0093:  stsfld     string '<StartupCode$Objects>'.$Class::r@454
    IL_0098:  stloc.1
    IL_0099:  ret
  } // end of method $Class::.cctor

} // end of class '<StartupCode$Objects>'.$Class

.class public abstract auto ansi sealed ComplexCompositeTypes
       extends [mscorlib]System.Object
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
  .class auto ansi serializable sealed nested public Soda
         extends [mscorlib]System.Enum
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field public specialname rtspecialname int32 value__
    .field public static literal valuetype ComplexCompositeTypes/Soda Coke = int32(0x00000001)
    .field public static literal valuetype ComplexCompositeTypes/Soda DietCoke = int32(0x00000002)
    .field public static literal valuetype ComplexCompositeTypes/Soda SevenUp = int32(0x00000003)
  } // end of class Soda

  .class auto ansi serializable sealed nested public SuicideSoda
         extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field public specialname rtspecialname int32 value__
    .field public static literal valuetype ComplexCompositeTypes/SuicideSoda Coke = int32(0x00000001)
    .field public static literal valuetype ComplexCompositeTypes/SuicideSoda DietCoke = int32(0x00000002)
    .field public static literal valuetype ComplexCompositeTypes/SuicideSoda SevenUp = int32(0x00000004)
    .field public static literal valuetype ComplexCompositeTypes/SuicideSoda Grenadine = int32(0x00000008)
  } // end of class SuicideSoda

  .class auto autochar serializable nested public beforefieldinit Color
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/Color>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class ComplexCompositeTypes/Color>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                   61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 01 00 00 00 00 00 ) 
    .class abstract auto ansi sealed nested public Tags
           extends [mscorlib]System.Object
    {
      .field public static literal int32 RGB = int32(0x00000000)
      .field public static literal int32 CMYK = int32(0x00000001)
      .field public static literal int32 Black = int32(0x00000002)
      .field public static literal int32 Blue = int32(0x00000003)
      .field public static literal int32 Green = int32(0x00000004)
      .field public static literal int32 Red = int32(0x00000005)
      .field public static literal int32 White = int32(0x00000006)
      .field public static literal int32 Cyan = int32(0x00000007)
      .field public static literal int32 Gray = int32(0x00000008)
    } // end of class Tags

    .class auto ansi serializable nested public beforefieldinit specialname RGB
           extends ComplexCompositeTypes/Color
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerTypeProxyAttribute::.ctor(class [mscorlib]System.Type) = ( 01 00 2E 43 6F 6D 70 6C 65 78 43 6F 6D 70 6F 73   // ...ComplexCompos
                                                                                                                            69 74 65 54 79 70 65 73 2B 43 6F 6C 6F 72 2B 52   // iteTypes+Color+R
                                                                                                                            47 42 40 44 65 62 75 67 54 79 70 65 50 72 6F 78   // GB@DebugTypeProx
                                                                                                                            79 00 00 )                                        // y..
      .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                     61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
      .field assembly initonly int32 item1
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .field assembly initonly int32 item2
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .field assembly initonly int32 item3
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method assembly specialname rtspecialname 
              instance void  .ctor(int32 item1,
                                   int32 item2,
                                   int32 item3) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       29 (0x1d)
        .maxstack  2
        IL_0000:  ldarg.0
        IL_0001:  ldc.i4.0
        IL_0002:  call       instance void ComplexCompositeTypes/Color::.ctor(int32)
        IL_0007:  ldarg.0
        IL_0008:  ldarg.1
        IL_0009:  stfld      int32 ComplexCompositeTypes/Color/RGB::item1
        IL_000e:  ldarg.0
        IL_000f:  ldarg.2
        IL_0010:  stfld      int32 ComplexCompositeTypes/Color/RGB::item2
        IL_0015:  ldarg.0
        IL_0016:  ldarg.3
        IL_0017:  stfld      int32 ComplexCompositeTypes/Color/RGB::item3
        IL_001c:  ret
      } // end of method RGB::.ctor

      .method public instance int32  get_Item1() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
        IL_0006:  ret
      } // end of method RGB::get_Item1

      .method public instance int32  get_Item2() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
        IL_0006:  ret
      } // end of method RGB::get_Item2

      .method public instance int32  get_Item3() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
        IL_0006:  ret
      } // end of method RGB::get_Item3

      .property instance int32 Item1()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/RGB::get_Item1()
      } // end of property RGB::Item1
      .property instance int32 Item2()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 01 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/RGB::get_Item2()
      } // end of property RGB::Item2
      .property instance int32 Item3()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 02 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/RGB::get_Item3()
      } // end of property RGB::Item3
    } // end of class RGB

    .class auto ansi serializable nested public beforefieldinit specialname CMYK
           extends ComplexCompositeTypes/Color
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerTypeProxyAttribute::.ctor(class [mscorlib]System.Type) = ( 01 00 2F 43 6F 6D 70 6C 65 78 43 6F 6D 70 6F 73   // ../ComplexCompos
                                                                                                                            69 74 65 54 79 70 65 73 2B 43 6F 6C 6F 72 2B 43   // iteTypes+Color+C
                                                                                                                            4D 59 4B 40 44 65 62 75 67 54 79 70 65 50 72 6F   // MYK@DebugTypePro
                                                                                                                            78 79 00 00 )                                     // xy..
      .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                     61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
      .field assembly initonly int32 item1
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .field assembly initonly int32 item2
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .field assembly initonly int32 item3
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .field assembly initonly int32 item4
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method assembly specialname rtspecialname 
              instance void  .ctor(int32 item1,
                                   int32 item2,
                                   int32 item3,
                                   int32 item4) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       37 (0x25)
        .maxstack  2
        IL_0000:  ldarg.0
        IL_0001:  ldc.i4.1
        IL_0002:  call       instance void ComplexCompositeTypes/Color::.ctor(int32)
        IL_0007:  ldarg.0
        IL_0008:  ldarg.1
        IL_0009:  stfld      int32 ComplexCompositeTypes/Color/CMYK::item1
        IL_000e:  ldarg.0
        IL_000f:  ldarg.2
        IL_0010:  stfld      int32 ComplexCompositeTypes/Color/CMYK::item2
        IL_0015:  ldarg.0
        IL_0016:  ldarg.3
        IL_0017:  stfld      int32 ComplexCompositeTypes/Color/CMYK::item3
        IL_001c:  ldarg.0
        IL_001d:  ldarg.s    item4
        IL_001f:  stfld      int32 ComplexCompositeTypes/Color/CMYK::item4
        IL_0024:  ret
      } // end of method CMYK::.ctor

      .method public instance int32  get_Item1() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
        IL_0006:  ret
      } // end of method CMYK::get_Item1

      .method public instance int32  get_Item2() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
        IL_0006:  ret
      } // end of method CMYK::get_Item2

      .method public instance int32  get_Item3() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
        IL_0006:  ret
      } // end of method CMYK::get_Item3

      .method public instance int32  get_Item4() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
        IL_0006:  ret
      } // end of method CMYK::get_Item4

      .property instance int32 Item1()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/CMYK::get_Item1()
      } // end of property CMYK::Item1
      .property instance int32 Item2()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 01 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/CMYK::get_Item2()
      } // end of property CMYK::Item2
      .property instance int32 Item3()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 02 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/CMYK::get_Item3()
      } // end of property CMYK::Item3
      .property instance int32 Item4()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 03 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/CMYK::get_Item4()
      } // end of property CMYK::Item4
    } // end of class CMYK

    .class auto ansi nested assembly beforefieldinit specialname RGB@DebugTypeProxy
           extends [mscorlib]System.Object
    {
      .field assembly class ComplexCompositeTypes/Color/RGB _obj
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method public specialname rtspecialname 
              instance void  .ctor(class ComplexCompositeTypes/Color/RGB obj) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       14 (0xe)
        .maxstack  3
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      class ComplexCompositeTypes/Color/RGB ComplexCompositeTypes/Color/RGB@DebugTypeProxy::_obj
        IL_000d:  ret
      } // end of method RGB@DebugTypeProxy::.ctor

      .method public instance int32  get_Item1() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Color/RGB ComplexCompositeTypes/Color/RGB@DebugTypeProxy::_obj
        IL_0006:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
        IL_000b:  ret
      } // end of method RGB@DebugTypeProxy::get_Item1

      .method public instance int32  get_Item2() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Color/RGB ComplexCompositeTypes/Color/RGB@DebugTypeProxy::_obj
        IL_0006:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
        IL_000b:  ret
      } // end of method RGB@DebugTypeProxy::get_Item2

      .method public instance int32  get_Item3() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Color/RGB ComplexCompositeTypes/Color/RGB@DebugTypeProxy::_obj
        IL_0006:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
        IL_000b:  ret
      } // end of method RGB@DebugTypeProxy::get_Item3

      .property instance int32 Item1()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/RGB@DebugTypeProxy::get_Item1()
      } // end of property RGB@DebugTypeProxy::Item1
      .property instance int32 Item2()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 01 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/RGB@DebugTypeProxy::get_Item2()
      } // end of property RGB@DebugTypeProxy::Item2
      .property instance int32 Item3()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 02 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/RGB@DebugTypeProxy::get_Item3()
      } // end of property RGB@DebugTypeProxy::Item3
    } // end of class RGB@DebugTypeProxy

    .class auto ansi nested assembly beforefieldinit specialname CMYK@DebugTypeProxy
           extends [mscorlib]System.Object
    {
      .field assembly class ComplexCompositeTypes/Color/CMYK _obj
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method public specialname rtspecialname 
              instance void  .ctor(class ComplexCompositeTypes/Color/CMYK obj) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       14 (0xe)
        .maxstack  3
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      class ComplexCompositeTypes/Color/CMYK ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::_obj
        IL_000d:  ret
      } // end of method CMYK@DebugTypeProxy::.ctor

      .method public instance int32  get_Item1() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Color/CMYK ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::_obj
        IL_0006:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
        IL_000b:  ret
      } // end of method CMYK@DebugTypeProxy::get_Item1

      .method public instance int32  get_Item2() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Color/CMYK ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::_obj
        IL_0006:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
        IL_000b:  ret
      } // end of method CMYK@DebugTypeProxy::get_Item2

      .method public instance int32  get_Item3() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Color/CMYK ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::_obj
        IL_0006:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
        IL_000b:  ret
      } // end of method CMYK@DebugTypeProxy::get_Item3

      .method public instance int32  get_Item4() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Color/CMYK ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::_obj
        IL_0006:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
        IL_000b:  ret
      } // end of method CMYK@DebugTypeProxy::get_Item4

      .property instance int32 Item1()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::get_Item1()
      } // end of property CMYK@DebugTypeProxy::Item1
      .property instance int32 Item2()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 01 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::get_Item2()
      } // end of property CMYK@DebugTypeProxy::Item2
      .property instance int32 Item3()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 02 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::get_Item3()
      } // end of property CMYK@DebugTypeProxy::Item3
      .property instance int32 Item4()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 03 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance int32 ComplexCompositeTypes/Color/CMYK@DebugTypeProxy::get_Item4()
      } // end of property CMYK@DebugTypeProxy::Item4
    } // end of class CMYK@DebugTypeProxy

    .field assembly initonly int32 _tag
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/Color _unique_Black
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/Color _unique_Blue
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/Color _unique_Green
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/Color _unique_Red
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/Color _unique_White
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/Color _unique_Cyan
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/Color _unique_Gray
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method private specialname rtspecialname static 
            void  .cctor() cil managed
    {
      // Code size       78 (0x4e)
      .maxstack  1
      IL_0000:  ldc.i4.2
      IL_0001:  newobj     instance void ComplexCompositeTypes/Color::.ctor(int32)
      IL_0006:  stsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Black
      IL_000b:  ldc.i4.3
      IL_000c:  newobj     instance void ComplexCompositeTypes/Color::.ctor(int32)
      IL_0011:  stsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Blue
      IL_0016:  ldc.i4.4
      IL_0017:  newobj     instance void ComplexCompositeTypes/Color::.ctor(int32)
      IL_001c:  stsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Green
      IL_0021:  ldc.i4.5
      IL_0022:  newobj     instance void ComplexCompositeTypes/Color::.ctor(int32)
      IL_0027:  stsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Red
      IL_002c:  ldc.i4.6
      IL_002d:  newobj     instance void ComplexCompositeTypes/Color::.ctor(int32)
      IL_0032:  stsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_White
      IL_0037:  ldc.i4.7
      IL_0038:  newobj     instance void ComplexCompositeTypes/Color::.ctor(int32)
      IL_003d:  stsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Cyan
      IL_0042:  ldc.i4.8
      IL_0043:  newobj     instance void ComplexCompositeTypes/Color::.ctor(int32)
      IL_0048:  stsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Gray
      IL_004d:  ret
    } // end of method Color::.cctor

    .method assembly specialname rtspecialname 
            instance void  .ctor(int32 _tag) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  2
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      int32 ComplexCompositeTypes/Color::_tag
      IL_000d:  ret
    } // end of method Color::.ctor

    .method public static class ComplexCompositeTypes/Color 
            get_Gray() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 08 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Gray
      IL_0005:  ret
    } // end of method Color::get_Gray

    .method public instance bool  get_IsGray() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.8
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsGray

    .method public static class ComplexCompositeTypes/Color 
            get_Cyan() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 07 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Cyan
      IL_0005:  ret
    } // end of method Color::get_Cyan

    .method public instance bool  get_IsCyan() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.7
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsCyan

    .method public static class ComplexCompositeTypes/Color 
            get_White() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 06 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_White
      IL_0005:  ret
    } // end of method Color::get_White

    .method public instance bool  get_IsWhite() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.6
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsWhite

    .method public static class ComplexCompositeTypes/Color 
            get_Red() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 05 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Red
      IL_0005:  ret
    } // end of method Color::get_Red

    .method public instance bool  get_IsRed() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.5
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsRed

    .method public static class ComplexCompositeTypes/Color 
            get_Green() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 04 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Green
      IL_0005:  ret
    } // end of method Color::get_Green

    .method public instance bool  get_IsGreen() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.4
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsGreen

    .method public static class ComplexCompositeTypes/Color 
            get_Blue() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 03 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Blue
      IL_0005:  ret
    } // end of method Color::get_Blue

    .method public instance bool  get_IsBlue() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.3
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsBlue

    .method public static class ComplexCompositeTypes/Color 
            get_Black() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 02 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::_unique_Black
      IL_0005:  ret
    } // end of method Color::get_Black

    .method public instance bool  get_IsBlack() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.2
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsBlack

    .method public static class ComplexCompositeTypes/Color 
            NewCMYK(int32 item1,
                    int32 item2,
                    int32 item3,
                    int32 item4) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  6
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  ldarg.2
      IL_0003:  ldarg.3
      IL_0004:  newobj     instance void ComplexCompositeTypes/Color/CMYK::.ctor(int32,
                                                                                 int32,
                                                                                 int32,
                                                                                 int32)
      IL_0009:  ret
    } // end of method Color::NewCMYK

    .method public instance bool  get_IsCMYK() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.1
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsCMYK

    .method public static class ComplexCompositeTypes/Color 
            NewRGB(int32 item1,
                   int32 item2,
                   int32 item3) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 00 00 00 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  5
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  ldarg.2
      IL_0003:  newobj     instance void ComplexCompositeTypes/Color/RGB::.ctor(int32,
                                                                                int32,
                                                                                int32)
      IL_0008:  ret
    } // end of method Color::NewRGB

    .method public instance bool  get_IsRGB() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0006:  ldc.i4.0
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method Color::get_IsRGB

    .method public instance int32  get_Tag() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_0006:  ret
    } // end of method Color::get_Tag

    .method assembly specialname instance object 
            __DebugDisplay() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       22 (0x16)
      .maxstack  4
      IL_0000:  ldstr      "%+0.8A"
      IL_0005:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Color,string>,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string,string>::.ctor(string)
      IL_000a:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.ExtraTopLevelOperators::PrintFormatToString<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Color,string>>(class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string>)
      IL_000f:  ldarg.0
      IL_0010:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Color,string>::Invoke(!0)
      IL_0015:  ret
    } // end of method Color::__DebugDisplay

    .method public hidebysig virtual final 
            instance int32  CompareTo(class ComplexCompositeTypes/Color obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       605 (0x25d)
      .maxstack  4
      .locals init (int32 V_0,
               int32 V_1,
               class ComplexCompositeTypes/Color/RGB V_2,
               class ComplexCompositeTypes/Color/RGB V_3,
               int32 V_4,
               class [mscorlib]System.Collections.IComparer V_5,
               int32 V_6,
               int32 V_7,
               int32 V_8,
               class [mscorlib]System.Collections.IComparer V_9,
               int32 V_10,
               int32 V_11,
               class [mscorlib]System.Collections.IComparer V_12,
               int32 V_13,
               int32 V_14,
               class ComplexCompositeTypes/Color/CMYK V_15,
               class ComplexCompositeTypes/Color/CMYK V_16,
               int32 V_17,
               class [mscorlib]System.Collections.IComparer V_18,
               int32 V_19,
               int32 V_20,
               int32 V_21,
               class [mscorlib]System.Collections.IComparer V_22,
               int32 V_23,
               int32 V_24,
               int32 V_25,
               class [mscorlib]System.Collections.IComparer V_26,
               int32 V_27,
               int32 V_28,
               class [mscorlib]System.Collections.IComparer V_29,
               int32 V_30,
               int32 V_31)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_024f

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_001b

      IL_0016:  br         IL_024d

      IL_001b:  ldarg.0
      IL_001c:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_0021:  stloc.0
      IL_0022:  ldarg.1
      IL_0023:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_0028:  stloc.1
      IL_0029:  ldloc.0
      IL_002a:  ldloc.1
      IL_002b:  bne.un.s   IL_002f

      IL_002d:  br.s       IL_0034

      IL_002f:  br         IL_0249

      IL_0034:  ldarg.0
      IL_0035:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_003a:  switch     ( 
                            IL_0068,
                            IL_006a,
                            IL_0063,
                            IL_0063,
                            IL_0063,
                            IL_0063,
                            IL_0063,
                            IL_0063,
                            IL_0063)
      IL_0063:  br         IL_0247

      IL_0068:  br.s       IL_006f

      IL_006a:  br         IL_0133

      IL_006f:  ldarg.0
      IL_0070:  castclass  ComplexCompositeTypes/Color/RGB
      IL_0075:  stloc.2
      IL_0076:  ldarg.1
      IL_0077:  castclass  ComplexCompositeTypes/Color/RGB
      IL_007c:  stloc.3
      IL_007d:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0082:  stloc.s    V_5
      IL_0084:  ldloc.2
      IL_0085:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_008a:  stloc.s    V_6
      IL_008c:  ldloc.3
      IL_008d:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_0092:  stloc.s    V_7
      IL_0094:  ldloc.s    V_6
      IL_0096:  ldloc.s    V_7
      IL_0098:  bge.s      IL_009c

      IL_009a:  br.s       IL_009e

      IL_009c:  br.s       IL_00a2

      IL_009e:  ldc.i4.m1
      IL_009f:  nop
      IL_00a0:  br.s       IL_00a9

      IL_00a2:  ldloc.s    V_6
      IL_00a4:  ldloc.s    V_7
      IL_00a6:  cgt
      IL_00a8:  nop
      IL_00a9:  stloc.s    V_4
      IL_00ab:  ldloc.s    V_4
      IL_00ad:  ldc.i4.0
      IL_00ae:  bge.s      IL_00b2

      IL_00b0:  br.s       IL_00b4

      IL_00b2:  br.s       IL_00b7

      IL_00b4:  ldloc.s    V_4
      IL_00b6:  ret

      IL_00b7:  ldloc.s    V_4
      IL_00b9:  ldc.i4.0
      IL_00ba:  ble.s      IL_00be

      IL_00bc:  br.s       IL_00c0

      IL_00be:  br.s       IL_00c3

      IL_00c0:  ldloc.s    V_4
      IL_00c2:  ret

      IL_00c3:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_00c8:  stloc.s    V_9
      IL_00ca:  ldloc.2
      IL_00cb:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_00d0:  stloc.s    V_10
      IL_00d2:  ldloc.3
      IL_00d3:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_00d8:  stloc.s    V_11
      IL_00da:  ldloc.s    V_10
      IL_00dc:  ldloc.s    V_11
      IL_00de:  bge.s      IL_00e2

      IL_00e0:  br.s       IL_00e4

      IL_00e2:  br.s       IL_00e8

      IL_00e4:  ldc.i4.m1
      IL_00e5:  nop
      IL_00e6:  br.s       IL_00ef

      IL_00e8:  ldloc.s    V_10
      IL_00ea:  ldloc.s    V_11
      IL_00ec:  cgt
      IL_00ee:  nop
      IL_00ef:  stloc.s    V_8
      IL_00f1:  ldloc.s    V_8
      IL_00f3:  ldc.i4.0
      IL_00f4:  bge.s      IL_00f8

      IL_00f6:  br.s       IL_00fa

      IL_00f8:  br.s       IL_00fd

      IL_00fa:  ldloc.s    V_8
      IL_00fc:  ret

      IL_00fd:  ldloc.s    V_8
      IL_00ff:  ldc.i4.0
      IL_0100:  ble.s      IL_0104

      IL_0102:  br.s       IL_0106

      IL_0104:  br.s       IL_0109

      IL_0106:  ldloc.s    V_8
      IL_0108:  ret

      IL_0109:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_010e:  stloc.s    V_12
      IL_0110:  ldloc.2
      IL_0111:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_0116:  stloc.s    V_13
      IL_0118:  ldloc.3
      IL_0119:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_011e:  stloc.s    V_14
      IL_0120:  ldloc.s    V_13
      IL_0122:  ldloc.s    V_14
      IL_0124:  bge.s      IL_0128

      IL_0126:  br.s       IL_012a

      IL_0128:  br.s       IL_012c

      IL_012a:  ldc.i4.m1
      IL_012b:  ret

      IL_012c:  ldloc.s    V_13
      IL_012e:  ldloc.s    V_14
      IL_0130:  cgt
      IL_0132:  ret

      IL_0133:  ldarg.0
      IL_0134:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_0139:  stloc.s    V_15
      IL_013b:  ldarg.1
      IL_013c:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_0141:  stloc.s    V_16
      IL_0143:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0148:  stloc.s    V_18
      IL_014a:  ldloc.s    V_15
      IL_014c:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_0151:  stloc.s    V_19
      IL_0153:  ldloc.s    V_16
      IL_0155:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_015a:  stloc.s    V_20
      IL_015c:  ldloc.s    V_19
      IL_015e:  ldloc.s    V_20
      IL_0160:  bge.s      IL_0164

      IL_0162:  br.s       IL_0166

      IL_0164:  br.s       IL_016a

      IL_0166:  ldc.i4.m1
      IL_0167:  nop
      IL_0168:  br.s       IL_0171

      IL_016a:  ldloc.s    V_19
      IL_016c:  ldloc.s    V_20
      IL_016e:  cgt
      IL_0170:  nop
      IL_0171:  stloc.s    V_17
      IL_0173:  ldloc.s    V_17
      IL_0175:  ldc.i4.0
      IL_0176:  bge.s      IL_017a

      IL_0178:  br.s       IL_017c

      IL_017a:  br.s       IL_017f

      IL_017c:  ldloc.s    V_17
      IL_017e:  ret

      IL_017f:  ldloc.s    V_17
      IL_0181:  ldc.i4.0
      IL_0182:  ble.s      IL_0186

      IL_0184:  br.s       IL_0188

      IL_0186:  br.s       IL_018b

      IL_0188:  ldloc.s    V_17
      IL_018a:  ret

      IL_018b:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0190:  stloc.s    V_22
      IL_0192:  ldloc.s    V_15
      IL_0194:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_0199:  stloc.s    V_23
      IL_019b:  ldloc.s    V_16
      IL_019d:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_01a2:  stloc.s    V_24
      IL_01a4:  ldloc.s    V_23
      IL_01a6:  ldloc.s    V_24
      IL_01a8:  bge.s      IL_01ac

      IL_01aa:  br.s       IL_01ae

      IL_01ac:  br.s       IL_01b2

      IL_01ae:  ldc.i4.m1
      IL_01af:  nop
      IL_01b0:  br.s       IL_01b9

      IL_01b2:  ldloc.s    V_23
      IL_01b4:  ldloc.s    V_24
      IL_01b6:  cgt
      IL_01b8:  nop
      IL_01b9:  stloc.s    V_21
      IL_01bb:  ldloc.s    V_21
      IL_01bd:  ldc.i4.0
      IL_01be:  bge.s      IL_01c2

      IL_01c0:  br.s       IL_01c4

      IL_01c2:  br.s       IL_01c7

      IL_01c4:  ldloc.s    V_21
      IL_01c6:  ret

      IL_01c7:  ldloc.s    V_21
      IL_01c9:  ldc.i4.0
      IL_01ca:  ble.s      IL_01ce

      IL_01cc:  br.s       IL_01d0

      IL_01ce:  br.s       IL_01d3

      IL_01d0:  ldloc.s    V_21
      IL_01d2:  ret

      IL_01d3:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_01d8:  stloc.s    V_26
      IL_01da:  ldloc.s    V_15
      IL_01dc:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_01e1:  stloc.s    V_27
      IL_01e3:  ldloc.s    V_16
      IL_01e5:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_01ea:  stloc.s    V_28
      IL_01ec:  ldloc.s    V_27
      IL_01ee:  ldloc.s    V_28
      IL_01f0:  bge.s      IL_01f4

      IL_01f2:  br.s       IL_01f6

      IL_01f4:  br.s       IL_01fa

      IL_01f6:  ldc.i4.m1
      IL_01f7:  nop
      IL_01f8:  br.s       IL_0201

      IL_01fa:  ldloc.s    V_27
      IL_01fc:  ldloc.s    V_28
      IL_01fe:  cgt
      IL_0200:  nop
      IL_0201:  stloc.s    V_25
      IL_0203:  ldloc.s    V_25
      IL_0205:  ldc.i4.0
      IL_0206:  bge.s      IL_020a

      IL_0208:  br.s       IL_020c

      IL_020a:  br.s       IL_020f

      IL_020c:  ldloc.s    V_25
      IL_020e:  ret

      IL_020f:  ldloc.s    V_25
      IL_0211:  ldc.i4.0
      IL_0212:  ble.s      IL_0216

      IL_0214:  br.s       IL_0218

      IL_0216:  br.s       IL_021b

      IL_0218:  ldloc.s    V_25
      IL_021a:  ret

      IL_021b:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0220:  stloc.s    V_29
      IL_0222:  ldloc.s    V_15
      IL_0224:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_0229:  stloc.s    V_30
      IL_022b:  ldloc.s    V_16
      IL_022d:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_0232:  stloc.s    V_31
      IL_0234:  ldloc.s    V_30
      IL_0236:  ldloc.s    V_31
      IL_0238:  bge.s      IL_023c

      IL_023a:  br.s       IL_023e

      IL_023c:  br.s       IL_0240

      IL_023e:  ldc.i4.m1
      IL_023f:  ret

      IL_0240:  ldloc.s    V_30
      IL_0242:  ldloc.s    V_31
      IL_0244:  cgt
      IL_0246:  ret

      IL_0247:  ldc.i4.0
      IL_0248:  ret

      IL_0249:  ldloc.0
      IL_024a:  ldloc.1
      IL_024b:  sub
      IL_024c:  ret

      IL_024d:  ldc.i4.1
      IL_024e:  ret

      IL_024f:  ldarg.1
      IL_0250:  ldnull
      IL_0251:  cgt.un
      IL_0253:  brfalse.s  IL_0257

      IL_0255:  br.s       IL_0259

      IL_0257:  br.s       IL_025b

      IL_0259:  ldc.i4.m1
      IL_025a:  ret

      IL_025b:  ldc.i4.0
      IL_025c:  ret
    } // end of method Color::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
// Source File 'C:\Users\faa634\Desktop\book codes\F#\Code\Objects\ComplexCompositeTypes.fs' 
//000099: type Color =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/Color
      IL_0008:  call       instance int32 ComplexCompositeTypes/Color::CompareTo(class ComplexCompositeTypes/Color)
      IL_000d:  ret
    } // end of method Color::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       598 (0x256)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/Color V_0,
               [1] int32 V_1,
               [2] int32 V_2,
               [3] class ComplexCompositeTypes/Color/RGB V_3,
               [4] class ComplexCompositeTypes/Color/RGB V_4,
               [5] int32 V_5,
               [6] class [mscorlib]System.Collections.IComparer V_6,
               [7] int32 V_7,
               [8] int32 V_8,
               [9] int32 V_9,
               [10] class [mscorlib]System.Collections.IComparer V_10,
               [11] int32 V_11,
               [12] int32 V_12,
               [13] class [mscorlib]System.Collections.IComparer V_13,
               [14] int32 V_14,
               [15] int32 V_15,
               [16] class ComplexCompositeTypes/Color/CMYK V_16,
               [17] class ComplexCompositeTypes/Color/CMYK V_17,
               [18] int32 V_18,
               [19] class [mscorlib]System.Collections.IComparer V_19,
               [20] int32 V_20,
               [21] int32 V_21,
               [22] int32 V_22,
               [23] class [mscorlib]System.Collections.IComparer V_23,
               [24] int32 V_24,
               [25] int32 V_25,
               [26] int32 V_26,
               [27] class [mscorlib]System.Collections.IComparer V_27,
               [28] int32 V_28,
               [29] int32 V_29,
               [30] class [mscorlib]System.Collections.IComparer V_30,
               [31] int32 V_31,
               [32] int32 V_32)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/Color
      IL_0007:  stloc.0
      IL_0008:  ldarg.0
      IL_0009:  ldnull
      IL_000a:  cgt.un
      IL_000c:  brfalse.s  IL_0010

      IL_000e:  br.s       IL_0015

      IL_0010:  br         IL_0243

//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0015:  ldarg.1
      IL_0016:  unbox.any  ComplexCompositeTypes/Color
      IL_001b:  ldnull
      IL_001c:  cgt.un
      IL_001e:  brfalse.s  IL_0022

      IL_0020:  br.s       IL_0027

      IL_0022:  br         IL_0241

      IL_0027:  ldarg.0
      IL_0028:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_002d:  stloc.1
      IL_002e:  ldloc.0
      IL_002f:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_0034:  stloc.2
      IL_0035:  ldloc.1
      IL_0036:  ldloc.2
      IL_0037:  bne.un.s   IL_003b

      IL_0039:  br.s       IL_0040

      IL_003b:  br         IL_023d

      IL_0040:  ldarg.0
      IL_0041:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0046:  switch     ( 
                            IL_0074,
                            IL_0076,
                            IL_006f,
                            IL_006f,
                            IL_006f,
                            IL_006f,
                            IL_006f,
                            IL_006f,
                            IL_006f)
      IL_006f:  br         IL_023b

      IL_0074:  br.s       IL_007b

      IL_0076:  br         IL_0137

      IL_007b:  ldarg.0
      IL_007c:  castclass  ComplexCompositeTypes/Color/RGB
      IL_0081:  stloc.3
      IL_0082:  ldloc.0
      IL_0083:  castclass  ComplexCompositeTypes/Color/RGB
      IL_0088:  stloc.s    V_4
      IL_008a:  ldarg.2
      IL_008b:  stloc.s    V_6
      IL_008d:  ldloc.3
      IL_008e:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_0093:  stloc.s    V_7
      IL_0095:  ldloc.s    V_4
      IL_0097:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_009c:  stloc.s    V_8
      IL_009e:  ldloc.s    V_7
      IL_00a0:  ldloc.s    V_8
      IL_00a2:  bge.s      IL_00a6

      IL_00a4:  br.s       IL_00a8

      IL_00a6:  br.s       IL_00ac

      IL_00a8:  ldc.i4.m1
      IL_00a9:  nop
      IL_00aa:  br.s       IL_00b3

      IL_00ac:  ldloc.s    V_7
      IL_00ae:  ldloc.s    V_8
      IL_00b0:  cgt
      IL_00b2:  nop
      IL_00b3:  stloc.s    V_5
      IL_00b5:  ldloc.s    V_5
      IL_00b7:  ldc.i4.0
      IL_00b8:  bge.s      IL_00bc

      IL_00ba:  br.s       IL_00be

      IL_00bc:  br.s       IL_00c1

      IL_00be:  ldloc.s    V_5
      IL_00c0:  ret

      IL_00c1:  ldloc.s    V_5
      IL_00c3:  ldc.i4.0
      IL_00c4:  ble.s      IL_00c8

      IL_00c6:  br.s       IL_00ca

      IL_00c8:  br.s       IL_00cd

      IL_00ca:  ldloc.s    V_5
      IL_00cc:  ret

      IL_00cd:  ldarg.2
      IL_00ce:  stloc.s    V_10
      IL_00d0:  ldloc.3
      IL_00d1:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_00d6:  stloc.s    V_11
      IL_00d8:  ldloc.s    V_4
      IL_00da:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_00df:  stloc.s    V_12
      IL_00e1:  ldloc.s    V_11
      IL_00e3:  ldloc.s    V_12
      IL_00e5:  bge.s      IL_00e9

      IL_00e7:  br.s       IL_00eb

      IL_00e9:  br.s       IL_00ef

      IL_00eb:  ldc.i4.m1
      IL_00ec:  nop
      IL_00ed:  br.s       IL_00f6

      IL_00ef:  ldloc.s    V_11
      IL_00f1:  ldloc.s    V_12
      IL_00f3:  cgt
      IL_00f5:  nop
      IL_00f6:  stloc.s    V_9
      IL_00f8:  ldloc.s    V_9
      IL_00fa:  ldc.i4.0
      IL_00fb:  bge.s      IL_00ff

      IL_00fd:  br.s       IL_0101

      IL_00ff:  br.s       IL_0104

      IL_0101:  ldloc.s    V_9
      IL_0103:  ret

      IL_0104:  ldloc.s    V_9
      IL_0106:  ldc.i4.0
      IL_0107:  ble.s      IL_010b

      IL_0109:  br.s       IL_010d

      IL_010b:  br.s       IL_0110

      IL_010d:  ldloc.s    V_9
      IL_010f:  ret

      IL_0110:  ldarg.2
      IL_0111:  stloc.s    V_13
      IL_0113:  ldloc.3
      IL_0114:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_0119:  stloc.s    V_14
      IL_011b:  ldloc.s    V_4
      IL_011d:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_0122:  stloc.s    V_15
      IL_0124:  ldloc.s    V_14
      IL_0126:  ldloc.s    V_15
      IL_0128:  bge.s      IL_012c

      IL_012a:  br.s       IL_012e

      IL_012c:  br.s       IL_0130

      IL_012e:  ldc.i4.m1
      IL_012f:  ret

      IL_0130:  ldloc.s    V_14
      IL_0132:  ldloc.s    V_15
      IL_0134:  cgt
      IL_0136:  ret

      IL_0137:  ldarg.0
      IL_0138:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_013d:  stloc.s    V_16
      IL_013f:  ldloc.0
      IL_0140:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_0145:  stloc.s    V_17
      IL_0147:  ldarg.2
      IL_0148:  stloc.s    V_19
      IL_014a:  ldloc.s    V_16
      IL_014c:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_0151:  stloc.s    V_20
      IL_0153:  ldloc.s    V_17
      IL_0155:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_015a:  stloc.s    V_21
      IL_015c:  ldloc.s    V_20
      IL_015e:  ldloc.s    V_21
      IL_0160:  bge.s      IL_0164

      IL_0162:  br.s       IL_0166

      IL_0164:  br.s       IL_016a

      IL_0166:  ldc.i4.m1
      IL_0167:  nop
      IL_0168:  br.s       IL_0171

      IL_016a:  ldloc.s    V_20
      IL_016c:  ldloc.s    V_21
      IL_016e:  cgt
      IL_0170:  nop
      IL_0171:  stloc.s    V_18
      IL_0173:  ldloc.s    V_18
      IL_0175:  ldc.i4.0
      IL_0176:  bge.s      IL_017a

      IL_0178:  br.s       IL_017c

      IL_017a:  br.s       IL_017f

      IL_017c:  ldloc.s    V_18
      IL_017e:  ret

      IL_017f:  ldloc.s    V_18
      IL_0181:  ldc.i4.0
      IL_0182:  ble.s      IL_0186

      IL_0184:  br.s       IL_0188

      IL_0186:  br.s       IL_018b

      IL_0188:  ldloc.s    V_18
      IL_018a:  ret

      IL_018b:  ldarg.2
      IL_018c:  stloc.s    V_23
      IL_018e:  ldloc.s    V_16
      IL_0190:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_0195:  stloc.s    V_24
      IL_0197:  ldloc.s    V_17
      IL_0199:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_019e:  stloc.s    V_25
      IL_01a0:  ldloc.s    V_24
      IL_01a2:  ldloc.s    V_25
      IL_01a4:  bge.s      IL_01a8

      IL_01a6:  br.s       IL_01aa

      IL_01a8:  br.s       IL_01ae

      IL_01aa:  ldc.i4.m1
      IL_01ab:  nop
      IL_01ac:  br.s       IL_01b5

      IL_01ae:  ldloc.s    V_24
      IL_01b0:  ldloc.s    V_25
      IL_01b2:  cgt
      IL_01b4:  nop
      IL_01b5:  stloc.s    V_22
      IL_01b7:  ldloc.s    V_22
      IL_01b9:  ldc.i4.0
      IL_01ba:  bge.s      IL_01be

      IL_01bc:  br.s       IL_01c0

      IL_01be:  br.s       IL_01c3

      IL_01c0:  ldloc.s    V_22
      IL_01c2:  ret

      IL_01c3:  ldloc.s    V_22
      IL_01c5:  ldc.i4.0
      IL_01c6:  ble.s      IL_01ca

      IL_01c8:  br.s       IL_01cc

      IL_01ca:  br.s       IL_01cf

      IL_01cc:  ldloc.s    V_22
      IL_01ce:  ret

      IL_01cf:  ldarg.2
      IL_01d0:  stloc.s    V_27
      IL_01d2:  ldloc.s    V_16
      IL_01d4:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_01d9:  stloc.s    V_28
      IL_01db:  ldloc.s    V_17
      IL_01dd:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_01e2:  stloc.s    V_29
      IL_01e4:  ldloc.s    V_28
      IL_01e6:  ldloc.s    V_29
      IL_01e8:  bge.s      IL_01ec

      IL_01ea:  br.s       IL_01ee

      IL_01ec:  br.s       IL_01f2

      IL_01ee:  ldc.i4.m1
      IL_01ef:  nop
      IL_01f0:  br.s       IL_01f9

      IL_01f2:  ldloc.s    V_28
      IL_01f4:  ldloc.s    V_29
      IL_01f6:  cgt
      IL_01f8:  nop
      IL_01f9:  stloc.s    V_26
      IL_01fb:  ldloc.s    V_26
      IL_01fd:  ldc.i4.0
      IL_01fe:  bge.s      IL_0202

      IL_0200:  br.s       IL_0204

      IL_0202:  br.s       IL_0207

      IL_0204:  ldloc.s    V_26
      IL_0206:  ret

      IL_0207:  ldloc.s    V_26
      IL_0209:  ldc.i4.0
      IL_020a:  ble.s      IL_020e

      IL_020c:  br.s       IL_0210

      IL_020e:  br.s       IL_0213

      IL_0210:  ldloc.s    V_26
      IL_0212:  ret

      IL_0213:  ldarg.2
      IL_0214:  stloc.s    V_30
      IL_0216:  ldloc.s    V_16
      IL_0218:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_021d:  stloc.s    V_31
      IL_021f:  ldloc.s    V_17
      IL_0221:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_0226:  stloc.s    V_32
      IL_0228:  ldloc.s    V_31
      IL_022a:  ldloc.s    V_32
      IL_022c:  bge.s      IL_0230

      IL_022e:  br.s       IL_0232

      IL_0230:  br.s       IL_0234

      IL_0232:  ldc.i4.m1
      IL_0233:  ret

      IL_0234:  ldloc.s    V_31
      IL_0236:  ldloc.s    V_32
      IL_0238:  cgt
      IL_023a:  ret

      IL_023b:  ldc.i4.0
      IL_023c:  ret

      IL_023d:  ldloc.1
      IL_023e:  ldloc.2
      IL_023f:  sub
      IL_0240:  ret

      IL_0241:  ldc.i4.1
      IL_0242:  ret

      IL_0243:  ldarg.1
      IL_0244:  unbox.any  ComplexCompositeTypes/Color
      IL_0249:  ldnull
      IL_024a:  cgt.un
      IL_024c:  brfalse.s  IL_0250

      IL_024e:  br.s       IL_0252

      IL_0250:  br.s       IL_0254

      IL_0252:  ldc.i4.m1
      IL_0253:  ret

      IL_0254:  ldc.i4.0
      IL_0255:  ret
    } // end of method Color::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       346 (0x15a)
      .maxstack  7
      .locals init (int32 V_0,
               class ComplexCompositeTypes/Color/RGB V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3,
               class [mscorlib]System.Collections.IEqualityComparer V_4,
               class ComplexCompositeTypes/Color/CMYK V_5,
               class [mscorlib]System.Collections.IEqualityComparer V_6,
               class [mscorlib]System.Collections.IEqualityComparer V_7,
               class [mscorlib]System.Collections.IEqualityComparer V_8,
               class [mscorlib]System.Collections.IEqualityComparer V_9,
               class ComplexCompositeTypes/Color V_10,
               class ComplexCompositeTypes/Color V_11,
               class ComplexCompositeTypes/Color V_12,
               class ComplexCompositeTypes/Color V_13,
               class ComplexCompositeTypes/Color V_14,
               class ComplexCompositeTypes/Color V_15,
               class ComplexCompositeTypes/Color V_16)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_0158

      IL_000e:  ldc.i4.0
      IL_000f:  stloc.0
      IL_0010:  ldarg.0
      IL_0011:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0016:  switch     ( 
                            IL_003f,
                            IL_0041,
                            IL_0043,
                            IL_0048,
                            IL_004d,
                            IL_0052,
                            IL_0057,
                            IL_005c,
                            IL_0061)
      IL_003f:  br.s       IL_0066

      IL_0041:  br.s       IL_00b7

      IL_0043:  br         IL_0127

      IL_0048:  br         IL_012e

      IL_004d:  br         IL_0135

      IL_0052:  br         IL_013c

      IL_0057:  br         IL_0143

      IL_005c:  br         IL_014a

      IL_0061:  br         IL_0151

      IL_0066:  ldarg.0
      IL_0067:  castclass  ComplexCompositeTypes/Color/RGB
      IL_006c:  stloc.1
      IL_006d:  ldc.i4.0
      IL_006e:  stloc.0
      IL_006f:  ldc.i4     0x9e3779b9
      IL_0074:  ldarg.1
      IL_0075:  stloc.2
      IL_0076:  ldloc.1
      IL_0077:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_007c:  ldloc.0
      IL_007d:  ldc.i4.6
      IL_007e:  shl
      IL_007f:  ldloc.0
      IL_0080:  ldc.i4.2
      IL_0081:  shr
      IL_0082:  add
      IL_0083:  add
      IL_0084:  add
      IL_0085:  stloc.0
      IL_0086:  ldc.i4     0x9e3779b9
      IL_008b:  ldarg.1
      IL_008c:  stloc.3
      IL_008d:  ldloc.1
      IL_008e:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_0093:  ldloc.0
      IL_0094:  ldc.i4.6
      IL_0095:  shl
      IL_0096:  ldloc.0
      IL_0097:  ldc.i4.2
      IL_0098:  shr
      IL_0099:  add
      IL_009a:  add
      IL_009b:  add
      IL_009c:  stloc.0
      IL_009d:  ldc.i4     0x9e3779b9
      IL_00a2:  ldarg.1
      IL_00a3:  stloc.s    V_4
      IL_00a5:  ldloc.1
      IL_00a6:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_00ab:  ldloc.0
      IL_00ac:  ldc.i4.6
      IL_00ad:  shl
      IL_00ae:  ldloc.0
      IL_00af:  ldc.i4.2
      IL_00b0:  shr
      IL_00b1:  add
      IL_00b2:  add
      IL_00b3:  add
      IL_00b4:  stloc.0
      IL_00b5:  ldloc.0
      IL_00b6:  ret

      IL_00b7:  ldarg.0
      IL_00b8:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_00bd:  stloc.s    V_5
      IL_00bf:  ldc.i4.1
      IL_00c0:  stloc.0
      IL_00c1:  ldc.i4     0x9e3779b9
      IL_00c6:  ldarg.1
      IL_00c7:  stloc.s    V_6
      IL_00c9:  ldloc.s    V_5
      IL_00cb:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_00d0:  ldloc.0
      IL_00d1:  ldc.i4.6
      IL_00d2:  shl
      IL_00d3:  ldloc.0
      IL_00d4:  ldc.i4.2
      IL_00d5:  shr
      IL_00d6:  add
      IL_00d7:  add
      IL_00d8:  add
      IL_00d9:  stloc.0
      IL_00da:  ldc.i4     0x9e3779b9
      IL_00df:  ldarg.1
      IL_00e0:  stloc.s    V_7
      IL_00e2:  ldloc.s    V_5
      IL_00e4:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_00e9:  ldloc.0
      IL_00ea:  ldc.i4.6
      IL_00eb:  shl
      IL_00ec:  ldloc.0
      IL_00ed:  ldc.i4.2
      IL_00ee:  shr
      IL_00ef:  add
      IL_00f0:  add
      IL_00f1:  add
      IL_00f2:  stloc.0
      IL_00f3:  ldc.i4     0x9e3779b9
      IL_00f8:  ldarg.1
      IL_00f9:  stloc.s    V_8
      IL_00fb:  ldloc.s    V_5
      IL_00fd:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_0102:  ldloc.0
      IL_0103:  ldc.i4.6
      IL_0104:  shl
      IL_0105:  ldloc.0
      IL_0106:  ldc.i4.2
      IL_0107:  shr
      IL_0108:  add
      IL_0109:  add
      IL_010a:  add
      IL_010b:  stloc.0
      IL_010c:  ldc.i4     0x9e3779b9
      IL_0111:  ldarg.1
      IL_0112:  stloc.s    V_9
      IL_0114:  ldloc.s    V_5
      IL_0116:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_011b:  ldloc.0
      IL_011c:  ldc.i4.6
      IL_011d:  shl
      IL_011e:  ldloc.0
      IL_011f:  ldc.i4.2
      IL_0120:  shr
      IL_0121:  add
      IL_0122:  add
      IL_0123:  add
      IL_0124:  stloc.0
      IL_0125:  ldloc.0
      IL_0126:  ret

      IL_0127:  ldarg.0
      IL_0128:  stloc.s    V_10
      IL_012a:  ldc.i4.2
      IL_012b:  stloc.0
      IL_012c:  ldloc.0
      IL_012d:  ret

      IL_012e:  ldarg.0
      IL_012f:  stloc.s    V_11
      IL_0131:  ldc.i4.3
      IL_0132:  stloc.0
      IL_0133:  ldloc.0
      IL_0134:  ret

      IL_0135:  ldarg.0
      IL_0136:  stloc.s    V_12
      IL_0138:  ldc.i4.4
      IL_0139:  stloc.0
      IL_013a:  ldloc.0
      IL_013b:  ret

      IL_013c:  ldarg.0
      IL_013d:  stloc.s    V_13
      IL_013f:  ldc.i4.5
      IL_0140:  stloc.0
      IL_0141:  ldloc.0
      IL_0142:  ret

      IL_0143:  ldarg.0
      IL_0144:  stloc.s    V_14
      IL_0146:  ldc.i4.6
      IL_0147:  stloc.0
      IL_0148:  ldloc.0
      IL_0149:  ret

      IL_014a:  ldarg.0
      IL_014b:  stloc.s    V_15
      IL_014d:  ldc.i4.7
      IL_014e:  stloc.0
      IL_014f:  ldloc.0
      IL_0150:  ret

      IL_0151:  ldarg.0
      IL_0152:  stloc.s    V_16
      IL_0154:  ldc.i4.8
      IL_0155:  stloc.0
      IL_0156:  ldloc.0
      IL_0157:  ret

      IL_0158:  ldc.i4.0
      IL_0159:  ret
    } // end of method Color::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000099: type Color =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/Color::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method Color::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       335 (0x14f)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Color V_0,
               class ComplexCompositeTypes/Color V_1,
               int32 V_2,
               int32 V_3,
               class ComplexCompositeTypes/Color/RGB V_4,
               class ComplexCompositeTypes/Color/RGB V_5,
               class [mscorlib]System.Collections.IEqualityComparer V_6,
               class [mscorlib]System.Collections.IEqualityComparer V_7,
               class [mscorlib]System.Collections.IEqualityComparer V_8,
               class ComplexCompositeTypes/Color/CMYK V_9,
               class ComplexCompositeTypes/Color/CMYK V_10,
               class [mscorlib]System.Collections.IEqualityComparer V_11,
               class [mscorlib]System.Collections.IEqualityComparer V_12,
               class [mscorlib]System.Collections.IEqualityComparer V_13,
               class [mscorlib]System.Collections.IEqualityComparer V_14)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_0147

      IL_000e:  ldarg.1
      IL_000f:  isinst     ComplexCompositeTypes/Color
      IL_0014:  stloc.0
      IL_0015:  ldloc.0
      IL_0016:  brfalse.s  IL_001a

      IL_0018:  br.s       IL_001f

      IL_001a:  br         IL_0145

      IL_001f:  ldloc.0
      IL_0020:  stloc.1
      IL_0021:  ldarg.0
      IL_0022:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_0027:  stloc.2
      IL_0028:  ldloc.1
      IL_0029:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_002e:  stloc.3
      IL_002f:  ldloc.2
      IL_0030:  ldloc.3
      IL_0031:  bne.un.s   IL_0035

      IL_0033:  br.s       IL_003a

      IL_0035:  br         IL_0143

      IL_003a:  ldarg.0
      IL_003b:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0040:  switch     ( 
                            IL_006e,
                            IL_0070,
                            IL_0069,
                            IL_0069,
                            IL_0069,
                            IL_0069,
                            IL_0069,
                            IL_0069,
                            IL_0069)
      IL_0069:  br         IL_0141

      IL_006e:  br.s       IL_0072

      IL_0070:  br.s       IL_00cc

      IL_0072:  ldarg.0
      IL_0073:  castclass  ComplexCompositeTypes/Color/RGB
      IL_0078:  stloc.s    V_4
      IL_007a:  ldloc.1
      IL_007b:  castclass  ComplexCompositeTypes/Color/RGB
      IL_0080:  stloc.s    V_5
      IL_0082:  ldarg.2
      IL_0083:  stloc.s    V_6
      IL_0085:  ldloc.s    V_4
      IL_0087:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_008c:  ldloc.s    V_5
      IL_008e:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_0093:  ceq
      IL_0095:  brfalse.s  IL_0099

      IL_0097:  br.s       IL_009b

      IL_0099:  br.s       IL_00ca

      IL_009b:  ldarg.2
      IL_009c:  stloc.s    V_7
      IL_009e:  ldloc.s    V_4
      IL_00a0:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_00a5:  ldloc.s    V_5
      IL_00a7:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_00ac:  ceq
      IL_00ae:  brfalse.s  IL_00b2

      IL_00b0:  br.s       IL_00b4

      IL_00b2:  br.s       IL_00c8

      IL_00b4:  ldarg.2
      IL_00b5:  stloc.s    V_8
      IL_00b7:  ldloc.s    V_4
      IL_00b9:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_00be:  ldloc.s    V_5
      IL_00c0:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_00c5:  ceq
      IL_00c7:  ret

      IL_00c8:  ldc.i4.0
      IL_00c9:  ret

      IL_00ca:  ldc.i4.0
      IL_00cb:  ret

      IL_00cc:  ldarg.0
      IL_00cd:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_00d2:  stloc.s    V_9
      IL_00d4:  ldloc.1
      IL_00d5:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_00da:  stloc.s    V_10
      IL_00dc:  ldarg.2
      IL_00dd:  stloc.s    V_11
      IL_00df:  ldloc.s    V_9
      IL_00e1:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_00e6:  ldloc.s    V_10
      IL_00e8:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_00ed:  ceq
      IL_00ef:  brfalse.s  IL_00f3

      IL_00f1:  br.s       IL_00f5

      IL_00f3:  br.s       IL_013f

      IL_00f5:  ldarg.2
      IL_00f6:  stloc.s    V_12
      IL_00f8:  ldloc.s    V_9
      IL_00fa:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_00ff:  ldloc.s    V_10
      IL_0101:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_0106:  ceq
      IL_0108:  brfalse.s  IL_010c

      IL_010a:  br.s       IL_010e

      IL_010c:  br.s       IL_013d

      IL_010e:  ldarg.2
      IL_010f:  stloc.s    V_13
      IL_0111:  ldloc.s    V_9
      IL_0113:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_0118:  ldloc.s    V_10
      IL_011a:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_011f:  ceq
      IL_0121:  brfalse.s  IL_0125

      IL_0123:  br.s       IL_0127

      IL_0125:  br.s       IL_013b

      IL_0127:  ldarg.2
      IL_0128:  stloc.s    V_14
      IL_012a:  ldloc.s    V_9
      IL_012c:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_0131:  ldloc.s    V_10
      IL_0133:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_0138:  ceq
      IL_013a:  ret

      IL_013b:  ldc.i4.0
      IL_013c:  ret

      IL_013d:  ldc.i4.0
      IL_013e:  ret

      IL_013f:  ldc.i4.0
      IL_0140:  ret

      IL_0141:  ldc.i4.1
      IL_0142:  ret

      IL_0143:  ldc.i4.0
      IL_0144:  ret

      IL_0145:  ldc.i4.0
      IL_0146:  ret

      IL_0147:  ldarg.1
      IL_0148:  ldnull
      IL_0149:  cgt.un
      IL_014b:  ldc.i4.0
      IL_014c:  ceq
      IL_014e:  ret
    } // end of method Color::Equals

    .method public specialname instance class [FSharp.Core]System.Tuple`3<int32,int32,int32> 
            get_RGBValue() cil managed
    {
      // Code size       276 (0x114)
      .maxstack  5
      .locals init ([0] class ComplexCompositeTypes/Color V_0,
               [1] class ComplexCompositeTypes/Color/RGB V_1,
               [2] int32 r,
               [3] int32 g,
               [4] int32 b,
               [5] class ComplexCompositeTypes/Color/CMYK V_5,
               [6] int32 y,
               [7] int32 m,
               [8] int32 k,
               [9] int32 c)
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_0009:  switch     ( 
                            IL_0032,
                            IL_0045,
                            IL_003a,
                            IL_0038,
                            IL_0036,
                            IL_0034,
                            IL_003c,
                            IL_003e,
                            IL_0040)
      IL_0032:  br.s       IL_004a

      IL_0034:  br.s       IL_0071

      IL_0036:  br.s       IL_007e

      IL_0038:  br.s       IL_008b

      IL_003a:  br.s       IL_0098

      IL_003c:  br.s       IL_00a1

      IL_003e:  br.s       IL_00b6

      IL_0040:  br         IL_00c8

      IL_0045:  br         IL_00dd

      IL_004a:  ldloc.0
      IL_004b:  castclass  ComplexCompositeTypes/Color/RGB
      IL_0050:  stloc.1
      IL_0051:  ldloc.1
      IL_0052:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_0057:  stloc.2
      IL_0058:  ldloc.1
      IL_0059:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_005e:  stloc.3
      IL_005f:  ldloc.1
      IL_0060:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_0065:  stloc.s    b
//000111:         | RGB(r,g,b) -> (r, g, b)
      IL_0067:  ldloc.2
      IL_0068:  ldloc.3
      IL_0069:  ldloc.s    b
      IL_006b:  newobj     instance void class [FSharp.Core]System.Tuple`3<int32,int32,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
      IL_0070:  ret

//000112:         | Red -> (255, 0, 0)
      IL_0071:  ldc.i4     0xff
      IL_0076:  ldc.i4.0
      IL_0077:  ldc.i4.0
      IL_0078:  newobj     instance void class [FSharp.Core]System.Tuple`3<int32,int32,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
      IL_007d:  ret

//000113:         | Green -> (0, 255, 0)
      IL_007e:  ldc.i4.0
      IL_007f:  ldc.i4     0xff
      IL_0084:  ldc.i4.0
      IL_0085:  newobj     instance void class [FSharp.Core]System.Tuple`3<int32,int32,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
      IL_008a:  ret

//000114:         | Blue -> (0, 0, 255)
      IL_008b:  ldc.i4.0
      IL_008c:  ldc.i4.0
      IL_008d:  ldc.i4     0xff
      IL_0092:  newobj     instance void class [FSharp.Core]System.Tuple`3<int32,int32,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
      IL_0097:  ret

//000115:         | Black -> (0, 0, 0)
      IL_0098:  ldc.i4.0
      IL_0099:  ldc.i4.0
      IL_009a:  ldc.i4.0
      IL_009b:  newobj     instance void class [FSharp.Core]System.Tuple`3<int32,int32,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
      IL_00a0:  ret

//000116:         | White -> (255, 255, 255)
      IL_00a1:  ldc.i4     0xff
      IL_00a6:  ldc.i4     0xff
      IL_00ab:  ldc.i4     0xff
      IL_00b0:  newobj     instance void class [FSharp.Core]System.Tuple`3<int32,int32,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
      IL_00b5:  ret

//000117:         | Cyan -> (64, 128, 128)
      IL_00b6:  ldc.i4.s   64
      IL_00b8:  ldc.i4     0x80
      IL_00bd:  ldc.i4     0x80
      IL_00c2:  newobj     instance void class [FSharp.Core]System.Tuple`3<int32,int32,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
      IL_00c7:  ret

//000118:         | Gray -> (192, 192, 192)
      IL_00c8:  ldc.i4     0xc0
      IL_00cd:  ldc.i4     0xc0
      IL_00d2:  ldc.i4     0xc0
      IL_00d7:  newobj     instance void class [FSharp.Core]System.Tuple`3<int32,int32,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
      IL_00dc:  ret

//000110:         match this with
      IL_00dd:  ldloc.0
      IL_00de:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_00e3:  stloc.s    V_5
      IL_00e5:  ldloc.s    V_5
      IL_00e7:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_00ec:  stloc.s    y
      IL_00ee:  ldloc.s    V_5
      IL_00f0:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_00f5:  stloc.s    m
      IL_00f7:  ldloc.s    V_5
      IL_00f9:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_00fe:  stloc.s    k
      IL_0100:  ldloc.s    V_5
      IL_0102:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_0107:  stloc.s    c
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
      IL_0109:  ldstr      "I have no idea how to do that"
      IL_010e:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.Operators::FailWith<class [FSharp.Core]System.Tuple`3<int32,int32,int32>>(string)
      IL_0113:  ret
    } // end of method Color::get_RGBValue

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/Color obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       290 (0x122)
      .maxstack  4
      .locals init (int32 V_0,
               int32 V_1,
               class ComplexCompositeTypes/Color/RGB V_2,
               class ComplexCompositeTypes/Color/RGB V_3,
               class ComplexCompositeTypes/Color/CMYK V_4,
               class ComplexCompositeTypes/Color/CMYK V_5)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_011a

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_001b

      IL_0016:  br         IL_0118

      IL_001b:  ldarg.0
      IL_001c:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_0021:  stloc.0
      IL_0022:  ldarg.1
      IL_0023:  ldfld      int32 ComplexCompositeTypes/Color::_tag
      IL_0028:  stloc.1
      IL_0029:  ldloc.0
      IL_002a:  ldloc.1
      IL_002b:  bne.un.s   IL_002f

      IL_002d:  br.s       IL_0034

      IL_002f:  br         IL_0116

      IL_0034:  ldarg.0
      IL_0035:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
      IL_003a:  switch     ( 
                            IL_0068,
                            IL_006a,
                            IL_0063,
                            IL_0063,
                            IL_0063,
                            IL_0063,
                            IL_0063,
                            IL_0063,
                            IL_0063)
      IL_0063:  br         IL_0114

      IL_0068:  br.s       IL_006c

      IL_006a:  br.s       IL_00b1

      IL_006c:  ldarg.0
      IL_006d:  castclass  ComplexCompositeTypes/Color/RGB
      IL_0072:  stloc.2
      IL_0073:  ldarg.1
      IL_0074:  castclass  ComplexCompositeTypes/Color/RGB
      IL_0079:  stloc.3
      IL_007a:  ldloc.2
      IL_007b:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_0080:  ldloc.3
      IL_0081:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
      IL_0086:  bne.un.s   IL_008a

      IL_0088:  br.s       IL_008c

      IL_008a:  br.s       IL_00af

      IL_008c:  ldloc.2
      IL_008d:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_0092:  ldloc.3
      IL_0093:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
      IL_0098:  bne.un.s   IL_009c

      IL_009a:  br.s       IL_009e

      IL_009c:  br.s       IL_00ad

      IL_009e:  ldloc.2
      IL_009f:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_00a4:  ldloc.3
      IL_00a5:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
      IL_00aa:  ceq
      IL_00ac:  ret

      IL_00ad:  ldc.i4.0
      IL_00ae:  ret

      IL_00af:  ldc.i4.0
      IL_00b0:  ret

      IL_00b1:  ldarg.0
      IL_00b2:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_00b7:  stloc.s    V_4
      IL_00b9:  ldarg.1
      IL_00ba:  castclass  ComplexCompositeTypes/Color/CMYK
      IL_00bf:  stloc.s    V_5
      IL_00c1:  ldloc.s    V_4
      IL_00c3:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_00c8:  ldloc.s    V_5
      IL_00ca:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
      IL_00cf:  bne.un.s   IL_00d3

      IL_00d1:  br.s       IL_00d5

      IL_00d3:  br.s       IL_0112

      IL_00d5:  ldloc.s    V_4
      IL_00d7:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_00dc:  ldloc.s    V_5
      IL_00de:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
      IL_00e3:  bne.un.s   IL_00e7

      IL_00e5:  br.s       IL_00e9

      IL_00e7:  br.s       IL_0110

      IL_00e9:  ldloc.s    V_4
      IL_00eb:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_00f0:  ldloc.s    V_5
      IL_00f2:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
      IL_00f7:  bne.un.s   IL_00fb

      IL_00f9:  br.s       IL_00fd

      IL_00fb:  br.s       IL_010e

      IL_00fd:  ldloc.s    V_4
      IL_00ff:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_0104:  ldloc.s    V_5
      IL_0106:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
      IL_010b:  ceq
      IL_010d:  ret

      IL_010e:  ldc.i4.0
      IL_010f:  ret

      IL_0110:  ldc.i4.0
      IL_0111:  ret

      IL_0112:  ldc.i4.0
      IL_0113:  ret

      IL_0114:  ldc.i4.1
      IL_0115:  ret

      IL_0116:  ldc.i4.0
      IL_0117:  ret

      IL_0118:  ldc.i4.0
      IL_0119:  ret

      IL_011a:  ldarg.1
      IL_011b:  ldnull
      IL_011c:  cgt.un
      IL_011e:  ldc.i4.0
      IL_011f:  ceq
      IL_0121:  ret
    } // end of method Color::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Color V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/Color
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/Color::Equals(class ComplexCompositeTypes/Color)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method Color::Equals

    .property instance int32 Tag()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/Color::get_Tag()
    } // end of property Color::Tag
    .property class ComplexCompositeTypes/Color
            Gray()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::get_Gray()
    } // end of property Color::Gray
    .property instance bool IsGray()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsGray()
    } // end of property Color::IsGray
    .property class ComplexCompositeTypes/Color
            Cyan()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::get_Cyan()
    } // end of property Color::Cyan
    .property instance bool IsCyan()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsCyan()
    } // end of property Color::IsCyan
    .property class ComplexCompositeTypes/Color
            White()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::get_White()
    } // end of property Color::White
    .property instance bool IsWhite()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsWhite()
    } // end of property Color::IsWhite
    .property class ComplexCompositeTypes/Color
            Red()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::get_Red()
    } // end of property Color::Red
    .property instance bool IsRed()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsRed()
    } // end of property Color::IsRed
    .property class ComplexCompositeTypes/Color
            Green()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::get_Green()
    } // end of property Color::Green
    .property instance bool IsGreen()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsGreen()
    } // end of property Color::IsGreen
    .property class ComplexCompositeTypes/Color
            Blue()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::get_Blue()
    } // end of property Color::Blue
    .property instance bool IsBlue()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsBlue()
    } // end of property Color::IsBlue
    .property class ComplexCompositeTypes/Color
            Black()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::get_Black()
    } // end of property Color::Black
    .property instance bool IsBlack()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsBlack()
    } // end of property Color::IsBlack
    .property instance bool IsCMYK()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsCMYK()
    } // end of property Color::IsCMYK
    .property instance bool IsRGB()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Color::get_IsRGB()
    } // end of property Color::IsRGB
    .property instance class [FSharp.Core]System.Tuple`3<int32,int32,int32>
            RGBValue()
    {
      .get instance class [FSharp.Core]System.Tuple`3<int32,int32,int32> ComplexCompositeTypes/Color::get_RGBValue()
    } // end of property Color::RGBValue
  } // end of class Color

  .class abstract auto autochar serializable nested public beforefieldinit BinaryTree
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/BinaryTree>,
                    [FSharp.Core]System.Collections.IStructuralEquatable
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                   61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 01 00 00 00 00 00 ) 
    .class abstract auto ansi sealed nested public Tags
           extends [mscorlib]System.Object
    {
      .field public static literal int32 Node = int32(0x00000000)
      .field public static literal int32 Empty = int32(0x00000001)
    } // end of class Tags

    .class auto ansi serializable nested public beforefieldinit specialname Node
           extends ComplexCompositeTypes/BinaryTree
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerTypeProxyAttribute::.ctor(class [mscorlib]System.Type) = ( 01 00 34 43 6F 6D 70 6C 65 78 43 6F 6D 70 6F 73   // ..4ComplexCompos
                                                                                                                            69 74 65 54 79 70 65 73 2B 42 69 6E 61 72 79 54   // iteTypes+BinaryT
                                                                                                                            72 65 65 2B 4E 6F 64 65 40 44 65 62 75 67 54 79   // ree+Node@DebugTy
                                                                                                                            70 65 50 72 6F 78 79 00 00 )                      // peProxy..
      .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                     61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
      .field assembly initonly object item1
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .field assembly initonly class ComplexCompositeTypes/BinaryTree item2
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .field assembly initonly class ComplexCompositeTypes/BinaryTree item3
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method assembly specialname rtspecialname 
              instance void  .ctor(object item1,
                                   class ComplexCompositeTypes/BinaryTree item2,
                                   class ComplexCompositeTypes/BinaryTree item3) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       28 (0x1c)
        .maxstack  2
        IL_0000:  ldarg.0
        IL_0001:  call       instance void ComplexCompositeTypes/BinaryTree::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      object ComplexCompositeTypes/BinaryTree/Node::item1
        IL_000d:  ldarg.0
        IL_000e:  ldarg.2
        IL_000f:  stfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
        IL_0014:  ldarg.0
        IL_0015:  ldarg.3
        IL_0016:  stfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
        IL_001b:  ret
      } // end of method Node::.ctor

      .method public instance object  get_Item1() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
        IL_0006:  ret
      } // end of method Node::get_Item1

      .method public instance class ComplexCompositeTypes/BinaryTree 
              get_Item2() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
        IL_0006:  ret
      } // end of method Node::get_Item2

      .method public instance class ComplexCompositeTypes/BinaryTree 
              get_Item3() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
        IL_0006:  ret
      } // end of method Node::get_Item3

      .property instance object Item1()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance object ComplexCompositeTypes/BinaryTree/Node::get_Item1()
      } // end of property Node::Item1
      .property instance class ComplexCompositeTypes/BinaryTree
              Item2()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 01 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::get_Item2()
      } // end of property Node::Item2
      .property instance class ComplexCompositeTypes/BinaryTree
              Item3()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 02 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::get_Item3()
      } // end of property Node::Item3
    } // end of class Node

    .class auto ansi serializable nested assembly beforefieldinit specialname _Empty
           extends ComplexCompositeTypes/BinaryTree
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerTypeProxyAttribute::.ctor(class [mscorlib]System.Type) = ( 01 00 36 43 6F 6D 70 6C 65 78 43 6F 6D 70 6F 73   // ..6ComplexCompos
                                                                                                                            69 74 65 54 79 70 65 73 2B 42 69 6E 61 72 79 54   // iteTypes+BinaryT
                                                                                                                            72 65 65 2B 5F 45 6D 70 74 79 40 44 65 62 75 67   // ree+_Empty@Debug
                                                                                                                            54 79 70 65 50 72 6F 78 79 00 00 )                // TypeProxy..
      .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                     61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
      .method assembly specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  2
        IL_0000:  ldarg.0
        IL_0001:  call       instance void ComplexCompositeTypes/BinaryTree::.ctor()
        IL_0006:  ret
      } // end of method _Empty::.ctor

    } // end of class _Empty

    .class auto ansi nested assembly beforefieldinit specialname Node@DebugTypeProxy
           extends [mscorlib]System.Object
    {
      .field assembly class ComplexCompositeTypes/BinaryTree/Node _obj
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method public specialname rtspecialname 
              instance void  .ctor(class ComplexCompositeTypes/BinaryTree/Node obj) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       14 (0xe)
        .maxstack  3
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      class ComplexCompositeTypes/BinaryTree/Node ComplexCompositeTypes/BinaryTree/Node@DebugTypeProxy::_obj
        IL_000d:  ret
      } // end of method Node@DebugTypeProxy::.ctor

      .method public instance object  get_Item1() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/BinaryTree/Node ComplexCompositeTypes/BinaryTree/Node@DebugTypeProxy::_obj
        IL_0006:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
        IL_000b:  ret
      } // end of method Node@DebugTypeProxy::get_Item1

      .method public instance class ComplexCompositeTypes/BinaryTree 
              get_Item2() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/BinaryTree/Node ComplexCompositeTypes/BinaryTree/Node@DebugTypeProxy::_obj
        IL_0006:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
        IL_000b:  ret
      } // end of method Node@DebugTypeProxy::get_Item2

      .method public instance class ComplexCompositeTypes/BinaryTree 
              get_Item3() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/BinaryTree/Node ComplexCompositeTypes/BinaryTree/Node@DebugTypeProxy::_obj
        IL_0006:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
        IL_000b:  ret
      } // end of method Node@DebugTypeProxy::get_Item3

      .property instance object Item1()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance object ComplexCompositeTypes/BinaryTree/Node@DebugTypeProxy::get_Item1()
      } // end of property Node@DebugTypeProxy::Item1
      .property instance class ComplexCompositeTypes/BinaryTree
              Item2()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 01 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node@DebugTypeProxy::get_Item2()
      } // end of property Node@DebugTypeProxy::Item2
      .property instance class ComplexCompositeTypes/BinaryTree
              Item3()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 02 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node@DebugTypeProxy::get_Item3()
      } // end of property Node@DebugTypeProxy::Item3
    } // end of class Node@DebugTypeProxy

    .class auto ansi nested assembly beforefieldinit specialname _Empty@DebugTypeProxy
           extends [mscorlib]System.Object
    {
      .field assembly class ComplexCompositeTypes/BinaryTree/_Empty _obj
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method public specialname rtspecialname 
              instance void  .ctor(class ComplexCompositeTypes/BinaryTree/_Empty obj) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       14 (0xe)
        .maxstack  3
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      class ComplexCompositeTypes/BinaryTree/_Empty ComplexCompositeTypes/BinaryTree/_Empty@DebugTypeProxy::_obj
        IL_000d:  ret
      } // end of method _Empty@DebugTypeProxy::.ctor

    } // end of class _Empty@DebugTypeProxy

    .field static assembly initonly class ComplexCompositeTypes/BinaryTree _unique_Empty
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method private specialname rtspecialname static 
            void  .cctor() cil managed
    {
      // Code size       11 (0xb)
      .maxstack  1
      IL_0000:  newobj     instance void ComplexCompositeTypes/BinaryTree/_Empty::.ctor()
      IL_0005:  stsfld     class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::_unique_Empty
      IL_000a:  ret
    } // end of method BinaryTree::.cctor

    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  2
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method BinaryTree::.ctor

    .method public static class ComplexCompositeTypes/BinaryTree 
            get_Empty() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 01 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::_unique_Empty
      IL_0005:  ret
    } // end of method BinaryTree::get_Empty

    .method public instance bool  get_IsEmpty() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  isinst     ComplexCompositeTypes/BinaryTree/_Empty
      IL_0006:  ldnull
      IL_0007:  cgt.un
      IL_0009:  ret
    } // end of method BinaryTree::get_IsEmpty

    .method public static class ComplexCompositeTypes/BinaryTree 
            NewNode(object item1,
                    class ComplexCompositeTypes/BinaryTree item2,
                    class ComplexCompositeTypes/BinaryTree item3) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 00 00 00 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  5
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  ldarg.2
      IL_0003:  newobj     instance void ComplexCompositeTypes/BinaryTree/Node::.ctor(object,
                                                                                      class ComplexCompositeTypes/BinaryTree,
                                                                                      class ComplexCompositeTypes/BinaryTree)
      IL_0008:  ret
    } // end of method BinaryTree::NewNode

    .method public instance bool  get_IsNode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  isinst     ComplexCompositeTypes/BinaryTree/Node
      IL_0006:  ldnull
      IL_0007:  cgt.un
      IL_0009:  ret
    } // end of method BinaryTree::get_IsNode

    .method public instance int32  get_Tag() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       15 (0xf)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/BinaryTree V_0)
      IL_0000:  ldarg.0
      IL_0001:  stloc.0
      IL_0002:  ldloc.0
      IL_0003:  isinst     ComplexCompositeTypes/BinaryTree/_Empty
      IL_0008:  brfalse.s  IL_000d

      IL_000a:  ldc.i4.1
      IL_000b:  br.s       IL_000e

      IL_000d:  ldc.i4.0
      IL_000e:  ret
    } // end of method BinaryTree::get_Tag

    .method assembly specialname instance object 
            __DebugDisplay() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       22 (0x16)
      .maxstack  4
      IL_0000:  ldstr      "%+0.8A"
      IL_0005:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/BinaryTree,string>,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string,string>::.ctor(string)
      IL_000a:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.ExtraTopLevelOperators::PrintFormatToString<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/BinaryTree,string>>(class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string>)
      IL_000f:  ldarg.0
      IL_0010:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/BinaryTree,string>::Invoke(!0)
      IL_0015:  ret
    } // end of method BinaryTree::__DebugDisplay

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       130 (0x82)
      .maxstack  7
      .locals init (int32 V_0,
               class ComplexCompositeTypes/BinaryTree/Node V_1,
               class ComplexCompositeTypes/BinaryTree/_Empty V_2)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0080

      IL_000b:  ldc.i4.0
      IL_000c:  stloc.0
      IL_000d:  ldarg.0
      IL_000e:  isinst     ComplexCompositeTypes/BinaryTree/Node
      IL_0013:  brfalse.s  IL_0017

      IL_0015:  br.s       IL_0019

      IL_0017:  br.s       IL_0075

      IL_0019:  ldarg.0
      IL_001a:  castclass  ComplexCompositeTypes/BinaryTree/Node
      IL_001f:  stloc.1
      IL_0020:  ldc.i4.0
      IL_0021:  stloc.0
      IL_0022:  ldc.i4     0x9e3779b9
      IL_0027:  ldloc.1
      IL_0028:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
      IL_002d:  ldarg.1
      IL_002e:  call       instance int32 ComplexCompositeTypes/BinaryTree::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_0033:  ldloc.0
      IL_0034:  ldc.i4.6
      IL_0035:  shl
      IL_0036:  ldloc.0
      IL_0037:  ldc.i4.2
      IL_0038:  shr
      IL_0039:  add
      IL_003a:  add
      IL_003b:  add
      IL_003c:  stloc.0
      IL_003d:  ldc.i4     0x9e3779b9
      IL_0042:  ldloc.1
      IL_0043:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
      IL_0048:  ldarg.1
      IL_0049:  call       instance int32 ComplexCompositeTypes/BinaryTree::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_004e:  ldloc.0
      IL_004f:  ldc.i4.6
      IL_0050:  shl
      IL_0051:  ldloc.0
      IL_0052:  ldc.i4.2
      IL_0053:  shr
      IL_0054:  add
      IL_0055:  add
      IL_0056:  add
      IL_0057:  stloc.0
      IL_0058:  ldc.i4     0x9e3779b9
      IL_005d:  ldarg.1
      IL_005e:  ldloc.1
      IL_005f:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
      IL_0064:  call       int32 [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericHashWithComparerIntrinsic<object>(class [mscorlib]System.Collections.IEqualityComparer,
                                                                                                                                             !!0)
      IL_0069:  ldloc.0
      IL_006a:  ldc.i4.6
      IL_006b:  shl
      IL_006c:  ldloc.0
      IL_006d:  ldc.i4.2
      IL_006e:  shr
      IL_006f:  add
      IL_0070:  add
      IL_0071:  add
      IL_0072:  stloc.0
      IL_0073:  ldloc.0
      IL_0074:  ret

      IL_0075:  ldarg.0
      IL_0076:  castclass  ComplexCompositeTypes/BinaryTree/_Empty
      IL_007b:  stloc.2
      IL_007c:  ldc.i4.1
      IL_007d:  stloc.0
      IL_007e:  ldloc.0
      IL_007f:  ret

      IL_0080:  ldc.i4.0
      IL_0081:  ret
    } // end of method BinaryTree::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/BinaryTree::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method BinaryTree::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       229 (0xe5)
      .maxstack  5
      .locals init (class ComplexCompositeTypes/BinaryTree V_0,
               class ComplexCompositeTypes/BinaryTree V_1,
               int32 V_2,
               int32 V_3,
               class ComplexCompositeTypes/BinaryTree/Node V_4,
               class ComplexCompositeTypes/BinaryTree/Node V_5,
               class [mscorlib]System.Collections.IEqualityComparer V_6,
               class ComplexCompositeTypes/BinaryTree V_7,
               class ComplexCompositeTypes/BinaryTree V_8,
               class [mscorlib]System.Collections.IEqualityComparer V_9,
               class ComplexCompositeTypes/BinaryTree V_10,
               class ComplexCompositeTypes/BinaryTree V_11,
               class ComplexCompositeTypes/BinaryTree V_12,
               class ComplexCompositeTypes/BinaryTree V_13)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_00dd

      IL_000e:  ldarg.1
      IL_000f:  isinst     ComplexCompositeTypes/BinaryTree
      IL_0014:  stloc.0
      IL_0015:  ldloc.0
      IL_0016:  brfalse.s  IL_001a

      IL_0018:  br.s       IL_001f

      IL_001a:  br         IL_00db

      IL_001f:  ldloc.0
      IL_0020:  stloc.1
      IL_0021:  ldarg.0
      IL_0022:  stloc.s    V_12
      IL_0024:  ldloc.s    V_12
      IL_0026:  isinst     ComplexCompositeTypes/BinaryTree/_Empty
      IL_002b:  brfalse.s  IL_0030

      IL_002d:  ldc.i4.1
      IL_002e:  br.s       IL_0031

      IL_0030:  ldc.i4.0
      IL_0031:  stloc.2
      IL_0032:  ldloc.1
      IL_0033:  stloc.s    V_13
      IL_0035:  ldloc.s    V_13
      IL_0037:  isinst     ComplexCompositeTypes/BinaryTree/_Empty
      IL_003c:  brfalse.s  IL_0041

      IL_003e:  ldc.i4.1
      IL_003f:  br.s       IL_0042

      IL_0041:  ldc.i4.0
      IL_0042:  stloc.3
      IL_0043:  ldloc.2
      IL_0044:  ldloc.3
      IL_0045:  bne.un.s   IL_0049

      IL_0047:  br.s       IL_004e

      IL_0049:  br         IL_00d9

      IL_004e:  ldarg.0
      IL_004f:  isinst     ComplexCompositeTypes/BinaryTree/Node
      IL_0054:  brfalse.s  IL_0058

      IL_0056:  br.s       IL_005d

      IL_0058:  br         IL_00d7

      IL_005d:  ldarg.0
      IL_005e:  castclass  ComplexCompositeTypes/BinaryTree/Node
      IL_0063:  stloc.s    V_4
      IL_0065:  ldloc.1
      IL_0066:  castclass  ComplexCompositeTypes/BinaryTree/Node
      IL_006b:  stloc.s    V_5
      IL_006d:  ldarg.2
      IL_006e:  ldloc.s    V_4
      IL_0070:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
      IL_0075:  ldloc.s    V_5
      IL_0077:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
      IL_007c:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericEqualityWithComparerIntrinsic<object>(class [mscorlib]System.Collections.IEqualityComparer,
                                                                                                                                                !!0,
                                                                                                                                                !!0)
      IL_0081:  brfalse.s  IL_0085

      IL_0083:  br.s       IL_0087

      IL_0085:  br.s       IL_00d5

      IL_0087:  ldarg.2
      IL_0088:  stloc.s    V_6
      IL_008a:  ldloc.s    V_4
      IL_008c:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
      IL_0091:  stloc.s    V_7
      IL_0093:  ldloc.s    V_5
      IL_0095:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
      IL_009a:  stloc.s    V_8
      IL_009c:  ldloc.s    V_7
      IL_009e:  ldloc.s    V_8
      IL_00a0:  ldloc.s    V_6
      IL_00a2:  call       instance bool ComplexCompositeTypes/BinaryTree::Equals(object,
                                                                                  class [mscorlib]System.Collections.IEqualityComparer)
      IL_00a7:  brfalse.s  IL_00ab

      IL_00a9:  br.s       IL_00ad

      IL_00ab:  br.s       IL_00d3

      IL_00ad:  ldarg.2
      IL_00ae:  stloc.s    V_9
      IL_00b0:  ldloc.s    V_4
      IL_00b2:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
      IL_00b7:  stloc.s    V_10
      IL_00b9:  ldloc.s    V_5
      IL_00bb:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
      IL_00c0:  stloc.s    V_11
      IL_00c2:  ldloc.s    V_10
      IL_00c4:  ldloc.s    V_11
      IL_00c6:  ldloc.s    V_9
      IL_00c8:  starg.s    comp
      IL_00ca:  starg.s    obj
      IL_00cc:  starg.s    0
      IL_00ce:  br         IL_0001

      IL_00d3:  ldc.i4.0
      IL_00d4:  ret

      IL_00d5:  ldc.i4.0
      IL_00d6:  ret

      IL_00d7:  ldc.i4.1
      IL_00d8:  ret

      IL_00d9:  ldc.i4.0
      IL_00da:  ret

      IL_00db:  ldc.i4.0
      IL_00dc:  ret

      IL_00dd:  ldarg.1
      IL_00de:  ldnull
      IL_00df:  cgt.un
      IL_00e1:  ldc.i4.0
      IL_00e2:  ceq
      IL_00e4:  ret
    } // end of method BinaryTree::Equals

    .method public specialname instance string 
            get_Contents() cil managed
    {
      // Code size       138 (0x8a)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/BinaryTree V_0,
               [1] class ComplexCompositeTypes/BinaryTree/Node V_1,
               [2] class ComplexCompositeTypes/BinaryTree right,
               [3] class ComplexCompositeTypes/BinaryTree left,
               [4] object data)
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  isinst     ComplexCompositeTypes/BinaryTree/Node
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_0013

//000155:         | Empty -> ""
      IL_000d:  ldstr      ""
      IL_0012:  ret

//000154:         match bt with
      IL_0013:  ldloc.0
      IL_0014:  castclass  ComplexCompositeTypes/BinaryTree/Node
      IL_0019:  stloc.1
      IL_001a:  ldloc.1
      IL_001b:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
      IL_0020:  stloc.2
      IL_0021:  ldloc.1
      IL_0022:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
      IL_0027:  stloc.3
      IL_0028:  ldloc.1
      IL_0029:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
      IL_002e:  stloc.s    data
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
      IL_0030:  ldstr      "("
      IL_0035:  ldloc.3
      IL_0036:  call       instance string ComplexCompositeTypes/BinaryTree::get_Contents()
      IL_003b:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0040:  ldstr      ")"
      IL_0045:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_004a:  ldstr      ":"
      IL_004f:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0054:  ldloc.s    data
      IL_0056:  callvirt   instance string [mscorlib]System.Object::ToString()
      IL_005b:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0060:  ldstr      ":"
      IL_0065:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_006a:  ldstr      "("
      IL_006f:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0074:  ldloc.2
      IL_0075:  call       instance string ComplexCompositeTypes/BinaryTree::get_Contents()
      IL_007a:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_007f:  ldstr      ")"
      IL_0084:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0089:  ret
    } // end of method BinaryTree::get_Contents

    .method public instance void  iter(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.Unit> fn) cil managed
    {
      // Code size       68 (0x44)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/BinaryTree V_0,
               [1] class ComplexCompositeTypes/BinaryTree/Node V_1,
               [2] class ComplexCompositeTypes/BinaryTree right,
               [3] class ComplexCompositeTypes/BinaryTree left,
               [4] object data)
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  isinst     ComplexCompositeTypes/BinaryTree/Node
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000e

//000162:         | Empty -> ()
      IL_000d:  ret

//000161:         match bt with
      IL_000e:  ldloc.0
      IL_000f:  castclass  ComplexCompositeTypes/BinaryTree/Node
      IL_0014:  stloc.1
      IL_0015:  ldloc.1
      IL_0016:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
      IL_001b:  stloc.2
      IL_001c:  ldloc.1
      IL_001d:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
      IL_0022:  stloc.3
      IL_0023:  ldloc.1
      IL_0024:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
      IL_0029:  stloc.s    data
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
      IL_002b:  ldloc.3
      IL_002c:  ldarg.1
      IL_002d:  call       instance void ComplexCompositeTypes/BinaryTree::iter(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.Unit>)
      IL_0032:  nop
//000165:             fn(data)
      IL_0033:  ldarg.1
      IL_0034:  ldloc.s    data
      IL_0036:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::Invoke(!0)
      IL_003b:  pop
//000166:             right.iter(fn)
      IL_003c:  ldloc.2
      IL_003d:  ldarg.1
      IL_003e:  starg.s    fn
      IL_0040:  starg.s    0
      IL_0042:  br.s       IL_0000
    } // end of method BinaryTree::iter

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/BinaryTree obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       180 (0xb4)
      .maxstack  4
      .locals init (int32 V_0,
               int32 V_1,
               class ComplexCompositeTypes/BinaryTree/Node V_2,
               class ComplexCompositeTypes/BinaryTree/Node V_3,
               class ComplexCompositeTypes/BinaryTree V_4,
               class ComplexCompositeTypes/BinaryTree V_5)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_00ac

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_001b

      IL_0016:  br         IL_00aa

      IL_001b:  ldarg.0
      IL_001c:  stloc.s    V_4
      IL_001e:  ldloc.s    V_4
      IL_0020:  isinst     ComplexCompositeTypes/BinaryTree/_Empty
      IL_0025:  brfalse.s  IL_002a

      IL_0027:  ldc.i4.1
      IL_0028:  br.s       IL_002b

      IL_002a:  ldc.i4.0
      IL_002b:  stloc.0
      IL_002c:  ldarg.1
      IL_002d:  stloc.s    V_5
      IL_002f:  ldloc.s    V_5
      IL_0031:  isinst     ComplexCompositeTypes/BinaryTree/_Empty
      IL_0036:  brfalse.s  IL_003b

      IL_0038:  ldc.i4.1
      IL_0039:  br.s       IL_003c

      IL_003b:  ldc.i4.0
      IL_003c:  stloc.1
      IL_003d:  ldloc.0
      IL_003e:  ldloc.1
      IL_003f:  bne.un.s   IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_00a8

      IL_0045:  ldarg.0
      IL_0046:  isinst     ComplexCompositeTypes/BinaryTree/Node
      IL_004b:  brfalse.s  IL_004f

      IL_004d:  br.s       IL_0051

      IL_004f:  br.s       IL_00a6

      IL_0051:  ldarg.0
      IL_0052:  castclass  ComplexCompositeTypes/BinaryTree/Node
      IL_0057:  stloc.2
      IL_0058:  ldarg.1
      IL_0059:  castclass  ComplexCompositeTypes/BinaryTree/Node
      IL_005e:  stloc.3
      IL_005f:  ldloc.2
      IL_0060:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
      IL_0065:  ldloc.3
      IL_0066:  ldfld      object ComplexCompositeTypes/BinaryTree/Node::item1
      IL_006b:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericEqualityERIntrinsic<object>(!!0,
                                                                                                                                      !!0)
      IL_0070:  brfalse.s  IL_0074

      IL_0072:  br.s       IL_0076

      IL_0074:  br.s       IL_00a4

      IL_0076:  ldloc.2
      IL_0077:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
      IL_007c:  ldloc.3
      IL_007d:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item2
      IL_0082:  call       instance bool ComplexCompositeTypes/BinaryTree::Equals(class ComplexCompositeTypes/BinaryTree)
      IL_0087:  brfalse.s  IL_008b

      IL_0089:  br.s       IL_008d

      IL_008b:  br.s       IL_00a2

      IL_008d:  ldloc.2
      IL_008e:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
      IL_0093:  ldloc.3
      IL_0094:  ldfld      class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree/Node::item3
      IL_0099:  starg.s    obj
      IL_009b:  starg.s    0
      IL_009d:  br         IL_0001

      IL_00a2:  ldc.i4.0
      IL_00a3:  ret

      IL_00a4:  ldc.i4.0
      IL_00a5:  ret

      IL_00a6:  ldc.i4.1
      IL_00a7:  ret

      IL_00a8:  ldc.i4.0
      IL_00a9:  ret

      IL_00aa:  ldc.i4.0
      IL_00ab:  ret

      IL_00ac:  ldarg.1
      IL_00ad:  ldnull
      IL_00ae:  cgt.un
      IL_00b0:  ldc.i4.0
      IL_00b1:  ceq
      IL_00b3:  ret
    } // end of method BinaryTree::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/BinaryTree V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/BinaryTree
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/BinaryTree::Equals(class ComplexCompositeTypes/BinaryTree)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method BinaryTree::Equals

    .property instance int32 Tag()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/BinaryTree::get_Tag()
    } // end of property BinaryTree::Tag
    .property class ComplexCompositeTypes/BinaryTree
            Empty()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::get_Empty()
    } // end of property BinaryTree::Empty
    .property instance bool IsEmpty()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/BinaryTree::get_IsEmpty()
    } // end of property BinaryTree::IsEmpty
    .property instance bool IsNode()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/BinaryTree::get_IsNode()
    } // end of property BinaryTree::IsNode
    .property instance string Contents()
    {
      .get instance string ComplexCompositeTypes/BinaryTree::get_Contents()
    } // end of property BinaryTree::Contents
  } // end of class BinaryTree

  .class auto ansi serializable nested assembly beforefieldinit tree_examples@179
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.Unit>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.Unit>::.ctor()
      IL_0006:  ret
    } // end of method tree_examples@179::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.Unit 
            Invoke(object arg00) cil managed
    {
      // Code size       9 (0x9)
      .maxstack  5
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       void [mscorlib]System.Console::WriteLine(object)
      IL_0007:  ldnull
      IL_0008:  ret
    } // end of method tree_examples@179::Invoke

  } // end of class tree_examples@179

  .class abstract auto autochar serializable nested public beforefieldinit Employee
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/Employee>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class ComplexCompositeTypes/Employee>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                   61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 01 00 00 00 00 00 ) 
    .class abstract auto ansi sealed nested public Tags
           extends [mscorlib]System.Object
    {
      .field public static literal int32 Grunt = int32(0x00000000)
      .field public static literal int32 Manager = int32(0x00000001)
    } // end of class Tags

    .class auto ansi serializable nested public beforefieldinit specialname Grunt
           extends ComplexCompositeTypes/Employee
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerTypeProxyAttribute::.ctor(class [mscorlib]System.Type) = ( 01 00 33 43 6F 6D 70 6C 65 78 43 6F 6D 70 6F 73   // ..3ComplexCompos
                                                                                                                            69 74 65 54 79 70 65 73 2B 45 6D 70 6C 6F 79 65   // iteTypes+Employe
                                                                                                                            65 2B 47 72 75 6E 74 40 44 65 62 75 67 54 79 70   // e+Grunt@DebugTyp
                                                                                                                            65 50 72 6F 78 79 00 00 )                         // eProxy..
      .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                     61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
      .field assembly initonly string item
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method assembly specialname rtspecialname 
              instance void  .ctor(string item) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       14 (0xe)
        .maxstack  2
        IL_0000:  ldarg.0
        IL_0001:  call       instance void ComplexCompositeTypes/Employee::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      string ComplexCompositeTypes/Employee/Grunt::item
        IL_000d:  ret
      } // end of method Grunt::.ctor

      .method public instance string  get_Item() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
        IL_0006:  ret
      } // end of method Grunt::get_Item

      .property instance string Item()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance string ComplexCompositeTypes/Employee/Grunt::get_Item()
      } // end of property Grunt::Item
    } // end of class Grunt

    .class auto ansi serializable nested public beforefieldinit specialname Manager
           extends ComplexCompositeTypes/Employee
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerTypeProxyAttribute::.ctor(class [mscorlib]System.Type) = ( 01 00 35 43 6F 6D 70 6C 65 78 43 6F 6D 70 6F 73   // ..5ComplexCompos
                                                                                                                            69 74 65 54 79 70 65 73 2B 45 6D 70 6C 6F 79 65   // iteTypes+Employe
                                                                                                                            65 2B 4D 61 6E 61 67 65 72 40 44 65 62 75 67 54   // e+Manager@DebugT
                                                                                                                            79 70 65 50 72 6F 78 79 00 00 )                   // ypeProxy..
      .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                     61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
      .field assembly initonly string item1
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .field assembly initonly class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> item2
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method assembly specialname rtspecialname 
              instance void  .ctor(string item1,
                                   class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> item2) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       21 (0x15)
        .maxstack  2
        IL_0000:  ldarg.0
        IL_0001:  call       instance void ComplexCompositeTypes/Employee::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      string ComplexCompositeTypes/Employee/Manager::item1
        IL_000d:  ldarg.0
        IL_000e:  ldarg.2
        IL_000f:  stfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
        IL_0014:  ret
      } // end of method Manager::.ctor

      .method public instance string  get_Item1() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
        IL_0006:  ret
      } // end of method Manager::get_Item1

      .method public instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> 
              get_Item2() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       7 (0x7)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
        IL_0006:  ret
      } // end of method Manager::get_Item2

      .property instance string Item1()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance string ComplexCompositeTypes/Employee/Manager::get_Item1()
      } // end of property Manager::Item1
      .property instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>
              Item2()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 01 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::get_Item2()
      } // end of property Manager::Item2
    } // end of class Manager

    .class auto ansi nested assembly beforefieldinit specialname Grunt@DebugTypeProxy
           extends [mscorlib]System.Object
    {
      .field assembly class ComplexCompositeTypes/Employee/Grunt _obj
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method public specialname rtspecialname 
              instance void  .ctor(class ComplexCompositeTypes/Employee/Grunt obj) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       14 (0xe)
        .maxstack  3
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      class ComplexCompositeTypes/Employee/Grunt ComplexCompositeTypes/Employee/Grunt@DebugTypeProxy::_obj
        IL_000d:  ret
      } // end of method Grunt@DebugTypeProxy::.ctor

      .method public instance string  get_Item() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Employee/Grunt ComplexCompositeTypes/Employee/Grunt@DebugTypeProxy::_obj
        IL_0006:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
        IL_000b:  ret
      } // end of method Grunt@DebugTypeProxy::get_Item

      .property instance string Item()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance string ComplexCompositeTypes/Employee/Grunt@DebugTypeProxy::get_Item()
      } // end of property Grunt@DebugTypeProxy::Item
    } // end of class Grunt@DebugTypeProxy

    .class auto ansi nested assembly beforefieldinit specialname Manager@DebugTypeProxy
           extends [mscorlib]System.Object
    {
      .field assembly class ComplexCompositeTypes/Employee/Manager _obj
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .method public specialname rtspecialname 
              instance void  .ctor(class ComplexCompositeTypes/Employee/Manager obj) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       14 (0xe)
        .maxstack  3
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ldarg.0
        IL_0007:  ldarg.1
        IL_0008:  stfld      class ComplexCompositeTypes/Employee/Manager ComplexCompositeTypes/Employee/Manager@DebugTypeProxy::_obj
        IL_000d:  ret
      } // end of method Manager@DebugTypeProxy::.ctor

      .method public instance string  get_Item1() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Employee/Manager ComplexCompositeTypes/Employee/Manager@DebugTypeProxy::_obj
        IL_0006:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
        IL_000b:  ret
      } // end of method Manager@DebugTypeProxy::get_Item1

      .method public instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> 
              get_Item2() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       12 (0xc)
        .maxstack  4
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ComplexCompositeTypes/Employee/Manager ComplexCompositeTypes/Employee/Manager@DebugTypeProxy::_obj
        IL_0006:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
        IL_000b:  ret
      } // end of method Manager@DebugTypeProxy::get_Item2

      .property instance string Item1()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance string ComplexCompositeTypes/Employee/Manager@DebugTypeProxy::get_Item1()
      } // end of property Manager@DebugTypeProxy::Item1
      .property instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>
              Item2()
      {
        .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                    int32,
                                                                                                    int32) = ( 01 00 04 00 00 00 01 00 00 00 01 00 00 00 00 00 ) 
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        .get instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager@DebugTypeProxy::get_Item2()
      } // end of property Manager@DebugTypeProxy::Item2
    } // end of class Manager@DebugTypeProxy

    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  2
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method Employee::.ctor

    .method public static class ComplexCompositeTypes/Employee 
            NewManager(string item1,
                       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> item2) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 01 00 00 00 00 00 ) 
      // Code size       8 (0x8)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  newobj     instance void ComplexCompositeTypes/Employee/Manager::.ctor(string,
                                                                                       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>)
      IL_0007:  ret
    } // end of method Employee::NewManager

    .method public instance bool  get_IsManager() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0006:  ldnull
      IL_0007:  cgt.un
      IL_0009:  ret
    } // end of method Employee::get_IsManager

    .method public static class ComplexCompositeTypes/Employee 
            NewGrunt(string item) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 00 00 00 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  3
      IL_0000:  ldarg.0
      IL_0001:  newobj     instance void ComplexCompositeTypes/Employee/Grunt::.ctor(string)
      IL_0006:  ret
    } // end of method Employee::NewGrunt

    .method public instance bool  get_IsGrunt() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  isinst     ComplexCompositeTypes/Employee/Grunt
      IL_0006:  ldnull
      IL_0007:  cgt.un
      IL_0009:  ret
    } // end of method Employee::get_IsGrunt

    .method public instance int32  get_Tag() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       15 (0xf)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Employee V_0)
      IL_0000:  ldarg.0
      IL_0001:  stloc.0
      IL_0002:  ldloc.0
      IL_0003:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0008:  brfalse.s  IL_000d

      IL_000a:  ldc.i4.1
      IL_000b:  br.s       IL_000e

      IL_000d:  ldc.i4.0
      IL_000e:  ret
    } // end of method Employee::get_Tag

    .method assembly specialname instance object 
            __DebugDisplay() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       22 (0x16)
      .maxstack  4
      IL_0000:  ldstr      "%+0.8A"
      IL_0005:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Employee,string>,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string,string>::.ctor(string)
      IL_000a:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.ExtraTopLevelOperators::PrintFormatToString<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Employee,string>>(class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string>)
      IL_000f:  ldarg.0
      IL_0010:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Employee,string>::Invoke(!0)
      IL_0015:  ret
    } // end of method Employee::__DebugDisplay

    .method public hidebysig virtual final 
            instance int32  CompareTo(class ComplexCompositeTypes/Employee obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       248 (0xf8)
      .maxstack  5
      .locals init (int32 V_0,
               int32 V_1,
               class ComplexCompositeTypes/Employee/Grunt V_2,
               class ComplexCompositeTypes/Employee/Grunt V_3,
               class [mscorlib]System.Collections.IComparer V_4,
               class ComplexCompositeTypes/Employee/Manager V_5,
               class ComplexCompositeTypes/Employee/Manager V_6,
               int32 V_7,
               class [mscorlib]System.Collections.IComparer V_8,
               class [mscorlib]System.Collections.IComparer V_9,
               class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> V_10,
               class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> V_11,
               class ComplexCompositeTypes/Employee V_12,
               class ComplexCompositeTypes/Employee V_13)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_00ea

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_001b

      IL_0016:  br         IL_00e8

      IL_001b:  ldarg.0
      IL_001c:  stloc.s    V_12
      IL_001e:  ldloc.s    V_12
      IL_0020:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0025:  brfalse.s  IL_002a

      IL_0027:  ldc.i4.1
      IL_0028:  br.s       IL_002b

      IL_002a:  ldc.i4.0
      IL_002b:  stloc.0
      IL_002c:  ldarg.1
      IL_002d:  stloc.s    V_13
      IL_002f:  ldloc.s    V_13
      IL_0031:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0036:  brfalse.s  IL_003b

      IL_0038:  ldc.i4.1
      IL_0039:  br.s       IL_003c

      IL_003b:  ldc.i4.0
      IL_003c:  stloc.1
      IL_003d:  ldloc.0
      IL_003e:  ldloc.1
      IL_003f:  bne.un.s   IL_0043

      IL_0041:  br.s       IL_0048

      IL_0043:  br         IL_00e4

      IL_0048:  ldarg.0
      IL_0049:  isinst     ComplexCompositeTypes/Employee/Grunt
      IL_004e:  brfalse.s  IL_0052

      IL_0050:  br.s       IL_0054

      IL_0052:  br.s       IL_007b

      IL_0054:  ldarg.0
      IL_0055:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_005a:  stloc.2
      IL_005b:  ldarg.1
      IL_005c:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0061:  stloc.3
      IL_0062:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0067:  stloc.s    V_4
      IL_0069:  ldloc.2
      IL_006a:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_006f:  ldloc.3
      IL_0070:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_0075:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_007a:  ret

      IL_007b:  ldarg.0
      IL_007c:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0081:  stloc.s    V_5
      IL_0083:  ldarg.1
      IL_0084:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0089:  stloc.s    V_6
      IL_008b:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0090:  stloc.s    V_8
      IL_0092:  ldloc.s    V_5
      IL_0094:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_0099:  ldloc.s    V_6
      IL_009b:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_00a0:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_00a5:  stloc.s    V_7
      IL_00a7:  ldloc.s    V_7
      IL_00a9:  ldc.i4.0
      IL_00aa:  bge.s      IL_00ae

      IL_00ac:  br.s       IL_00b0

      IL_00ae:  br.s       IL_00b3

      IL_00b0:  ldloc.s    V_7
      IL_00b2:  ret

      IL_00b3:  ldloc.s    V_7
      IL_00b5:  ldc.i4.0
      IL_00b6:  ble.s      IL_00ba

      IL_00b8:  br.s       IL_00bc

      IL_00ba:  br.s       IL_00bf

      IL_00bc:  ldloc.s    V_7
      IL_00be:  ret

      IL_00bf:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_00c4:  stloc.s    V_9
      IL_00c6:  ldloc.s    V_5
      IL_00c8:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_00cd:  stloc.s    V_10
      IL_00cf:  ldloc.s    V_6
      IL_00d1:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_00d6:  stloc.s    V_11
      IL_00d8:  ldloc.s    V_10
      IL_00da:  ldloc.s    V_11
      IL_00dc:  ldloc.s    V_9
      IL_00de:  call       instance int32 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::CompareTo(object,
                                                                                                                                                        class [mscorlib]System.Collections.IComparer)
      IL_00e3:  ret

      IL_00e4:  ldloc.0
      IL_00e5:  ldloc.1
      IL_00e6:  sub
      IL_00e7:  ret

      IL_00e8:  ldc.i4.1
      IL_00e9:  ret

      IL_00ea:  ldarg.1
      IL_00eb:  ldnull
      IL_00ec:  cgt.un
      IL_00ee:  brfalse.s  IL_00f2

      IL_00f0:  br.s       IL_00f4

      IL_00f2:  br.s       IL_00f6

      IL_00f4:  ldc.i4.m1
      IL_00f5:  ret

      IL_00f6:  ldc.i4.0
      IL_00f7:  ret
    } // end of method Employee::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000180: 
//000181: type Employee =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/Employee
      IL_0008:  call       instance int32 ComplexCompositeTypes/Employee::CompareTo(class ComplexCompositeTypes/Employee)
      IL_000d:  ret
    } // end of method Employee::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       255 (0xff)
      .maxstack  5
      .locals init ([0] class ComplexCompositeTypes/Employee V_0,
               [1] int32 V_1,
               [2] int32 V_2,
               [3] class ComplexCompositeTypes/Employee/Grunt V_3,
               [4] class ComplexCompositeTypes/Employee/Grunt V_4,
               [5] class [mscorlib]System.Collections.IComparer V_5,
               [6] class ComplexCompositeTypes/Employee/Manager V_6,
               [7] class ComplexCompositeTypes/Employee/Manager V_7,
               [8] int32 V_8,
               [9] class [mscorlib]System.Collections.IComparer V_9,
               [10] class [mscorlib]System.Collections.IComparer V_10,
               [11] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> V_11,
               [12] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> V_12,
               [13] class ComplexCompositeTypes/Employee V_13,
               [14] class ComplexCompositeTypes/Employee V_14)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/Employee
      IL_0007:  stloc.0
      IL_0008:  ldarg.0
      IL_0009:  ldnull
      IL_000a:  cgt.un
      IL_000c:  brfalse.s  IL_0010

      IL_000e:  br.s       IL_0015

      IL_0010:  br         IL_00ec

//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0015:  ldarg.1
      IL_0016:  unbox.any  ComplexCompositeTypes/Employee
      IL_001b:  ldnull
      IL_001c:  cgt.un
      IL_001e:  brfalse.s  IL_0022

      IL_0020:  br.s       IL_0027

      IL_0022:  br         IL_00ea

      IL_0027:  ldarg.0
      IL_0028:  stloc.s    V_13
      IL_002a:  ldloc.s    V_13
      IL_002c:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0031:  brfalse.s  IL_0036

      IL_0033:  ldc.i4.1
      IL_0034:  br.s       IL_0037

      IL_0036:  ldc.i4.0
      IL_0037:  stloc.1
      IL_0038:  ldloc.0
      IL_0039:  stloc.s    V_14
      IL_003b:  ldloc.s    V_14
      IL_003d:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0042:  brfalse.s  IL_0047

      IL_0044:  ldc.i4.1
      IL_0045:  br.s       IL_0048

      IL_0047:  ldc.i4.0
      IL_0048:  stloc.2
      IL_0049:  ldloc.1
      IL_004a:  ldloc.2
      IL_004b:  bne.un.s   IL_004f

      IL_004d:  br.s       IL_0054

      IL_004f:  br         IL_00e6

      IL_0054:  ldarg.0
      IL_0055:  isinst     ComplexCompositeTypes/Employee/Grunt
      IL_005a:  brfalse.s  IL_005e

      IL_005c:  br.s       IL_0060

      IL_005e:  br.s       IL_0085

      IL_0060:  ldarg.0
      IL_0061:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0066:  stloc.3
      IL_0067:  ldloc.0
      IL_0068:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_006d:  stloc.s    V_4
      IL_006f:  ldarg.2
      IL_0070:  stloc.s    V_5
      IL_0072:  ldloc.3
      IL_0073:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_0078:  ldloc.s    V_4
      IL_007a:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_007f:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0084:  ret

      IL_0085:  ldarg.0
      IL_0086:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_008b:  stloc.s    V_6
      IL_008d:  ldloc.0
      IL_008e:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0093:  stloc.s    V_7
      IL_0095:  ldarg.2
      IL_0096:  stloc.s    V_9
      IL_0098:  ldloc.s    V_6
      IL_009a:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_009f:  ldloc.s    V_7
      IL_00a1:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_00a6:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_00ab:  stloc.s    V_8
      IL_00ad:  ldloc.s    V_8
      IL_00af:  ldc.i4.0
      IL_00b0:  bge.s      IL_00b4

      IL_00b2:  br.s       IL_00b6

      IL_00b4:  br.s       IL_00b9

      IL_00b6:  ldloc.s    V_8
      IL_00b8:  ret

      IL_00b9:  ldloc.s    V_8
      IL_00bb:  ldc.i4.0
      IL_00bc:  ble.s      IL_00c0

      IL_00be:  br.s       IL_00c2

      IL_00c0:  br.s       IL_00c5

      IL_00c2:  ldloc.s    V_8
      IL_00c4:  ret

      IL_00c5:  ldarg.2
      IL_00c6:  stloc.s    V_10
      IL_00c8:  ldloc.s    V_6
      IL_00ca:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_00cf:  stloc.s    V_11
      IL_00d1:  ldloc.s    V_7
      IL_00d3:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_00d8:  stloc.s    V_12
      IL_00da:  ldloc.s    V_11
      IL_00dc:  ldloc.s    V_12
      IL_00de:  ldloc.s    V_10
      IL_00e0:  call       instance int32 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::CompareTo(object,
                                                                                                                                                        class [mscorlib]System.Collections.IComparer)
      IL_00e5:  ret

      IL_00e6:  ldloc.1
      IL_00e7:  ldloc.2
      IL_00e8:  sub
      IL_00e9:  ret

      IL_00ea:  ldc.i4.1
      IL_00eb:  ret

      IL_00ec:  ldarg.1
      IL_00ed:  unbox.any  ComplexCompositeTypes/Employee
      IL_00f2:  ldnull
      IL_00f3:  cgt.un
      IL_00f5:  brfalse.s  IL_00f9

      IL_00f7:  br.s       IL_00fb

      IL_00f9:  br.s       IL_00fd

      IL_00fb:  ldc.i4.m1
      IL_00fc:  ret

      IL_00fd:  ldc.i4.0
      IL_00fe:  ret
    } // end of method Employee::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       166 (0xa6)
      .maxstack  7
      .locals init (int32 V_0,
               class ComplexCompositeTypes/Employee/Grunt V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               string V_3,
               class ComplexCompositeTypes/Employee/Manager V_4,
               class [mscorlib]System.Collections.IEqualityComparer V_5,
               string V_6)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_00a4

      IL_000e:  ldc.i4.0
      IL_000f:  stloc.0
      IL_0010:  ldarg.0
      IL_0011:  isinst     ComplexCompositeTypes/Employee/Grunt
      IL_0016:  brfalse.s  IL_001a

      IL_0018:  br.s       IL_001c

      IL_001a:  br.s       IL_004f

      IL_001c:  ldarg.0
      IL_001d:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0022:  stloc.1
      IL_0023:  ldc.i4.0
      IL_0024:  stloc.0
      IL_0025:  ldc.i4     0x9e3779b9
      IL_002a:  ldarg.1
      IL_002b:  stloc.2
      IL_002c:  ldloc.1
      IL_002d:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_0032:  stloc.3
      IL_0033:  ldloc.3
      IL_0034:  brfalse.s  IL_0038

      IL_0036:  br.s       IL_003c

      IL_0038:  ldc.i4.0
      IL_0039:  nop
      IL_003a:  br.s       IL_0043

      IL_003c:  ldloc.3
      IL_003d:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0042:  nop
      IL_0043:  ldloc.0
      IL_0044:  ldc.i4.6
      IL_0045:  shl
      IL_0046:  ldloc.0
      IL_0047:  ldc.i4.2
      IL_0048:  shr
      IL_0049:  add
      IL_004a:  add
      IL_004b:  add
      IL_004c:  stloc.0
      IL_004d:  ldloc.0
      IL_004e:  ret

      IL_004f:  ldarg.0
      IL_0050:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0055:  stloc.s    V_4
      IL_0057:  ldc.i4.1
      IL_0058:  stloc.0
      IL_0059:  ldc.i4     0x9e3779b9
      IL_005e:  ldloc.s    V_4
      IL_0060:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_0065:  ldarg.1
      IL_0066:  call       instance int32 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_006b:  ldloc.0
      IL_006c:  ldc.i4.6
      IL_006d:  shl
      IL_006e:  ldloc.0
      IL_006f:  ldc.i4.2
      IL_0070:  shr
      IL_0071:  add
      IL_0072:  add
      IL_0073:  add
      IL_0074:  stloc.0
      IL_0075:  ldc.i4     0x9e3779b9
      IL_007a:  ldarg.1
      IL_007b:  stloc.s    V_5
      IL_007d:  ldloc.s    V_4
      IL_007f:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_0084:  stloc.s    V_6
      IL_0086:  ldloc.s    V_6
      IL_0088:  brfalse.s  IL_008c

      IL_008a:  br.s       IL_0090

      IL_008c:  ldc.i4.0
      IL_008d:  nop
      IL_008e:  br.s       IL_0098

      IL_0090:  ldloc.s    V_6
      IL_0092:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0097:  nop
      IL_0098:  ldloc.0
      IL_0099:  ldc.i4.6
      IL_009a:  shl
      IL_009b:  ldloc.0
      IL_009c:  ldc.i4.2
      IL_009d:  shr
      IL_009e:  add
      IL_009f:  add
      IL_00a0:  add
      IL_00a1:  stloc.0
      IL_00a2:  ldloc.0
      IL_00a3:  ret

      IL_00a4:  ldc.i4.0
      IL_00a5:  ret
    } // end of method Employee::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000181: type Employee =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/Employee::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method Employee::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       220 (0xdc)
      .maxstack  5
      .locals init (class ComplexCompositeTypes/Employee V_0,
               class ComplexCompositeTypes/Employee V_1,
               int32 V_2,
               int32 V_3,
               class ComplexCompositeTypes/Employee/Grunt V_4,
               class ComplexCompositeTypes/Employee/Grunt V_5,
               class [mscorlib]System.Collections.IEqualityComparer V_6,
               class ComplexCompositeTypes/Employee/Manager V_7,
               class ComplexCompositeTypes/Employee/Manager V_8,
               class [mscorlib]System.Collections.IEqualityComparer V_9,
               class [mscorlib]System.Collections.IEqualityComparer V_10,
               class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> V_11,
               class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> V_12,
               class ComplexCompositeTypes/Employee V_13,
               class ComplexCompositeTypes/Employee V_14)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_00d4

      IL_000e:  ldarg.1
      IL_000f:  isinst     ComplexCompositeTypes/Employee
      IL_0014:  stloc.0
      IL_0015:  ldloc.0
      IL_0016:  brfalse.s  IL_001a

      IL_0018:  br.s       IL_001f

      IL_001a:  br         IL_00d2

      IL_001f:  ldloc.0
      IL_0020:  stloc.1
      IL_0021:  ldarg.0
      IL_0022:  stloc.s    V_13
      IL_0024:  ldloc.s    V_13
      IL_0026:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_002b:  brfalse.s  IL_0030

      IL_002d:  ldc.i4.1
      IL_002e:  br.s       IL_0031

      IL_0030:  ldc.i4.0
      IL_0031:  stloc.2
      IL_0032:  ldloc.1
      IL_0033:  stloc.s    V_14
      IL_0035:  ldloc.s    V_14
      IL_0037:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_003c:  brfalse.s  IL_0041

      IL_003e:  ldc.i4.1
      IL_003f:  br.s       IL_0042

      IL_0041:  ldc.i4.0
      IL_0042:  stloc.3
      IL_0043:  ldloc.2
      IL_0044:  ldloc.3
      IL_0045:  bne.un.s   IL_0049

      IL_0047:  br.s       IL_004e

      IL_0049:  br         IL_00d0

      IL_004e:  ldarg.0
      IL_004f:  isinst     ComplexCompositeTypes/Employee/Grunt
      IL_0054:  brfalse.s  IL_0058

      IL_0056:  br.s       IL_005a

      IL_0058:  br.s       IL_0081

      IL_005a:  ldarg.0
      IL_005b:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0060:  stloc.s    V_4
      IL_0062:  ldloc.1
      IL_0063:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0068:  stloc.s    V_5
      IL_006a:  ldarg.2
      IL_006b:  stloc.s    V_6
      IL_006d:  ldloc.s    V_4
      IL_006f:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_0074:  ldloc.s    V_5
      IL_0076:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_007b:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0080:  ret

      IL_0081:  ldarg.0
      IL_0082:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0087:  stloc.s    V_7
      IL_0089:  ldloc.1
      IL_008a:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_008f:  stloc.s    V_8
      IL_0091:  ldarg.2
      IL_0092:  stloc.s    V_9
      IL_0094:  ldloc.s    V_7
      IL_0096:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_009b:  ldloc.s    V_8
      IL_009d:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_00a2:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_00a7:  brfalse.s  IL_00ab

      IL_00a9:  br.s       IL_00ad

      IL_00ab:  br.s       IL_00ce

      IL_00ad:  ldarg.2
      IL_00ae:  stloc.s    V_10
      IL_00b0:  ldloc.s    V_7
      IL_00b2:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_00b7:  stloc.s    V_11
      IL_00b9:  ldloc.s    V_8
      IL_00bb:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_00c0:  stloc.s    V_12
      IL_00c2:  ldloc.s    V_11
      IL_00c4:  ldloc.s    V_12
      IL_00c6:  ldloc.s    V_10
      IL_00c8:  call       instance bool class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::Equals(object,
                                                                                                                                                    class [mscorlib]System.Collections.IEqualityComparer)
      IL_00cd:  ret

      IL_00ce:  ldc.i4.0
      IL_00cf:  ret

      IL_00d0:  ldc.i4.0
      IL_00d1:  ret

      IL_00d2:  ldc.i4.0
      IL_00d3:  ret

      IL_00d4:  ldarg.1
      IL_00d5:  ldnull
      IL_00d6:  cgt.un
      IL_00d8:  ldc.i4.0
      IL_00d9:  ceq
      IL_00db:  ret
    } // end of method Employee::Equals

    .method public specialname instance string 
            get_Name() cil managed
    {
      // Code size       47 (0x2f)
      .maxstack  3
      .locals init ([0] class ComplexCompositeTypes/Employee V_0,
               [1] class ComplexCompositeTypes/Employee/Grunt V_1,
               [2] string n,
               [3] class ComplexCompositeTypes/Employee/Manager V_3,
               [4] string V_4)
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_001d

      IL_000d:  ldloc.0
      IL_000e:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0013:  stloc.1
      IL_0014:  ldloc.1
      IL_0015:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_001a:  stloc.2
//000186:         | Grunt(n) -> n
      IL_001b:  ldloc.2
      IL_001c:  ret

//000185:         match e with
      IL_001d:  ldloc.0
      IL_001e:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0023:  stloc.3
      IL_0024:  ldloc.3
      IL_0025:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_002a:  stloc.s    V_4
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
      IL_002c:  ldloc.s    V_4
      IL_002e:  ret
    } // end of method Employee::get_Name

    .method public specialname instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> 
            get_Subordinates() cil managed
    {
      // Code size       42 (0x2a)
      .maxstack  3
      .locals init ([0] class ComplexCompositeTypes/Employee V_0,
               [1] class ComplexCompositeTypes/Employee/Grunt V_1,
               [2] class ComplexCompositeTypes/Employee/Manager V_2,
               [3] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> es)
//000188:     member e.Subordinates =
//000189:         match e with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_001a

      IL_000d:  ldloc.0
      IL_000e:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0013:  stloc.1
//000190:         | Grunt(_) -> []
      IL_0014:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::get_Empty()
      IL_0019:  ret

//000189:         match e with
      IL_001a:  ldloc.0
      IL_001b:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0020:  stloc.2
      IL_0021:  ldloc.2
      IL_0022:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_0027:  stloc.3
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
      IL_0028:  ldloc.3
      IL_0029:  ret
    } // end of method Employee::get_Subordinates

    .method public specialname instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<object> 
            get_Empire() cil managed
    {
      // Code size       52 (0x34)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/Employee V_0,
               [1] class ComplexCompositeTypes/Employee/Grunt V_1,
               [2] class ComplexCompositeTypes/Employee/Manager V_2,
               [3] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> es)
//000192:     member e.Empire =
//000193:         match e with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_001a

      IL_000d:  ldloc.0
      IL_000e:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0013:  stloc.1
//000194:         | Grunt(_) -> []
      IL_0014:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<object>::get_Empty()
      IL_0019:  ret

//000193:         match e with
      IL_001a:  ldloc.0
      IL_001b:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0020:  stloc.2
      IL_0021:  ldloc.2
      IL_0022:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_0027:  stloc.3
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
      IL_0028:  newobj     instance void ComplexCompositeTypes/get_Empire@197::.ctor()
      IL_002d:  ldloc.3
      IL_002e:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!!1> [FSharp.Core]Microsoft.FSharp.Collections.ListModule::Collect<class ComplexCompositeTypes/Employee,object>(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<!!0,class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!!1>>,
                                                                                                                                                                                                        class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!!0>)
      IL_0033:  ret
    } // end of method Employee::get_Empire

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/Employee obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       188 (0xbc)
      .maxstack  4
      .locals init (int32 V_0,
               int32 V_1,
               class ComplexCompositeTypes/Employee/Grunt V_2,
               class ComplexCompositeTypes/Employee/Grunt V_3,
               class ComplexCompositeTypes/Employee/Manager V_4,
               class ComplexCompositeTypes/Employee/Manager V_5,
               class ComplexCompositeTypes/Employee V_6,
               class ComplexCompositeTypes/Employee V_7)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_00b4

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_001b

      IL_0016:  br         IL_00b2

      IL_001b:  ldarg.0
      IL_001c:  stloc.s    V_6
      IL_001e:  ldloc.s    V_6
      IL_0020:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0025:  brfalse.s  IL_002a

      IL_0027:  ldc.i4.1
      IL_0028:  br.s       IL_002b

      IL_002a:  ldc.i4.0
      IL_002b:  stloc.0
      IL_002c:  ldarg.1
      IL_002d:  stloc.s    V_7
      IL_002f:  ldloc.s    V_7
      IL_0031:  isinst     ComplexCompositeTypes/Employee/Manager
      IL_0036:  brfalse.s  IL_003b

      IL_0038:  ldc.i4.1
      IL_0039:  br.s       IL_003c

      IL_003b:  ldc.i4.0
      IL_003c:  stloc.1
      IL_003d:  ldloc.0
      IL_003e:  ldloc.1
      IL_003f:  bne.un.s   IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_00b0

      IL_0045:  ldarg.0
      IL_0046:  isinst     ComplexCompositeTypes/Employee/Grunt
      IL_004b:  brfalse.s  IL_004f

      IL_004d:  br.s       IL_0051

      IL_004f:  br.s       IL_0071

      IL_0051:  ldarg.0
      IL_0052:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_0057:  stloc.2
      IL_0058:  ldarg.1
      IL_0059:  castclass  ComplexCompositeTypes/Employee/Grunt
      IL_005e:  stloc.3
      IL_005f:  ldloc.2
      IL_0060:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_0065:  ldloc.3
      IL_0066:  ldfld      string ComplexCompositeTypes/Employee/Grunt::item
      IL_006b:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0070:  ret

      IL_0071:  ldarg.0
      IL_0072:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_0077:  stloc.s    V_4
      IL_0079:  ldarg.1
      IL_007a:  castclass  ComplexCompositeTypes/Employee/Manager
      IL_007f:  stloc.s    V_5
      IL_0081:  ldloc.s    V_4
      IL_0083:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_0088:  ldloc.s    V_5
      IL_008a:  ldfld      string ComplexCompositeTypes/Employee/Manager::item1
      IL_008f:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0094:  brfalse.s  IL_0098

      IL_0096:  br.s       IL_009a

      IL_0098:  br.s       IL_00ae

      IL_009a:  ldloc.s    V_4
      IL_009c:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_00a1:  ldloc.s    V_5
      IL_00a3:  ldfld      class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee/Manager::item2
      IL_00a8:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericEqualityERIntrinsic<class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>>(!!0,
                                                                                                                                                                                                                                  !!0)
      IL_00ad:  ret

      IL_00ae:  ldc.i4.0
      IL_00af:  ret

      IL_00b0:  ldc.i4.0
      IL_00b1:  ret

      IL_00b2:  ldc.i4.0
      IL_00b3:  ret

      IL_00b4:  ldarg.1
      IL_00b5:  ldnull
      IL_00b6:  cgt.un
      IL_00b8:  ldc.i4.0
      IL_00b9:  ceq
      IL_00bb:  ret
    } // end of method Employee::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Employee V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/Employee
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/Employee::Equals(class ComplexCompositeTypes/Employee)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method Employee::Equals

    .property instance int32 Tag()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/Employee::get_Tag()
    } // end of property Employee::Tag
    .property instance bool IsManager()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Employee::get_IsManager()
    } // end of property Employee::IsManager
    .property instance bool IsGrunt()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/Employee::get_IsGrunt()
    } // end of property Employee::IsGrunt
    .property instance string Name()
    {
      .get instance string ComplexCompositeTypes/Employee::get_Name()
    } // end of property Employee::Name
    .property instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>
            Subordinates()
    {
      .get instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee> ComplexCompositeTypes/Employee::get_Subordinates()
    } // end of property Employee::Subordinates
    .property instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<object>
            Empire()
    {
      .get instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<object> ComplexCompositeTypes/Employee::get_Empire()
    } // end of property Employee::Empire
  } // end of class Employee

  .class auto ansi serializable nested assembly beforefieldinit get_Empire@197
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Employee,class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<object>>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Employee,class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<object>>::.ctor()
      IL_0006:  ret
    } // end of method get_Empire@197::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<object> 
            Invoke(class ComplexCompositeTypes/Employee e) cil managed
    {
      // Code size       8 (0x8)
      .maxstack  5
//000197:                 (fun (e : Employee) -> e.Empire) es
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       instance class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<object> ComplexCompositeTypes/Employee::get_Empire()
      IL_0007:  ret
    } // end of method get_Empire@197::Invoke

  } // end of class get_Empire@197

  .class auto autochar serializable nested public beforefieldinit State
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/State>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class ComplexCompositeTypes/State>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                   61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 01 00 00 00 00 00 ) 
    .class abstract auto ansi sealed nested public Tags
           extends [mscorlib]System.Object
    {
      .field public static literal int32 New = int32(0x00000000)
      .field public static literal int32 Opened = int32(0x00000001)
      .field public static literal int32 Closed = int32(0x00000002)
    } // end of class Tags

    .field assembly initonly int32 _tag
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/State _unique_New
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/State _unique_Opened
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field static assembly initonly class ComplexCompositeTypes/State _unique_Closed
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method private specialname rtspecialname static 
            void  .cctor() cil managed
    {
      // Code size       34 (0x22)
      .maxstack  1
      IL_0000:  ldc.i4.0
      IL_0001:  newobj     instance void ComplexCompositeTypes/State::.ctor(int32)
      IL_0006:  stsfld     class ComplexCompositeTypes/State ComplexCompositeTypes/State::_unique_New
      IL_000b:  ldc.i4.1
      IL_000c:  newobj     instance void ComplexCompositeTypes/State::.ctor(int32)
      IL_0011:  stsfld     class ComplexCompositeTypes/State ComplexCompositeTypes/State::_unique_Opened
      IL_0016:  ldc.i4.2
      IL_0017:  newobj     instance void ComplexCompositeTypes/State::.ctor(int32)
      IL_001c:  stsfld     class ComplexCompositeTypes/State ComplexCompositeTypes/State::_unique_Closed
      IL_0021:  ret
    } // end of method State::.cctor

    .method assembly specialname rtspecialname 
            instance void  .ctor(int32 _tag) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  2
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      int32 ComplexCompositeTypes/State::_tag
      IL_000d:  ret
    } // end of method State::.ctor

    .method public static class ComplexCompositeTypes/State 
            get_Closed() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 02 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/State ComplexCompositeTypes/State::_unique_Closed
      IL_0005:  ret
    } // end of method State::get_Closed

    .method public instance bool  get_IsClosed() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/State::get_Tag()
      IL_0006:  ldc.i4.2
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method State::get_IsClosed

    .method public static class ComplexCompositeTypes/State 
            get_Opened() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 01 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/State ComplexCompositeTypes/State::_unique_Opened
      IL_0005:  ret
    } // end of method State::get_Opened

    .method public instance bool  get_IsOpened() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/State::get_Tag()
      IL_0006:  ldc.i4.1
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method State::get_IsOpened

    .method public static class ComplexCompositeTypes/State 
            get_New() cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 00 00 00 00 00 00 ) 
      // Code size       6 (0x6)
      .maxstack  2
      IL_0000:  ldsfld     class ComplexCompositeTypes/State ComplexCompositeTypes/State::_unique_New
      IL_0005:  ret
    } // end of method State::get_New

    .method public instance bool  get_IsNew() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance int32 ComplexCompositeTypes/State::get_Tag()
      IL_0006:  ldc.i4.0
      IL_0007:  ceq
      IL_0009:  ret
    } // end of method State::get_IsNew

    .method public instance int32  get_Tag() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_0006:  ret
    } // end of method State::get_Tag

    .method assembly specialname instance object 
            __DebugDisplay() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       22 (0x16)
      .maxstack  4
      IL_0000:  ldstr      "%+0.8A"
      IL_0005:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/State,string>,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string,string>::.ctor(string)
      IL_000a:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.ExtraTopLevelOperators::PrintFormatToString<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/State,string>>(class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string>)
      IL_000f:  ldarg.0
      IL_0010:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/State,string>::Invoke(!0)
      IL_0015:  ret
    } // end of method State::__DebugDisplay

    .method public hidebysig virtual final 
            instance int32  CompareTo(class ComplexCompositeTypes/State obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       65 (0x41)
      .maxstack  4
      .locals init (int32 V_0,
               int32 V_1)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0033

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_0031

      IL_0015:  ldarg.0
      IL_0016:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_001b:  stloc.0
      IL_001c:  ldarg.1
      IL_001d:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_0022:  stloc.1
      IL_0023:  ldloc.0
      IL_0024:  ldloc.1
      IL_0025:  bne.un.s   IL_0029

      IL_0027:  br.s       IL_002b

      IL_0029:  br.s       IL_002d

      IL_002b:  ldc.i4.0
      IL_002c:  ret

      IL_002d:  ldloc.0
      IL_002e:  ldloc.1
      IL_002f:  sub
      IL_0030:  ret

      IL_0031:  ldc.i4.1
      IL_0032:  ret

      IL_0033:  ldarg.1
      IL_0034:  ldnull
      IL_0035:  cgt.un
      IL_0037:  brfalse.s  IL_003b

      IL_0039:  br.s       IL_003d

      IL_003b:  br.s       IL_003f

      IL_003d:  ldc.i4.m1
      IL_003e:  ret

      IL_003f:  ldc.i4.0
      IL_0040:  ret
    } // end of method State::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/State
      IL_0008:  call       instance int32 ComplexCompositeTypes/State::CompareTo(class ComplexCompositeTypes/State)
      IL_000d:  ret
    } // end of method State::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       82 (0x52)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/State V_0,
               [1] int32 V_1,
               [2] int32 V_2)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/State
      IL_0007:  stloc.0
      IL_0008:  ldarg.0
      IL_0009:  ldnull
      IL_000a:  cgt.un
      IL_000c:  brfalse.s  IL_0010

      IL_000e:  br.s       IL_0012

      IL_0010:  br.s       IL_003f

//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0012:  ldarg.1
      IL_0013:  unbox.any  ComplexCompositeTypes/State
      IL_0018:  ldnull
      IL_0019:  cgt.un
      IL_001b:  brfalse.s  IL_001f

      IL_001d:  br.s       IL_0021

      IL_001f:  br.s       IL_003d

      IL_0021:  ldarg.0
      IL_0022:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_0027:  stloc.1
      IL_0028:  ldloc.0
      IL_0029:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_002e:  stloc.2
      IL_002f:  ldloc.1
      IL_0030:  ldloc.2
      IL_0031:  bne.un.s   IL_0035

      IL_0033:  br.s       IL_0037

      IL_0035:  br.s       IL_0039

      IL_0037:  ldc.i4.0
      IL_0038:  ret

      IL_0039:  ldloc.1
      IL_003a:  ldloc.2
      IL_003b:  sub
      IL_003c:  ret

      IL_003d:  ldc.i4.1
      IL_003e:  ret

      IL_003f:  ldarg.1
      IL_0040:  unbox.any  ComplexCompositeTypes/State
      IL_0045:  ldnull
      IL_0046:  cgt.un
      IL_0048:  brfalse.s  IL_004c

      IL_004a:  br.s       IL_004e

      IL_004c:  br.s       IL_0050

      IL_004e:  ldc.i4.m1
      IL_004f:  ret

      IL_0050:  ldc.i4.0
      IL_0051:  ret
    } // end of method State::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       62 (0x3e)
      .maxstack  3
      .locals init (int32 V_0,
               class ComplexCompositeTypes/State V_1,
               class ComplexCompositeTypes/State V_2,
               class ComplexCompositeTypes/State V_3)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_003c

      IL_000b:  ldc.i4.0
      IL_000c:  stloc.0
      IL_000d:  ldarg.0
      IL_000e:  call       instance int32 ComplexCompositeTypes/State::get_Tag()
      IL_0013:  switch     ( 
                            IL_0024,
                            IL_0026,
                            IL_0028)
      IL_0024:  br.s       IL_002a

      IL_0026:  br.s       IL_0030

      IL_0028:  br.s       IL_0036

      IL_002a:  ldarg.0
      IL_002b:  stloc.1
      IL_002c:  ldc.i4.0
      IL_002d:  stloc.0
      IL_002e:  ldloc.0
      IL_002f:  ret

      IL_0030:  ldarg.0
      IL_0031:  stloc.2
      IL_0032:  ldc.i4.1
      IL_0033:  stloc.0
      IL_0034:  ldloc.0
      IL_0035:  ret

      IL_0036:  ldarg.0
      IL_0037:  stloc.3
      IL_0038:  ldc.i4.2
      IL_0039:  stloc.0
      IL_003a:  ldloc.0
      IL_003b:  ret

      IL_003c:  ldc.i4.0
      IL_003d:  ret
    } // end of method State::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000207: type State =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/State::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method State::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       56 (0x38)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/State V_0,
               class ComplexCompositeTypes/State V_1,
               int32 V_2,
               int32 V_3)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0030

      IL_000b:  ldarg.1
      IL_000c:  isinst     ComplexCompositeTypes/State
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  brfalse.s  IL_0017

      IL_0015:  br.s       IL_0019

      IL_0017:  br.s       IL_002e

      IL_0019:  ldloc.0
      IL_001a:  stloc.1
      IL_001b:  ldarg.0
      IL_001c:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_0021:  stloc.2
      IL_0022:  ldloc.1
      IL_0023:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_0028:  stloc.3
      IL_0029:  ldloc.2
      IL_002a:  ldloc.3
      IL_002b:  ceq
      IL_002d:  ret

      IL_002e:  ldc.i4.0
      IL_002f:  ret

      IL_0030:  ldarg.1
      IL_0031:  ldnull
      IL_0032:  cgt.un
      IL_0034:  ldc.i4.0
      IL_0035:  ceq
      IL_0037:  ret
    } // end of method State::Equals

    .method public instance class ComplexCompositeTypes/State 
            Open() cil managed
    {
      // Code size       53 (0x35)
      .maxstack  3
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 ComplexCompositeTypes/State::get_Tag()
      IL_0007:  switch     ( 
                            IL_0018,
                            IL_001a,
                            IL_001c)
      IL_0018:  br.s       IL_001e

      IL_001a:  br.s       IL_0024

      IL_001c:  br.s       IL_002f

//000213:         | New -> Opened
      IL_001e:  call       class ComplexCompositeTypes/State ComplexCompositeTypes/State::get_Opened()
      IL_0023:  ret

//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
      IL_0024:  ldstr      "Error to Open an Opened state"
      IL_0029:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.Operators::FailWith<class ComplexCompositeTypes/State>(string)
      IL_002e:  ret

//000216:         | Closed ->
//000217:             Opened
      IL_002f:  call       class ComplexCompositeTypes/State ComplexCompositeTypes/State::get_Opened()
      IL_0034:  ret
    } // end of method State::Open

    .method public instance class ComplexCompositeTypes/State 
            Close() cil managed
    {
      // Code size       53 (0x35)
      .maxstack  3
//000218:     member s.Close() =
//000219:         match s with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 ComplexCompositeTypes/State::get_Tag()
      IL_0007:  switch     ( 
                            IL_0018,
                            IL_001a,
                            IL_001c)
      IL_0018:  br.s       IL_001e

      IL_001a:  br.s       IL_0029

      IL_001c:  br.s       IL_002f

//000220:         | New ->
//000221:             failwith "Error to Close a New state"
      IL_001e:  ldstr      "Error to Close a New state"
      IL_0023:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.Operators::FailWith<class ComplexCompositeTypes/State>(string)
      IL_0028:  ret

//000222:         | Opened -> Closed
      IL_0029:  call       class ComplexCompositeTypes/State ComplexCompositeTypes/State::get_Closed()
      IL_002e:  ret

//000223:         | Closed -> Closed
      IL_002f:  call       class ComplexCompositeTypes/State ComplexCompositeTypes/State::get_Closed()
      IL_0034:  ret
    } // end of method State::Close

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/State obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       50 (0x32)
      .maxstack  4
      .locals init (int32 V_0,
               int32 V_1)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_002a

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_0028

      IL_0015:  ldarg.0
      IL_0016:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_001b:  stloc.0
      IL_001c:  ldarg.1
      IL_001d:  ldfld      int32 ComplexCompositeTypes/State::_tag
      IL_0022:  stloc.1
      IL_0023:  ldloc.0
      IL_0024:  ldloc.1
      IL_0025:  ceq
      IL_0027:  ret

      IL_0028:  ldc.i4.0
      IL_0029:  ret

      IL_002a:  ldarg.1
      IL_002b:  ldnull
      IL_002c:  cgt.un
      IL_002e:  ldc.i4.0
      IL_002f:  ceq
      IL_0031:  ret
    } // end of method State::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/State V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/State
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/State::Equals(class ComplexCompositeTypes/State)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method State::Equals

    .property instance int32 Tag()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/State::get_Tag()
    } // end of property State::Tag
    .property class ComplexCompositeTypes/State
            Closed()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/State ComplexCompositeTypes/State::get_Closed()
    } // end of property State::Closed
    .property instance bool IsClosed()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/State::get_IsClosed()
    } // end of property State::IsClosed
    .property class ComplexCompositeTypes/State
            Opened()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/State ComplexCompositeTypes/State::get_Opened()
    } // end of property State::Opened
    .property instance bool IsOpened()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/State::get_IsOpened()
    } // end of property State::IsOpened
    .property class ComplexCompositeTypes/State
            New()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get class ComplexCompositeTypes/State ComplexCompositeTypes/State::get_New()
    } // end of property State::New
    .property instance bool IsNew()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance bool ComplexCompositeTypes/State::get_IsNew()
    } // end of property State::IsNew
  } // end of class State

  .class sequential ansi serializable sealed nested public Point
         extends [mscorlib]System.ValueType
         implements class [mscorlib]System.IEquatable`1<valuetype ComplexCompositeTypes/Point>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<valuetype ComplexCompositeTypes/Point>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.StructAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly int32 x
    .field assembly int32 y
    .method public hidebysig virtual final 
            instance int32  CompareTo(valuetype ComplexCompositeTypes/Point obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       107 (0x6b)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/Point& V_0,
               [1] int32 V_1,
               [2] class [mscorlib]System.Collections.IComparer V_2,
               [3] int32 V_3,
               [4] int32 V_4,
               [5] class [mscorlib]System.Collections.IComparer V_5,
               [6] int32 V_6,
               [7] int32 V_7)
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
      IL_0000:  nop
      IL_0001:  ldarga.s   obj
      IL_0003:  stloc.0
      IL_0004:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0009:  stloc.2
      IL_000a:  ldarg.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_0010:  stloc.3
      IL_0011:  ldloc.0
      IL_0012:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_0017:  stloc.s    V_4
      IL_0019:  ldloc.3
      IL_001a:  ldloc.s    V_4
      IL_001c:  bge.s      IL_0020

      IL_001e:  br.s       IL_0022

      IL_0020:  br.s       IL_0026

//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0022:  ldc.i4.m1
      IL_0023:  nop
      IL_0024:  br.s       IL_002c

      IL_0026:  ldloc.3
      IL_0027:  ldloc.s    V_4
      IL_0029:  cgt
      IL_002b:  nop
      IL_002c:  stloc.1
      IL_002d:  ldloc.1
      IL_002e:  ldc.i4.0
      IL_002f:  bge.s      IL_0033

      IL_0031:  br.s       IL_0035

      IL_0033:  br.s       IL_0037

      IL_0035:  ldloc.1
      IL_0036:  ret

      IL_0037:  ldloc.1
      IL_0038:  ldc.i4.0
      IL_0039:  ble.s      IL_003d

      IL_003b:  br.s       IL_003f

      IL_003d:  br.s       IL_0041

      IL_003f:  ldloc.1
      IL_0040:  ret

      IL_0041:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0046:  stloc.s    V_5
      IL_0048:  ldarg.0
      IL_0049:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_004e:  stloc.s    V_6
      IL_0050:  ldloc.0
      IL_0051:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0056:  stloc.s    V_7
      IL_0058:  ldloc.s    V_6
      IL_005a:  ldloc.s    V_7
      IL_005c:  bge.s      IL_0060

      IL_005e:  br.s       IL_0062

      IL_0060:  br.s       IL_0064

      IL_0062:  ldc.i4.m1
      IL_0063:  ret

      IL_0064:  ldloc.s    V_6
      IL_0066:  ldloc.s    V_7
      IL_0068:  cgt
      IL_006a:  ret
    } // end of method Point::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000230: type Point(x : int, y : int) =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/Point
      IL_0008:  call       instance int32 ComplexCompositeTypes/Point::CompareTo(valuetype ComplexCompositeTypes/Point)
      IL_000d:  ret
    } // end of method Point::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       109 (0x6d)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/Point V_0,
               [1] valuetype ComplexCompositeTypes/Point& V_1,
               [2] int32 V_2,
               [3] class [mscorlib]System.Collections.IComparer V_3,
               [4] int32 V_4,
               [5] int32 V_5,
               [6] class [mscorlib]System.Collections.IComparer V_6,
               [7] int32 V_7,
               [8] int32 V_8)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/Point
      IL_0007:  stloc.0
      IL_0008:  ldloca.s   V_0
      IL_000a:  stloc.1
      IL_000b:  ldarg.2
      IL_000c:  stloc.3
      IL_000d:  ldarg.0
      IL_000e:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_0013:  stloc.s    V_4
      IL_0015:  ldloc.1
      IL_0016:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_001b:  stloc.s    V_5
      IL_001d:  ldloc.s    V_4
      IL_001f:  ldloc.s    V_5
      IL_0021:  bge.s      IL_0025

      IL_0023:  br.s       IL_0027

      IL_0025:  br.s       IL_002b

//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0027:  ldc.i4.m1
      IL_0028:  nop
      IL_0029:  br.s       IL_0032

      IL_002b:  ldloc.s    V_4
      IL_002d:  ldloc.s    V_5
      IL_002f:  cgt
      IL_0031:  nop
      IL_0032:  stloc.2
      IL_0033:  ldloc.2
      IL_0034:  ldc.i4.0
      IL_0035:  bge.s      IL_0039

      IL_0037:  br.s       IL_003b

      IL_0039:  br.s       IL_003d

      IL_003b:  ldloc.2
      IL_003c:  ret

      IL_003d:  ldloc.2
      IL_003e:  ldc.i4.0
      IL_003f:  ble.s      IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_0047

      IL_0045:  ldloc.2
      IL_0046:  ret

      IL_0047:  ldarg.2
      IL_0048:  stloc.s    V_6
      IL_004a:  ldarg.0
      IL_004b:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0050:  stloc.s    V_7
      IL_0052:  ldloc.1
      IL_0053:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0058:  stloc.s    V_8
      IL_005a:  ldloc.s    V_7
      IL_005c:  ldloc.s    V_8
      IL_005e:  bge.s      IL_0062

      IL_0060:  br.s       IL_0064

      IL_0062:  br.s       IL_0066

      IL_0064:  ldc.i4.m1
      IL_0065:  ret

      IL_0066:  ldloc.s    V_7
      IL_0068:  ldloc.s    V_8
      IL_006a:  cgt
      IL_006c:  ret
    } // end of method Point::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       51 (0x33)
      .maxstack  7
      .locals init ([0] int32 V_0,
               [1] class [mscorlib]System.Collections.IEqualityComparer V_1,
               [2] class [mscorlib]System.Collections.IEqualityComparer V_2)
//000230: type Point(x : int, y : int) =
      IL_0000:  nop
      IL_0001:  ldc.i4.0
      IL_0002:  stloc.0
      IL_0003:  ldc.i4     0x9e3779b9
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldarg.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0010:  ldloc.0
      IL_0011:  ldc.i4.6
      IL_0012:  shl
      IL_0013:  ldloc.0
      IL_0014:  ldc.i4.2
      IL_0015:  shr
      IL_0016:  add
      IL_0017:  add
      IL_0018:  add
      IL_0019:  stloc.0
      IL_001a:  ldc.i4     0x9e3779b9
      IL_001f:  ldarg.1
      IL_0020:  stloc.2
      IL_0021:  ldarg.0
      IL_0022:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_0027:  ldloc.0
      IL_0028:  ldc.i4.6
      IL_0029:  shl
      IL_002a:  ldloc.0
      IL_002b:  ldc.i4.2
      IL_002c:  shr
      IL_002d:  add
      IL_002e:  add
      IL_002f:  add
      IL_0030:  stloc.0
      IL_0031:  ldloc.0
      IL_0032:  ret
    } // end of method Point::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/Point::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method Point::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       64 (0x40)
      .maxstack  4
      .locals init (valuetype ComplexCompositeTypes/Point V_0,
               valuetype ComplexCompositeTypes/Point& V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::TypeTestGeneric<valuetype ComplexCompositeTypes/Point>(object)
      IL_0007:  brtrue.s   IL_000b

      IL_0009:  br.s       IL_003e

      IL_000b:  ldarg.1
      IL_000c:  unbox.any  ComplexCompositeTypes/Point
      IL_0011:  stloc.0
      IL_0012:  ldloca.s   V_0
      IL_0014:  stloc.1
      IL_0015:  ldarg.2
      IL_0016:  stloc.2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_001d:  ldloc.1
      IL_001e:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_0023:  ceq
      IL_0025:  brfalse.s  IL_0029

      IL_0027:  br.s       IL_002b

      IL_0029:  br.s       IL_003c

      IL_002b:  ldarg.2
      IL_002c:  stloc.3
      IL_002d:  ldarg.0
      IL_002e:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0033:  ldloc.1
      IL_0034:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0039:  ceq
      IL_003b:  ret

      IL_003c:  ldc.i4.0
      IL_003d:  ret

      IL_003e:  ldc.i4.0
      IL_003f:  ret
    } // end of method Point::Equals

    .method public specialname rtspecialname 
            instance void  .ctor(int32 x,
                                 int32 y) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  stfld      int32 ComplexCompositeTypes/Point::x
      IL_0008:  ldarg.0
      IL_0009:  ldarg.2
      IL_000a:  stfld      int32 ComplexCompositeTypes/Point::y
      IL_000f:  ret
    } // end of method Point::.ctor

    .method public specialname instance int32 
            get_X() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000231:     member pt.X = x
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_0007:  ret
    } // end of method Point::get_X

    .method public specialname instance int32 
            get_Y() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000232:     member pt.Y = y
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0007:  ret
    } // end of method Point::get_Y

    .method public hidebysig virtual instance string 
            ToString() cil managed
    {
      // Code size       34 (0x22)
      .maxstack  5
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
      IL_0000:  nop
      IL_0001:  ldstr      "({0},{1})"
      IL_0006:  ldarg.0
      IL_0007:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_000c:  box        [mscorlib]System.Int32
      IL_0011:  ldarg.0
      IL_0012:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0017:  box        [mscorlib]System.Int32
      IL_001c:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object)
      IL_0021:  ret
    } // end of method Point::ToString

    .method public hidebysig virtual final 
            instance bool  Equals(valuetype ComplexCompositeTypes/Point obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       39 (0x27)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/Point& V_0)
//000230: type Point(x : int, y : int) =
      IL_0000:  nop
      IL_0001:  ldarga.s   obj
      IL_0003:  stloc.0
      IL_0004:  ldarg.0
      IL_0005:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_000a:  ldloc.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/Point::x
      IL_0010:  bne.un.s   IL_0014

      IL_0012:  br.s       IL_0016

      IL_0014:  br.s       IL_0025

//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0016:  ldarg.0
      IL_0017:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_001c:  ldloc.0
      IL_001d:  ldfld      int32 ComplexCompositeTypes/Point::y
      IL_0022:  ceq
      IL_0024:  ret

      IL_0025:  ldc.i4.0
      IL_0026:  ret
    } // end of method Point::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       28 (0x1c)
      .maxstack  4
      .locals init (valuetype ComplexCompositeTypes/Point V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::TypeTestGeneric<valuetype ComplexCompositeTypes/Point>(object)
      IL_0007:  brtrue.s   IL_000b

      IL_0009:  br.s       IL_001a

      IL_000b:  ldarg.1
      IL_000c:  unbox.any  ComplexCompositeTypes/Point
      IL_0011:  stloc.0
      IL_0012:  ldarg.0
      IL_0013:  ldloc.0
      IL_0014:  call       instance bool ComplexCompositeTypes/Point::Equals(valuetype ComplexCompositeTypes/Point)
      IL_0019:  ret

      IL_001a:  ldc.i4.0
      IL_001b:  ret
    } // end of method Point::Equals

    .property instance int32 X()
    {
      .get instance int32 ComplexCompositeTypes/Point::get_X()
    } // end of property Point::X
    .property instance int32 Y()
    {
      .get instance int32 ComplexCompositeTypes/Point::get_Y()
    } // end of property Point::Y
  } // end of class Point

  .class sequential ansi serializable sealed nested public AnotherPoint
         extends [mscorlib]System.ValueType
         implements class [mscorlib]System.IEquatable`1<valuetype ComplexCompositeTypes/AnotherPoint>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<valuetype ComplexCompositeTypes/AnotherPoint>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly int32 x
    .field assembly int32 y
    .method public hidebysig virtual final 
            instance int32  CompareTo(valuetype ComplexCompositeTypes/AnotherPoint obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       107 (0x6b)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/AnotherPoint& V_0,
               [1] int32 V_1,
               [2] class [mscorlib]System.Collections.IComparer V_2,
               [3] int32 V_3,
               [4] int32 V_4,
               [5] class [mscorlib]System.Collections.IComparer V_5,
               [6] int32 V_6,
               [7] int32 V_7)
//000236: type AnotherPoint(x : int, y: int) =
      IL_0000:  nop
      IL_0001:  ldarga.s   obj
      IL_0003:  stloc.0
      IL_0004:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0009:  stloc.2
      IL_000a:  ldarg.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_0010:  stloc.3
      IL_0011:  ldloc.0
      IL_0012:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_0017:  stloc.s    V_4
      IL_0019:  ldloc.3
      IL_001a:  ldloc.s    V_4
      IL_001c:  bge.s      IL_0020

      IL_001e:  br.s       IL_0022

      IL_0020:  br.s       IL_0026

//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0022:  ldc.i4.m1
      IL_0023:  nop
      IL_0024:  br.s       IL_002c

      IL_0026:  ldloc.3
      IL_0027:  ldloc.s    V_4
      IL_0029:  cgt
      IL_002b:  nop
      IL_002c:  stloc.1
      IL_002d:  ldloc.1
      IL_002e:  ldc.i4.0
      IL_002f:  bge.s      IL_0033

      IL_0031:  br.s       IL_0035

      IL_0033:  br.s       IL_0037

      IL_0035:  ldloc.1
      IL_0036:  ret

      IL_0037:  ldloc.1
      IL_0038:  ldc.i4.0
      IL_0039:  ble.s      IL_003d

      IL_003b:  br.s       IL_003f

      IL_003d:  br.s       IL_0041

      IL_003f:  ldloc.1
      IL_0040:  ret

      IL_0041:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0046:  stloc.s    V_5
      IL_0048:  ldarg.0
      IL_0049:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_004e:  stloc.s    V_6
      IL_0050:  ldloc.0
      IL_0051:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_0056:  stloc.s    V_7
      IL_0058:  ldloc.s    V_6
      IL_005a:  ldloc.s    V_7
      IL_005c:  bge.s      IL_0060

      IL_005e:  br.s       IL_0062

      IL_0060:  br.s       IL_0064

      IL_0062:  ldc.i4.m1
      IL_0063:  ret

      IL_0064:  ldloc.s    V_6
      IL_0066:  ldloc.s    V_7
      IL_0068:  cgt
      IL_006a:  ret
    } // end of method AnotherPoint::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000236: type AnotherPoint(x : int, y: int) =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/AnotherPoint
      IL_0008:  call       instance int32 ComplexCompositeTypes/AnotherPoint::CompareTo(valuetype ComplexCompositeTypes/AnotherPoint)
      IL_000d:  ret
    } // end of method AnotherPoint::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       109 (0x6d)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/AnotherPoint V_0,
               [1] valuetype ComplexCompositeTypes/AnotherPoint& V_1,
               [2] int32 V_2,
               [3] class [mscorlib]System.Collections.IComparer V_3,
               [4] int32 V_4,
               [5] int32 V_5,
               [6] class [mscorlib]System.Collections.IComparer V_6,
               [7] int32 V_7,
               [8] int32 V_8)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/AnotherPoint
      IL_0007:  stloc.0
      IL_0008:  ldloca.s   V_0
      IL_000a:  stloc.1
      IL_000b:  ldarg.2
      IL_000c:  stloc.3
      IL_000d:  ldarg.0
      IL_000e:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_0013:  stloc.s    V_4
      IL_0015:  ldloc.1
      IL_0016:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_001b:  stloc.s    V_5
      IL_001d:  ldloc.s    V_4
      IL_001f:  ldloc.s    V_5
      IL_0021:  bge.s      IL_0025

      IL_0023:  br.s       IL_0027

      IL_0025:  br.s       IL_002b

//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0027:  ldc.i4.m1
      IL_0028:  nop
      IL_0029:  br.s       IL_0032

      IL_002b:  ldloc.s    V_4
      IL_002d:  ldloc.s    V_5
      IL_002f:  cgt
      IL_0031:  nop
      IL_0032:  stloc.2
      IL_0033:  ldloc.2
      IL_0034:  ldc.i4.0
      IL_0035:  bge.s      IL_0039

      IL_0037:  br.s       IL_003b

      IL_0039:  br.s       IL_003d

      IL_003b:  ldloc.2
      IL_003c:  ret

      IL_003d:  ldloc.2
      IL_003e:  ldc.i4.0
      IL_003f:  ble.s      IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_0047

      IL_0045:  ldloc.2
      IL_0046:  ret

      IL_0047:  ldarg.2
      IL_0048:  stloc.s    V_6
      IL_004a:  ldarg.0
      IL_004b:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_0050:  stloc.s    V_7
      IL_0052:  ldloc.1
      IL_0053:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_0058:  stloc.s    V_8
      IL_005a:  ldloc.s    V_7
      IL_005c:  ldloc.s    V_8
      IL_005e:  bge.s      IL_0062

      IL_0060:  br.s       IL_0064

      IL_0062:  br.s       IL_0066

      IL_0064:  ldc.i4.m1
      IL_0065:  ret

      IL_0066:  ldloc.s    V_7
      IL_0068:  ldloc.s    V_8
      IL_006a:  cgt
      IL_006c:  ret
    } // end of method AnotherPoint::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       51 (0x33)
      .maxstack  7
      .locals init ([0] int32 V_0,
               [1] class [mscorlib]System.Collections.IEqualityComparer V_1,
               [2] class [mscorlib]System.Collections.IEqualityComparer V_2)
//000236: type AnotherPoint(x : int, y: int) =
      IL_0000:  nop
      IL_0001:  ldc.i4.0
      IL_0002:  stloc.0
      IL_0003:  ldc.i4     0x9e3779b9
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldarg.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_0010:  ldloc.0
      IL_0011:  ldc.i4.6
      IL_0012:  shl
      IL_0013:  ldloc.0
      IL_0014:  ldc.i4.2
      IL_0015:  shr
      IL_0016:  add
      IL_0017:  add
      IL_0018:  add
      IL_0019:  stloc.0
      IL_001a:  ldc.i4     0x9e3779b9
      IL_001f:  ldarg.1
      IL_0020:  stloc.2
      IL_0021:  ldarg.0
      IL_0022:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_0027:  ldloc.0
      IL_0028:  ldc.i4.6
      IL_0029:  shl
      IL_002a:  ldloc.0
      IL_002b:  ldc.i4.2
      IL_002c:  shr
      IL_002d:  add
      IL_002e:  add
      IL_002f:  add
      IL_0030:  stloc.0
      IL_0031:  ldloc.0
      IL_0032:  ret
    } // end of method AnotherPoint::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/AnotherPoint::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method AnotherPoint::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       64 (0x40)
      .maxstack  4
      .locals init (valuetype ComplexCompositeTypes/AnotherPoint V_0,
               valuetype ComplexCompositeTypes/AnotherPoint& V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::TypeTestGeneric<valuetype ComplexCompositeTypes/AnotherPoint>(object)
      IL_0007:  brtrue.s   IL_000b

      IL_0009:  br.s       IL_003e

      IL_000b:  ldarg.1
      IL_000c:  unbox.any  ComplexCompositeTypes/AnotherPoint
      IL_0011:  stloc.0
      IL_0012:  ldloca.s   V_0
      IL_0014:  stloc.1
      IL_0015:  ldarg.2
      IL_0016:  stloc.2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_001d:  ldloc.1
      IL_001e:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_0023:  ceq
      IL_0025:  brfalse.s  IL_0029

      IL_0027:  br.s       IL_002b

      IL_0029:  br.s       IL_003c

      IL_002b:  ldarg.2
      IL_002c:  stloc.3
      IL_002d:  ldarg.0
      IL_002e:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_0033:  ldloc.1
      IL_0034:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_0039:  ceq
      IL_003b:  ret

      IL_003c:  ldc.i4.0
      IL_003d:  ret

      IL_003e:  ldc.i4.0
      IL_003f:  ret
    } // end of method AnotherPoint::Equals

    .method public specialname rtspecialname 
            instance void  .ctor(int32 x,
                                 int32 y) cil managed
    {
      // Code size       16 (0x10)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  stfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_0008:  ldarg.0
      IL_0009:  ldarg.2
      IL_000a:  stfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_000f:  ret
    } // end of method AnotherPoint::.ctor

    .method public specialname instance int32 
            get_X() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000237:     struct
//000238:         member pt.X = x
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_0007:  ret
    } // end of method AnotherPoint::get_X

    .method public specialname instance int32 
            get_Y() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000239:         member pt.Y = y
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_0007:  ret
    } // end of method AnotherPoint::get_Y

    .method public hidebysig virtual final 
            instance bool  Equals(valuetype ComplexCompositeTypes/AnotherPoint obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       39 (0x27)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/AnotherPoint& V_0)
//000236: type AnotherPoint(x : int, y: int) =
      IL_0000:  nop
      IL_0001:  ldarga.s   obj
      IL_0003:  stloc.0
      IL_0004:  ldarg.0
      IL_0005:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_000a:  ldloc.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::x
      IL_0010:  bne.un.s   IL_0014

      IL_0012:  br.s       IL_0016

      IL_0014:  br.s       IL_0025

//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0016:  ldarg.0
      IL_0017:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_001c:  ldloc.0
      IL_001d:  ldfld      int32 ComplexCompositeTypes/AnotherPoint::y
      IL_0022:  ceq
      IL_0024:  ret

      IL_0025:  ldc.i4.0
      IL_0026:  ret
    } // end of method AnotherPoint::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       28 (0x1c)
      .maxstack  4
      .locals init (valuetype ComplexCompositeTypes/AnotherPoint V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::TypeTestGeneric<valuetype ComplexCompositeTypes/AnotherPoint>(object)
      IL_0007:  brtrue.s   IL_000b

      IL_0009:  br.s       IL_001a

      IL_000b:  ldarg.1
      IL_000c:  unbox.any  ComplexCompositeTypes/AnotherPoint
      IL_0011:  stloc.0
      IL_0012:  ldarg.0
      IL_0013:  ldloc.0
      IL_0014:  call       instance bool ComplexCompositeTypes/AnotherPoint::Equals(valuetype ComplexCompositeTypes/AnotherPoint)
      IL_0019:  ret

      IL_001a:  ldc.i4.0
      IL_001b:  ret
    } // end of method AnotherPoint::Equals

    .property instance int32 X()
    {
      .get instance int32 ComplexCompositeTypes/AnotherPoint::get_X()
    } // end of property AnotherPoint::X
    .property instance int32 Y()
    {
      .get instance int32 ComplexCompositeTypes/AnotherPoint::get_Y()
    } // end of property AnotherPoint::Y
  } // end of class AnotherPoint

  .class sequential ansi serializable sealed nested public MutPoint
         extends [mscorlib]System.ValueType
         implements class [mscorlib]System.IEquatable`1<valuetype ComplexCompositeTypes/MutPoint>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<valuetype ComplexCompositeTypes/MutPoint>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.StructAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field public int32 X
    .field public int32 Y
    .method public hidebysig virtual final 
            instance int32  CompareTo(valuetype ComplexCompositeTypes/MutPoint obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       107 (0x6b)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/MutPoint& V_0,
               [1] int32 V_1,
               [2] class [mscorlib]System.Collections.IComparer V_2,
               [3] int32 V_3,
               [4] int32 V_4,
               [5] class [mscorlib]System.Collections.IComparer V_5,
               [6] int32 V_6,
               [7] int32 V_7)
//000243: type MutPoint =
      IL_0000:  nop
      IL_0001:  ldarga.s   obj
      IL_0003:  stloc.0
      IL_0004:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0009:  stloc.2
      IL_000a:  ldarg.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_0010:  stloc.3
      IL_0011:  ldloc.0
      IL_0012:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_0017:  stloc.s    V_4
      IL_0019:  ldloc.3
      IL_001a:  ldloc.s    V_4
      IL_001c:  bge.s      IL_0020

      IL_001e:  br.s       IL_0022

      IL_0020:  br.s       IL_0026

//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0022:  ldc.i4.m1
      IL_0023:  nop
      IL_0024:  br.s       IL_002c

      IL_0026:  ldloc.3
      IL_0027:  ldloc.s    V_4
      IL_0029:  cgt
      IL_002b:  nop
      IL_002c:  stloc.1
      IL_002d:  ldloc.1
      IL_002e:  ldc.i4.0
      IL_002f:  bge.s      IL_0033

      IL_0031:  br.s       IL_0035

      IL_0033:  br.s       IL_0037

      IL_0035:  ldloc.1
      IL_0036:  ret

      IL_0037:  ldloc.1
      IL_0038:  ldc.i4.0
      IL_0039:  ble.s      IL_003d

      IL_003b:  br.s       IL_003f

      IL_003d:  br.s       IL_0041

      IL_003f:  ldloc.1
      IL_0040:  ret

      IL_0041:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0046:  stloc.s    V_5
      IL_0048:  ldarg.0
      IL_0049:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_004e:  stloc.s    V_6
      IL_0050:  ldloc.0
      IL_0051:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_0056:  stloc.s    V_7
      IL_0058:  ldloc.s    V_6
      IL_005a:  ldloc.s    V_7
      IL_005c:  bge.s      IL_0060

      IL_005e:  br.s       IL_0062

      IL_0060:  br.s       IL_0064

      IL_0062:  ldc.i4.m1
      IL_0063:  ret

      IL_0064:  ldloc.s    V_6
      IL_0066:  ldloc.s    V_7
      IL_0068:  cgt
      IL_006a:  ret
    } // end of method MutPoint::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000243: type MutPoint =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/MutPoint
      IL_0008:  call       instance int32 ComplexCompositeTypes/MutPoint::CompareTo(valuetype ComplexCompositeTypes/MutPoint)
      IL_000d:  ret
    } // end of method MutPoint::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       109 (0x6d)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/MutPoint V_0,
               [1] valuetype ComplexCompositeTypes/MutPoint& V_1,
               [2] int32 V_2,
               [3] class [mscorlib]System.Collections.IComparer V_3,
               [4] int32 V_4,
               [5] int32 V_5,
               [6] class [mscorlib]System.Collections.IComparer V_6,
               [7] int32 V_7,
               [8] int32 V_8)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/MutPoint
      IL_0007:  stloc.0
      IL_0008:  ldloca.s   V_0
      IL_000a:  stloc.1
      IL_000b:  ldarg.2
      IL_000c:  stloc.3
      IL_000d:  ldarg.0
      IL_000e:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_0013:  stloc.s    V_4
      IL_0015:  ldloc.1
      IL_0016:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_001b:  stloc.s    V_5
      IL_001d:  ldloc.s    V_4
      IL_001f:  ldloc.s    V_5
      IL_0021:  bge.s      IL_0025

      IL_0023:  br.s       IL_0027

      IL_0025:  br.s       IL_002b

//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0027:  ldc.i4.m1
      IL_0028:  nop
      IL_0029:  br.s       IL_0032

      IL_002b:  ldloc.s    V_4
      IL_002d:  ldloc.s    V_5
      IL_002f:  cgt
      IL_0031:  nop
      IL_0032:  stloc.2
      IL_0033:  ldloc.2
      IL_0034:  ldc.i4.0
      IL_0035:  bge.s      IL_0039

      IL_0037:  br.s       IL_003b

      IL_0039:  br.s       IL_003d

      IL_003b:  ldloc.2
      IL_003c:  ret

      IL_003d:  ldloc.2
      IL_003e:  ldc.i4.0
      IL_003f:  ble.s      IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_0047

      IL_0045:  ldloc.2
      IL_0046:  ret

      IL_0047:  ldarg.2
      IL_0048:  stloc.s    V_6
      IL_004a:  ldarg.0
      IL_004b:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_0050:  stloc.s    V_7
      IL_0052:  ldloc.1
      IL_0053:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_0058:  stloc.s    V_8
      IL_005a:  ldloc.s    V_7
      IL_005c:  ldloc.s    V_8
      IL_005e:  bge.s      IL_0062

      IL_0060:  br.s       IL_0064

      IL_0062:  br.s       IL_0066

      IL_0064:  ldc.i4.m1
      IL_0065:  ret

      IL_0066:  ldloc.s    V_7
      IL_0068:  ldloc.s    V_8
      IL_006a:  cgt
      IL_006c:  ret
    } // end of method MutPoint::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       51 (0x33)
      .maxstack  7
      .locals init ([0] int32 V_0,
               [1] class [mscorlib]System.Collections.IEqualityComparer V_1,
               [2] class [mscorlib]System.Collections.IEqualityComparer V_2)
//000243: type MutPoint =
      IL_0000:  nop
      IL_0001:  ldc.i4.0
      IL_0002:  stloc.0
      IL_0003:  ldc.i4     0x9e3779b9
      IL_0008:  ldarg.1
      IL_0009:  stloc.1
      IL_000a:  ldarg.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_0010:  ldloc.0
      IL_0011:  ldc.i4.6
      IL_0012:  shl
      IL_0013:  ldloc.0
      IL_0014:  ldc.i4.2
      IL_0015:  shr
      IL_0016:  add
      IL_0017:  add
      IL_0018:  add
      IL_0019:  stloc.0
      IL_001a:  ldc.i4     0x9e3779b9
      IL_001f:  ldarg.1
      IL_0020:  stloc.2
      IL_0021:  ldarg.0
      IL_0022:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_0027:  ldloc.0
      IL_0028:  ldc.i4.6
      IL_0029:  shl
      IL_002a:  ldloc.0
      IL_002b:  ldc.i4.2
      IL_002c:  shr
      IL_002d:  add
      IL_002e:  add
      IL_002f:  add
      IL_0030:  stloc.0
      IL_0031:  ldloc.0
      IL_0032:  ret
    } // end of method MutPoint::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/MutPoint::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method MutPoint::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       64 (0x40)
      .maxstack  4
      .locals init (valuetype ComplexCompositeTypes/MutPoint V_0,
               valuetype ComplexCompositeTypes/MutPoint& V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::TypeTestGeneric<valuetype ComplexCompositeTypes/MutPoint>(object)
      IL_0007:  brtrue.s   IL_000b

      IL_0009:  br.s       IL_003e

      IL_000b:  ldarg.1
      IL_000c:  unbox.any  ComplexCompositeTypes/MutPoint
      IL_0011:  stloc.0
      IL_0012:  ldloca.s   V_0
      IL_0014:  stloc.1
      IL_0015:  ldarg.2
      IL_0016:  stloc.2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_001d:  ldloc.1
      IL_001e:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_0023:  ceq
      IL_0025:  brfalse.s  IL_0029

      IL_0027:  br.s       IL_002b

      IL_0029:  br.s       IL_003c

      IL_002b:  ldarg.2
      IL_002c:  stloc.3
      IL_002d:  ldarg.0
      IL_002e:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_0033:  ldloc.1
      IL_0034:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_0039:  ceq
      IL_003b:  ret

      IL_003c:  ldc.i4.0
      IL_003d:  ret

      IL_003e:  ldc.i4.0
      IL_003f:  ret
    } // end of method MutPoint::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(valuetype ComplexCompositeTypes/MutPoint obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       39 (0x27)
      .maxstack  4
      .locals init ([0] valuetype ComplexCompositeTypes/MutPoint& V_0)
      IL_0000:  nop
      IL_0001:  ldarga.s   obj
      IL_0003:  stloc.0
      IL_0004:  ldarg.0
      IL_0005:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_000a:  ldloc.0
      IL_000b:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
      IL_0010:  bne.un.s   IL_0014

      IL_0012:  br.s       IL_0016

      IL_0014:  br.s       IL_0025

//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0016:  ldarg.0
      IL_0017:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_001c:  ldloc.0
      IL_001d:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
      IL_0022:  ceq
      IL_0024:  ret

      IL_0025:  ldc.i4.0
      IL_0026:  ret
    } // end of method MutPoint::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       28 (0x1c)
      .maxstack  4
      .locals init (valuetype ComplexCompositeTypes/MutPoint V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/IntrinsicFunctions::TypeTestGeneric<valuetype ComplexCompositeTypes/MutPoint>(object)
      IL_0007:  brtrue.s   IL_000b

      IL_0009:  br.s       IL_001a

      IL_000b:  ldarg.1
      IL_000c:  unbox.any  ComplexCompositeTypes/MutPoint
      IL_0011:  stloc.0
      IL_0012:  ldarg.0
      IL_0013:  ldloc.0
      IL_0014:  call       instance bool ComplexCompositeTypes/MutPoint::Equals(valuetype ComplexCompositeTypes/MutPoint)
      IL_0019:  ret

      IL_001a:  ldc.i4.0
      IL_001b:  ret
    } // end of method MutPoint::Equals

  } // end of class MutPoint

  .class auto ansi serializable nested assembly beforefieldinit '|Point|@308-1'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>
  {
    .field public int32 y
    .field public int32 x
    .method assembly specialname rtspecialname 
            instance void  .ctor(int32 y,
                                 int32 x) cil managed
    {
      // Code size       21 (0x15)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      int32 ComplexCompositeTypes/'|Point|@308-1'::y
      IL_000d:  ldarg.0
      IL_000e:  ldarg.2
      IL_000f:  stfld      int32 ComplexCompositeTypes/'|Point|@308-1'::x
      IL_0014:  ret
    } // end of method '|Point|@308-1'::.ctor

    .method public strict virtual instance bool 
            Invoke(valuetype ComplexCompositeTypes/Point inPt) cil managed
    {
      // Code size       38 (0x26)
      .maxstack  6
      IL_0000:  nop
      IL_0001:  ldarga.s   inPt
      IL_0003:  call       instance int32 ComplexCompositeTypes/Point::get_X()
      IL_0008:  ldarg.0
      IL_0009:  ldfld      int32 ComplexCompositeTypes/'|Point|@308-1'::x
      IL_000e:  bne.un.s   IL_0012

      IL_0010:  br.s       IL_0014

      IL_0012:  br.s       IL_0024

      IL_0014:  ldarga.s   inPt
      IL_0016:  call       instance int32 ComplexCompositeTypes/Point::get_Y()
      IL_001b:  ldarg.0
      IL_001c:  ldfld      int32 ComplexCompositeTypes/'|Point|@308-1'::y
      IL_0021:  ceq
      IL_0023:  ret

      IL_0024:  ldc.i4.0
      IL_0025:  ret
    } // end of method '|Point|@308-1'::Invoke

  } // end of class '|Point|@308-1'

  .class auto ansi serializable nested assembly beforefieldinit '|Point|@308'
         extends class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]System.Tuple`2<int32,int32>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>>
  {
    .method assembly specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]System.Tuple`2<int32,int32>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>>::.ctor()
      IL_0006:  ret
    } // end of method '|Point|@308'::.ctor

    .method public strict virtual instance class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool> 
            Invoke(class [FSharp.Core]System.Tuple`2<int32,int32> tupledArg) cil managed
    {
      // Code size       23 (0x17)
      .maxstack  6
      .locals init ([0] int32 x,
               [1] int32 y)
//000308:         inPt.X = x && inPt.Y = y
      IL_0000:  ldarg.1
      IL_0001:  call       instance !0 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item1()
      IL_0006:  stloc.0
      IL_0007:  ldarg.1
      IL_0008:  call       instance !1 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item2()
      IL_000d:  stloc.1
      IL_000e:  nop
      IL_000f:  ldloc.1
      IL_0010:  ldloc.0
      IL_0011:  newobj     instance void ComplexCompositeTypes/'|Point|@308-1'::.ctor(int32,
                                                                                      int32)
      IL_0016:  ret
    } // end of method '|Point|@308'::Invoke

  } // end of class '|Point|@308'

  .class auto autochar serializable nested public beforefieldinit Author
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/Author>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class ComplexCompositeTypes/Author>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 7B 5F 5F 44 65 62 75 67 44 69 73 70 6C   // ...{__DebugDispl
                                                                                                   61 79 28 29 2C 6E 71 7D 00 00 )                   // ay(),nq}..
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 01 00 00 00 00 00 ) 
    .field assembly initonly string item1
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field assembly initonly string item2
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .field assembly initonly int32 item3
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .method public static class ComplexCompositeTypes/Author 
            NewAuthor(string item1,
                      string item2,
                      int32 item3) cil managed
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 08 00 00 00 00 00 00 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  5
      IL_0000:  ldarg.0
      IL_0001:  ldarg.1
      IL_0002:  ldarg.2
      IL_0003:  newobj     instance void ComplexCompositeTypes/Author::.ctor(string,
                                                                             string,
                                                                             int32)
      IL_0008:  ret
    } // end of method Author::NewAuthor

    .method assembly specialname rtspecialname 
            instance void  .ctor(string item1,
                                 string item2,
                                 int32 item3) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       28 (0x1c)
      .maxstack  2
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      string ComplexCompositeTypes/Author::item1
      IL_000d:  ldarg.0
      IL_000e:  ldarg.2
      IL_000f:  stfld      string ComplexCompositeTypes/Author::item2
      IL_0014:  ldarg.0
      IL_0015:  ldarg.3
      IL_0016:  stfld      int32 ComplexCompositeTypes/Author::item3
      IL_001b:  ret
    } // end of method Author::.ctor

    .method public instance string  get_Item1() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0006:  ret
    } // end of method Author::get_Item1

    .method public instance string  get_Item2() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_0006:  ret
    } // end of method Author::get_Item2

    .method public instance int32  get_Item3() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_0006:  ret
    } // end of method Author::get_Item3

    .method public instance int32  get_Tag() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       4 (0x4)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  pop
      IL_0002:  ldc.i4.0
      IL_0003:  ret
    } // end of method Author::get_Tag

    .method assembly specialname instance object 
            __DebugDisplay() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       22 (0x16)
      .maxstack  4
      IL_0000:  ldstr      "%+0.8A"
      IL_0005:  newobj     instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Author,string>,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string,string>::.ctor(string)
      IL_000a:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.ExtraTopLevelOperators::PrintFormatToString<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Author,string>>(class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4<!!0,class [FSharp.Core]Microsoft.FSharp.Core.Unit,string,string>)
      IL_000f:  ldarg.0
      IL_0010:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class ComplexCompositeTypes/Author,string>::Invoke(!0)
      IL_0015:  ret
    } // end of method Author::__DebugDisplay

    .method public hidebysig virtual final 
            instance int32  CompareTo(class ComplexCompositeTypes/Author obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       185 (0xb9)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Author V_0,
               class ComplexCompositeTypes/Author V_1,
               int32 V_2,
               class [mscorlib]System.Collections.IComparer V_3,
               int32 V_4,
               class [mscorlib]System.Collections.IComparer V_5,
               class [mscorlib]System.Collections.IComparer V_6,
               int32 V_7,
               int32 V_8)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_00ab

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_001b

      IL_0016:  br         IL_00a9

      IL_001b:  ldarg.0
      IL_001c:  pop
      IL_001d:  ldarg.0
      IL_001e:  stloc.0
      IL_001f:  ldarg.1
      IL_0020:  stloc.1
      IL_0021:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0026:  stloc.3
      IL_0027:  ldloc.0
      IL_0028:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_002d:  ldloc.1
      IL_002e:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0033:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0038:  stloc.2
      IL_0039:  ldloc.2
      IL_003a:  ldc.i4.0
      IL_003b:  bge.s      IL_003f

      IL_003d:  br.s       IL_0041

      IL_003f:  br.s       IL_0043

      IL_0041:  ldloc.2
      IL_0042:  ret

      IL_0043:  ldloc.2
      IL_0044:  ldc.i4.0
      IL_0045:  ble.s      IL_0049

      IL_0047:  br.s       IL_004b

      IL_0049:  br.s       IL_004d

      IL_004b:  ldloc.2
      IL_004c:  ret

      IL_004d:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0052:  stloc.s    V_5
      IL_0054:  ldloc.0
      IL_0055:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_005a:  ldloc.1
      IL_005b:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_0060:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0065:  stloc.s    V_4
      IL_0067:  ldloc.s    V_4
      IL_0069:  ldc.i4.0
      IL_006a:  bge.s      IL_006e

      IL_006c:  br.s       IL_0070

      IL_006e:  br.s       IL_0073

      IL_0070:  ldloc.s    V_4
      IL_0072:  ret

      IL_0073:  ldloc.s    V_4
      IL_0075:  ldc.i4.0
      IL_0076:  ble.s      IL_007a

      IL_0078:  br.s       IL_007c

      IL_007a:  br.s       IL_007f

      IL_007c:  ldloc.s    V_4
      IL_007e:  ret

      IL_007f:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0084:  stloc.s    V_6
      IL_0086:  ldloc.0
      IL_0087:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_008c:  stloc.s    V_7
      IL_008e:  ldloc.1
      IL_008f:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_0094:  stloc.s    V_8
      IL_0096:  ldloc.s    V_7
      IL_0098:  ldloc.s    V_8
      IL_009a:  bge.s      IL_009e

      IL_009c:  br.s       IL_00a0

      IL_009e:  br.s       IL_00a2

      IL_00a0:  ldc.i4.m1
      IL_00a1:  ret

      IL_00a2:  ldloc.s    V_7
      IL_00a4:  ldloc.s    V_8
      IL_00a6:  cgt
      IL_00a8:  ret

      IL_00a9:  ldc.i4.1
      IL_00aa:  ret

      IL_00ab:  ldarg.1
      IL_00ac:  ldnull
      IL_00ad:  cgt.un
      IL_00af:  brfalse.s  IL_00b3

      IL_00b1:  br.s       IL_00b5

      IL_00b3:  br.s       IL_00b7

      IL_00b5:  ldc.i4.m1
      IL_00b6:  ret

      IL_00b7:  ldc.i4.0
      IL_00b8:  ret
    } // end of method Author::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/Author
      IL_0008:  call       instance int32 ComplexCompositeTypes/Author::CompareTo(class ComplexCompositeTypes/Author)
      IL_000d:  ret
    } // end of method Author::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       191 (0xbf)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/Author V_0,
               [1] class ComplexCompositeTypes/Author V_1,
               [2] class ComplexCompositeTypes/Author V_2,
               [3] int32 V_3,
               [4] class [mscorlib]System.Collections.IComparer V_4,
               [5] int32 V_5,
               [6] class [mscorlib]System.Collections.IComparer V_6,
               [7] class [mscorlib]System.Collections.IComparer V_7,
               [8] int32 V_8,
               [9] int32 V_9)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/Author
      IL_0007:  stloc.0
      IL_0008:  ldarg.0
      IL_0009:  ldnull
      IL_000a:  cgt.un
      IL_000c:  brfalse.s  IL_0010

      IL_000e:  br.s       IL_0015

      IL_0010:  br         IL_00ac

//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0015:  ldarg.1
      IL_0016:  unbox.any  ComplexCompositeTypes/Author
      IL_001b:  ldnull
      IL_001c:  cgt.un
      IL_001e:  brfalse.s  IL_0022

      IL_0020:  br.s       IL_0027

      IL_0022:  br         IL_00aa

      IL_0027:  ldarg.0
      IL_0028:  pop
      IL_0029:  ldarg.0
      IL_002a:  stloc.1
      IL_002b:  ldloc.0
      IL_002c:  stloc.2
      IL_002d:  ldarg.2
      IL_002e:  stloc.s    V_4
      IL_0030:  ldloc.1
      IL_0031:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0036:  ldloc.2
      IL_0037:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_003c:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0041:  stloc.3
      IL_0042:  ldloc.3
      IL_0043:  ldc.i4.0
      IL_0044:  bge.s      IL_0048

      IL_0046:  br.s       IL_004a

      IL_0048:  br.s       IL_004c

      IL_004a:  ldloc.3
      IL_004b:  ret

      IL_004c:  ldloc.3
      IL_004d:  ldc.i4.0
      IL_004e:  ble.s      IL_0052

      IL_0050:  br.s       IL_0054

      IL_0052:  br.s       IL_0056

      IL_0054:  ldloc.3
      IL_0055:  ret

      IL_0056:  ldarg.2
      IL_0057:  stloc.s    V_6
      IL_0059:  ldloc.1
      IL_005a:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_005f:  ldloc.2
      IL_0060:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_0065:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_006a:  stloc.s    V_5
      IL_006c:  ldloc.s    V_5
      IL_006e:  ldc.i4.0
      IL_006f:  bge.s      IL_0073

      IL_0071:  br.s       IL_0075

      IL_0073:  br.s       IL_0078

      IL_0075:  ldloc.s    V_5
      IL_0077:  ret

      IL_0078:  ldloc.s    V_5
      IL_007a:  ldc.i4.0
      IL_007b:  ble.s      IL_007f

      IL_007d:  br.s       IL_0081

      IL_007f:  br.s       IL_0084

      IL_0081:  ldloc.s    V_5
      IL_0083:  ret

      IL_0084:  ldarg.2
      IL_0085:  stloc.s    V_7
      IL_0087:  ldloc.1
      IL_0088:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_008d:  stloc.s    V_8
      IL_008f:  ldloc.2
      IL_0090:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_0095:  stloc.s    V_9
      IL_0097:  ldloc.s    V_8
      IL_0099:  ldloc.s    V_9
      IL_009b:  bge.s      IL_009f

      IL_009d:  br.s       IL_00a1

      IL_009f:  br.s       IL_00a3

      IL_00a1:  ldc.i4.m1
      IL_00a2:  ret

      IL_00a3:  ldloc.s    V_8
      IL_00a5:  ldloc.s    V_9
      IL_00a7:  cgt
      IL_00a9:  ret

      IL_00aa:  ldc.i4.1
      IL_00ab:  ret

      IL_00ac:  ldarg.1
      IL_00ad:  unbox.any  ComplexCompositeTypes/Author
      IL_00b2:  ldnull
      IL_00b3:  cgt.un
      IL_00b5:  brfalse.s  IL_00b9

      IL_00b7:  br.s       IL_00bb

      IL_00b9:  br.s       IL_00bd

      IL_00bb:  ldc.i4.m1
      IL_00bc:  ret

      IL_00bd:  ldc.i4.0
      IL_00be:  ret
    } // end of method Author::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       136 (0x88)
      .maxstack  7
      .locals init (int32 V_0,
               class ComplexCompositeTypes/Author V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3,
               string V_4,
               class [mscorlib]System.Collections.IEqualityComparer V_5,
               string V_6)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_0086

      IL_000e:  ldc.i4.0
      IL_000f:  stloc.0
      IL_0010:  ldarg.0
      IL_0011:  pop
      IL_0012:  ldarg.0
      IL_0013:  stloc.1
      IL_0014:  ldc.i4.0
      IL_0015:  stloc.0
      IL_0016:  ldc.i4     0x9e3779b9
      IL_001b:  ldarg.1
      IL_001c:  stloc.2
      IL_001d:  ldloc.1
      IL_001e:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_0023:  ldloc.0
      IL_0024:  ldc.i4.6
      IL_0025:  shl
      IL_0026:  ldloc.0
      IL_0027:  ldc.i4.2
      IL_0028:  shr
      IL_0029:  add
      IL_002a:  add
      IL_002b:  add
      IL_002c:  stloc.0
      IL_002d:  ldc.i4     0x9e3779b9
      IL_0032:  ldarg.1
      IL_0033:  stloc.3
      IL_0034:  ldloc.1
      IL_0035:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_003a:  stloc.s    V_4
      IL_003c:  ldloc.s    V_4
      IL_003e:  brfalse.s  IL_0042

      IL_0040:  br.s       IL_0046

      IL_0042:  ldc.i4.0
      IL_0043:  nop
      IL_0044:  br.s       IL_004e

      IL_0046:  ldloc.s    V_4
      IL_0048:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_004d:  nop
      IL_004e:  ldloc.0
      IL_004f:  ldc.i4.6
      IL_0050:  shl
      IL_0051:  ldloc.0
      IL_0052:  ldc.i4.2
      IL_0053:  shr
      IL_0054:  add
      IL_0055:  add
      IL_0056:  add
      IL_0057:  stloc.0
      IL_0058:  ldc.i4     0x9e3779b9
      IL_005d:  ldarg.1
      IL_005e:  stloc.s    V_5
      IL_0060:  ldloc.1
      IL_0061:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0066:  stloc.s    V_6
      IL_0068:  ldloc.s    V_6
      IL_006a:  brfalse.s  IL_006e

      IL_006c:  br.s       IL_0072

      IL_006e:  ldc.i4.0
      IL_006f:  nop
      IL_0070:  br.s       IL_007a

      IL_0072:  ldloc.s    V_6
      IL_0074:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0079:  nop
      IL_007a:  ldloc.0
      IL_007b:  ldc.i4.6
      IL_007c:  shl
      IL_007d:  ldloc.0
      IL_007e:  ldc.i4.2
      IL_007f:  shr
      IL_0080:  add
      IL_0081:  add
      IL_0082:  add
      IL_0083:  stloc.0
      IL_0084:  ldloc.0
      IL_0085:  ret

      IL_0086:  ldc.i4.0
      IL_0087:  ret
    } // end of method Author::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000320: type Author =
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/Author::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method Author::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       117 (0x75)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Author V_0,
               class ComplexCompositeTypes/Author V_1,
               class ComplexCompositeTypes/Author V_2,
               class ComplexCompositeTypes/Author V_3,
               class [mscorlib]System.Collections.IEqualityComparer V_4,
               class [mscorlib]System.Collections.IEqualityComparer V_5,
               class [mscorlib]System.Collections.IEqualityComparer V_6)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_006d

      IL_000b:  ldarg.1
      IL_000c:  isinst     ComplexCompositeTypes/Author
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  brfalse.s  IL_0017

      IL_0015:  br.s       IL_0019

      IL_0017:  br.s       IL_006b

      IL_0019:  ldloc.0
      IL_001a:  stloc.1
      IL_001b:  ldarg.0
      IL_001c:  pop
      IL_001d:  ldarg.0
      IL_001e:  stloc.2
      IL_001f:  ldloc.1
      IL_0020:  stloc.3
      IL_0021:  ldarg.2
      IL_0022:  stloc.s    V_4
      IL_0024:  ldloc.2
      IL_0025:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_002a:  ldloc.3
      IL_002b:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0030:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0035:  brfalse.s  IL_0039

      IL_0037:  br.s       IL_003b

      IL_0039:  br.s       IL_0069

      IL_003b:  ldarg.2
      IL_003c:  stloc.s    V_5
      IL_003e:  ldloc.2
      IL_003f:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_0044:  ldloc.3
      IL_0045:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_004a:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_004f:  brfalse.s  IL_0053

      IL_0051:  br.s       IL_0055

      IL_0053:  br.s       IL_0067

      IL_0055:  ldarg.2
      IL_0056:  stloc.s    V_6
      IL_0058:  ldloc.2
      IL_0059:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_005e:  ldloc.3
      IL_005f:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_0064:  ceq
      IL_0066:  ret

      IL_0067:  ldc.i4.0
      IL_0068:  ret

      IL_0069:  ldc.i4.0
      IL_006a:  ret

      IL_006b:  ldc.i4.0
      IL_006c:  ret

      IL_006d:  ldarg.1
      IL_006e:  ldnull
      IL_006f:  cgt.un
      IL_0071:  ldc.i4.0
      IL_0072:  ceq
      IL_0074:  ret
    } // end of method Author::Equals

    .method public specialname instance string 
            get_FirstName() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
      .locals init ([0] class ComplexCompositeTypes/Author V_0,
               [1] string first)
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0009:  stloc.1
//000324:         | Author(first, _, _) -> first
      IL_000a:  ldloc.1
      IL_000b:  ret
    } // end of method Author::get_FirstName

    .method public specialname instance string 
            get_LastName() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
      .locals init ([0] class ComplexCompositeTypes/Author V_0,
               [1] string last)
//000325:     member a.LastName =
//000326:         match a with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_0009:  stloc.1
//000327:         | Author(_, last, _) -> last
      IL_000a:  ldloc.1
      IL_000b:  ret
    } // end of method Author::get_LastName

    .method public specialname instance int32 
            get_Age() cil managed
    {
      // Code size       12 (0xc)
      .maxstack  3
      .locals init ([0] class ComplexCompositeTypes/Author V_0,
               [1] int32 age)
//000328:     member a.Age =
//000329:         match a with
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  stloc.0
      IL_0003:  ldloc.0
      IL_0004:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_0009:  stloc.1
//000330:         | Author(_, _, age) -> age
      IL_000a:  ldloc.1
      IL_000b:  ret
    } // end of method Author::get_Age

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/Author obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       102 (0x66)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Author V_0,
               class ComplexCompositeTypes/Author V_1)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_005e

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_005c

      IL_0015:  ldarg.0
      IL_0016:  pop
      IL_0017:  ldarg.0
      IL_0018:  stloc.0
      IL_0019:  ldarg.1
      IL_001a:  stloc.1
      IL_001b:  ldloc.0
      IL_001c:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0021:  ldloc.1
      IL_0022:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0027:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_002c:  brfalse.s  IL_0030

      IL_002e:  br.s       IL_0032

      IL_0030:  br.s       IL_005a

      IL_0032:  ldloc.0
      IL_0033:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_0038:  ldloc.1
      IL_0039:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_003e:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0043:  brfalse.s  IL_0047

      IL_0045:  br.s       IL_0049

      IL_0047:  br.s       IL_0058

      IL_0049:  ldloc.0
      IL_004a:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_004f:  ldloc.1
      IL_0050:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_0055:  ceq
      IL_0057:  ret

      IL_0058:  ldc.i4.0
      IL_0059:  ret

      IL_005a:  ldc.i4.0
      IL_005b:  ret

      IL_005c:  ldc.i4.0
      IL_005d:  ret

      IL_005e:  ldarg.1
      IL_005f:  ldnull
      IL_0060:  cgt.un
      IL_0062:  ldc.i4.0
      IL_0063:  ceq
      IL_0065:  ret
    } // end of method Author::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Author V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/Author
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/Author::Equals(class ComplexCompositeTypes/Author)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method Author::Equals

    .property instance int32 Tag()
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/Author::get_Tag()
    } // end of property Author::Tag
    .property instance string Item1()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32,
                                                                                                  int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .get instance string ComplexCompositeTypes/Author::get_Item1()
    } // end of property Author::Item1
    .property instance string Item2()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32,
                                                                                                  int32) = ( 01 00 04 00 00 00 00 00 00 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .get instance string ComplexCompositeTypes/Author::get_Item2()
    } // end of property Author::Item2
    .property instance int32 Item3()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32,
                                                                                                  int32) = ( 01 00 04 00 00 00 00 00 00 00 02 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/Author::get_Item3()
    } // end of property Author::Item3
    .property instance string FirstName()
    {
      .get instance string ComplexCompositeTypes/Author::get_FirstName()
    } // end of property Author::FirstName
    .property instance string LastName()
    {
      .get instance string ComplexCompositeTypes/Author::get_LastName()
    } // end of property Author::LastName
    .property instance int32 Age()
    {
      .get instance int32 ComplexCompositeTypes/Author::get_Age()
    } // end of property Author::Age
  } // end of class Author

  .class auto ansi serializable sealed nested public AuthorRecord
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/AuthorRecord>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class ComplexCompositeTypes/AuthorRecord>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 02 00 00 00 00 00 ) 
    .field assembly string FirstName@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .field assembly string LastName@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .field assembly int32 Age@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .method public specialname instance string 
            get_FirstName() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_0006:  ret
    } // end of method AuthorRecord::get_FirstName

    .method public specialname instance string 
            get_LastName() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0006:  ret
    } // end of method AuthorRecord::get_LastName

    .method public specialname instance int32 
            get_Age() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_0006:  ret
    } // end of method AuthorRecord::get_Age

    .method public specialname rtspecialname 
            instance void  .ctor(string firstName,
                                 string lastName,
                                 int32 age) cil managed
    {
      // Code size       28 (0x1c)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_000d:  ldarg.0
      IL_000e:  ldarg.2
      IL_000f:  stfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0014:  ldarg.0
      IL_0015:  ldarg.3
      IL_0016:  stfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_001b:  ret
    } // end of method AuthorRecord::.ctor

    .method public hidebysig virtual final 
            instance int32  CompareTo(class ComplexCompositeTypes/AuthorRecord obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       173 (0xad)
      .maxstack  4
      .locals init (int32 V_0,
               class [mscorlib]System.Collections.IComparer V_1,
               int32 V_2,
               class [mscorlib]System.Collections.IComparer V_3,
               class [mscorlib]System.Collections.IComparer V_4,
               int32 V_5,
               int32 V_6)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_009f

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_001b

      IL_0016:  br         IL_009d

      IL_001b:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0020:  stloc.1
      IL_0021:  ldarg.0
      IL_0022:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_0027:  ldarg.1
      IL_0028:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_002d:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0032:  stloc.0
      IL_0033:  ldloc.0
      IL_0034:  ldc.i4.0
      IL_0035:  bge.s      IL_0039

      IL_0037:  br.s       IL_003b

      IL_0039:  br.s       IL_003d

      IL_003b:  ldloc.0
      IL_003c:  ret

      IL_003d:  ldloc.0
      IL_003e:  ldc.i4.0
      IL_003f:  ble.s      IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_0047

      IL_0045:  ldloc.0
      IL_0046:  ret

      IL_0047:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_004c:  stloc.3
      IL_004d:  ldarg.0
      IL_004e:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0053:  ldarg.1
      IL_0054:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0059:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_005e:  stloc.2
      IL_005f:  ldloc.2
      IL_0060:  ldc.i4.0
      IL_0061:  bge.s      IL_0065

      IL_0063:  br.s       IL_0067

      IL_0065:  br.s       IL_0069

      IL_0067:  ldloc.2
      IL_0068:  ret

      IL_0069:  ldloc.2
      IL_006a:  ldc.i4.0
      IL_006b:  ble.s      IL_006f

      IL_006d:  br.s       IL_0071

      IL_006f:  br.s       IL_0073

      IL_0071:  ldloc.2
      IL_0072:  ret

      IL_0073:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0078:  stloc.s    V_4
      IL_007a:  ldarg.0
      IL_007b:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_0080:  stloc.s    V_5
      IL_0082:  ldarg.1
      IL_0083:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_0088:  stloc.s    V_6
      IL_008a:  ldloc.s    V_5
      IL_008c:  ldloc.s    V_6
      IL_008e:  bge.s      IL_0092

      IL_0090:  br.s       IL_0094

      IL_0092:  br.s       IL_0096

      IL_0094:  ldc.i4.m1
      IL_0095:  ret

      IL_0096:  ldloc.s    V_5
      IL_0098:  ldloc.s    V_6
      IL_009a:  cgt
      IL_009c:  ret

      IL_009d:  ldc.i4.1
      IL_009e:  ret

      IL_009f:  ldarg.1
      IL_00a0:  ldnull
      IL_00a1:  cgt.un
      IL_00a3:  brfalse.s  IL_00a7

      IL_00a5:  br.s       IL_00a9

      IL_00a7:  br.s       IL_00ab

      IL_00a9:  ldc.i4.m1
      IL_00aa:  ret

      IL_00ab:  ldc.i4.0
      IL_00ac:  ret
    } // end of method AuthorRecord::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000331: 
//000332: type AuthorRecord = {
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/AuthorRecord
      IL_0008:  call       instance int32 ComplexCompositeTypes/AuthorRecord::CompareTo(class ComplexCompositeTypes/AuthorRecord)
      IL_000d:  ret
    } // end of method AuthorRecord::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       186 (0xba)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/AuthorRecord V_0,
               [1] class ComplexCompositeTypes/AuthorRecord V_1,
               [2] int32 V_2,
               [3] class [mscorlib]System.Collections.IComparer V_3,
               [4] int32 V_4,
               [5] class [mscorlib]System.Collections.IComparer V_5,
               [6] class [mscorlib]System.Collections.IComparer V_6,
               [7] int32 V_7,
               [8] int32 V_8)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/AuthorRecord
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  stloc.1
      IL_000a:  ldarg.0
      IL_000b:  ldnull
      IL_000c:  cgt.un
      IL_000e:  brfalse.s  IL_0012

      IL_0010:  br.s       IL_0017

      IL_0012:  br         IL_00a7

//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0017:  ldarg.1
      IL_0018:  unbox.any  ComplexCompositeTypes/AuthorRecord
      IL_001d:  ldnull
      IL_001e:  cgt.un
      IL_0020:  brfalse.s  IL_0024

      IL_0022:  br.s       IL_0029

      IL_0024:  br         IL_00a5

      IL_0029:  ldarg.2
      IL_002a:  stloc.3
      IL_002b:  ldarg.0
      IL_002c:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_0031:  ldloc.1
      IL_0032:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_0037:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_003c:  stloc.2
      IL_003d:  ldloc.2
      IL_003e:  ldc.i4.0
      IL_003f:  bge.s      IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_0047

      IL_0045:  ldloc.2
      IL_0046:  ret

      IL_0047:  ldloc.2
      IL_0048:  ldc.i4.0
      IL_0049:  ble.s      IL_004d

      IL_004b:  br.s       IL_004f

      IL_004d:  br.s       IL_0051

      IL_004f:  ldloc.2
      IL_0050:  ret

      IL_0051:  ldarg.2
      IL_0052:  stloc.s    V_5
      IL_0054:  ldarg.0
      IL_0055:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_005a:  ldloc.1
      IL_005b:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0060:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0065:  stloc.s    V_4
      IL_0067:  ldloc.s    V_4
      IL_0069:  ldc.i4.0
      IL_006a:  bge.s      IL_006e

      IL_006c:  br.s       IL_0070

      IL_006e:  br.s       IL_0073

      IL_0070:  ldloc.s    V_4
      IL_0072:  ret

      IL_0073:  ldloc.s    V_4
      IL_0075:  ldc.i4.0
      IL_0076:  ble.s      IL_007a

      IL_0078:  br.s       IL_007c

      IL_007a:  br.s       IL_007f

      IL_007c:  ldloc.s    V_4
      IL_007e:  ret

      IL_007f:  ldarg.2
      IL_0080:  stloc.s    V_6
      IL_0082:  ldarg.0
      IL_0083:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_0088:  stloc.s    V_7
      IL_008a:  ldloc.1
      IL_008b:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_0090:  stloc.s    V_8
      IL_0092:  ldloc.s    V_7
      IL_0094:  ldloc.s    V_8
      IL_0096:  bge.s      IL_009a

      IL_0098:  br.s       IL_009c

      IL_009a:  br.s       IL_009e

      IL_009c:  ldc.i4.m1
      IL_009d:  ret

      IL_009e:  ldloc.s    V_7
      IL_00a0:  ldloc.s    V_8
      IL_00a2:  cgt
      IL_00a4:  ret

      IL_00a5:  ldc.i4.1
      IL_00a6:  ret

      IL_00a7:  ldarg.1
      IL_00a8:  unbox.any  ComplexCompositeTypes/AuthorRecord
      IL_00ad:  ldnull
      IL_00ae:  cgt.un
      IL_00b0:  brfalse.s  IL_00b4

      IL_00b2:  br.s       IL_00b6

      IL_00b4:  br.s       IL_00b8

      IL_00b6:  ldc.i4.m1
      IL_00b7:  ret

      IL_00b8:  ldc.i4.0
      IL_00b9:  ret
    } // end of method AuthorRecord::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       127 (0x7f)
      .maxstack  7
      .locals init (int32 V_0,
               class [mscorlib]System.Collections.IEqualityComparer V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               string V_3,
               class [mscorlib]System.Collections.IEqualityComparer V_4,
               string V_5)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_007d

      IL_000e:  ldc.i4.0
      IL_000f:  stloc.0
      IL_0010:  ldc.i4     0x9e3779b9
      IL_0015:  ldarg.1
      IL_0016:  stloc.1
      IL_0017:  ldarg.0
      IL_0018:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_001d:  ldloc.0
      IL_001e:  ldc.i4.6
      IL_001f:  shl
      IL_0020:  ldloc.0
      IL_0021:  ldc.i4.2
      IL_0022:  shr
      IL_0023:  add
      IL_0024:  add
      IL_0025:  add
      IL_0026:  stloc.0
      IL_0027:  ldc.i4     0x9e3779b9
      IL_002c:  ldarg.1
      IL_002d:  stloc.2
      IL_002e:  ldarg.0
      IL_002f:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0034:  stloc.3
      IL_0035:  ldloc.3
      IL_0036:  brfalse.s  IL_003a

      IL_0038:  br.s       IL_003e

      IL_003a:  ldc.i4.0
      IL_003b:  nop
      IL_003c:  br.s       IL_0045

      IL_003e:  ldloc.3
      IL_003f:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0044:  nop
      IL_0045:  ldloc.0
      IL_0046:  ldc.i4.6
      IL_0047:  shl
      IL_0048:  ldloc.0
      IL_0049:  ldc.i4.2
      IL_004a:  shr
      IL_004b:  add
      IL_004c:  add
      IL_004d:  add
      IL_004e:  stloc.0
      IL_004f:  ldc.i4     0x9e3779b9
      IL_0054:  ldarg.1
      IL_0055:  stloc.s    V_4
      IL_0057:  ldarg.0
      IL_0058:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_005d:  stloc.s    V_5
      IL_005f:  ldloc.s    V_5
      IL_0061:  brfalse.s  IL_0065

      IL_0063:  br.s       IL_0069

      IL_0065:  ldc.i4.0
      IL_0066:  nop
      IL_0067:  br.s       IL_0071

      IL_0069:  ldloc.s    V_5
      IL_006b:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0070:  nop
      IL_0071:  ldloc.0
      IL_0072:  ldc.i4.6
      IL_0073:  shl
      IL_0074:  ldloc.0
      IL_0075:  ldc.i4.2
      IL_0076:  shr
      IL_0077:  add
      IL_0078:  add
      IL_0079:  add
      IL_007a:  stloc.0
      IL_007b:  ldloc.0
      IL_007c:  ret

      IL_007d:  ldc.i4.0
      IL_007e:  ret
    } // end of method AuthorRecord::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000332: type AuthorRecord = {
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/AuthorRecord::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method AuthorRecord::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       109 (0x6d)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/AuthorRecord V_0,
               class ComplexCompositeTypes/AuthorRecord V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3,
               class [mscorlib]System.Collections.IEqualityComparer V_4)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0065

      IL_000b:  ldarg.1
      IL_000c:  isinst     ComplexCompositeTypes/AuthorRecord
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  brfalse.s  IL_0017

      IL_0015:  br.s       IL_0019

      IL_0017:  br.s       IL_0063

      IL_0019:  ldloc.0
      IL_001a:  stloc.1
      IL_001b:  ldarg.2
      IL_001c:  stloc.2
      IL_001d:  ldarg.0
      IL_001e:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_0023:  ldloc.1
      IL_0024:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_0029:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_002e:  brfalse.s  IL_0032

      IL_0030:  br.s       IL_0034

      IL_0032:  br.s       IL_0061

      IL_0034:  ldarg.2
      IL_0035:  stloc.3
      IL_0036:  ldarg.0
      IL_0037:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_003c:  ldloc.1
      IL_003d:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0042:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0047:  brfalse.s  IL_004b

      IL_0049:  br.s       IL_004d

      IL_004b:  br.s       IL_005f

      IL_004d:  ldarg.2
      IL_004e:  stloc.s    V_4
      IL_0050:  ldarg.0
      IL_0051:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_0056:  ldloc.1
      IL_0057:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_005c:  ceq
      IL_005e:  ret

      IL_005f:  ldc.i4.0
      IL_0060:  ret

      IL_0061:  ldc.i4.0
      IL_0062:  ret

      IL_0063:  ldc.i4.0
      IL_0064:  ret

      IL_0065:  ldarg.1
      IL_0066:  ldnull
      IL_0067:  cgt.un
      IL_0069:  ldc.i4.0
      IL_006a:  ceq
      IL_006c:  ret
    } // end of method AuthorRecord::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/AuthorRecord obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       96 (0x60)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0058

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_0056

      IL_0015:  ldarg.0
      IL_0016:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_001b:  ldarg.1
      IL_001c:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
      IL_0021:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0026:  brfalse.s  IL_002a

      IL_0028:  br.s       IL_002c

      IL_002a:  br.s       IL_0054

      IL_002c:  ldarg.0
      IL_002d:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0032:  ldarg.1
      IL_0033:  ldfld      string ComplexCompositeTypes/AuthorRecord::LastName@
      IL_0038:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_003d:  brfalse.s  IL_0041

      IL_003f:  br.s       IL_0043

      IL_0041:  br.s       IL_0052

      IL_0043:  ldarg.0
      IL_0044:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_0049:  ldarg.1
      IL_004a:  ldfld      int32 ComplexCompositeTypes/AuthorRecord::Age@
      IL_004f:  ceq
      IL_0051:  ret

      IL_0052:  ldc.i4.0
      IL_0053:  ret

      IL_0054:  ldc.i4.0
      IL_0055:  ret

      IL_0056:  ldc.i4.0
      IL_0057:  ret

      IL_0058:  ldarg.1
      IL_0059:  ldnull
      IL_005a:  cgt.un
      IL_005c:  ldc.i4.0
      IL_005d:  ceq
      IL_005f:  ret
    } // end of method AuthorRecord::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/AuthorRecord V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/AuthorRecord
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/AuthorRecord::Equals(class ComplexCompositeTypes/AuthorRecord)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method AuthorRecord::Equals

    .property instance string FirstName()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 ) 
      .get instance string ComplexCompositeTypes/AuthorRecord::get_FirstName()
    } // end of property AuthorRecord::FirstName
    .property instance string LastName()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 ) 
      .get instance string ComplexCompositeTypes/AuthorRecord::get_LastName()
    } // end of property AuthorRecord::LastName
    .property instance int32 Age()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 02 00 00 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/AuthorRecord::get_Age()
    } // end of property AuthorRecord::Age
  } // end of class AuthorRecord

  .class auto ansi serializable sealed nested public ProgrammingLanguage
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/ProgrammingLanguage>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class ComplexCompositeTypes/ProgrammingLanguage>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 02 00 00 00 00 00 ) 
    .field assembly string Name@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .field assembly int32 YearsInUse@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .method public specialname instance string 
            get_Name() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_0006:  ret
    } // end of method ProgrammingLanguage::get_Name

    .method public specialname instance int32 
            get_YearsInUse() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_0006:  ret
    } // end of method ProgrammingLanguage::get_YearsInUse

    .method public specialname rtspecialname 
            instance void  .ctor(string name,
                                 int32 yearsInUse) cil managed
    {
      // Code size       21 (0x15)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_000d:  ldarg.0
      IL_000e:  ldarg.2
      IL_000f:  stfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_0014:  ret
    } // end of method ProgrammingLanguage::.ctor

    .method public hidebysig virtual final 
            instance int32  CompareTo(class ComplexCompositeTypes/ProgrammingLanguage obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       122 (0x7a)
      .maxstack  4
      .locals init (int32 V_0,
               class [mscorlib]System.Collections.IComparer V_1,
               class [mscorlib]System.Collections.IComparer V_2,
               int32 V_3,
               int32 V_4)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_006c

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_0018

      IL_0016:  br.s       IL_006a

      IL_0018:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_001d:  stloc.1
      IL_001e:  ldarg.0
      IL_001f:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_0024:  ldarg.1
      IL_0025:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_002a:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_002f:  stloc.0
      IL_0030:  ldloc.0
      IL_0031:  ldc.i4.0
      IL_0032:  bge.s      IL_0036

      IL_0034:  br.s       IL_0038

      IL_0036:  br.s       IL_003a

      IL_0038:  ldloc.0
      IL_0039:  ret

      IL_003a:  ldloc.0
      IL_003b:  ldc.i4.0
      IL_003c:  ble.s      IL_0040

      IL_003e:  br.s       IL_0042

      IL_0040:  br.s       IL_0044

      IL_0042:  ldloc.0
      IL_0043:  ret

      IL_0044:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0049:  stloc.2
      IL_004a:  ldarg.0
      IL_004b:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_0050:  stloc.3
      IL_0051:  ldarg.1
      IL_0052:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_0057:  stloc.s    V_4
      IL_0059:  ldloc.3
      IL_005a:  ldloc.s    V_4
      IL_005c:  bge.s      IL_0060

      IL_005e:  br.s       IL_0062

      IL_0060:  br.s       IL_0064

      IL_0062:  ldc.i4.m1
      IL_0063:  ret

      IL_0064:  ldloc.3
      IL_0065:  ldloc.s    V_4
      IL_0067:  cgt
      IL_0069:  ret

      IL_006a:  ldc.i4.1
      IL_006b:  ret

      IL_006c:  ldarg.1
      IL_006d:  ldnull
      IL_006e:  cgt.un
      IL_0070:  brfalse.s  IL_0074

      IL_0072:  br.s       IL_0076

      IL_0074:  br.s       IL_0078

      IL_0076:  ldc.i4.m1
      IL_0077:  ret

      IL_0078:  ldc.i4.0
      IL_0079:  ret
    } // end of method ProgrammingLanguage::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/ProgrammingLanguage
      IL_0008:  call       instance int32 ComplexCompositeTypes/ProgrammingLanguage::CompareTo(class ComplexCompositeTypes/ProgrammingLanguage)
      IL_000d:  ret
    } // end of method ProgrammingLanguage::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       137 (0x89)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/ProgrammingLanguage V_0,
               [1] class ComplexCompositeTypes/ProgrammingLanguage V_1,
               [2] int32 V_2,
               [3] class [mscorlib]System.Collections.IComparer V_3,
               [4] class [mscorlib]System.Collections.IComparer V_4,
               [5] int32 V_5,
               [6] int32 V_6)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/ProgrammingLanguage
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  stloc.1
      IL_000a:  ldarg.0
      IL_000b:  ldnull
      IL_000c:  cgt.un
      IL_000e:  brfalse.s  IL_0012

      IL_0010:  br.s       IL_0017

      IL_0012:  br         IL_0076

//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0017:  ldarg.1
      IL_0018:  unbox.any  ComplexCompositeTypes/ProgrammingLanguage
      IL_001d:  ldnull
      IL_001e:  cgt.un
      IL_0020:  brfalse.s  IL_0024

      IL_0022:  br.s       IL_0026

      IL_0024:  br.s       IL_0074

      IL_0026:  ldarg.2
      IL_0027:  stloc.3
      IL_0028:  ldarg.0
      IL_0029:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_002e:  ldloc.1
      IL_002f:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_0034:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0039:  stloc.2
      IL_003a:  ldloc.2
      IL_003b:  ldc.i4.0
      IL_003c:  bge.s      IL_0040

      IL_003e:  br.s       IL_0042

      IL_0040:  br.s       IL_0044

      IL_0042:  ldloc.2
      IL_0043:  ret

      IL_0044:  ldloc.2
      IL_0045:  ldc.i4.0
      IL_0046:  ble.s      IL_004a

      IL_0048:  br.s       IL_004c

      IL_004a:  br.s       IL_004e

      IL_004c:  ldloc.2
      IL_004d:  ret

      IL_004e:  ldarg.2
      IL_004f:  stloc.s    V_4
      IL_0051:  ldarg.0
      IL_0052:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_0057:  stloc.s    V_5
      IL_0059:  ldloc.1
      IL_005a:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_005f:  stloc.s    V_6
      IL_0061:  ldloc.s    V_5
      IL_0063:  ldloc.s    V_6
      IL_0065:  bge.s      IL_0069

      IL_0067:  br.s       IL_006b

      IL_0069:  br.s       IL_006d

      IL_006b:  ldc.i4.m1
      IL_006c:  ret

      IL_006d:  ldloc.s    V_5
      IL_006f:  ldloc.s    V_6
      IL_0071:  cgt
      IL_0073:  ret

      IL_0074:  ldc.i4.1
      IL_0075:  ret

      IL_0076:  ldarg.1
      IL_0077:  unbox.any  ComplexCompositeTypes/ProgrammingLanguage
      IL_007c:  ldnull
      IL_007d:  cgt.un
      IL_007f:  brfalse.s  IL_0083

      IL_0081:  br.s       IL_0085

      IL_0083:  br.s       IL_0087

      IL_0085:  ldc.i4.m1
      IL_0086:  ret

      IL_0087:  ldc.i4.0
      IL_0088:  ret
    } // end of method ProgrammingLanguage::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       80 (0x50)
      .maxstack  7
      .locals init (int32 V_0,
               class [mscorlib]System.Collections.IEqualityComparer V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               string V_3)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_004e

      IL_000b:  ldc.i4.0
      IL_000c:  stloc.0
      IL_000d:  ldc.i4     0x9e3779b9
      IL_0012:  ldarg.1
      IL_0013:  stloc.1
      IL_0014:  ldarg.0
      IL_0015:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_001a:  ldloc.0
      IL_001b:  ldc.i4.6
      IL_001c:  shl
      IL_001d:  ldloc.0
      IL_001e:  ldc.i4.2
      IL_001f:  shr
      IL_0020:  add
      IL_0021:  add
      IL_0022:  add
      IL_0023:  stloc.0
      IL_0024:  ldc.i4     0x9e3779b9
      IL_0029:  ldarg.1
      IL_002a:  stloc.2
      IL_002b:  ldarg.0
      IL_002c:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_0031:  stloc.3
      IL_0032:  ldloc.3
      IL_0033:  brfalse.s  IL_0037

      IL_0035:  br.s       IL_003b

      IL_0037:  ldc.i4.0
      IL_0038:  nop
      IL_0039:  br.s       IL_0042

      IL_003b:  ldloc.3
      IL_003c:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0041:  nop
      IL_0042:  ldloc.0
      IL_0043:  ldc.i4.6
      IL_0044:  shl
      IL_0045:  ldloc.0
      IL_0046:  ldc.i4.2
      IL_0047:  shr
      IL_0048:  add
      IL_0049:  add
      IL_004a:  add
      IL_004b:  stloc.0
      IL_004c:  ldloc.0
      IL_004d:  ret

      IL_004e:  ldc.i4.0
      IL_004f:  ret
    } // end of method ProgrammingLanguage::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000337: type ProgrammingLanguage = {
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/ProgrammingLanguage::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method ProgrammingLanguage::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       81 (0x51)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/ProgrammingLanguage V_0,
               class ComplexCompositeTypes/ProgrammingLanguage V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0049

      IL_000b:  ldarg.1
      IL_000c:  isinst     ComplexCompositeTypes/ProgrammingLanguage
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  brfalse.s  IL_0017

      IL_0015:  br.s       IL_0019

      IL_0017:  br.s       IL_0047

      IL_0019:  ldloc.0
      IL_001a:  stloc.1
      IL_001b:  ldarg.2
      IL_001c:  stloc.2
      IL_001d:  ldarg.0
      IL_001e:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_0023:  ldloc.1
      IL_0024:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_0029:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_002e:  brfalse.s  IL_0032

      IL_0030:  br.s       IL_0034

      IL_0032:  br.s       IL_0045

      IL_0034:  ldarg.2
      IL_0035:  stloc.3
      IL_0036:  ldarg.0
      IL_0037:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_003c:  ldloc.1
      IL_003d:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_0042:  ceq
      IL_0044:  ret

      IL_0045:  ldc.i4.0
      IL_0046:  ret

      IL_0047:  ldc.i4.0
      IL_0048:  ret

      IL_0049:  ldarg.1
      IL_004a:  ldnull
      IL_004b:  cgt.un
      IL_004d:  ldc.i4.0
      IL_004e:  ceq
      IL_0050:  ret
    } // end of method ProgrammingLanguage::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/ProgrammingLanguage obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       71 (0x47)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_003f

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_003d

      IL_0015:  ldarg.0
      IL_0016:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_001b:  ldarg.1
      IL_001c:  ldfld      string ComplexCompositeTypes/ProgrammingLanguage::Name@
      IL_0021:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0026:  brfalse.s  IL_002a

      IL_0028:  br.s       IL_002c

      IL_002a:  br.s       IL_003b

      IL_002c:  ldarg.0
      IL_002d:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_0032:  ldarg.1
      IL_0033:  ldfld      int32 ComplexCompositeTypes/ProgrammingLanguage::YearsInUse@
      IL_0038:  ceq
      IL_003a:  ret

      IL_003b:  ldc.i4.0
      IL_003c:  ret

      IL_003d:  ldc.i4.0
      IL_003e:  ret

      IL_003f:  ldarg.1
      IL_0040:  ldnull
      IL_0041:  cgt.un
      IL_0043:  ldc.i4.0
      IL_0044:  ceq
      IL_0046:  ret
    } // end of method ProgrammingLanguage::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/ProgrammingLanguage V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/ProgrammingLanguage
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/ProgrammingLanguage::Equals(class ComplexCompositeTypes/ProgrammingLanguage)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method ProgrammingLanguage::Equals

    .property instance string Name()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 ) 
      .get instance string ComplexCompositeTypes/ProgrammingLanguage::get_Name()
    } // end of property ProgrammingLanguage::Name
    .property instance int32 YearsInUse()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/ProgrammingLanguage::get_YearsInUse()
    } // end of property ProgrammingLanguage::YearsInUse
  } // end of class ProgrammingLanguage

  .class auto ansi serializable sealed nested public SpokenLanguage
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/SpokenLanguage>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class ComplexCompositeTypes/SpokenLanguage>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 02 00 00 00 00 00 ) 
    .field assembly string Name@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .field assembly int32 YearsInUse@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .method public specialname instance string 
            get_Name() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_0006:  ret
    } // end of method SpokenLanguage::get_Name

    .method public specialname instance int32 
            get_YearsInUse() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_0006:  ret
    } // end of method SpokenLanguage::get_YearsInUse

    .method public specialname rtspecialname 
            instance void  .ctor(string name,
                                 int32 yearsInUse) cil managed
    {
      // Code size       21 (0x15)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_000d:  ldarg.0
      IL_000e:  ldarg.2
      IL_000f:  stfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_0014:  ret
    } // end of method SpokenLanguage::.ctor

    .method public hidebysig virtual final 
            instance int32  CompareTo(class ComplexCompositeTypes/SpokenLanguage obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       122 (0x7a)
      .maxstack  4
      .locals init (int32 V_0,
               class [mscorlib]System.Collections.IComparer V_1,
               class [mscorlib]System.Collections.IComparer V_2,
               int32 V_3,
               int32 V_4)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_006c

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_0018

      IL_0016:  br.s       IL_006a

      IL_0018:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_001d:  stloc.1
      IL_001e:  ldarg.0
      IL_001f:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_0024:  ldarg.1
      IL_0025:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_002a:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_002f:  stloc.0
      IL_0030:  ldloc.0
      IL_0031:  ldc.i4.0
      IL_0032:  bge.s      IL_0036

      IL_0034:  br.s       IL_0038

      IL_0036:  br.s       IL_003a

      IL_0038:  ldloc.0
      IL_0039:  ret

      IL_003a:  ldloc.0
      IL_003b:  ldc.i4.0
      IL_003c:  ble.s      IL_0040

      IL_003e:  br.s       IL_0042

      IL_0040:  br.s       IL_0044

      IL_0042:  ldloc.0
      IL_0043:  ret

      IL_0044:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0049:  stloc.2
      IL_004a:  ldarg.0
      IL_004b:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_0050:  stloc.3
      IL_0051:  ldarg.1
      IL_0052:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_0057:  stloc.s    V_4
      IL_0059:  ldloc.3
      IL_005a:  ldloc.s    V_4
      IL_005c:  bge.s      IL_0060

      IL_005e:  br.s       IL_0062

      IL_0060:  br.s       IL_0064

      IL_0062:  ldc.i4.m1
      IL_0063:  ret

      IL_0064:  ldloc.3
      IL_0065:  ldloc.s    V_4
      IL_0067:  cgt
      IL_0069:  ret

      IL_006a:  ldc.i4.1
      IL_006b:  ret

      IL_006c:  ldarg.1
      IL_006d:  ldnull
      IL_006e:  cgt.un
      IL_0070:  brfalse.s  IL_0074

      IL_0072:  br.s       IL_0076

      IL_0074:  br.s       IL_0078

      IL_0076:  ldc.i4.m1
      IL_0077:  ret

      IL_0078:  ldc.i4.0
      IL_0079:  ret
    } // end of method SpokenLanguage::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/SpokenLanguage
      IL_0008:  call       instance int32 ComplexCompositeTypes/SpokenLanguage::CompareTo(class ComplexCompositeTypes/SpokenLanguage)
      IL_000d:  ret
    } // end of method SpokenLanguage::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       137 (0x89)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/SpokenLanguage V_0,
               [1] class ComplexCompositeTypes/SpokenLanguage V_1,
               [2] int32 V_2,
               [3] class [mscorlib]System.Collections.IComparer V_3,
               [4] class [mscorlib]System.Collections.IComparer V_4,
               [5] int32 V_5,
               [6] int32 V_6)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/SpokenLanguage
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  stloc.1
      IL_000a:  ldarg.0
      IL_000b:  ldnull
      IL_000c:  cgt.un
      IL_000e:  brfalse.s  IL_0012

      IL_0010:  br.s       IL_0017

      IL_0012:  br         IL_0076

//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0017:  ldarg.1
      IL_0018:  unbox.any  ComplexCompositeTypes/SpokenLanguage
      IL_001d:  ldnull
      IL_001e:  cgt.un
      IL_0020:  brfalse.s  IL_0024

      IL_0022:  br.s       IL_0026

      IL_0024:  br.s       IL_0074

      IL_0026:  ldarg.2
      IL_0027:  stloc.3
      IL_0028:  ldarg.0
      IL_0029:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_002e:  ldloc.1
      IL_002f:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_0034:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0039:  stloc.2
      IL_003a:  ldloc.2
      IL_003b:  ldc.i4.0
      IL_003c:  bge.s      IL_0040

      IL_003e:  br.s       IL_0042

      IL_0040:  br.s       IL_0044

      IL_0042:  ldloc.2
      IL_0043:  ret

      IL_0044:  ldloc.2
      IL_0045:  ldc.i4.0
      IL_0046:  ble.s      IL_004a

      IL_0048:  br.s       IL_004c

      IL_004a:  br.s       IL_004e

      IL_004c:  ldloc.2
      IL_004d:  ret

      IL_004e:  ldarg.2
      IL_004f:  stloc.s    V_4
      IL_0051:  ldarg.0
      IL_0052:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_0057:  stloc.s    V_5
      IL_0059:  ldloc.1
      IL_005a:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_005f:  stloc.s    V_6
      IL_0061:  ldloc.s    V_5
      IL_0063:  ldloc.s    V_6
      IL_0065:  bge.s      IL_0069

      IL_0067:  br.s       IL_006b

      IL_0069:  br.s       IL_006d

      IL_006b:  ldc.i4.m1
      IL_006c:  ret

      IL_006d:  ldloc.s    V_5
      IL_006f:  ldloc.s    V_6
      IL_0071:  cgt
      IL_0073:  ret

      IL_0074:  ldc.i4.1
      IL_0075:  ret

      IL_0076:  ldarg.1
      IL_0077:  unbox.any  ComplexCompositeTypes/SpokenLanguage
      IL_007c:  ldnull
      IL_007d:  cgt.un
      IL_007f:  brfalse.s  IL_0083

      IL_0081:  br.s       IL_0085

      IL_0083:  br.s       IL_0087

      IL_0085:  ldc.i4.m1
      IL_0086:  ret

      IL_0087:  ldc.i4.0
      IL_0088:  ret
    } // end of method SpokenLanguage::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       80 (0x50)
      .maxstack  7
      .locals init (int32 V_0,
               class [mscorlib]System.Collections.IEqualityComparer V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               string V_3)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_004e

      IL_000b:  ldc.i4.0
      IL_000c:  stloc.0
      IL_000d:  ldc.i4     0x9e3779b9
      IL_0012:  ldarg.1
      IL_0013:  stloc.1
      IL_0014:  ldarg.0
      IL_0015:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_001a:  ldloc.0
      IL_001b:  ldc.i4.6
      IL_001c:  shl
      IL_001d:  ldloc.0
      IL_001e:  ldc.i4.2
      IL_001f:  shr
      IL_0020:  add
      IL_0021:  add
      IL_0022:  add
      IL_0023:  stloc.0
      IL_0024:  ldc.i4     0x9e3779b9
      IL_0029:  ldarg.1
      IL_002a:  stloc.2
      IL_002b:  ldarg.0
      IL_002c:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_0031:  stloc.3
      IL_0032:  ldloc.3
      IL_0033:  brfalse.s  IL_0037

      IL_0035:  br.s       IL_003b

      IL_0037:  ldc.i4.0
      IL_0038:  nop
      IL_0039:  br.s       IL_0042

      IL_003b:  ldloc.3
      IL_003c:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0041:  nop
      IL_0042:  ldloc.0
      IL_0043:  ldc.i4.6
      IL_0044:  shl
      IL_0045:  ldloc.0
      IL_0046:  ldc.i4.2
      IL_0047:  shr
      IL_0048:  add
      IL_0049:  add
      IL_004a:  add
      IL_004b:  stloc.0
      IL_004c:  ldloc.0
      IL_004d:  ret

      IL_004e:  ldc.i4.0
      IL_004f:  ret
    } // end of method SpokenLanguage::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000340: type SpokenLanguage = {
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/SpokenLanguage::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method SpokenLanguage::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       81 (0x51)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/SpokenLanguage V_0,
               class ComplexCompositeTypes/SpokenLanguage V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0049

      IL_000b:  ldarg.1
      IL_000c:  isinst     ComplexCompositeTypes/SpokenLanguage
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  brfalse.s  IL_0017

      IL_0015:  br.s       IL_0019

      IL_0017:  br.s       IL_0047

      IL_0019:  ldloc.0
      IL_001a:  stloc.1
      IL_001b:  ldarg.2
      IL_001c:  stloc.2
      IL_001d:  ldarg.0
      IL_001e:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_0023:  ldloc.1
      IL_0024:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_0029:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_002e:  brfalse.s  IL_0032

      IL_0030:  br.s       IL_0034

      IL_0032:  br.s       IL_0045

      IL_0034:  ldarg.2
      IL_0035:  stloc.3
      IL_0036:  ldarg.0
      IL_0037:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_003c:  ldloc.1
      IL_003d:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_0042:  ceq
      IL_0044:  ret

      IL_0045:  ldc.i4.0
      IL_0046:  ret

      IL_0047:  ldc.i4.0
      IL_0048:  ret

      IL_0049:  ldarg.1
      IL_004a:  ldnull
      IL_004b:  cgt.un
      IL_004d:  ldc.i4.0
      IL_004e:  ceq
      IL_0050:  ret
    } // end of method SpokenLanguage::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/SpokenLanguage obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       71 (0x47)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_003f

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_003d

      IL_0015:  ldarg.0
      IL_0016:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_001b:  ldarg.1
      IL_001c:  ldfld      string ComplexCompositeTypes/SpokenLanguage::Name@
      IL_0021:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0026:  brfalse.s  IL_002a

      IL_0028:  br.s       IL_002c

      IL_002a:  br.s       IL_003b

      IL_002c:  ldarg.0
      IL_002d:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_0032:  ldarg.1
      IL_0033:  ldfld      int32 ComplexCompositeTypes/SpokenLanguage::YearsInUse@
      IL_0038:  ceq
      IL_003a:  ret

      IL_003b:  ldc.i4.0
      IL_003c:  ret

      IL_003d:  ldc.i4.0
      IL_003e:  ret

      IL_003f:  ldarg.1
      IL_0040:  ldnull
      IL_0041:  cgt.un
      IL_0043:  ldc.i4.0
      IL_0044:  ceq
      IL_0046:  ret
    } // end of method SpokenLanguage::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/SpokenLanguage V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/SpokenLanguage
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/SpokenLanguage::Equals(class ComplexCompositeTypes/SpokenLanguage)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method SpokenLanguage::Equals

    .property instance string Name()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 ) 
      .get instance string ComplexCompositeTypes/SpokenLanguage::get_Name()
    } // end of property SpokenLanguage::Name
    .property instance int32 YearsInUse()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 ) 
      .get instance int32 ComplexCompositeTypes/SpokenLanguage::get_YearsInUse()
    } // end of property SpokenLanguage::YearsInUse
  } // end of class SpokenLanguage

  .class auto ansi serializable sealed nested public Person
         extends [mscorlib]System.Object
         implements class [mscorlib]System.IEquatable`1<class ComplexCompositeTypes/Person>,
                    [FSharp.Core]System.Collections.IStructuralEquatable,
                    class [mscorlib]System.IComparable`1<class ComplexCompositeTypes/Person>,
                    [mscorlib]System.IComparable,
                    [FSharp.Core]System.Collections.IStructuralComparable
  {
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 02 00 00 00 00 00 ) 
    .field assembly string FirstName@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .field assembly string LastName@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .field assembly string FavoriteColor@
    .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
    .method public specialname instance string 
            get_FirstName() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0006:  ret
    } // end of method Person::get_FirstName

    .method public specialname instance string 
            get_LastName() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0006:  ret
    } // end of method Person::get_LastName

    .method public specialname instance string 
            get_FavoriteColor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_0006:  ret
    } // end of method Person::get_FavoriteColor

    .method public specialname rtspecialname 
            instance void  .ctor(string firstName,
                                 string lastName,
                                 string favoriteColor) cil managed
    {
      // Code size       28 (0x1c)
      .maxstack  4
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      string ComplexCompositeTypes/Person::FirstName@
      IL_000d:  ldarg.0
      IL_000e:  ldarg.2
      IL_000f:  stfld      string ComplexCompositeTypes/Person::LastName@
      IL_0014:  ldarg.0
      IL_0015:  ldarg.3
      IL_0016:  stfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_001b:  ret
    } // end of method Person::.ctor

    .method public hidebysig virtual final 
            instance int32  CompareTo(class ComplexCompositeTypes/Person obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       156 (0x9c)
      .maxstack  4
      .locals init (int32 V_0,
               class [mscorlib]System.Collections.IComparer V_1,
               int32 V_2,
               class [mscorlib]System.Collections.IComparer V_3,
               class [mscorlib]System.Collections.IComparer V_4)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_008e

      IL_000e:  ldarg.1
      IL_000f:  ldnull
      IL_0010:  cgt.un
      IL_0012:  brfalse.s  IL_0016

      IL_0014:  br.s       IL_001b

      IL_0016:  br         IL_008c

      IL_001b:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0020:  stloc.1
      IL_0021:  ldarg.0
      IL_0022:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0027:  ldarg.1
      IL_0028:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_002d:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0032:  stloc.0
      IL_0033:  ldloc.0
      IL_0034:  ldc.i4.0
      IL_0035:  bge.s      IL_0039

      IL_0037:  br.s       IL_003b

      IL_0039:  br.s       IL_003d

      IL_003b:  ldloc.0
      IL_003c:  ret

      IL_003d:  ldloc.0
      IL_003e:  ldc.i4.0
      IL_003f:  ble.s      IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_0047

      IL_0045:  ldloc.0
      IL_0046:  ret

      IL_0047:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_004c:  stloc.3
      IL_004d:  ldarg.0
      IL_004e:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0053:  ldarg.1
      IL_0054:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0059:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_005e:  stloc.2
      IL_005f:  ldloc.2
      IL_0060:  ldc.i4.0
      IL_0061:  bge.s      IL_0065

      IL_0063:  br.s       IL_0067

      IL_0065:  br.s       IL_0069

      IL_0067:  ldloc.2
      IL_0068:  ret

      IL_0069:  ldloc.2
      IL_006a:  ldc.i4.0
      IL_006b:  ble.s      IL_006f

      IL_006d:  br.s       IL_0071

      IL_006f:  br.s       IL_0073

      IL_0071:  ldloc.2
      IL_0072:  ret

      IL_0073:  call       class [mscorlib]System.Collections.IComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericComparer()
      IL_0078:  stloc.s    V_4
      IL_007a:  ldarg.0
      IL_007b:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_0080:  ldarg.1
      IL_0081:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_0086:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_008b:  ret

      IL_008c:  ldc.i4.1
      IL_008d:  ret

      IL_008e:  ldarg.1
      IL_008f:  ldnull
      IL_0090:  cgt.un
      IL_0092:  brfalse.s  IL_0096

      IL_0094:  br.s       IL_0098

      IL_0096:  br.s       IL_009a

      IL_0098:  ldc.i4.m1
      IL_0099:  ret

      IL_009a:  ldc.i4.0
      IL_009b:  ret
    } // end of method Person::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       14 (0xe)
      .maxstack  4
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  unbox.any  ComplexCompositeTypes/Person
      IL_0008:  call       instance int32 ComplexCompositeTypes/Person::CompareTo(class ComplexCompositeTypes/Person)
      IL_000d:  ret
    } // end of method Person::CompareTo

    .method public hidebysig virtual final 
            instance int32  CompareTo(object obj,
                                      class [mscorlib]System.Collections.IComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       169 (0xa9)
      .maxstack  4
      .locals init ([0] class ComplexCompositeTypes/Person V_0,
               [1] class ComplexCompositeTypes/Person V_1,
               [2] int32 V_2,
               [3] class [mscorlib]System.Collections.IComparer V_3,
               [4] int32 V_4,
               [5] class [mscorlib]System.Collections.IComparer V_5,
               [6] class [mscorlib]System.Collections.IComparer V_6)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  unbox.any  ComplexCompositeTypes/Person
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  stloc.1
      IL_000a:  ldarg.0
      IL_000b:  ldnull
      IL_000c:  cgt.un
      IL_000e:  brfalse.s  IL_0012

      IL_0010:  br.s       IL_0017

      IL_0012:  br         IL_0096

//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0017:  ldarg.1
      IL_0018:  unbox.any  ComplexCompositeTypes/Person
      IL_001d:  ldnull
      IL_001e:  cgt.un
      IL_0020:  brfalse.s  IL_0024

      IL_0022:  br.s       IL_0029

      IL_0024:  br         IL_0094

      IL_0029:  ldarg.2
      IL_002a:  stloc.3
      IL_002b:  ldarg.0
      IL_002c:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0031:  ldloc.1
      IL_0032:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0037:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_003c:  stloc.2
      IL_003d:  ldloc.2
      IL_003e:  ldc.i4.0
      IL_003f:  bge.s      IL_0043

      IL_0041:  br.s       IL_0045

      IL_0043:  br.s       IL_0047

      IL_0045:  ldloc.2
      IL_0046:  ret

      IL_0047:  ldloc.2
      IL_0048:  ldc.i4.0
      IL_0049:  ble.s      IL_004d

      IL_004b:  br.s       IL_004f

      IL_004d:  br.s       IL_0051

      IL_004f:  ldloc.2
      IL_0050:  ret

      IL_0051:  ldarg.2
      IL_0052:  stloc.s    V_5
      IL_0054:  ldarg.0
      IL_0055:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_005a:  ldloc.1
      IL_005b:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0060:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0065:  stloc.s    V_4
      IL_0067:  ldloc.s    V_4
      IL_0069:  ldc.i4.0
      IL_006a:  bge.s      IL_006e

      IL_006c:  br.s       IL_0070

      IL_006e:  br.s       IL_0073

      IL_0070:  ldloc.s    V_4
      IL_0072:  ret

      IL_0073:  ldloc.s    V_4
      IL_0075:  ldc.i4.0
      IL_0076:  ble.s      IL_007a

      IL_0078:  br.s       IL_007c

      IL_007a:  br.s       IL_007f

      IL_007c:  ldloc.s    V_4
      IL_007e:  ret

      IL_007f:  ldarg.2
      IL_0080:  stloc.s    V_6
      IL_0082:  ldarg.0
      IL_0083:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_0088:  ldloc.1
      IL_0089:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_008e:  call       int32 [mscorlib]System.String::CompareOrdinal(string,
                                                                         string)
      IL_0093:  ret

      IL_0094:  ldc.i4.1
      IL_0095:  ret

      IL_0096:  ldarg.1
      IL_0097:  unbox.any  ComplexCompositeTypes/Person
      IL_009c:  ldnull
      IL_009d:  cgt.un
      IL_009f:  brfalse.s  IL_00a3

      IL_00a1:  br.s       IL_00a5

      IL_00a3:  br.s       IL_00a7

      IL_00a5:  ldc.i4.m1
      IL_00a6:  ret

      IL_00a7:  ldc.i4.0
      IL_00a8:  ret
    } // end of method Person::CompareTo

    .method public hidebysig virtual final 
            instance int32  GetHashCode(class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       147 (0x93)
      .maxstack  7
      .locals init (int32 V_0,
               class [mscorlib]System.Collections.IEqualityComparer V_1,
               string V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3,
               string V_4,
               class [mscorlib]System.Collections.IEqualityComparer V_5,
               string V_6)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000e

      IL_0009:  br         IL_0091

      IL_000e:  ldc.i4.0
      IL_000f:  stloc.0
      IL_0010:  ldc.i4     0x9e3779b9
      IL_0015:  ldarg.1
      IL_0016:  stloc.1
      IL_0017:  ldarg.0
      IL_0018:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_001d:  stloc.2
      IL_001e:  ldloc.2
      IL_001f:  brfalse.s  IL_0023

      IL_0021:  br.s       IL_0027

      IL_0023:  ldc.i4.0
      IL_0024:  nop
      IL_0025:  br.s       IL_002e

      IL_0027:  ldloc.2
      IL_0028:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_002d:  nop
      IL_002e:  ldloc.0
      IL_002f:  ldc.i4.6
      IL_0030:  shl
      IL_0031:  ldloc.0
      IL_0032:  ldc.i4.2
      IL_0033:  shr
      IL_0034:  add
      IL_0035:  add
      IL_0036:  add
      IL_0037:  stloc.0
      IL_0038:  ldc.i4     0x9e3779b9
      IL_003d:  ldarg.1
      IL_003e:  stloc.3
      IL_003f:  ldarg.0
      IL_0040:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0045:  stloc.s    V_4
      IL_0047:  ldloc.s    V_4
      IL_0049:  brfalse.s  IL_004d

      IL_004b:  br.s       IL_0051

      IL_004d:  ldc.i4.0
      IL_004e:  nop
      IL_004f:  br.s       IL_0059

      IL_0051:  ldloc.s    V_4
      IL_0053:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0058:  nop
      IL_0059:  ldloc.0
      IL_005a:  ldc.i4.6
      IL_005b:  shl
      IL_005c:  ldloc.0
      IL_005d:  ldc.i4.2
      IL_005e:  shr
      IL_005f:  add
      IL_0060:  add
      IL_0061:  add
      IL_0062:  stloc.0
      IL_0063:  ldc.i4     0x9e3779b9
      IL_0068:  ldarg.1
      IL_0069:  stloc.s    V_5
      IL_006b:  ldarg.0
      IL_006c:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0071:  stloc.s    V_6
      IL_0073:  ldloc.s    V_6
      IL_0075:  brfalse.s  IL_0079

      IL_0077:  br.s       IL_007d

      IL_0079:  ldc.i4.0
      IL_007a:  nop
      IL_007b:  br.s       IL_0085

      IL_007d:  ldloc.s    V_6
      IL_007f:  call       instance int32 [mscorlib]System.String::GetHashCode()
      IL_0084:  nop
      IL_0085:  ldloc.0
      IL_0086:  ldc.i4.6
      IL_0087:  shl
      IL_0088:  ldloc.0
      IL_0089:  ldc.i4.2
      IL_008a:  shr
      IL_008b:  add
      IL_008c:  add
      IL_008d:  add
      IL_008e:  stloc.0
      IL_008f:  ldloc.0
      IL_0090:  ret

      IL_0091:  ldc.i4.0
      IL_0092:  ret
    } // end of method Person::GetHashCode

    .method public hidebysig virtual final 
            instance int32  GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       13 (0xd)
      .maxstack  4
//000344: type Person = 
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
      IL_0007:  call       instance int32 ComplexCompositeTypes/Person::GetHashCode(class [mscorlib]System.Collections.IEqualityComparer)
      IL_000c:  ret
    } // end of method Person::GetHashCode

    .method public hidebysig virtual final 
            instance bool  Equals(object obj,
                                  class [mscorlib]System.Collections.IEqualityComparer comp) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       112 (0x70)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Person V_0,
               class ComplexCompositeTypes/Person V_1,
               class [mscorlib]System.Collections.IEqualityComparer V_2,
               class [mscorlib]System.Collections.IEqualityComparer V_3,
               class [mscorlib]System.Collections.IEqualityComparer V_4)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_0068

      IL_000b:  ldarg.1
      IL_000c:  isinst     ComplexCompositeTypes/Person
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  brfalse.s  IL_0017

      IL_0015:  br.s       IL_0019

      IL_0017:  br.s       IL_0066

      IL_0019:  ldloc.0
      IL_001a:  stloc.1
      IL_001b:  ldarg.2
      IL_001c:  stloc.2
      IL_001d:  ldarg.0
      IL_001e:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0023:  ldloc.1
      IL_0024:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0029:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_002e:  brfalse.s  IL_0032

      IL_0030:  br.s       IL_0034

      IL_0032:  br.s       IL_0064

      IL_0034:  ldarg.2
      IL_0035:  stloc.3
      IL_0036:  ldarg.0
      IL_0037:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_003c:  ldloc.1
      IL_003d:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0042:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0047:  brfalse.s  IL_004b

      IL_0049:  br.s       IL_004d

      IL_004b:  br.s       IL_0062

      IL_004d:  ldarg.2
      IL_004e:  stloc.s    V_4
      IL_0050:  ldarg.0
      IL_0051:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_0056:  ldloc.1
      IL_0057:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_005c:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0061:  ret

      IL_0062:  ldc.i4.0
      IL_0063:  ret

      IL_0064:  ldc.i4.0
      IL_0065:  ret

      IL_0066:  ldc.i4.0
      IL_0067:  ret

      IL_0068:  ldarg.1
      IL_0069:  ldnull
      IL_006a:  cgt.un
      IL_006c:  ldc.i4.0
      IL_006d:  ceq
      IL_006f:  ret
    } // end of method Person::Equals

    .method public specialname instance string 
            get_FullName() cil managed
    {
      // Code size       24 (0x18)
      .maxstack  5
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
      IL_0000:  nop
      IL_0001:  ldstr      "{0} {1}"
      IL_0006:  ldarg.0
      IL_0007:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_000c:  ldarg.0
      IL_000d:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0012:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object)
      IL_0017:  ret
    } // end of method Person::get_FullName

    .method public hidebysig virtual final 
            instance bool  Equals(class ComplexCompositeTypes/Person obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       99 (0x63)
      .maxstack  4
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldnull
      IL_0003:  cgt.un
      IL_0005:  brfalse.s  IL_0009

      IL_0007:  br.s       IL_000b

      IL_0009:  br.s       IL_005b

      IL_000b:  ldarg.1
      IL_000c:  ldnull
      IL_000d:  cgt.un
      IL_000f:  brfalse.s  IL_0013

      IL_0011:  br.s       IL_0015

      IL_0013:  br.s       IL_0059

      IL_0015:  ldarg.0
      IL_0016:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_001b:  ldarg.1
      IL_001c:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0021:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0026:  brfalse.s  IL_002a

      IL_0028:  br.s       IL_002c

      IL_002a:  br.s       IL_0057

      IL_002c:  ldarg.0
      IL_002d:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0032:  ldarg.1
      IL_0033:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_0038:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_003d:  brfalse.s  IL_0041

      IL_003f:  br.s       IL_0043

      IL_0041:  br.s       IL_0055

      IL_0043:  ldarg.0
      IL_0044:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_0049:  ldarg.1
      IL_004a:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
      IL_004f:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0054:  ret

      IL_0055:  ldc.i4.0
      IL_0056:  ret

      IL_0057:  ldc.i4.0
      IL_0058:  ret

      IL_0059:  ldc.i4.0
      IL_005a:  ret

      IL_005b:  ldarg.1
      IL_005c:  ldnull
      IL_005d:  cgt.un
      IL_005f:  ldc.i4.0
      IL_0060:  ceq
      IL_0062:  ret
    } // end of method Person::Equals

    .method public hidebysig virtual final 
            instance bool  Equals(object obj) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  4
      .locals init (class ComplexCompositeTypes/Person V_0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     ComplexCompositeTypes/Person
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  brfalse.s  IL_000d

      IL_000b:  br.s       IL_000f

      IL_000d:  br.s       IL_0017

      IL_000f:  ldarg.0
      IL_0010:  ldloc.0
      IL_0011:  call       instance bool ComplexCompositeTypes/Person::Equals(class ComplexCompositeTypes/Person)
      IL_0016:  ret

      IL_0017:  ldc.i4.0
      IL_0018:  ret
    } // end of method Person::Equals

    .property instance string FirstName()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 00 00 00 00 00 00 ) 
      .get instance string ComplexCompositeTypes/Person::get_FirstName()
    } // end of property Person::FirstName
    .property instance string LastName()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 01 00 00 00 00 00 ) 
      .get instance string ComplexCompositeTypes/Person::get_LastName()
    } // end of property Person::LastName
    .property instance string FavoriteColor()
    {
      .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags,
                                                                                                  int32) = ( 01 00 04 00 00 00 02 00 00 00 00 00 ) 
      .get instance string ComplexCompositeTypes/Person::get_FavoriteColor()
    } // end of property Person::FavoriteColor
    .property instance string FullName()
    {
      .get instance string ComplexCompositeTypes/Person::get_FullName()
    } // end of property Person::FullName
  } // end of class Person

  .method public static void  typeabbrev_usage() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 1B 54 79 70 65 20 61 62 62 72 65 76 69 61   // ...Type abbrevia
                                                                        74 69 6F 6E 73 20 65 78 61 6D 70 6C 65 73 00 00 ) // tions examples..
    // Code size       180 (0xb4)
    .maxstack  6
    .locals init ([0] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class [FSharp.Core]System.Tuple`3<string,string,float64>> diner,
             [1] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class [FSharp.Core]System.Tuple`3<string,string,float64>> V_1,
             [2] class [mscorlib]System.Collections.Generic.IEnumerator`1<class [FSharp.Core]System.Tuple`3<string,string,float64>> V_2,
             [3] class [FSharp.Core]Microsoft.FSharp.Core.Unit V_3,
             [4] class [FSharp.Core]System.Tuple`3<string,string,float64> V_4,
             [5] float64 price,
             [6] string name,
             [7] string desc,
             [8] class [mscorlib]System.IDisposable V_8)
//000021:     let diner : RestaurantMenu = [
    IL_0000:  nop
    IL_0001:  ldstr      "Grand Slam"
    IL_0006:  ldstr      "Two eggs, two bacon, three pancakes"
    IL_000b:  ldc.r8     2.9900000000000002
    IL_0014:  newobj     instance void class [FSharp.Core]System.Tuple`3<string,string,float64>::.ctor(!0,
                                                                                                       !1,
                                                                                                       !2)
    IL_0019:  ldstr      "Chicken strips"
    IL_001e:  ldstr      "Five strips and sauce"
    IL_0023:  ldc.r8     3.9900000000000002
    IL_002c:  newobj     instance void class [FSharp.Core]System.Tuple`3<string,string,float64>::.ctor(!0,
                                                                                                       !1,
                                                                                                       !2)
    IL_0031:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class [FSharp.Core]System.Tuple`3<string,string,float64>>::get_Empty()
    IL_0036:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class [FSharp.Core]System.Tuple`3<string,string,float64>>::Cons(!0,
                                                                                                                                                                                                                       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_003b:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class [FSharp.Core]System.Tuple`3<string,string,float64>>::Cons(!0,
                                                                                                                                                                                                                       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_0040:  stloc.0
//000022:         ("Grand Slam", "Two eggs, two bacon, three pancakes", 2.99);
//000023:         ("Chicken strips", "Five strips and sauce", 3.99) 
//000024:     ]
//000025:     for (name, desc, price) in diner do
    IL_0041:  ldloc.0
    IL_0042:  stloc.1
    IL_0043:  ldloc.1
    IL_0044:  unbox.any  class [mscorlib]System.Collections.Generic.IEnumerable`1<class [FSharp.Core]System.Tuple`3<string,string,float64>>
    IL_0049:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class [FSharp.Core]System.Tuple`3<string,string,float64>>::GetEnumerator()
    IL_004e:  stloc.2
    .try
    {
      IL_004f:  ldloc.2
      IL_0050:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_0055:  brfalse.s  IL_0090

//000026:         System.Console.WriteLine("{0} costs {1}", name, price)
      IL_0057:  ldloc.2
      IL_0058:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class [FSharp.Core]System.Tuple`3<string,string,float64>>::get_Current()
      IL_005d:  stloc.s    V_4
      IL_005f:  ldloc.s    V_4
      IL_0061:  call       instance !2 class [FSharp.Core]System.Tuple`3<string,string,float64>::get_Item3()
      IL_0066:  stloc.s    price
      IL_0068:  ldloc.s    V_4
      IL_006a:  call       instance !0 class [FSharp.Core]System.Tuple`3<string,string,float64>::get_Item1()
      IL_006f:  stloc.s    name
      IL_0071:  ldloc.s    V_4
      IL_0073:  call       instance !1 class [FSharp.Core]System.Tuple`3<string,string,float64>::get_Item2()
      IL_0078:  stloc.s    desc
      IL_007a:  ldstr      "{0} costs {1}"
      IL_007f:  ldloc.s    name
      IL_0081:  ldloc.s    price
      IL_0083:  box        [mscorlib]System.Double
      IL_0088:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object,
                                                                    object)
//000027: 
//000028: 
//000029: 
//000030: // ======================== Enumerated types
//000031: type Soda =
//000032:     | Coke = 1
//000033:     | DietCoke = 2
//000034:     | SevenUp = 3
//000035: 
//000036: [<System.Flags>]
//000037: type SuicideSoda =
//000038:     | Coke = 0x0001
//000039:     | DietCoke = 0x0002
//000040:     | SevenUp = 0x0004
//000041:     | Grenadine = 0x0008
//000042: 
//000043: [<Example("Enum usage example")>]
//000044: let enum_usage() =
//000045:     let drink = Soda.DietCoke
//000046:     let message = 
//000047:         match drink with
//000048:         | Coke -> "Ah, so refreshing!"
//000049:         | DietCoke -> "Just one calorie!"
//000050:         | _ -> "Bleah"
//000051:     System.Console.WriteLine(message)    
//000052: 
//000053:     let message = 
//000054:         match drink with
//000055:         | Soda.Coke -> "Ah, so refreshing!"
//000056:         | Soda.DietCoke -> "Just one calorie!"
//000057:         | _ -> "Bleah"
//000058:     System.Console.WriteLine(message)    
//000059:     
//000060:     let rawValue = int Soda.DietCoke
//000061: 
//000062:     let rawInt = 20
//000063:     let unknownDrink = enum<Soda>(rawInt)
//000064:     let message = 
//000065:         match drink with
//000066:         | Soda.Coke -> "Ah, so refreshing!"
//000067:         | Soda.DietCoke -> "Just one calorie!"
//000068:         | Soda.SevenUp -> "Clear soda!"
//000069:         | _ -> failwith "This should never happen!"
//000070:     System.Console.WriteLine(message)    
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
//000073:     System.Console.WriteLine("It contains Coke? {0}",
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
//000075:             then "true" else "false"))
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_008d:  nop
      IL_008e:  br.s       IL_004f

      IL_0090:  ldnull
      IL_0091:  stloc.3
      IL_0092:  leave.s    IL_00b1

    }  // end .try
    finally
    {
      IL_0094:  ldloc.2
      IL_0095:  isinst     [mscorlib]System.IDisposable
      IL_009a:  stloc.s    V_8
      IL_009c:  ldloc.s    V_8
      IL_009e:  brfalse.s  IL_00a2

      IL_00a0:  br.s       IL_00a4

      IL_00a2:  br.s       IL_00ae

      IL_00a4:  ldloc.s    V_8
      IL_00a6:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_00ab:  ldnull
      IL_00ac:  pop
      IL_00ad:  endfinally
      IL_00ae:  ldnull
      IL_00af:  pop
      IL_00b0:  endfinally
    }  // end handler
    IL_00b1:  ldloc.3
    IL_00b2:  pop
    IL_00b3:  ret
  } // end of method ComplexCompositeTypes::typeabbrev_usage

  .method public static void  enum_usage() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 12 45 6E 75 6D 20 75 73 61 67 65 20 65 78   // ...Enum usage ex
                                                                        61 6D 70 6C 65 00 00 )                            // ample..
    // Code size       276 (0x114)
    .maxstack  5
    .locals init ([0] valuetype ComplexCompositeTypes/Soda drink,
             [1] string message,
             [2] valuetype ComplexCompositeTypes/Soda V_2,
             [3] valuetype ComplexCompositeTypes/Soda Coke,
             [4] string V_4,
             [5] int32 rawValue,
             [6] valuetype ComplexCompositeTypes/Soda V_6,
             [7] valuetype ComplexCompositeTypes/Soda V_7,
             [8] int32 rawInt,
             [9] valuetype ComplexCompositeTypes/Soda unknownDrink,
             [10] string V_10,
             [11] valuetype ComplexCompositeTypes/SuicideSoda perfectDrink,
             [12] string[] enumNames,
             [13] class [mscorlib]System.Array enumValues)
//000045:     let drink = Soda.DietCoke
    IL_0000:  nop
    IL_0001:  ldc.i4.2
    IL_0002:  stloc.0
//000046:     let message = 
    IL_0003:  nop
//000047:         match drink with
    IL_0004:  ldloc.0
    IL_0005:  stloc.2
    IL_0006:  ldloc.2
    IL_0007:  stloc.3
//000048:         | Coke -> "Ah, so refreshing!"
    IL_0008:  ldstr      "Ah, so refreshing!"
    IL_000d:  stloc.1
//000049:         | DietCoke -> "Just one calorie!"
//000050:         | _ -> "Bleah"
//000051:     System.Console.WriteLine(message)    
    IL_000e:  ldloc.1
    IL_000f:  call       void [mscorlib]System.Console::WriteLine(string)
//000052: 
//000053:     let message = 
    IL_0014:  nop
//000054:         match drink with
    IL_0015:  ldloc.0
    IL_0016:  ldc.i4.1
    IL_0017:  sub
    IL_0018:  switch     ( 
                          IL_0027,
                          IL_0029)
    IL_0025:  br.s       IL_003b

    IL_0027:  br.s       IL_002b

    IL_0029:  br.s       IL_0033

//000055:         | Soda.Coke -> "Ah, so refreshing!"
    IL_002b:  ldstr      "Ah, so refreshing!"
//000056:         | Soda.DietCoke -> "Just one calorie!"
//000057:         | _ -> "Bleah"
//000058:     System.Console.WriteLine(message)    
//000059:     
//000060:     let rawValue = int Soda.DietCoke
//000061: 
//000062:     let rawInt = 20
//000063:     let unknownDrink = enum<Soda>(rawInt)
//000064:     let message = 
//000065:         match drink with
//000066:         | Soda.Coke -> "Ah, so refreshing!"
//000067:         | Soda.DietCoke -> "Just one calorie!"
//000068:         | Soda.SevenUp -> "Clear soda!"
//000069:         | _ -> failwith "This should never happen!"
//000070:     System.Console.WriteLine(message)    
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
//000073:     System.Console.WriteLine("It contains Coke? {0}",
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
//000075:             then "true" else "false"))
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0030:  nop
    IL_0031:  br.s       IL_0041

//000056:         | Soda.DietCoke -> "Just one calorie!"
    IL_0033:  ldstr      "Just one calorie!"
//000057:         | _ -> "Bleah"
//000058:     System.Console.WriteLine(message)    
//000059:     
//000060:     let rawValue = int Soda.DietCoke
//000061: 
//000062:     let rawInt = 20
//000063:     let unknownDrink = enum<Soda>(rawInt)
//000064:     let message = 
//000065:         match drink with
//000066:         | Soda.Coke -> "Ah, so refreshing!"
//000067:         | Soda.DietCoke -> "Just one calorie!"
//000068:         | Soda.SevenUp -> "Clear soda!"
//000069:         | _ -> failwith "This should never happen!"
//000070:     System.Console.WriteLine(message)    
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
//000073:     System.Console.WriteLine("It contains Coke? {0}",
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
//000075:             then "true" else "false"))
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0038:  nop
    IL_0039:  br.s       IL_0041

//000057:         | _ -> "Bleah"
    IL_003b:  ldstr      "Bleah"
//000058:     System.Console.WriteLine(message)    
//000059:     
//000060:     let rawValue = int Soda.DietCoke
//000061: 
//000062:     let rawInt = 20
//000063:     let unknownDrink = enum<Soda>(rawInt)
//000064:     let message = 
//000065:         match drink with
//000066:         | Soda.Coke -> "Ah, so refreshing!"
//000067:         | Soda.DietCoke -> "Just one calorie!"
//000068:         | Soda.SevenUp -> "Clear soda!"
//000069:         | _ -> failwith "This should never happen!"
//000070:     System.Console.WriteLine(message)    
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
//000073:     System.Console.WriteLine("It contains Coke? {0}",
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
//000075:             then "true" else "false"))
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0040:  nop
    IL_0041:  stloc.s    V_4
//000058:     System.Console.WriteLine(message)    
    IL_0043:  ldloc.s    V_4
    IL_0045:  call       void [mscorlib]System.Console::WriteLine(string)
//000059:     
//000060:     let rawValue = int Soda.DietCoke
    IL_004a:  ldc.i4.2
    IL_004b:  stloc.s    V_6
    IL_004d:  ldloc.s    V_6
    IL_004f:  stloc.s    V_7
    IL_0051:  ldloc.s    V_6
    IL_0053:  stloc.s    rawValue
//000061: 
//000062:     let rawInt = 20
    IL_0055:  ldc.i4.s   20
    IL_0057:  stloc.s    rawInt
//000063:     let unknownDrink = enum<Soda>(rawInt)
    IL_0059:  ldloc.s    rawInt
    IL_005b:  stloc.s    unknownDrink
//000064:     let message = 
    IL_005d:  nop
//000065:         match drink with
    IL_005e:  ldloc.0
    IL_005f:  ldc.i4.1
    IL_0060:  sub
    IL_0061:  switch     ( 
                          IL_0074,
                          IL_0076,
                          IL_0078)
    IL_0072:  br.s       IL_0092

    IL_0074:  br.s       IL_007a

    IL_0076:  br.s       IL_0082

    IL_0078:  br.s       IL_008a

//000066:         | Soda.Coke -> "Ah, so refreshing!"
    IL_007a:  ldstr      "Ah, so refreshing!"
//000067:         | Soda.DietCoke -> "Just one calorie!"
//000068:         | Soda.SevenUp -> "Clear soda!"
//000069:         | _ -> failwith "This should never happen!"
//000070:     System.Console.WriteLine(message)    
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
//000073:     System.Console.WriteLine("It contains Coke? {0}",
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
//000075:             then "true" else "false"))
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_007f:  nop
    IL_0080:  br.s       IL_009d

//000067:         | Soda.DietCoke -> "Just one calorie!"
    IL_0082:  ldstr      "Just one calorie!"
//000068:         | Soda.SevenUp -> "Clear soda!"
//000069:         | _ -> failwith "This should never happen!"
//000070:     System.Console.WriteLine(message)    
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
//000073:     System.Console.WriteLine("It contains Coke? {0}",
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
//000075:             then "true" else "false"))
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0087:  nop
    IL_0088:  br.s       IL_009d

//000068:         | Soda.SevenUp -> "Clear soda!"
    IL_008a:  ldstr      "Clear soda!"
//000069:         | _ -> failwith "This should never happen!"
//000070:     System.Console.WriteLine(message)    
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
//000073:     System.Console.WriteLine("It contains Coke? {0}",
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
//000075:             then "true" else "false"))
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_008f:  nop
    IL_0090:  br.s       IL_009d

//000069:         | _ -> failwith "This should never happen!"
    IL_0092:  ldstr      "This should never happen!"
    IL_0097:  call       !!0 [FSharp.Core]Microsoft.FSharp.Core.Operators::FailWith<string>(string)
//000070:     System.Console.WriteLine(message)    
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
//000073:     System.Console.WriteLine("It contains Coke? {0}",
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
//000075:             then "true" else "false"))
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_009c:  nop
    IL_009d:  stloc.s    V_10
//000070:     System.Console.WriteLine(message)    
    IL_009f:  ldloc.s    V_10
    IL_00a1:  call       void [mscorlib]System.Console::WriteLine(string)
//000071: 
//000072:     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
    IL_00a6:  ldc.i4.1
    IL_00a7:  ldc.i4.8
    IL_00a8:  and
    IL_00a9:  stloc.s    perfectDrink
//000073:     System.Console.WriteLine("It contains Coke? {0}",
    IL_00ab:  ldstr      "It contains Coke\? {0}"
//000074:         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
    IL_00b0:  ldloc.s    perfectDrink
    IL_00b2:  ldc.i4.1
    IL_00b3:  and
    IL_00b4:  ldc.i4.1
    IL_00b5:  bne.un.s   IL_00b9

    IL_00b7:  br.s       IL_00bb

    IL_00b9:  br.s       IL_00c3

//000075:             then "true" else "false"))
    IL_00bb:  ldstr      "true"
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_00c0:  nop
    IL_00c1:  br.s       IL_00c9

//000075:             then "true" else "false"))
    IL_00c3:  ldstr      "false"
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
//000078:             SuicideSoda.Coke then "true" else "false"))
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_00c8:  nop
    IL_00c9:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000076:     System.Console.WriteLine("It contains DietCoke? {0}",
    IL_00ce:  ldstr      "It contains DietCoke\? {0}"
//000077:         (if perfectDrink &&& SuicideSoda.DietCoke = 
    IL_00d3:  ldloc.s    perfectDrink
    IL_00d5:  ldc.i4.2
    IL_00d6:  and
    IL_00d7:  ldc.i4.1
    IL_00d8:  bne.un.s   IL_00dc

    IL_00da:  br.s       IL_00de

    IL_00dc:  br.s       IL_00e6

//000078:             SuicideSoda.Coke then "true" else "false"))
    IL_00de:  ldstr      "true"
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_00e3:  nop
    IL_00e4:  br.s       IL_00ec

//000078:             SuicideSoda.Coke then "true" else "false"))
    IL_00e6:  ldstr      "false"
//000079: 
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
//000125:     System.Console.WriteLine(c)
//000126:     let message =
//000127:         match c with
//000128:         | Black -> "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_00eb:  nop
    IL_00ec:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000080:     let enumNames = System.Enum.GetNames(typeof<Soda>)
    IL_00f1:  ldtoken    ComplexCompositeTypes/Soda
    IL_00f6:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_00fb:  call       string[] [mscorlib]System.Enum::GetNames(class [mscorlib]System.Type)
    IL_0100:  stloc.s    enumNames
//000081:     let enumValues = System.Enum.GetValues(typeof<Soda>)
    IL_0102:  ldtoken    ComplexCompositeTypes/Soda
    IL_0107:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_010c:  call       class [mscorlib]System.Array [mscorlib]System.Enum::GetValues(class [mscorlib]System.Type)
    IL_0111:  stloc.s    enumValues
//000082:     (* This doesn't compile; not sure if I can make it do so *)
//000083:     (*
//000084:     let isFlagSet (enum : #System.Enum) (flag : #System.Enum) =
//000085:         let enumType = enum.GetType()
//000086:         if System.Enum.IsDefined(enumType, flag) then
//000087:             if (int enum) &&& (int flag) = (int flag) then
//000088:                 true
//000089:             else
//000090:                 false
//000091:         else
//000092:             false
//000093:     *)
//000094:     ()
    IL_0113:  ret
  } // end of method ComplexCompositeTypes::enum_usage

  .method public static void  discriminatedunion_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 1C 44 69 73 63 72 69 6D 69 6E 61 74 65 64   // ...Discriminated
                                                                        20 75 6E 69 6F 6E 20 65 78 61 6D 70 6C 65 73 00   //  union examples.
                                                                        00 ) 
    // Code size       1082 (0x43a)
    .maxstack  7
    .locals init ([0] class ComplexCompositeTypes/Color c,
             [1] string message,
             [2] class ComplexCompositeTypes/Color black,
             [3] string colorStr,
             [4] class ComplexCompositeTypes/Color V_4,
             [5] class ComplexCompositeTypes/Color/RGB V_5,
             [6] int32 r,
             [7] int32 g,
             [8] int32 b,
             [9] class ComplexCompositeTypes/Color/CMYK V_9,
             [10] int32 y,
             [11] int32 m,
             [12] int32 k,
             [13] int32 V_13)
//000095: 
//000096:     
//000097: 
//000098: // ======================== Discriminated unions
//000099: type Color =
//000100:     | RGB of int * int * int
//000101:     | CMYK of int * int * int * int
//000102:     | Black
//000103:     | Blue
//000104:     | Green
//000105:     | Red
//000106:     | White
//000107:     | Cyan
//000108:     | Gray
//000109:     member this.RGBValue =
//000110:         match this with
//000111:         | RGB(r,g,b) -> (r, g, b)
//000112:         | Red -> (255, 0, 0)
//000113:         | Green -> (0, 255, 0)
//000114:         | Blue -> (0, 0, 255)
//000115:         | Black -> (0, 0, 0)
//000116:         | White -> (255, 255, 255)
//000117:         | Cyan -> (64, 128, 128)
//000118:         | Gray -> (192, 192, 192)
//000119:         | CMYK(c,m,y,k) ->
//000120:             failwith "I have no idea how to do that"
//000121: 
//000122: [<Example("Discriminated union examples")>]
//000123: let discriminatedunion_examples() =
//000124:     let c = Black
    IL_0000:  nop
    IL_0001:  call       class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::get_Black()
    IL_0006:  stloc.0
//000125:     System.Console.WriteLine(c)
    IL_0007:  ldloc.0
    IL_0008:  call       void [mscorlib]System.Console::WriteLine(object)
//000126:     let message =
    IL_000d:  nop
//000127:         match c with
    IL_000e:  ldloc.0
    IL_000f:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
    IL_0014:  ldc.i4.2
    IL_0015:  bne.un.s   IL_0019

    IL_0017:  br.s       IL_001b

    IL_0019:  br.s       IL_0023

//000128:         | Black -> "Black"
    IL_001b:  ldstr      "Black"
//000129:         | _ -> "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0020:  nop
    IL_0021:  br.s       IL_0029

//000129:         | _ -> "Not black"
    IL_0023:  ldstr      "Not black"
//000130:     System.Console.WriteLine(message)
//000131:     let black = RGB(0,0,0)
//000132:     System.Console.WriteLine(c)
//000133:     let colorStr =
//000134:         match c with
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0028:  nop
    IL_0029:  stloc.1
//000130:     System.Console.WriteLine(message)
    IL_002a:  ldloc.1
    IL_002b:  call       void [mscorlib]System.Console::WriteLine(string)
//000131:     let black = RGB(0,0,0)
    IL_0030:  ldc.i4.0
    IL_0031:  ldc.i4.0
    IL_0032:  ldc.i4.0
    IL_0033:  call       class ComplexCompositeTypes/Color ComplexCompositeTypes/Color::NewRGB(int32,
                                                                                               int32,
                                                                                               int32)
    IL_0038:  stloc.2
//000132:     System.Console.WriteLine(c)
    IL_0039:  ldloc.0
    IL_003a:  call       void [mscorlib]System.Console::WriteLine(object)
//000133:     let colorStr =
    IL_003f:  nop
//000134:         match c with
    IL_0040:  ldloc.0
    IL_0041:  stloc.s    V_4
    IL_0043:  ldloc.s    V_4
    IL_0045:  call       instance int32 ComplexCompositeTypes/Color::get_Tag()
    IL_004a:  switch     ( 
                          IL_0078,
                          IL_032d,
                          IL_0073,
                          IL_035c,
                          IL_037d,
                          IL_0351,
                          IL_0346,
                          IL_0367,
                          IL_0372)
    IL_0073:  br         IL_033b

    IL_0078:  ldloc.s    V_4
    IL_007a:  castclass  ComplexCompositeTypes/Color/RGB
    IL_007f:  stloc.s    V_5
    IL_0081:  ldloc.s    V_5
    IL_0083:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_0088:  switch     ( 
                          IL_026d)
    IL_0091:  ldloc.s    V_5
    IL_0093:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_0098:  ldc.i4.s   64
    IL_009a:  sub
    IL_009b:  switch     ( 
                          IL_01fc)
    IL_00a4:  ldloc.s    V_5
    IL_00a6:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_00ab:  ldc.i4     0xc0
    IL_00b0:  sub
    IL_00b1:  switch     ( 
                          IL_018b)
    IL_00ba:  ldloc.s    V_5
    IL_00bc:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_00c1:  ldc.i4     0xff
    IL_00c6:  sub
    IL_00c7:  switch     ( 
                          IL_00d5)
    IL_00d0:  br         IL_0388

    IL_00d5:  ldloc.s    V_5
    IL_00d7:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_00dc:  switch     ( 
                          IL_0156)
    IL_00e5:  ldloc.s    V_5
    IL_00e7:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_00ec:  ldc.i4     0xff
    IL_00f1:  sub
    IL_00f2:  switch     ( 
                          IL_011b)
    IL_00fb:  ldloc.s    V_5
    IL_00fd:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_0102:  ldloc.s    V_5
    IL_0104:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0109:  ldloc.s    V_5
    IL_010b:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_0110:  stloc.s    b
    IL_0112:  stloc.s    g
    IL_0114:  stloc.s    r
    IL_0116:  br         IL_03a3

    IL_011b:  ldloc.s    V_5
    IL_011d:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_0122:  ldc.i4     0xff
    IL_0127:  sub
    IL_0128:  switch     ( 
                          IL_0151)
    IL_0131:  ldloc.s    V_5
    IL_0133:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_0138:  ldloc.s    V_5
    IL_013a:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_013f:  ldloc.s    V_5
    IL_0141:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_0146:  stloc.s    b
    IL_0148:  stloc.s    g
    IL_014a:  stloc.s    r
    IL_014c:  br         IL_03a3

    IL_0151:  br         IL_0346

    IL_0156:  ldloc.s    V_5
    IL_0158:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_015d:  switch     ( 
                          IL_0186)
    IL_0166:  ldloc.s    V_5
    IL_0168:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_016d:  ldloc.s    V_5
    IL_016f:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0174:  ldloc.s    V_5
    IL_0176:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_017b:  stloc.s    b
    IL_017d:  stloc.s    g
    IL_017f:  stloc.s    r
    IL_0181:  br         IL_03a3

    IL_0186:  br         IL_0351

    IL_018b:  ldloc.s    V_5
    IL_018d:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0192:  ldc.i4     0xc0
    IL_0197:  sub
    IL_0198:  switch     ( 
                          IL_01c1)
    IL_01a1:  ldloc.s    V_5
    IL_01a3:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_01a8:  ldloc.s    V_5
    IL_01aa:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_01af:  ldloc.s    V_5
    IL_01b1:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_01b6:  stloc.s    b
    IL_01b8:  stloc.s    g
    IL_01ba:  stloc.s    r
    IL_01bc:  br         IL_03a3

    IL_01c1:  ldloc.s    V_5
    IL_01c3:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_01c8:  ldc.i4     0xc0
    IL_01cd:  sub
    IL_01ce:  switch     ( 
                          IL_01f7)
    IL_01d7:  ldloc.s    V_5
    IL_01d9:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_01de:  ldloc.s    V_5
    IL_01e0:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_01e5:  ldloc.s    V_5
    IL_01e7:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_01ec:  stloc.s    b
    IL_01ee:  stloc.s    g
    IL_01f0:  stloc.s    r
    IL_01f2:  br         IL_03a3

    IL_01f7:  br         IL_0372

    IL_01fc:  ldloc.s    V_5
    IL_01fe:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0203:  ldc.i4     0x80
    IL_0208:  sub
    IL_0209:  switch     ( 
                          IL_0232)
    IL_0212:  ldloc.s    V_5
    IL_0214:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_0219:  ldloc.s    V_5
    IL_021b:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0220:  ldloc.s    V_5
    IL_0222:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_0227:  stloc.s    b
    IL_0229:  stloc.s    g
    IL_022b:  stloc.s    r
    IL_022d:  br         IL_03a3

    IL_0232:  ldloc.s    V_5
    IL_0234:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_0239:  ldc.i4     0x80
    IL_023e:  sub
    IL_023f:  switch     ( 
                          IL_0268)
    IL_0248:  ldloc.s    V_5
    IL_024a:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_024f:  ldloc.s    V_5
    IL_0251:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0256:  ldloc.s    V_5
    IL_0258:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_025d:  stloc.s    b
    IL_025f:  stloc.s    g
    IL_0261:  stloc.s    r
    IL_0263:  br         IL_03a3

    IL_0268:  br         IL_0367

    IL_026d:  ldloc.s    V_5
    IL_026f:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0274:  switch     ( 
                          IL_02e8)
    IL_027d:  ldloc.s    V_5
    IL_027f:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0284:  ldc.i4     0xff
    IL_0289:  sub
    IL_028a:  switch     ( 
                          IL_02b3)
    IL_0293:  ldloc.s    V_5
    IL_0295:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_029a:  ldloc.s    V_5
    IL_029c:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_02a1:  ldloc.s    V_5
    IL_02a3:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_02a8:  stloc.s    b
    IL_02aa:  stloc.s    g
    IL_02ac:  stloc.s    r
    IL_02ae:  br         IL_03a3

    IL_02b3:  ldloc.s    V_5
    IL_02b5:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_02ba:  switch     ( 
                          IL_02e3)
    IL_02c3:  ldloc.s    V_5
    IL_02c5:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_02ca:  ldloc.s    V_5
    IL_02cc:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_02d1:  ldloc.s    V_5
    IL_02d3:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_02d8:  stloc.s    b
    IL_02da:  stloc.s    g
    IL_02dc:  stloc.s    r
    IL_02de:  br         IL_03a3

    IL_02e3:  br         IL_037d

    IL_02e8:  ldloc.s    V_5
    IL_02ea:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_02ef:  switch     ( 
                          IL_033b)
    IL_02f8:  ldloc.s    V_5
    IL_02fa:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_02ff:  ldc.i4     0xff
    IL_0304:  sub
    IL_0305:  switch     ( 
                          IL_032b)
    IL_030e:  ldloc.s    V_5
    IL_0310:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_0315:  ldloc.s    V_5
    IL_0317:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_031c:  ldloc.s    V_5
    IL_031e:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_0323:  stloc.s    b
    IL_0325:  stloc.s    g
    IL_0327:  stloc.s    r
    IL_0329:  br.s       IL_03a3

    IL_032b:  br.s       IL_035c

    IL_032d:  ldloc.s    V_4
    IL_032f:  castclass  ComplexCompositeTypes/Color/CMYK
    IL_0334:  stloc.s    V_9
    IL_0336:  br         IL_03c5

//000135:         | Black | RGB(0,0,0) -> "Black"
    IL_033b:  ldstr      "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0340:  nop
    IL_0341:  br         IL_0432

//000136:         | White | RGB(255, 255, 255) -> "White"
    IL_0346:  ldstr      "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_034b:  nop
    IL_034c:  br         IL_0432

//000137:         | Red | RGB(255, 0, 0) -> "Red"
    IL_0351:  ldstr      "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0356:  nop
    IL_0357:  br         IL_0432

//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
    IL_035c:  ldstr      "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0361:  nop
    IL_0362:  br         IL_0432

//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
    IL_0367:  ldstr      "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_036c:  nop
    IL_036d:  br         IL_0432

//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
    IL_0372:  ldstr      "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0377:  nop
    IL_0378:  br         IL_0432

//000141:         | Green | RGB(0, 255, 0) -> "Green"
    IL_037d:  ldstr      "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0382:  nop
    IL_0383:  br         IL_0432

//000134:         match c with
    IL_0388:  ldloc.s    V_5
    IL_038a:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item1
    IL_038f:  stloc.s    r
    IL_0391:  ldloc.s    V_5
    IL_0393:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item2
    IL_0398:  stloc.s    g
    IL_039a:  ldloc.s    V_5
    IL_039c:  ldfld      int32 ComplexCompositeTypes/Color/RGB::item3
    IL_03a1:  stloc.s    b
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
    IL_03a3:  ldstr      "({0},{1},{2})"
    IL_03a8:  ldloc.s    r
    IL_03aa:  box        [mscorlib]System.Int32
    IL_03af:  ldloc.s    g
    IL_03b1:  box        [mscorlib]System.Int32
    IL_03b6:  ldloc.s    b
    IL_03b8:  box        [mscorlib]System.Int32
    IL_03bd:  call       string [mscorlib]System.String::Format(string,
                                                                object,
                                                                object,
                                                                object)
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_03c2:  nop
    IL_03c3:  br.s       IL_0432

//000134:         match c with
    IL_03c5:  ldloc.s    V_9
    IL_03c7:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item3
    IL_03cc:  stloc.s    y
    IL_03ce:  ldloc.s    V_9
    IL_03d0:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item2
    IL_03d5:  stloc.s    m
    IL_03d7:  ldloc.s    V_9
    IL_03d9:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item4
    IL_03de:  stloc.s    k
    IL_03e0:  ldloc.s    V_9
    IL_03e2:  ldfld      int32 ComplexCompositeTypes/Color/CMYK::item1
    IL_03e7:  stloc.s    V_13
//000135:         | Black | RGB(0,0,0) -> "Black"
//000136:         | White | RGB(255, 255, 255) -> "White"
//000137:         | Red | RGB(255, 0, 0) -> "Red"
//000138:         | Blue | RGB(0, 0, 255) -> "Blue"
//000139:         | Cyan | RGB(64, 128, 128) -> "Cyan"
//000140:         | Gray | RGB(192, 192, 192) -> "Gray"
//000141:         | Green | RGB(0, 255, 0) -> "Green"
//000142:         | RGB(r,g,b) ->
//000143:             System.String.Format("({0},{1},{2})",
//000144:                 r, g, b)
//000145:         | CMYK(c,m,y,k) ->
//000146:             System.String.Format("[{0},{1},{2},{3}]",
    IL_03e9:  ldstr      "[{0},{1},{2},{3}]"
    IL_03ee:  ldc.i4.4
    IL_03ef:  newarr     [mscorlib]System.Object
    IL_03f4:  dup
    IL_03f5:  ldc.i4.0
    IL_03f6:  ldloc.s    V_13
    IL_03f8:  box        [mscorlib]System.Int32
    IL_03fd:  stelem     [mscorlib]System.Object
    IL_0402:  dup
    IL_0403:  ldc.i4.1
    IL_0404:  ldloc.s    m
    IL_0406:  box        [mscorlib]System.Int32
    IL_040b:  stelem     [mscorlib]System.Object
    IL_0410:  dup
    IL_0411:  ldc.i4.2
    IL_0412:  ldloc.s    y
    IL_0414:  box        [mscorlib]System.Int32
    IL_0419:  stelem     [mscorlib]System.Object
    IL_041e:  dup
    IL_041f:  ldc.i4.3
    IL_0420:  ldloc.s    k
    IL_0422:  box        [mscorlib]System.Int32
    IL_0427:  stelem     [mscorlib]System.Object
    IL_042c:  call       string [mscorlib]System.String::Format(string,
                                                                object[])
//000147:                 c,m,y,k)
//000148:     System.Console.WriteLine(colorStr)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
//000179:     tree.iter(System.Console.WriteLine)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
//000202:     let CEO = Manager("CEO", [ aaron ])
//000203:     let CFO = Manager("CFO", [ aaron ])
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
//000205:     ()
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
//000251:     let notOrigin = new Point(12, 12)
//000252:     System.Console.WriteLine("Point = {0},{1}", 
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
//000256:     System.Console.WriteLine("Point = {0},{1}", 
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
//000260:     mutPt.X <- 10
//000261:     mutPt.Y <- 10
//000262:     System.Console.WriteLine("Point = {0},{1}", 
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
//000266:     let b = new Point(12, 12)
//000267:     System.Console.WriteLine("a = b? {0}",
//000268:         if (a = b) then "yes" else "no")
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0431:  nop
    IL_0432:  stloc.3
//000148:     System.Console.WriteLine(colorStr)
    IL_0433:  ldloc.3
    IL_0434:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_0439:  ret
  } // end of method ComplexCompositeTypes::discriminatedunion_examples

  .method public static void  tree_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 28 4D 6F 72 65 20 64 69 73 63 72 69 6D 69   // ..(More discrimi
                                                                        6E 61 74 65 64 20 75 6E 69 6F 6E 20 28 74 72 65   // nated union (tre
                                                                        65 29 20 65 78 61 6D 70 6C 65 73 00 00 )          // e) examples..
    // Code size       96 (0x60)
    .maxstack  8
    .locals init ([0] class ComplexCompositeTypes/BinaryTree tree)
//000149: 
//000150: type BinaryTree =
//000151:     | Node of obj * BinaryTree * BinaryTree
//000152:     | Empty
//000153:     member bt.Contents =
//000154:         match bt with
//000155:         | Empty -> ""
//000156:         | Node(data, left, right) ->
//000157:             "(" + left.Contents + ")" +
//000158:             ":" + data.ToString() + ":" +
//000159:             "(" + right.Contents + ")"
//000160:     member bt.iter (fn : (obj) -> unit ) =
//000161:         match bt with
//000162:         | Empty -> ()
//000163:         | Node(data, left, right) ->
//000164:             left.iter(fn)
//000165:             fn(data)
//000166:             right.iter(fn)
//000167: 
//000168: [<Example("More discriminated union (tree) examples")>]
//000169: let tree_examples() =
//000170:     let tree =
    IL_0000:  nop
    IL_0001:  ldstr      "Ted"
    IL_0006:  ldstr      "Aaron"
    IL_000b:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::get_Empty()
    IL_0010:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::get_Empty()
    IL_0015:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::NewNode(object,
                                                                                                          class ComplexCompositeTypes/BinaryTree,
                                                                                                          class ComplexCompositeTypes/BinaryTree)
    IL_001a:  ldstr      "Talbott"
    IL_001f:  ldstr      "Rick"
    IL_0024:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::get_Empty()
    IL_0029:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::get_Empty()
    IL_002e:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::NewNode(object,
                                                                                                          class ComplexCompositeTypes/BinaryTree,
                                                                                                          class ComplexCompositeTypes/BinaryTree)
    IL_0033:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::get_Empty()
    IL_0038:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::NewNode(object,
                                                                                                          class ComplexCompositeTypes/BinaryTree,
                                                                                                          class ComplexCompositeTypes/BinaryTree)
    IL_003d:  call       class ComplexCompositeTypes/BinaryTree ComplexCompositeTypes/BinaryTree::NewNode(object,
                                                                                                          class ComplexCompositeTypes/BinaryTree,
                                                                                                          class ComplexCompositeTypes/BinaryTree)
    IL_0042:  stloc.0
//000171:         Node("Ted",
//000172:             Node("Aaron",
//000173:                 Empty,
//000174:                 Empty),
//000175:             Node("Talbott",
//000176:                 Node("Rick", Empty, Empty),
//000177:                 Empty))
//000178:     System.Console.WriteLine("Contents = {0}", tree.Contents)
    IL_0043:  ldstr      "Contents = {0}"
    IL_0048:  ldloc.0
    IL_0049:  call       instance string ComplexCompositeTypes/BinaryTree::get_Contents()
    IL_004e:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000179:     tree.iter(System.Console.WriteLine)
    IL_0053:  ldloc.0
    IL_0054:  newobj     instance void ComplexCompositeTypes/tree_examples@179::.ctor()
    IL_0059:  call       instance void ComplexCompositeTypes/BinaryTree::iter(class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<object,class [FSharp.Core]Microsoft.FSharp.Core.Unit>)
    IL_005e:  nop
    IL_005f:  ret
  } // end of method ComplexCompositeTypes::tree_examples

  .method public static void  employeetree_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 21 4D 6F 72 65 20 64 69 73 63 72 69 6D 69   // ..!More discrimi
                                                                        6E 61 74 65 64 20 75 6E 69 6F 6E 20 65 78 61 6D   // nated union exam
                                                                        70 6C 65 73 00 00 )                               // ples..
    // Code size       79 (0x4f)
    .maxstack  5
    .locals init ([0] class ComplexCompositeTypes/Employee aaron,
             [1] class ComplexCompositeTypes/Employee CEO,
             [2] class ComplexCompositeTypes/Employee CFO,
             [3] class ComplexCompositeTypes/Employee VP_RD)
//000180: 
//000181: type Employee =
//000182:     | Grunt of string
//000183:     | Manager of string * Employee list
//000184:     member e.Name =
//000185:         match e with
//000186:         | Grunt(n) -> n
//000187:         | Manager(n, _) -> n
//000188:     member e.Subordinates =
//000189:         match e with
//000190:         | Grunt(_) -> []
//000191:         | Manager(_, es) -> es
//000192:     member e.Empire =
//000193:         match e with
//000194:         | Grunt(_) -> []
//000195:         | Manager(_, es) ->
//000196:             List.collect 
//000197:                 (fun (e : Employee) -> e.Empire) es
//000198: 
//000199: [<Example("More discriminated union examples")>]
//000200: let employeetree_examples() =
//000201:     let aaron = Grunt("Coder")
    IL_0000:  nop
    IL_0001:  ldstr      "Coder"
    IL_0006:  call       class ComplexCompositeTypes/Employee ComplexCompositeTypes/Employee::NewGrunt(string)
    IL_000b:  stloc.0
//000202:     let CEO = Manager("CEO", [ aaron ])
    IL_000c:  ldstr      "CEO"
    IL_0011:  ldloc.0
    IL_0012:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::get_Empty()
    IL_0017:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::Cons(!0,
                                                                                                                                                                                                   class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_001c:  call       class ComplexCompositeTypes/Employee ComplexCompositeTypes/Employee::NewManager(string,
                                                                                                         class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>)
    IL_0021:  stloc.1
//000203:     let CFO = Manager("CFO", [ aaron ])
    IL_0022:  ldstr      "CFO"
    IL_0027:  ldloc.0
    IL_0028:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::get_Empty()
    IL_002d:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::Cons(!0,
                                                                                                                                                                                                   class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_0032:  call       class ComplexCompositeTypes/Employee ComplexCompositeTypes/Employee::NewManager(string,
                                                                                                         class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>)
    IL_0037:  stloc.2
//000204:     let VP_RD = Manager("VP, R&D", [aaron])
    IL_0038:  ldstr      "VP, R&D"
    IL_003d:  ldloc.0
    IL_003e:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::get_Empty()
    IL_0043:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>::Cons(!0,
                                                                                                                                                                                                   class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_0048:  call       class ComplexCompositeTypes/Employee ComplexCompositeTypes/Employee::NewManager(string,
                                                                                                         class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Employee>)
    IL_004d:  stloc.3
//000205:     ()
    IL_004e:  ret
  } // end of method ComplexCompositeTypes::employeetree_examples

  .method public static void  struct_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 0F 53 74 72 75 63 74 20 65 78 61 6D 70 6C   // ...Struct exampl
                                                                        65 73 00 00 )                                     // es..
    // Code size       1089 (0x441)
    .maxstack  6
    .locals init ([0] valuetype ComplexCompositeTypes/Point origin,
             [1] valuetype ComplexCompositeTypes/Point V_1,
             [2] valuetype ComplexCompositeTypes/Point notOrigin,
             [3] valuetype ComplexCompositeTypes/Point newPoint,
             [4] valuetype ComplexCompositeTypes/MutPoint mutPt,
             [5] valuetype ComplexCompositeTypes/MutPoint V_5,
             [6] valuetype ComplexCompositeTypes/Point a,
             [7] valuetype ComplexCompositeTypes/Point b,
             [8] valuetype ComplexCompositeTypes/Point V_8,
             [9] valuetype ComplexCompositeTypes/Point V_9,
             [10] valuetype ComplexCompositeTypes/Point V_10,
             [11] valuetype ComplexCompositeTypes/Point V_11,
             [12] valuetype ComplexCompositeTypes/Point c,
             [13] valuetype ComplexCompositeTypes/Point d,
             [14] valuetype ComplexCompositeTypes/Point e,
             [15] valuetype ComplexCompositeTypes/Point f,
             [16] string message,
             [17] class [FSharp.Core]System.Tuple`2<int32,int32> V_17,
             [18] class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]System.Tuple`2<int32,int32>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>> '|Point|',
             [19] string V_19,
             [20] valuetype ComplexCompositeTypes/Point V_20,
             [21] bool V_21,
             [22] bool V_22)
//000206: 
//000207: type State =
//000208:     | New
//000209:     | Opened
//000210:     | Closed
//000211:     member s.Open() =
//000212:         match s with
//000213:         | New -> Opened
//000214:         | Opened -> 
//000215:             failwith "Error to Open an Opened state"
//000216:         | Closed ->
//000217:             Opened
//000218:     member s.Close() =
//000219:         match s with
//000220:         | New ->
//000221:             failwith "Error to Close a New state"
//000222:         | Opened -> Closed
//000223:         | Closed -> Closed
//000224: 
//000225: 
//000226: 
//000227: // ======================== Structs
//000228: 
//000229: [<Struct>]
//000230: type Point(x : int, y : int) =
//000231:     member pt.X = x
//000232:     member pt.Y = y
//000233:     override pt.ToString() =
//000234:         System.String.Format("({0},{1})", x, y)
//000235: 
//000236: type AnotherPoint(x : int, y: int) =
//000237:     struct
//000238:         member pt.X = x
//000239:         member pt.Y = y
//000240:     end
//000241: 
//000242: [<Struct>]
//000243: type MutPoint =
//000244:     val mutable X : int
//000245:     val mutable Y : int
//000246:     
//000247: [<Example("Struct examples")>]
//000248: let struct_examples() =
//000249:     let origin = new Point()
    IL_0000:  nop
    IL_0001:  ldloca.s   V_1
    IL_0003:  initobj    ComplexCompositeTypes/Point
    IL_0009:  ldloc.1
    IL_000a:  stloc.0
//000250:     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
    IL_000b:  ldstr      "Point = {0},{1}"
    IL_0010:  ldloca.s   origin
    IL_0012:  call       instance int32 ComplexCompositeTypes/Point::get_X()
    IL_0017:  box        [mscorlib]System.Int32
    IL_001c:  ldloca.s   origin
    IL_001e:  call       instance int32 ComplexCompositeTypes/Point::get_Y()
    IL_0023:  box        [mscorlib]System.Int32
    IL_0028:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object,
                                                                  object)
//000251:     let notOrigin = new Point(12, 12)
    IL_002d:  ldc.i4.s   12
    IL_002f:  ldc.i4.s   12
    IL_0031:  newobj     instance void ComplexCompositeTypes/Point::.ctor(int32,
                                                                          int32)
    IL_0036:  stloc.2
//000252:     System.Console.WriteLine("Point = {0},{1}", 
    IL_0037:  ldstr      "Point = {0},{1}"
    IL_003c:  ldloca.s   notOrigin
    IL_003e:  call       instance int32 ComplexCompositeTypes/Point::get_X()
    IL_0043:  box        [mscorlib]System.Int32
    IL_0048:  ldloca.s   notOrigin
    IL_004a:  call       instance int32 ComplexCompositeTypes/Point::get_Y()
    IL_004f:  box        [mscorlib]System.Int32
    IL_0054:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object,
                                                                  object)
//000253:         notOrigin.X, notOrigin.Y)
//000254:         
//000255:     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
    IL_0059:  ldloca.s   notOrigin
    IL_005b:  call       instance int32 ComplexCompositeTypes/Point::get_X()
    IL_0060:  ldc.i4.6
    IL_0061:  sub
    IL_0062:  ldloca.s   notOrigin
    IL_0064:  call       instance int32 ComplexCompositeTypes/Point::get_Y()
    IL_0069:  ldc.i4.6
    IL_006a:  sub
    IL_006b:  newobj     instance void ComplexCompositeTypes/Point::.ctor(int32,
                                                                          int32)
    IL_0070:  stloc.3
//000256:     System.Console.WriteLine("Point = {0},{1}", 
    IL_0071:  ldstr      "Point = {0},{1}"
    IL_0076:  ldloca.s   newPoint
    IL_0078:  call       instance int32 ComplexCompositeTypes/Point::get_X()
    IL_007d:  box        [mscorlib]System.Int32
    IL_0082:  ldloca.s   newPoint
    IL_0084:  call       instance int32 ComplexCompositeTypes/Point::get_Y()
    IL_0089:  box        [mscorlib]System.Int32
    IL_008e:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object,
                                                                  object)
//000257:         newPoint.X, newPoint.Y)
//000258: 
//000259:     let mutable mutPt = new MutPoint()
    IL_0093:  ldloca.s   V_5
    IL_0095:  initobj    ComplexCompositeTypes/MutPoint
    IL_009b:  ldloc.s    V_5
    IL_009d:  stloc.s    mutPt
//000260:     mutPt.X <- 10
    IL_009f:  ldloca.s   mutPt
    IL_00a1:  ldc.i4.s   10
    IL_00a3:  stfld      int32 ComplexCompositeTypes/MutPoint::X
//000261:     mutPt.Y <- 10
    IL_00a8:  ldloca.s   mutPt
    IL_00aa:  ldc.i4.s   10
    IL_00ac:  stfld      int32 ComplexCompositeTypes/MutPoint::Y
//000262:     System.Console.WriteLine("Point = {0},{1}", 
    IL_00b1:  ldstr      "Point = {0},{1}"
    IL_00b6:  ldloca.s   mutPt
    IL_00b8:  ldfld      int32 ComplexCompositeTypes/MutPoint::X
    IL_00bd:  box        [mscorlib]System.Int32
    IL_00c2:  ldloca.s   mutPt
    IL_00c4:  ldfld      int32 ComplexCompositeTypes/MutPoint::Y
    IL_00c9:  box        [mscorlib]System.Int32
    IL_00ce:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object,
                                                                  object)
//000263:         mutPt.X, mutPt.Y)
//000264:     
//000265:     let a = new Point(12, 12)
    IL_00d3:  ldc.i4.s   12
    IL_00d5:  ldc.i4.s   12
    IL_00d7:  newobj     instance void ComplexCompositeTypes/Point::.ctor(int32,
                                                                          int32)
    IL_00dc:  stloc.s    a
//000266:     let b = new Point(12, 12)
    IL_00de:  ldc.i4.s   12
    IL_00e0:  ldc.i4.s   12
    IL_00e2:  newobj     instance void ComplexCompositeTypes/Point::.ctor(int32,
                                                                          int32)
    IL_00e7:  stloc.s    b
//000267:     System.Console.WriteLine("a = b? {0}",
    IL_00e9:  ldstr      "a = b\? {0}"
//000268:         if (a = b) then "yes" else "no")
    IL_00ee:  ldloc.s    a
    IL_00f0:  stloc.s    V_8
    IL_00f2:  ldloc.s    b
    IL_00f4:  stloc.s    V_9
    IL_00f6:  ldloca.s   V_8
    IL_00f8:  ldloc.s    V_9
    IL_00fa:  box        ComplexCompositeTypes/Point
    IL_00ff:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
    IL_0104:  call       instance bool ComplexCompositeTypes/Point::Equals(object,
                                                                           class [mscorlib]System.Collections.IEqualityComparer)
    IL_0109:  brfalse.s  IL_010d

    IL_010b:  br.s       IL_010f

    IL_010d:  br.s       IL_0117

    IL_010f:  ldstr      "yes"
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0114:  nop
    IL_0115:  br.s       IL_011d

//000268:         if (a = b) then "yes" else "no")
    IL_0117:  ldstr      "no"
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
//000270:         if (a.Equals(b)) then "yes" else "no")
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_011c:  nop
    IL_011d:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000269:     System.Console.WriteLine("a.Equals(b)? {0}",
    IL_0122:  ldstr      "a.Equals(b)\? {0}"
//000270:         if (a.Equals(b)) then "yes" else "no")
    IL_0127:  ldloca.s   a
    IL_0129:  ldloc.s    b
    IL_012b:  box        ComplexCompositeTypes/Point
    IL_0130:  constrained. ComplexCompositeTypes/Point
    IL_0136:  callvirt   instance bool [mscorlib]System.Object::Equals(object)
    IL_013b:  brfalse.s  IL_013f

    IL_013d:  br.s       IL_0141

    IL_013f:  br.s       IL_0149

    IL_0141:  ldstr      "yes"
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0146:  nop
    IL_0147:  br.s       IL_014f

//000270:         if (a.Equals(b)) then "yes" else "no")
    IL_0149:  ldstr      "no"
//000271:     System.Console.WriteLine("a <> b? {0}",
//000272:         if (a <> b) then "yes" else "no")
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_014e:  nop
    IL_014f:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000271:     System.Console.WriteLine("a <> b? {0}",
    IL_0154:  ldstr      "a <> b\? {0}"
//000272:         if (a <> b) then "yes" else "no")
    IL_0159:  ldloc.s    a
    IL_015b:  stloc.s    V_10
    IL_015d:  ldloc.s    b
    IL_015f:  stloc.s    V_11
    IL_0161:  ldloca.s   V_10
    IL_0163:  ldloc.s    V_11
    IL_0165:  box        ComplexCompositeTypes/Point
    IL_016a:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
    IL_016f:  call       instance bool ComplexCompositeTypes/Point::Equals(object,
                                                                           class [mscorlib]System.Collections.IEqualityComparer)
    IL_0174:  ldc.i4.0
    IL_0175:  ceq
    IL_0177:  brfalse.s  IL_017b

    IL_0179:  br.s       IL_017d

    IL_017b:  br.s       IL_0185

    IL_017d:  ldstr      "yes"
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0182:  nop
    IL_0183:  br.s       IL_018b

//000272:         if (a <> b) then "yes" else "no")
    IL_0185:  ldstr      "no"
//000273:     let c = new Point(6, 12)
//000274:     let d = new Point(18, 12)
//000275:     let e = new Point(12, 6)
//000276:     let f = new Point(12, 18)
//000277:     System.Console.WriteLine("a > c? {0}",
//000278:         if (a > c) then "yes" else "no") // yes
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_018a:  nop
    IL_018b:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000273:     let c = new Point(6, 12)
    IL_0190:  ldc.i4.6
    IL_0191:  ldc.i4.s   12
    IL_0193:  newobj     instance void ComplexCompositeTypes/Point::.ctor(int32,
                                                                          int32)
    IL_0198:  stloc.s    c
//000274:     let d = new Point(18, 12)
    IL_019a:  ldc.i4.s   18
    IL_019c:  ldc.i4.s   12
    IL_019e:  newobj     instance void ComplexCompositeTypes/Point::.ctor(int32,
                                                                          int32)
    IL_01a3:  stloc.s    d
//000275:     let e = new Point(12, 6)
    IL_01a5:  ldc.i4.s   12
    IL_01a7:  ldc.i4.6
    IL_01a8:  newobj     instance void ComplexCompositeTypes/Point::.ctor(int32,
                                                                          int32)
    IL_01ad:  stloc.s    e
//000276:     let f = new Point(12, 18)
    IL_01af:  ldc.i4.s   12
    IL_01b1:  ldc.i4.s   18
    IL_01b3:  newobj     instance void ComplexCompositeTypes/Point::.ctor(int32,
                                                                          int32)
    IL_01b8:  stloc.s    f
//000277:     System.Console.WriteLine("a > c? {0}",
    IL_01ba:  ldstr      "a > c\? {0}"
//000278:         if (a > c) then "yes" else "no") // yes
    IL_01bf:  ldloc.s    a
    IL_01c1:  ldloc.s    c
    IL_01c3:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericGreaterThanIntrinsic<valuetype ComplexCompositeTypes/Point>(!!0,
                                                                                                                                                                    !!0)
    IL_01c8:  brfalse.s  IL_01cc

    IL_01ca:  br.s       IL_01ce

    IL_01cc:  br.s       IL_01d6

    IL_01ce:  ldstr      "yes"
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_01d3:  nop
    IL_01d4:  br.s       IL_01dc

//000278:         if (a > c) then "yes" else "no") // yes
    IL_01d6:  ldstr      "no"
//000279:     System.Console.WriteLine("a > d? {0}",
//000280:         if (a > d) then "yes" else "no") // no
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_01db:  nop
    IL_01dc:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000279:     System.Console.WriteLine("a > d? {0}",
    IL_01e1:  ldstr      "a > d\? {0}"
//000280:         if (a > d) then "yes" else "no") // no
    IL_01e6:  ldloc.s    a
    IL_01e8:  ldloc.s    d
    IL_01ea:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericGreaterThanIntrinsic<valuetype ComplexCompositeTypes/Point>(!!0,
                                                                                                                                                                    !!0)
    IL_01ef:  brfalse.s  IL_01f3

    IL_01f1:  br.s       IL_01f5

    IL_01f3:  br.s       IL_01fd

    IL_01f5:  ldstr      "yes"
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_01fa:  nop
    IL_01fb:  br.s       IL_0203

//000280:         if (a > d) then "yes" else "no") // no
    IL_01fd:  ldstr      "no"
//000281:     System.Console.WriteLine("a > e? {0}",
//000282:         if (a > e) then "yes" else "no") // yes
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0202:  nop
    IL_0203:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000281:     System.Console.WriteLine("a > e? {0}",
    IL_0208:  ldstr      "a > e\? {0}"
//000282:         if (a > e) then "yes" else "no") // yes
    IL_020d:  ldloc.s    a
    IL_020f:  ldloc.s    e
    IL_0211:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericGreaterThanIntrinsic<valuetype ComplexCompositeTypes/Point>(!!0,
                                                                                                                                                                    !!0)
    IL_0216:  brfalse.s  IL_021a

    IL_0218:  br.s       IL_021c

    IL_021a:  br.s       IL_0224

    IL_021c:  ldstr      "yes"
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0221:  nop
    IL_0222:  br.s       IL_022a

//000282:         if (a > e) then "yes" else "no") // yes
    IL_0224:  ldstr      "no"
//000283:     System.Console.WriteLine("a > f? {0}",
//000284:         if (a > f) then "yes" else "no") // no
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0229:  nop
    IL_022a:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000283:     System.Console.WriteLine("a > f? {0}",
    IL_022f:  ldstr      "a > f\? {0}"
//000284:         if (a > f) then "yes" else "no") // no
    IL_0234:  ldloc.s    a
    IL_0236:  ldloc.s    f
    IL_0238:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericGreaterThanIntrinsic<valuetype ComplexCompositeTypes/Point>(!!0,
                                                                                                                                                                    !!0)
    IL_023d:  brfalse.s  IL_0241

    IL_023f:  br.s       IL_0243

    IL_0241:  br.s       IL_024b

    IL_0243:  ldstr      "yes"
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0248:  nop
    IL_0249:  br.s       IL_0251

//000284:         if (a > f) then "yes" else "no") // no
    IL_024b:  ldstr      "no"
//000285:     System.Console.WriteLine("a < c? {0}",
//000286:         if (a < c) then "yes" else "no") // no
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0250:  nop
    IL_0251:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000285:     System.Console.WriteLine("a < c? {0}",
    IL_0256:  ldstr      "a < c\? {0}"
//000286:         if (a < c) then "yes" else "no") // no
    IL_025b:  ldloc.s    a
    IL_025d:  ldloc.s    c
    IL_025f:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericLessThanIntrinsic<valuetype ComplexCompositeTypes/Point>(!!0,
                                                                                                                                                                 !!0)
    IL_0264:  brfalse.s  IL_0268

    IL_0266:  br.s       IL_026a

    IL_0268:  br.s       IL_0272

    IL_026a:  ldstr      "yes"
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_026f:  nop
    IL_0270:  br.s       IL_0278

//000286:         if (a < c) then "yes" else "no") // no
    IL_0272:  ldstr      "no"
//000287:     System.Console.WriteLine("a < d? {0}",
//000288:         if (a < d) then "yes" else "no") // yes
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0277:  nop
    IL_0278:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000287:     System.Console.WriteLine("a < d? {0}",
    IL_027d:  ldstr      "a < d\? {0}"
//000288:         if (a < d) then "yes" else "no") // yes
    IL_0282:  ldloc.s    a
    IL_0284:  ldloc.s    d
    IL_0286:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericLessThanIntrinsic<valuetype ComplexCompositeTypes/Point>(!!0,
                                                                                                                                                                 !!0)
    IL_028b:  brfalse.s  IL_028f

    IL_028d:  br.s       IL_0291

    IL_028f:  br.s       IL_0299

    IL_0291:  ldstr      "yes"
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0296:  nop
    IL_0297:  br.s       IL_029f

//000288:         if (a < d) then "yes" else "no") // yes
    IL_0299:  ldstr      "no"
//000289:     System.Console.WriteLine("a < e? {0}",
//000290:         if (a < e) then "yes" else "no") // no
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_029e:  nop
    IL_029f:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000289:     System.Console.WriteLine("a < e? {0}",
    IL_02a4:  ldstr      "a < e\? {0}"
//000290:         if (a < e) then "yes" else "no") // no
    IL_02a9:  ldloc.s    a
    IL_02ab:  ldloc.s    e
    IL_02ad:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericLessThanIntrinsic<valuetype ComplexCompositeTypes/Point>(!!0,
                                                                                                                                                                 !!0)
    IL_02b2:  brfalse.s  IL_02b6

    IL_02b4:  br.s       IL_02b8

    IL_02b6:  br.s       IL_02c0

    IL_02b8:  ldstr      "yes"
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_02bd:  nop
    IL_02be:  br.s       IL_02c6

//000290:         if (a < e) then "yes" else "no") // no
    IL_02c0:  ldstr      "no"
//000291:     System.Console.WriteLine("a < f? {0}",
//000292:         if (a < f) then "yes" else "no") // yes
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_02c5:  nop
    IL_02c6:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000291:     System.Console.WriteLine("a < f? {0}",
    IL_02cb:  ldstr      "a < f\? {0}"
//000292:         if (a < f) then "yes" else "no") // yes
    IL_02d0:  ldloc.s    a
    IL_02d2:  ldloc.s    f
    IL_02d4:  call       bool [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives/HashCompare::GenericLessThanIntrinsic<valuetype ComplexCompositeTypes/Point>(!!0,
                                                                                                                                                                 !!0)
    IL_02d9:  brfalse.s  IL_02dd

    IL_02db:  br.s       IL_02df

    IL_02dd:  br.s       IL_02e7

    IL_02df:  ldstr      "yes"
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_02e4:  nop
    IL_02e5:  br.s       IL_02ed

//000292:         if (a < f) then "yes" else "no") // yes
    IL_02e7:  ldstr      "no"
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
//000301:         match (a.X, a.Y) with
//000302:         | (0, 0) -> "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_02ec:  nop
    IL_02ed:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000293:     System.Console.WriteLine("a.GetHashCode() = {0}",
    IL_02f2:  ldstr      "a.GetHashCode() = {0}"
    IL_02f7:  ldloca.s   a
    IL_02f9:  constrained. ComplexCompositeTypes/Point
    IL_02ff:  callvirt   instance int32 [mscorlib]System.Object::GetHashCode()
    IL_0304:  box        [mscorlib]System.Int32
    IL_0309:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000294:         a.GetHashCode())
//000295:     System.Console.WriteLine("b.GetHashCode() = {0}",
    IL_030e:  ldstr      "b.GetHashCode() = {0}"
    IL_0313:  ldloca.s   b
    IL_0315:  constrained. ComplexCompositeTypes/Point
    IL_031b:  callvirt   instance int32 [mscorlib]System.Object::GetHashCode()
    IL_0320:  box        [mscorlib]System.Int32
    IL_0325:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000296:         b.GetHashCode())
//000297:     System.Console.WriteLine("a hash = b hash? {0}",
    IL_032a:  ldstr      "a hash = b hash\? {0}"
    IL_032f:  ldloca.s   a
    IL_0331:  constrained. ComplexCompositeTypes/Point
    IL_0337:  callvirt   instance int32 [mscorlib]System.Object::GetHashCode()
    IL_033c:  ldloca.s   b
    IL_033e:  constrained. ComplexCompositeTypes/Point
    IL_0344:  callvirt   instance int32 [mscorlib]System.Object::GetHashCode()
    IL_0349:  ceq
    IL_034b:  box        [mscorlib]System.Boolean
    IL_0350:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000298:         a.GetHashCode() = b.GetHashCode())
//000299: 
//000300:     let message =
    IL_0355:  nop
//000301:         match (a.X, a.Y) with
    IL_0356:  ldloca.s   a
    IL_0358:  call       instance int32 ComplexCompositeTypes/Point::get_X()
    IL_035d:  ldloca.s   a
    IL_035f:  call       instance int32 ComplexCompositeTypes/Point::get_Y()
    IL_0364:  newobj     instance void class [FSharp.Core]System.Tuple`2<int32,int32>::.ctor(!0,
                                                                                             !1)
    IL_0369:  stloc.s    V_17
    IL_036b:  ldloc.s    V_17
    IL_036d:  call       instance !0 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item1()
    IL_0372:  switch     ( 
                          IL_03a7)
    IL_037b:  ldloc.s    V_17
    IL_037d:  call       instance !0 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item1()
    IL_0382:  ldc.i4.s   12
    IL_0384:  sub
    IL_0385:  switch     ( 
                          IL_0390)
    IL_038e:  br.s       IL_03c9

    IL_0390:  ldloc.s    V_17
    IL_0392:  call       instance !1 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item2()
    IL_0397:  ldc.i4.s   12
    IL_0399:  sub
    IL_039a:  switch     ( 
                          IL_03a5)
    IL_03a3:  br.s       IL_03c9

    IL_03a5:  br.s       IL_03c1

    IL_03a7:  ldloc.s    V_17
    IL_03a9:  call       instance !1 class [FSharp.Core]System.Tuple`2<int32,int32>::get_Item2()
    IL_03ae:  switch     ( 
                          IL_03b9)
    IL_03b7:  br.s       IL_03c9

//000302:         | (0, 0) -> "You're at the origin!"
    IL_03b9:  ldstr      "You're at the origin!"
//000303:         | (12, 12) -> "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_03be:  nop
    IL_03bf:  br.s       IL_03cf

//000303:         | (12, 12) -> "You're at 12, 12!"
    IL_03c1:  ldstr      "You're at 12, 12!"
//000304:         | (_, _) -> "Who knows where you are?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_03c6:  nop
    IL_03c7:  br.s       IL_03cf

//000304:         | (_, _) -> "Who knows where you are?"
    IL_03c9:  ldstr      "Who knows where you are\?"
//000305:     System.Console.WriteLine(message)
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
//000310:         match newPoint with
//000311:         | Point(0, 0) true -> "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_03ce:  nop
    IL_03cf:  stloc.s    message
//000305:     System.Console.WriteLine(message)
    IL_03d1:  ldloc.s    message
    IL_03d3:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_03d8:  newobj     instance void ComplexCompositeTypes/'|Point|@308'::.ctor()
    IL_03dd:  stloc.s    '|Point|'
//000306:     
//000307:     let (|Point|) (x : int, y : int) (inPt : Point) =
//000308:         inPt.X = x && inPt.Y = y
//000309:     let message =
    IL_03df:  nop
//000310:         match newPoint with
    IL_03e0:  ldloc.3
    IL_03e1:  stloc.s    V_20
    IL_03e3:  ldloc.s    '|Point|'
    IL_03e5:  ldc.i4.0
    IL_03e6:  ldc.i4.0
    IL_03e7:  newobj     instance void class [FSharp.Core]System.Tuple`2<int32,int32>::.ctor(!0,
                                                                                             !1)
    IL_03ec:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]System.Tuple`2<int32,int32>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>>::Invoke(!0)
    IL_03f1:  ldloc.s    V_20
    IL_03f3:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>::Invoke(!0)
    IL_03f8:  stloc.s    V_21
    IL_03fa:  ldloc.s    V_21
    IL_03fc:  brfalse.s  IL_0400

    IL_03fe:  br.s       IL_0421

    IL_0400:  ldloc.s    '|Point|'
    IL_0402:  ldc.i4.s   12
    IL_0404:  ldc.i4.s   12
    IL_0406:  newobj     instance void class [FSharp.Core]System.Tuple`2<int32,int32>::.ctor(!0,
                                                                                             !1)
    IL_040b:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<class [FSharp.Core]System.Tuple`2<int32,int32>,class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>>::Invoke(!0)
    IL_0410:  ldloc.s    V_20
    IL_0412:  callvirt   instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<valuetype ComplexCompositeTypes/Point,bool>::Invoke(!0)
    IL_0417:  stloc.s    V_22
    IL_0419:  ldloc.s    V_22
    IL_041b:  brfalse.s  IL_041f

    IL_041d:  br.s       IL_0429

    IL_041f:  br.s       IL_0431

//000311:         | Point(0, 0) true -> "You're at the origin!"
    IL_0421:  ldstr      "You're at the origin!"
//000312:         | Point(12, 12) true -> "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0426:  nop
    IL_0427:  br.s       IL_0437

//000312:         | Point(12, 12) true -> "You're at 12,12!"
    IL_0429:  ldstr      "You're at 12,12!"
//000313:         | _ -> "Who knows where you are?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_042e:  nop
    IL_042f:  br.s       IL_0437

//000313:         | _ -> "Who knows where you are?"
    IL_0431:  ldstr      "Who knows where you are\?"
//000314:     System.Console.WriteLine(message)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
//000355:     let aaron = ("Aaron", "Erickson")
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
//000359:     let aaron = Author("Aaron", "Erickson", 35)
//000360:     let rick = Author("Rick", "Minerich", 0)
//000361:     let talbott = Author("Crowell", "Talbott", 35)
//000362:     
//000363:     let authors = [
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
//000370:         match a with
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_0436:  nop
    IL_0437:  stloc.s    V_19
//000314:     System.Console.WriteLine(message)
    IL_0439:  ldloc.s    V_19
    IL_043b:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_0440:  ret
  } // end of method ComplexCompositeTypes::struct_examples

  .method public static void  record_examples() cil managed
  {
    .custom instance void ProFSharp/ExampleAttribute::.ctor(string) = ( 01 00 14 52 65 63 6F 72 64 20 74 79 70 65 20 65   // ...Record type e
                                                                        78 61 6D 70 6C 65 73 00 00 )                      // xamples..
    // Code size       1038 (0x40e)
    .maxstack  10
    .locals init ([0] class [FSharp.Core]System.Tuple`3<string,string,int32> ted,
             [1] class [FSharp.Core]System.Tuple`2<string,string> aaron,
             [2] class [FSharp.Core]System.Tuple`3<string,string,string> rick,
             [3] class ComplexCompositeTypes/Author V_3,
             [4] class ComplexCompositeTypes/Author V_4,
             [5] class ComplexCompositeTypes/Author V_5,
             [6] class ComplexCompositeTypes/Author talbott,
             [7] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Author> authors,
             [8] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Author> V_8,
             [9] class [mscorlib]System.Collections.Generic.IEnumerator`1<class ComplexCompositeTypes/Author> V_9,
             [10] class [FSharp.Core]Microsoft.FSharp.Core.Unit V_10,
             [11] class ComplexCompositeTypes/Author a,
             [12] class ComplexCompositeTypes/Author V_12,
             [13] string last,
             [14] string first,
             [15] int32 age,
             [16] class [mscorlib]System.IDisposable V_16,
             [17] class ComplexCompositeTypes/AuthorRecord V_17,
             [18] class ComplexCompositeTypes/AuthorRecord V_18,
             [19] class ComplexCompositeTypes/SpokenLanguage english,
             [20] class ComplexCompositeTypes/SpokenLanguage fsharp,
             [21] class ComplexCompositeTypes/SpokenLanguage V_21,
             [22] class ComplexCompositeTypes/ProgrammingLanguage V_22,
             [23] class ComplexCompositeTypes/Person V_23,
             [24] class ComplexCompositeTypes/Person michael,
             [25] class ComplexCompositeTypes/Person V_25,
             [26] class ComplexCompositeTypes/Person matthew,
             [27] class ComplexCompositeTypes/Person V_27,
             [28] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person> people,
             [29] class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person> V_29,
             [30] class [mscorlib]System.Collections.Generic.IEnumerator`1<class ComplexCompositeTypes/Person> V_30,
             [31] class [FSharp.Core]Microsoft.FSharp.Core.Unit V_31,
             [32] class ComplexCompositeTypes/Person n,
             [33] class ComplexCompositeTypes/Person V_33,
             [34] class [mscorlib]System.IDisposable V_34,
             [35] class ComplexCompositeTypes/AuthorRecord V_35,
             [36] class ComplexCompositeTypes/AuthorRecord b,
             [37] class ComplexCompositeTypes/AuthorRecord V_37,
             [38] class ComplexCompositeTypes/AuthorRecord V_38,
             [39] class ComplexCompositeTypes/AuthorRecord V_39,
             [40] class ComplexCompositeTypes/AuthorRecord V_40)
//000315: 
//000316: 
//000317: 
//000318: // ======================== Record types
//000319: 
//000320: type Author =
//000321:     | Author of string * string * int
//000322:     member a.FirstName =
//000323:         match a with
//000324:         | Author(first, _, _) -> first
//000325:     member a.LastName =
//000326:         match a with
//000327:         | Author(_, last, _) -> last
//000328:     member a.Age =
//000329:         match a with
//000330:         | Author(_, _, age) -> age
//000331: 
//000332: type AuthorRecord = {
//000333:     FirstName : string
//000334:     LastName : string
//000335:     Age : int }
//000336: 
//000337: type ProgrammingLanguage = {
//000338:     Name : string
//000339:     YearsInUse : int }
//000340: type SpokenLanguage = {
//000341:     Name : string
//000342:     YearsInUse : int }
//000343: 
//000344: type Person = 
//000345:     { FirstName : string
//000346:       LastName : string
//000347:       FavoriteColor : string }
//000348:     member p.FullName =
//000349:         System.String.Format("{0} {1}",
//000350:             p.FirstName, p.LastName)
//000351: 
//000352: [<Example("Record type examples")>]
//000353: let record_examples() =
//000354:     let ted = ("Ted", "Neward", 38)
    IL_0000:  nop
    IL_0001:  ldstr      "Ted"
    IL_0006:  ldstr      "Neward"
    IL_000b:  ldc.i4.s   38
    IL_000d:  newobj     instance void class [FSharp.Core]System.Tuple`3<string,string,int32>::.ctor(!0,
                                                                                                     !1,
                                                                                                     !2)
    IL_0012:  stloc.0
//000355:     let aaron = ("Aaron", "Erickson")
    IL_0013:  ldstr      "Aaron"
    IL_0018:  ldstr      "Erickson"
    IL_001d:  newobj     instance void class [FSharp.Core]System.Tuple`2<string,string>::.ctor(!0,
                                                                                               !1)
    IL_0022:  stloc.1
//000356:     let rick = ("Rick", "Minerich", "I'd rather not say")
    IL_0023:  ldstr      "Rick"
    IL_0028:  ldstr      "Minerich"
    IL_002d:  ldstr      "I'd rather not say"
    IL_0032:  newobj     instance void class [FSharp.Core]System.Tuple`3<string,string,string>::.ctor(!0,
                                                                                                      !1,
                                                                                                      !2)
    IL_0037:  stloc.2
//000357:     
//000358:     let ted = Author("Ted", "Neward", 38)
    IL_0038:  ldstr      "Ted"
    IL_003d:  ldstr      "Neward"
    IL_0042:  ldc.i4.s   38
    IL_0044:  call       class ComplexCompositeTypes/Author ComplexCompositeTypes/Author::NewAuthor(string,
                                                                                                    string,
                                                                                                    int32)
    IL_0049:  stloc.3
//000359:     let aaron = Author("Aaron", "Erickson", 35)
    IL_004a:  ldstr      "Aaron"
    IL_004f:  ldstr      "Erickson"
    IL_0054:  ldc.i4.s   35
    IL_0056:  call       class ComplexCompositeTypes/Author ComplexCompositeTypes/Author::NewAuthor(string,
                                                                                                    string,
                                                                                                    int32)
    IL_005b:  stloc.s    V_4
//000360:     let rick = Author("Rick", "Minerich", 0)
    IL_005d:  ldstr      "Rick"
    IL_0062:  ldstr      "Minerich"
    IL_0067:  ldc.i4.0
    IL_0068:  call       class ComplexCompositeTypes/Author ComplexCompositeTypes/Author::NewAuthor(string,
                                                                                                    string,
                                                                                                    int32)
    IL_006d:  stloc.s    V_5
//000361:     let talbott = Author("Crowell", "Talbott", 35)
    IL_006f:  ldstr      "Crowell"
    IL_0074:  ldstr      "Talbott"
    IL_0079:  ldc.i4.s   35
    IL_007b:  call       class ComplexCompositeTypes/Author ComplexCompositeTypes/Author::NewAuthor(string,
                                                                                                    string,
                                                                                                    int32)
    IL_0080:  stloc.s    talbott
//000362:     
//000363:     let authors = [
    IL_0082:  ldstr      "Ted"
    IL_0087:  ldstr      "Neward"
    IL_008c:  ldc.i4.s   38
    IL_008e:  call       class ComplexCompositeTypes/Author ComplexCompositeTypes/Author::NewAuthor(string,
                                                                                                    string,
                                                                                                    int32)
    IL_0093:  ldstr      "Aaron"
    IL_0098:  ldstr      "Erickson"
    IL_009d:  ldc.i4.s   35
    IL_009f:  call       class ComplexCompositeTypes/Author ComplexCompositeTypes/Author::NewAuthor(string,
                                                                                                    string,
                                                                                                    int32)
    IL_00a4:  ldstr      "Rick"
    IL_00a9:  ldstr      "Minerich"
    IL_00ae:  ldc.i4.0
    IL_00af:  call       class ComplexCompositeTypes/Author ComplexCompositeTypes/Author::NewAuthor(string,
                                                                                                    string,
                                                                                                    int32)
    IL_00b4:  ldstr      "Crowell"
    IL_00b9:  ldstr      "Talbott"
    IL_00be:  ldc.i4.s   35
    IL_00c0:  call       class ComplexCompositeTypes/Author ComplexCompositeTypes/Author::NewAuthor(string,
                                                                                                    string,
                                                                                                    int32)
    IL_00c5:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Author>::get_Empty()
    IL_00ca:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Author>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_00cf:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Author>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_00d4:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Author>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_00d9:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Author>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_00de:  stloc.s    authors
//000364:         Author("Ted", "Neward", 38);
//000365:         Author("Aaron", "Erickson", 35);
//000366:         Author("Rick", "Minerich", 0);
//000367:         Author("Crowell", "Talbott", 35)
//000368:     ]
//000369:     for a in authors do
    IL_00e0:  ldloc.s    authors
    IL_00e2:  stloc.s    V_8
    IL_00e4:  ldloc.s    V_8
    IL_00e6:  unbox.any  class [mscorlib]System.Collections.Generic.IEnumerable`1<class ComplexCompositeTypes/Author>
    IL_00eb:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class ComplexCompositeTypes/Author>::GetEnumerator()
    IL_00f0:  stloc.s    V_9
    .try
    {
      IL_00f2:  ldloc.s    V_9
      IL_00f4:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_00f9:  brfalse.s  IL_0132

//000370:         match a with
      IL_00fb:  ldloc.s    V_9
      IL_00fd:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class ComplexCompositeTypes/Author>::get_Current()
      IL_0102:  stloc.s    a
      IL_0104:  ldloc.s    a
      IL_0106:  stloc.s    V_12
      IL_0108:  ldloc.s    V_12
      IL_010a:  ldfld      string ComplexCompositeTypes/Author::item2
      IL_010f:  stloc.s    last
      IL_0111:  ldloc.s    V_12
      IL_0113:  ldfld      string ComplexCompositeTypes/Author::item1
      IL_0118:  stloc.s    first
      IL_011a:  ldloc.s    V_12
      IL_011c:  ldfld      int32 ComplexCompositeTypes/Author::item3
      IL_0121:  stloc.s    age
//000371:         | Author(first, last, age) -> 
//000372:             System.Console.WriteLine("Hello, {0}", first)
      IL_0123:  ldstr      "Hello, {0}"
      IL_0128:  ldloc.s    first
      IL_012a:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object)
//000373:     
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
//000380:     System.Console.WriteLine("english IS-A {0}", 
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
//000398:     let michael = { ted with FirstName = "Michael" }
//000399:     let matthew = { ted with FirstName = "Matthew" }
//000400:     let people = [ 
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
//000411:         match n with
//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_012f:  nop
      IL_0130:  br.s       IL_00f2

      IL_0132:  ldnull
      IL_0133:  stloc.s    V_10
      IL_0135:  leave.s    IL_0155

    }  // end .try
    finally
    {
      IL_0137:  ldloc.s    V_9
      IL_0139:  isinst     [mscorlib]System.IDisposable
      IL_013e:  stloc.s    V_16
      IL_0140:  ldloc.s    V_16
      IL_0142:  brfalse.s  IL_0146

      IL_0144:  br.s       IL_0148

      IL_0146:  br.s       IL_0152

      IL_0148:  ldloc.s    V_16
      IL_014a:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_014f:  ldnull
      IL_0150:  pop
      IL_0151:  endfinally
      IL_0152:  ldnull
      IL_0153:  pop
      IL_0154:  endfinally
    }  // end handler
    IL_0155:  ldloc.s    V_10
    IL_0157:  pop
//000374:     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
    IL_0158:  ldstr      "Ted"
    IL_015d:  ldstr      "Neward"
    IL_0162:  ldc.i4.s   38
    IL_0164:  newobj     instance void ComplexCompositeTypes/AuthorRecord::.ctor(string,
                                                                                 string,
                                                                                 int32)
    IL_0169:  stloc.s    V_17
//000375:     System.Console.WriteLine("Hello, {0}", ted.FirstName)
    IL_016b:  ldstr      "Hello, {0}"
    IL_0170:  ldloc.s    V_17
    IL_0172:  ldfld      string ComplexCompositeTypes/AuthorRecord::FirstName@
    IL_0177:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000376:     
//000377:     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
    IL_017c:  ldstr      "Talbott"
    IL_0181:  ldstr      "Crowell"
    IL_0186:  ldc.i4.s   35
    IL_0188:  newobj     instance void ComplexCompositeTypes/AuthorRecord::.ctor(string,
                                                                                 string,
                                                                                 int32)
    IL_018d:  stloc.s    V_18
//000378:     
//000379:     let english = { Name = "English"; YearsInUse = 1000 }
    IL_018f:  ldstr      "English"
    IL_0194:  ldc.i4     0x3e8
    IL_0199:  newobj     instance void ComplexCompositeTypes/SpokenLanguage::.ctor(string,
                                                                                   int32)
    IL_019e:  stloc.s    english
//000380:     System.Console.WriteLine("english IS-A {0}", 
    IL_01a0:  ldstr      "english IS-A {0}"
    IL_01a5:  ldloc.s    english
    IL_01a7:  call       instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
    IL_01ac:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000381:         english.GetType()) // SpokenLanguage
//000382:     let fsharp = { Name = "F#"; YearsInUse = 5 }
    IL_01b1:  ldstr      "F#"
    IL_01b6:  ldc.i4.5
    IL_01b7:  newobj     instance void ComplexCompositeTypes/SpokenLanguage::.ctor(string,
                                                                                   int32)
    IL_01bc:  stloc.s    fsharp
//000383:     System.Console.WriteLine("fsharp IS-A {0}", 
    IL_01be:  ldstr      "fsharp IS-A {0}"
    IL_01c3:  ldloc.s    fsharp
    IL_01c5:  call       instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
    IL_01ca:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000384:         fsharp.GetType()) // SpokenLanguage
//000385:     
//000386:     let english = { 
    IL_01cf:  ldstr      "English"
    IL_01d4:  ldc.i4     0x3e8
    IL_01d9:  newobj     instance void ComplexCompositeTypes/SpokenLanguage::.ctor(string,
                                                                                   int32)
    IL_01de:  stloc.s    V_21
//000387:         SpokenLanguage.Name = "English"; 
//000388:         SpokenLanguage.YearsInUse = 1000 }
//000389:     System.Console.WriteLine("english IS-A {0}", 
    IL_01e0:  ldstr      "english IS-A {0}"
    IL_01e5:  ldloc.s    V_21
    IL_01e7:  call       instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
    IL_01ec:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000390:         english.GetType()) // SpokenLanguage
//000391:     let fsharp = { 
    IL_01f1:  ldstr      "F#"
    IL_01f6:  ldc.i4.5
    IL_01f7:  newobj     instance void ComplexCompositeTypes/ProgrammingLanguage::.ctor(string,
                                                                                        int32)
    IL_01fc:  stloc.s    V_22
//000392:         ProgrammingLanguage.Name = "F#"; 
//000393:         ProgrammingLanguage.YearsInUse = 5 }
//000394:     System.Console.WriteLine("fsharp IS-A {0}", 
    IL_01fe:  ldstr      "fsharp IS-A {0}"
    IL_0203:  ldloc.s    V_22
    IL_0205:  call       instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
    IL_020a:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000395:         fsharp.GetType()) // ProgrammingLanguage
//000396:     
//000397:     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
    IL_020f:  ldstr      "Ted"
    IL_0214:  ldstr      "Neward"
    IL_0219:  ldstr      "Black"
    IL_021e:  newobj     instance void ComplexCompositeTypes/Person::.ctor(string,
                                                                           string,
                                                                           string)
    IL_0223:  stloc.s    V_23
//000398:     let michael = { ted with FirstName = "Michael" }
    IL_0225:  ldloc.s    V_23
    IL_0227:  stloc.s    V_25
    IL_0229:  ldstr      "Michael"
    IL_022e:  ldloc.s    V_25
    IL_0230:  ldfld      string ComplexCompositeTypes/Person::LastName@
    IL_0235:  ldloc.s    V_25
    IL_0237:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
    IL_023c:  newobj     instance void ComplexCompositeTypes/Person::.ctor(string,
                                                                           string,
                                                                           string)
    IL_0241:  stloc.s    michael
//000399:     let matthew = { ted with FirstName = "Matthew" }
    IL_0243:  ldloc.s    V_23
    IL_0245:  stloc.s    V_27
    IL_0247:  ldstr      "Matthew"
    IL_024c:  ldloc.s    V_27
    IL_024e:  ldfld      string ComplexCompositeTypes/Person::LastName@
    IL_0253:  ldloc.s    V_27
    IL_0255:  ldfld      string ComplexCompositeTypes/Person::FavoriteColor@
    IL_025a:  newobj     instance void ComplexCompositeTypes/Person::.ctor(string,
                                                                           string,
                                                                           string)
    IL_025f:  stloc.s    matthew
//000400:     let people = [ 
    IL_0261:  ldloc.s    V_23
    IL_0263:  ldloc.s    michael
    IL_0265:  ldloc.s    matthew
    IL_0267:  ldstr      "Aaron"
    IL_026c:  ldstr      "Erickson"
    IL_0271:  ldstr      "White"
    IL_0276:  newobj     instance void ComplexCompositeTypes/Person::.ctor(string,
                                                                           string,
                                                                           string)
    IL_027b:  ldstr      "Rick"
    IL_0280:  ldstr      "Minerich"
    IL_0285:  ldstr      "Blue"
    IL_028a:  newobj     instance void ComplexCompositeTypes/Person::.ctor(string,
                                                                           string,
                                                                           string)
    IL_028f:  ldstr      "Talbott"
    IL_0294:  ldstr      "Crowell"
    IL_0299:  ldstr      "Red"
    IL_029e:  newobj     instance void ComplexCompositeTypes/Person::.ctor(string,
                                                                           string,
                                                                           string)
    IL_02a3:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person>::get_Empty()
    IL_02a8:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_02ad:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_02b2:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_02b7:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_02bc:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_02c1:  call       class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0> class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<class ComplexCompositeTypes/Person>::Cons(!0,
                                                                                                                                                                                                 class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<!0>)
    IL_02c6:  stloc.s    people
//000401:         ted; michael; matthew;
//000402:         { FirstName="Aaron"; LastName="Erickson"; 
//000403:             FavoriteColor="White" }
//000404:         { FirstName="Rick"; LastName="Minerich";
//000405:             FavoriteColor="Blue" }
//000406:         { FirstName="Talbott"; LastName="Crowell";
//000407:             FavoriteColor="Red" }
//000408:     ]
//000409: 
//000410:     for n in people do    
    IL_02c8:  ldloc.s    people
    IL_02ca:  stloc.s    V_29
    IL_02cc:  ldloc.s    V_29
    IL_02ce:  unbox.any  class [mscorlib]System.Collections.Generic.IEnumerable`1<class ComplexCompositeTypes/Person>
    IL_02d3:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class ComplexCompositeTypes/Person>::GetEnumerator()
    IL_02d8:  stloc.s    V_30
    .try
    {
      IL_02da:  ldloc.s    V_30
      IL_02dc:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_02e1:  brfalse.s  IL_032f

//000411:         match n with
      IL_02e3:  ldloc.s    V_30
      IL_02e5:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class ComplexCompositeTypes/Person>::get_Current()
      IL_02ea:  stloc.s    n
      IL_02ec:  ldloc.s    n
      IL_02ee:  stloc.s    V_33
      IL_02f0:  ldloc.s    V_33
      IL_02f2:  ldfld      string ComplexCompositeTypes/Person::LastName@
      IL_02f7:  ldstr      "Neward"
      IL_02fc:  call       bool [mscorlib]System.String::Equals(string,
                                                                string)
      IL_0301:  brfalse.s  IL_0305

      IL_0303:  br.s       IL_0307

      IL_0305:  br.s       IL_031b

//000412:         | { Person.LastName = "Neward" } ->
//000413:             System.Console.WriteLine("Hi, {0}!", n.FirstName)
      IL_0307:  ldstr      "Hi, {0}!"
      IL_030c:  ldloc.s    n
      IL_030e:  ldfld      string ComplexCompositeTypes/Person::FirstName@
      IL_0313:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object)
//000414:         | _ ->
//000415:             System.Console.WriteLine("Who are you, {0}?", 
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_0318:  nop
      IL_0319:  br.s       IL_02da

//000415:             System.Console.WriteLine("Who are you, {0}?", 
      IL_031b:  ldstr      "Who are you, {0}\?"
      IL_0320:  ldloc.s    n
      IL_0322:  call       instance string ComplexCompositeTypes/Person::get_FullName()
      IL_0327:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                    object)
//000416:                 n.FullName)
//000417: 
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
//000420:     System.Console.WriteLine("a = b? {0}",
//000421:         if a = b then "yes" else "no")
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
      IL_032c:  nop
      IL_032d:  br.s       IL_02da

      IL_032f:  ldnull
      IL_0330:  stloc.s    V_31
      IL_0332:  leave.s    IL_0352

    }  // end .try
    finally
    {
      IL_0334:  ldloc.s    V_30
      IL_0336:  isinst     [mscorlib]System.IDisposable
      IL_033b:  stloc.s    V_34
      IL_033d:  ldloc.s    V_34
      IL_033f:  brfalse.s  IL_0343

      IL_0341:  br.s       IL_0345

      IL_0343:  br.s       IL_034f

      IL_0345:  ldloc.s    V_34
      IL_0347:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_034c:  ldnull
      IL_034d:  pop
      IL_034e:  endfinally
      IL_034f:  ldnull
      IL_0350:  pop
      IL_0351:  endfinally
    }  // end handler
    IL_0352:  ldloc.s    V_31
    IL_0354:  pop
//000418:     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
    IL_0355:  ldstr      "Ted"
    IL_035a:  ldstr      "Neward"
    IL_035f:  ldc.i4.s   38
    IL_0361:  newobj     instance void ComplexCompositeTypes/AuthorRecord::.ctor(string,
                                                                                 string,
                                                                                 int32)
    IL_0366:  stloc.s    V_35
//000419:     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
    IL_0368:  ldstr      "Ted"
    IL_036d:  ldstr      "Neward"
    IL_0372:  ldc.i4.s   38
    IL_0374:  newobj     instance void ComplexCompositeTypes/AuthorRecord::.ctor(string,
                                                                                 string,
                                                                                 int32)
    IL_0379:  stloc.s    b
//000420:     System.Console.WriteLine("a = b? {0}",
    IL_037b:  ldstr      "a = b\? {0}"
//000421:         if a = b then "yes" else "no")
    IL_0380:  ldloc.s    V_35
    IL_0382:  stloc.s    V_37
    IL_0384:  ldloc.s    b
    IL_0386:  stloc.s    V_38
    IL_0388:  ldloc.s    V_37
    IL_038a:  ldloc.s    V_38
    IL_038c:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
    IL_0391:  call       instance bool ComplexCompositeTypes/AuthorRecord::Equals(object,
                                                                                  class [mscorlib]System.Collections.IEqualityComparer)
    IL_0396:  brfalse.s  IL_039a

    IL_0398:  br.s       IL_039c

    IL_039a:  br.s       IL_03a4

    IL_039c:  ldstr      "yes"
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_03a1:  nop
    IL_03a2:  br.s       IL_03aa

//000421:         if a = b then "yes" else "no")
    IL_03a4:  ldstr      "no"
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
//000423:         if a.Equals(b) then "yes" else "no")
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_03a9:  nop
    IL_03aa:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000422:     System.Console.WriteLine("a.Equals(b)? {0}",
    IL_03af:  ldstr      "a.Equals(b)\? {0}"
//000423:         if a.Equals(b) then "yes" else "no")
    IL_03b4:  ldloc.s    V_35
    IL_03b6:  ldloc.s    b
    IL_03b8:  callvirt   instance bool [mscorlib]System.Object::Equals(object)
    IL_03bd:  brfalse.s  IL_03c1

    IL_03bf:  br.s       IL_03c3

    IL_03c1:  br.s       IL_03cb

    IL_03c3:  ldstr      "yes"
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_03c8:  nop
    IL_03c9:  br.s       IL_03d1

//000423:         if a.Equals(b) then "yes" else "no")
    IL_03cb:  ldstr      "no"
//000424:     System.Console.WriteLine("a <> b? {0}",
//000425:         if a <> b then "yes" else "no")
//000426:     ()    
//000427:     
    IL_03d0:  nop
    IL_03d1:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
//000424:     System.Console.WriteLine("a <> b? {0}",
    IL_03d6:  ldstr      "a <> b\? {0}"
//000425:         if a <> b then "yes" else "no")
    IL_03db:  ldloc.s    V_35
    IL_03dd:  stloc.s    V_39
    IL_03df:  ldloc.s    b
    IL_03e1:  stloc.s    V_40
    IL_03e3:  ldloc.s    V_39
    IL_03e5:  ldloc.s    V_40
    IL_03e7:  call       class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()
    IL_03ec:  call       instance bool ComplexCompositeTypes/AuthorRecord::Equals(object,
                                                                                  class [mscorlib]System.Collections.IEqualityComparer)
    IL_03f1:  ldc.i4.0
    IL_03f2:  ceq
    IL_03f4:  brfalse.s  IL_03f8

    IL_03f6:  br.s       IL_03fa

    IL_03f8:  br.s       IL_0402

    IL_03fa:  ldstr      "yes"
//000426:     ()    
//000427:     
    IL_03ff:  nop
    IL_0400:  br.s       IL_0408

//000425:         if a <> b then "yes" else "no")
    IL_0402:  ldstr      "no"
//000426:     ()    
//000427:     
    IL_0407:  nop
    IL_0408:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                  object)
    IL_040d:  ret
  } // end of method ComplexCompositeTypes::record_examples

} // end of class ComplexCompositeTypes

.class private abstract auto ansi sealed '<StartupCode$Objects>'.$ComplexCompositeTypes
       extends [mscorlib]System.Object
{
} // end of class '<StartupCode$Objects>'.$ComplexCompositeTypes

.class public abstract auto ansi sealed ProFSharp
       extends [mscorlib]System.Object
{
  .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 07 00 00 00 00 00 ) 
  .class auto ansi serializable nested public ExampleAttribute
         extends [mscorlib]System.Attribute
  {
    .custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = ( 01 00 40 00 00 00 01 00 54 02 0D 41 6C 6C 6F 77   // ..@.....T..Allow
                                                                                                                           4D 75 6C 74 69 70 6C 65 00 )                      // Multiple.
    .custom instance void [FSharp.Core]Microsoft.FSharp.Core.CompilationMappingAttribute::.ctor(valuetype [FSharp.Core]Microsoft.FSharp.Core.SourceConstructFlags) = ( 01 00 03 00 00 00 00 00 ) 
    .field assembly string name
    .method public specialname rtspecialname 
            instance void  .ctor(string name) cil managed
    {
      // Code size       17 (0x11)
      .maxstack  4
// Source File 'C:\Users\faa634\Desktop\book codes\F#\Code\Objects\DriverBits.fs' 
//000009:         inherit Attribute()
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Attribute::.ctor()
      IL_0007:  ldarg.0
      IL_0008:  pop
//000008:     type public ExampleAttribute(name:string) =
      IL_0009:  ldarg.0
      IL_000a:  ldarg.1
      IL_000b:  stfld      string ProFSharp/ExampleAttribute::name
      IL_0010:  ret
    } // end of method ExampleAttribute::.ctor

    .method public specialname instance string 
            get_Value() cil managed
    {
      // Code size       8 (0x8)
      .maxstack  3
//000009:         inherit Attribute()
//000010:         member x.Value = name
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string ProFSharp/ExampleAttribute::name
      IL_0007:  ret
    } // end of method ExampleAttribute::get_Value

    .property instance string Value()
    {
      .get instance string ProFSharp/ExampleAttribute::get_Value()
    } // end of property ExampleAttribute::Value
  } // end of class ExampleAttribute

} // end of class ProFSharp

.class private abstract auto ansi sealed '<StartupCode$Objects>'.$ProFSharp
       extends [mscorlib]System.Object
{
} // end of class '<StartupCode$Objects>'.$ProFSharp


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
