
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern Microsoft.VisualBasic
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 10:0:0:0
}
.assembly extern System.Windows.Forms
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Drawing
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:0:0:0
}
.assembly extern ParallelExtensionsExtras
{
  .ver 1:2:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly ShakespeareanMonkeys
{
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 14 53 68 61 6B 65 73 70 65 61 72 65 61 6E   // ...Shakespearean
                                                                                              4D 6F 6E 6B 65 79 73 00 00 )                      // Monkeys..
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 14 53 68 61 6B 65 73 70 65 61 72 65 61 6E   // ...Shakespearean
                                                                                                4D 6F 6E 6B 65 79 73 00 00 )                      // Monkeys..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = ( 01 00 24 31 34 32 38 61 33 31 38 2D 33 37 62 39   // ..$1428a318-37b9
                                                                                                  2D 34 61 36 34 2D 61 32 65 30 2D 64 65 36 61 35   // -4a64-a2e0-de6a5
                                                                                                  35 65 37 33 32 64 66 00 00 )                      // 5e732df..

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public Resources.resources
{
  // Offset: 0x00000000 Length: 0x0000CED7
}
.mresource public ShakespeareanMonkeys.MainForm.resources
{
  // Offset: 0x0000CEDB Length: 0x000000B4
}
.module ShakespeareanMonkeys.exe
// MVID: {258DC804-D5CB-41D8-8EAF-B822DA8C9263}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x012F0000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi My.MyApplication
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase
{
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method MyApplication::.ctor

} // end of class My.MyApplication

.class private auto ansi My.MyComputer
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  8
    .language '{3A12D0B8-C26C-11D0-B442-00A0244A1DD2}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File '17d14f5c-a337-4978-8281-53493378c1071.vb' not found
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer::.ctor()
    IL_0007:  nop
    IL_0008:  nop
    IL_0009:  ret
  } // end of method MyComputer::.ctor

} // end of class My.MyComputer

.class private auto ansi sealed beforefieldinit My.MyProject
       extends [mscorlib]System.Object
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .class auto ansi sealed nested assembly MyWebServices
         extends [mscorlib]System.Object
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.MyGroupCollectionAttribute::.ctor(string,
                                                                                                         string,
                                                                                                         string,
                                                                                                         string) = ( 01 00 34 53 79 73 74 65 6D 2E 57 65 62 2E 53 65   // ..4System.Web.Se
                                                                                                                     72 76 69 63 65 73 2E 50 72 6F 74 6F 63 6F 6C 73   // rvices.Protocols
                                                                                                                     2E 53 6F 61 70 48 74 74 70 43 6C 69 65 6E 74 50   // .SoapHttpClientP
                                                                                                                     72 6F 74 6F 63 6F 6C 12 43 72 65 61 74 65 5F 5F   // rotocol.Create__
                                                                                                                     49 6E 73 74 61 6E 63 65 5F 5F 13 44 69 73 70 6F   // Instance__.Dispo
                                                                                                                     73 65 5F 5F 49 6E 73 74 61 6E 63 65 5F 5F 00 00   // se__Instance__..
                                                                                                                     00 ) 
    .method public strict virtual instance bool 
            Equals(object o) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] bool Equals)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_0008:  call       instance bool [mscorlib]System.Object::Equals(object)
      IL_000d:  stloc.0
      IL_000e:  br.s       IL_0010

      IL_0010:  ldloc.0
      IL_0011:  ret
    } // end of method MyWebServices::Equals

    .method public strict virtual instance int32 
            GetHashCode() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] int32 GetHashCode)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 [mscorlib]System.Object::GetHashCode()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::GetHashCode

    .method assembly hidebysig instance class [mscorlib]System.Type 
            GetType() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       16 (0x10)
      .maxstack  1
      .locals init ([0] class [mscorlib]System.Type GetType)
      IL_0000:  nop
      IL_0001:  ldtoken    My.MyProject/MyWebServices
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  stloc.0
      IL_000c:  br.s       IL_000e

      IL_000e:  ldloc.0
      IL_000f:  ret
    } // end of method MyWebServices::GetType

    .method public strict virtual instance string 
            ToString() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] string ToString)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string [mscorlib]System.Object::ToString()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::ToString

    .method private static !!T  Create__Instance__<.ctor T>(!!T 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       32 (0x20)
      .maxstack  2
      .locals init ([0] !!T Create__Instance__,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  box        !!T
      IL_0007:  ldnull
      IL_0008:  ceq
      IL_000a:  stloc.1
      IL_000b:  ldloc.1
      IL_000c:  brfalse.s  IL_0018

      IL_000e:  call       !!0 [mscorlib]System.Activator::CreateInstance<!!0>()
      IL_0013:  stloc.0
      IL_0014:  br.s       IL_001e

      IL_0016:  br.s       IL_001d

      IL_0018:  nop
      IL_0019:  ldarg.0
      IL_001a:  stloc.0
      IL_001b:  br.s       IL_001e

      IL_001d:  nop
      IL_001e:  ldloc.0
      IL_001f:  ret
    } // end of method MyWebServices::Create__Instance__

    .method private instance void  Dispose__Instance__<T>(!!T& 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] !!T VB$t_generic$S0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldloca.s   VB$t_generic$S0
      IL_0004:  initobj    !!T
      IL_000a:  ldloc.0
      IL_000b:  stobj      !!T
      IL_0010:  nop
      IL_0011:  ret
    } // end of method MyWebServices::Dispose__Instance__

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MyWebServices::.ctor

  } // end of class MyWebServices

  .class auto ansi sealed nested assembly ThreadSafeObjectProvider`1<.ctor T>
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .field private static !T m_ThreadStaticValue
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.ThreadStaticAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname instance !T 
            get_GetInstance() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       38 (0x26)
      .maxstack  2
      .locals init ([0] !T GetInstance,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0006:  box        !T
      IL_000b:  ldnull
      IL_000c:  ceq
      IL_000e:  stloc.1
      IL_000f:  ldloc.1
      IL_0010:  brfalse.s  IL_001c

      IL_0012:  call       !!0 [mscorlib]System.Activator::CreateInstance<!T>()
      IL_0017:  stsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_001c:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0021:  stloc.0
      IL_0022:  br.s       IL_0024

      IL_0024:  ldloc.0
      IL_0025:  ret
    } // end of method ThreadSafeObjectProvider`1::get_GetInstance

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method ThreadSafeObjectProvider`1::.ctor

    .property instance !T GetInstance()
    {
      .get instance !T My.MyProject/ThreadSafeObjectProvider`1::get_GetInstance()
    } // end of property ThreadSafeObjectProvider`1::GetInstance
  } // end of class ThreadSafeObjectProvider`1

  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> m_ComputerObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> m_AppObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> m_UserObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> m_MyWebServicesObjectProvider
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       42 (0x2a)
    .maxstack  8
    IL_0000:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::.ctor()
    IL_0005:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_000a:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::.ctor()
    IL_000f:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0014:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::.ctor()
    IL_0019:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_001e:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::.ctor()
    IL_0023:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0028:  nop
    IL_0029:  ret
  } // end of method MyProject::.cctor

  .method assembly specialname static class My.MyComputer 
          get_Computer() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyComputer Computer)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Computer

  .method assembly specialname static class My.MyApplication 
          get_Application() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyApplication Application)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Application

  .method assembly specialname static class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User 
          get_User() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User User)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_User

  .method assembly specialname static class My.MyProject/MyWebServices 
          get_WebServices() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyProject/MyWebServices WebServices)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_WebServices

  .property class My.MyComputer Computer()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0B 4D 79 2E 43 6F 6D 70 75 74 65 72 00 00 ) // ...My.Computer..
    .get class My.MyComputer My.MyProject::get_Computer()
  } // end of property MyProject::Computer
  .property class My.MyApplication Application()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 41 70 70 6C 69 63 61 74 69 6F   // ...My.Applicatio
                                                                                                       6E 00 00 )                                        // n..
    .get class My.MyApplication My.MyProject::get_Application()
  } // end of property MyProject::Application
  .property class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User
          User()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 07 4D 79 2E 55 73 65 72 00 00 )             // ...My.User..
    .get class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User My.MyProject::get_User()
  } // end of property MyProject::User
  .property class My.MyProject/MyWebServices
          WebServices()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 57 65 62 53 65 72 76 69 63 65   // ...My.WebService
                                                                                                       73 00 00 )                                        // s..
    .get class My.MyProject/MyWebServices My.MyProject::get_WebServices()
  } // end of property MyProject::WebServices
} // end of class My.MyProject

.class public auto ansi beforefieldinit ShakespeareanMonkeys.MainForm
       extends [System.Windows.Forms]System.Windows.Forms.Form
{
  .class auto ansi nested assembly _Closure$__1
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi nested assembly _Closure$__2
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> $VB$Local_bestGenome
      .field public class ShakespeareanMonkeys.MainForm/_Closure$__1 $VB$NonLocal__Closure$__1
      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__2::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor(class ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       45 (0x2d)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_002a

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      class ShakespeareanMonkeys.MainForm/_Closure$__1 ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$NonLocal__Closure$__1
        IL_0019:  stfld      class ShakespeareanMonkeys.MainForm/_Closure$__1 ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$NonLocal__Closure$__1
        IL_001e:  ldarg.0
        IL_001f:  ldarg.1
        IL_0020:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$Local_bestGenome
        IL_0025:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$Local_bestGenome
        IL_002a:  nop
        IL_002b:  nop
        IL_002c:  ret
      } // end of method _Closure$__2::.ctor

      .method public specialname instance void 
              _Lambda$__3() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       44 (0x2c)
        .maxstack  2
        .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome VB$t_struct$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb' 
//000072:                                                   _uiTasks.StartNew(Sub()
        IL_0000:  nop
//000073:                                                                         txtBestMatch.Text = bestGenome.Value.Text
        IL_0001:  ldarg.0
        IL_0002:  ldfld      class ShakespeareanMonkeys.MainForm/_Closure$__1 ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$NonLocal__Closure$__1
        IL_0007:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Me
        IL_000c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
        IL_0011:  ldarg.0
        IL_0012:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$Local_bestGenome
        IL_0017:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::get_Value()
        IL_001c:  stloc.0
        IL_001d:  ldloca.s   VB$t_struct$S0
        IL_001f:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
        IL_0024:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBox::set_Text(string)
        IL_0029:  nop
//000074:                                                                     End Sub)
        IL_002a:  nop
        IL_002b:  ret
      } // end of method _Closure$__2::_Lambda$__3

    } // end of class _Closure$__2

    .field public bool $VB$Local_runParallel
    .field public class ShakespeareanMonkeys.GeneticAlgorithmSettings $VB$Local_settings
    .field public valuetype [mscorlib]System.Threading.CancellationToken $VB$Local_token
    .field public class ShakespeareanMonkeys.MainForm $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class ShakespeareanMonkeys.MainForm/_Closure$__1 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       69 (0x45)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_0042

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_token
      IL_0019:  stfld      valuetype [mscorlib]System.Threading.CancellationToken ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_token
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      bool ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_runParallel
      IL_0025:  stfld      bool ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_runParallel
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_settings
      IL_0031:  stfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_settings
      IL_0036:  ldarg.0
      IL_0037:  ldarg.1
      IL_0038:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Me
      IL_003d:  stfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Me
      IL_0042:  nop
      IL_0043:  nop
      IL_0044:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname instance void 
            _Lambda$__2() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       261 (0x105)
      .maxstack  3
      .locals init ([0] class ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2 $VB$Closure_ClosureVariable_39_26,
               [1] class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ga,
               [2] valuetype ShakespeareanMonkeys.TextMatchGenome VB$t_struct$S1,
               [3] valuetype ShakespeareanMonkeys.TextMatchGenome VB$t_struct$S2,
               [4] bool VB$CG$t_bool$S0)
//000058:                 Task.Factory.StartNew(Sub()
      IL_0000:  nop
//000059:                                           ' Create the new genetic algorithm.
//000060:                                           Dim ga = New TextMatchGeneticAlgorithm(runParallel, _targetText, settings)
//000061:                                           Dim bestGenome? As TextMatchGenome = Nothing
//000062:                                           _currentIteration = 1
//000063:                                           ' Iterate until a solution is found or until cancellation is requested.
//000064:                                           Do
//000065:                                               token.ThrowIfCancellationRequested()
//000066: 
//000067:                                               ' Move to the next generation.
//000068:                                               ga.MoveNext()
//000069:                                               ' If we've found the best solution thus far, update the UI.
//000070:                                               If bestGenome Is Nothing OrElse ga.CurrentBest.Fitness < bestGenome.Value.Fitness Then
//000071:                                                   bestGenome = ga.CurrentBest
//000072:                                                   _uiTasks.StartNew(Sub()
//000073:                                                                         txtBestMatch.Text = bestGenome.Value.Text
//000074:                                                                     End Sub)
//000075:                                                   ' If we've found the solution, bail.
//000076:                                                   If bestGenome.Value.Text = _targetText Then
//000077:                                                       Exit Do
//000078:                                                   End If
//000079:                                               End If
//000080:                                               _currentIteration += 1
//000081:                                           Loop
//000082:                                       End Sub, token).ContinueWith(Sub(t)
//000083:                                                                        timerElapsedTime.Stop()
//000084:                                                                        chkParallel.Visible = True
//000085:                                                                        btnRun.Text = "Start"
//000086:                                                                        _cancellation = Nothing
//000087: 
//000088:                                                                        Select Case t.Status
//000089:                                                                            Case TaskStatus.Faulted
//000090:                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
//000091:                                                                            Case TaskStatus.RanToCompletion
//000092:                                                                                txtBestMatch.BackColor = Color.LightGreen
//000093:                                                                                lblGenerations.BackColor = Color.LemonChiffon
//000094:                                                                        End Select
//000095: 
//000096:                                                                    End Sub, _uiTasks.Scheduler)
//000097: 
//000098:             Else
//000099:                 _cancellation.Cancel()
//000100:             End If
//000101: 
//000102: 
//000103:         End Sub
//000104: 
//000105:         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
//000106:         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
//000107: 
//000108:         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
//000109:             Dim now = DateTimeOffset.Now
//000110:             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
//000111: 
//000112:             lblElapsedTime.Text = elapsed.ToString()
//000113:             lblGenerations.Text = _currentIteration.ToString()
//000114: 
//000115:             If elapsed > 2 Then
//000116:                 Dim diffSeconds = (now - _lastTime).TotalSeconds
//000117:                 If diffSeconds > 0 Then
//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
//000119:                 End If
//000120:             End If
//000121:         End Sub
//000122:     End Class
//000123: End Namespace
      IL_0001:  newobj     instance void ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::.ctor()
      IL_0006:  stloc.0
      IL_0007:  ldloc.0
      IL_0008:  ldarg.0
      IL_0009:  stfld      class ShakespeareanMonkeys.MainForm/_Closure$__1 ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$NonLocal__Closure$__1
//000060:                                           Dim ga = New TextMatchGeneticAlgorithm(runParallel, _targetText, settings)
      IL_000e:  ldarg.0
      IL_000f:  ldfld      bool ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_runParallel
      IL_0014:  ldsfld     string ShakespeareanMonkeys.MainForm::_targetText
      IL_0019:  ldarg.0
      IL_001a:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_settings
      IL_001f:  newobj     instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::.ctor(bool,
                                                                                               string,
                                                                                               class ShakespeareanMonkeys.GeneticAlgorithmSettings)
      IL_0024:  stloc.1
//000061:                                           Dim bestGenome? As TextMatchGenome = Nothing
      IL_0025:  ldloc.0
      IL_0026:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$Local_bestGenome
      IL_002b:  initobj    valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>
//000062:                                           _currentIteration = 1
      IL_0031:  ldarg.0
      IL_0032:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Me
      IL_0037:  ldc.i4.1
      IL_0038:  stfld      int32 ShakespeareanMonkeys.MainForm::_currentIteration
//000063:                                           ' Iterate until a solution is found or until cancellation is requested.
//000064:                                           Do
      IL_003d:  nop
//000065:                                               token.ThrowIfCancellationRequested()
      IL_003e:  ldarg.0
      IL_003f:  ldflda     valuetype [mscorlib]System.Threading.CancellationToken ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_token
      IL_0044:  call       instance void [mscorlib]System.Threading.CancellationToken::ThrowIfCancellationRequested()
      IL_0049:  nop
//000066: 
//000067:                                               ' Move to the next generation.
//000068:                                               ga.MoveNext()
      IL_004a:  ldloc.1
      IL_004b:  callvirt   instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::MoveNext()
      IL_0050:  nop
//000069:                                               ' If we've found the best solution thus far, update the UI.
//000070:                                               If bestGenome Is Nothing OrElse ga.CurrentBest.Fitness < bestGenome.Value.Fitness Then
      IL_0051:  ldloc.0
      IL_0052:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$Local_bestGenome
      IL_0057:  call       instance bool valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::get_HasValue()
      IL_005c:  brfalse.s  IL_0084

      IL_005e:  ldloc.1
      IL_005f:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::get_CurrentBest()
      IL_0064:  stloc.2
      IL_0065:  ldloca.s   VB$t_struct$S1
      IL_0067:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
      IL_006c:  ldloc.0
      IL_006d:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$Local_bestGenome
      IL_0072:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::get_Value()
      IL_0077:  stloc.3
      IL_0078:  ldloca.s   VB$t_struct$S2
      IL_007a:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
      IL_007f:  blt.s      IL_0084

      IL_0081:  ldc.i4.0
      IL_0082:  br.s       IL_0085

      IL_0084:  ldc.i4.1
      IL_0085:  stloc.s    VB$CG$t_bool$S0
//000071:                                                   bestGenome = ga.CurrentBest
//000072:                                                   _uiTasks.StartNew(Sub()
//000073:                                                                         txtBestMatch.Text = bestGenome.Value.Text
//000074:                                                                     End Sub)
//000075:                                                   ' If we've found the solution, bail.
//000076:                                                   If bestGenome.Value.Text = _targetText Then
//000077:                                                       Exit Do
//000078:                                                   End If
//000079:                                               End If
//000080:                                               _currentIteration += 1
//000081:                                           Loop
//000082:                                       End Sub, token).ContinueWith(Sub(t)
//000083:                                                                        timerElapsedTime.Stop()
//000084:                                                                        chkParallel.Visible = True
//000085:                                                                        btnRun.Text = "Start"
//000086:                                                                        _cancellation = Nothing
//000087: 
//000088:                                                                        Select Case t.Status
//000089:                                                                            Case TaskStatus.Faulted
//000090:                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
//000091:                                                                            Case TaskStatus.RanToCompletion
//000092:                                                                                txtBestMatch.BackColor = Color.LightGreen
//000093:                                                                                lblGenerations.BackColor = Color.LemonChiffon
//000094:                                                                        End Select
//000095: 
//000096:                                                                    End Sub, _uiTasks.Scheduler)
//000097: 
//000098:             Else
//000099:                 _cancellation.Cancel()
//000100:             End If
//000101: 
//000102: 
//000103:         End Sub
//000104: 
//000105:         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
//000106:         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
//000107: 
//000108:         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
//000109:             Dim now = DateTimeOffset.Now
//000110:             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
//000111: 
//000112:             lblElapsedTime.Text = elapsed.ToString()
//000113:             lblGenerations.Text = _currentIteration.ToString()
//000114: 
//000115:             If elapsed > 2 Then
//000116:                 Dim diffSeconds = (now - _lastTime).TotalSeconds
//000117:                 If diffSeconds > 0 Then
//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
//000119:                 End If
//000120:             End If
//000121:         End Sub
//000122:     End Class
//000123: End Namespace
      IL_0087:  ldloc.s    VB$CG$t_bool$S0
      IL_0089:  brfalse.s  IL_00e5

//000071:                                                   bestGenome = ga.CurrentBest
      IL_008b:  ldloc.0
      IL_008c:  ldloc.1
      IL_008d:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::get_CurrentBest()
      IL_0092:  call       valuetype [mscorlib]System.Nullable`1<!0> valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::op_Implicit(!0)
      IL_0097:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$Local_bestGenome
//000072:                                                   _uiTasks.StartNew(Sub()
      IL_009c:  ldarg.0
      IL_009d:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Me
      IL_00a2:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory ShakespeareanMonkeys.MainForm::_uiTasks
      IL_00a7:  ldloc.0
      IL_00a8:  dup
      IL_00a9:  ldvirtftn  instance void ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::_Lambda$__3()
      IL_00af:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                        native int)
      IL_00b4:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
      IL_00b9:  pop
//000073:                                                                         txtBestMatch.Text = bestGenome.Value.Text
//000074:                                                                     End Sub)
//000075:                                                   ' If we've found the solution, bail.
//000076:                                                   If bestGenome.Value.Text = _targetText Then
      IL_00ba:  ldloc.0
      IL_00bb:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/_Closure$__1/_Closure$__2::$VB$Local_bestGenome
      IL_00c0:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::get_Value()
      IL_00c5:  stloc.3
      IL_00c6:  ldloca.s   VB$t_struct$S2
      IL_00c8:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
      IL_00cd:  ldsfld     string ShakespeareanMonkeys.MainForm::_targetText
      IL_00d2:  ldc.i4.0
      IL_00d3:  call       int32 [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Operators::CompareString(string,
                                                                                                                        string,
                                                                                                                        bool)
      IL_00d8:  ldc.i4.0
      IL_00d9:  ceq
      IL_00db:  stloc.s    VB$CG$t_bool$S0
//000077:                                                       Exit Do
//000078:                                                   End If
//000079:                                               End If
//000080:                                               _currentIteration += 1
//000081:                                           Loop
//000082:                                       End Sub, token).ContinueWith(Sub(t)
//000083:                                                                        timerElapsedTime.Stop()
//000084:                                                                        chkParallel.Visible = True
//000085:                                                                        btnRun.Text = "Start"
//000086:                                                                        _cancellation = Nothing
//000087: 
//000088:                                                                        Select Case t.Status
//000089:                                                                            Case TaskStatus.Faulted
//000090:                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
//000091:                                                                            Case TaskStatus.RanToCompletion
//000092:                                                                                txtBestMatch.BackColor = Color.LightGreen
//000093:                                                                                lblGenerations.BackColor = Color.LemonChiffon
//000094:                                                                        End Select
//000095: 
//000096:                                                                    End Sub, _uiTasks.Scheduler)
//000097: 
//000098:             Else
//000099:                 _cancellation.Cancel()
//000100:             End If
//000101: 
//000102: 
//000103:         End Sub
//000104: 
//000105:         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
//000106:         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
//000107: 
//000108:         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
//000109:             Dim now = DateTimeOffset.Now
//000110:             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
//000111: 
//000112:             lblElapsedTime.Text = elapsed.ToString()
//000113:             lblGenerations.Text = _currentIteration.ToString()
//000114: 
//000115:             If elapsed > 2 Then
//000116:                 Dim diffSeconds = (now - _lastTime).TotalSeconds
//000117:                 If diffSeconds > 0 Then
//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
//000119:                 End If
//000120:             End If
//000121:         End Sub
//000122:     End Class
//000123: End Namespace
      IL_00dd:  ldloc.s    VB$CG$t_bool$S0
      IL_00df:  brfalse.s  IL_00e4

//000077:                                                       Exit Do
      IL_00e1:  nop
      IL_00e2:  br.s       IL_0103

//000078:                                                   End If
      IL_00e4:  nop
//000079:                                               End If
      IL_00e5:  nop
//000080:                                               _currentIteration += 1
      IL_00e6:  ldarg.0
      IL_00e7:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Me
      IL_00ec:  ldarg.0
      IL_00ed:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Me
      IL_00f2:  ldfld      int32 ShakespeareanMonkeys.MainForm::_currentIteration
      IL_00f7:  ldc.i4.1
      IL_00f8:  add.ovf
      IL_00f9:  stfld      int32 ShakespeareanMonkeys.MainForm::_currentIteration
//000081:                                           Loop
      IL_00fe:  br         IL_003e

//000082:                                       End Sub, token).ContinueWith(Sub(t)
      IL_0103:  nop
      IL_0104:  ret
    } // end of method _Closure$__1::_Lambda$__2

  } // end of class _Closure$__1

  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .field private class [System]System.ComponentModel.IContainer components
  .field private class [System.Windows.Forms]System.Windows.Forms.PictureBox pictureBox1
  .field private class [System.Windows.Forms]System.Windows.Forms.SplitContainer splitContainer1
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label1
  .field private class [System.Windows.Forms]System.Windows.Forms.TextBox txtMonkeysPerGeneration
  .field private class [System.Windows.Forms]System.Windows.Forms.Button _btnRun
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 06 62 74 6E 52 75 6E 00 00 )                // ...btnRun..
  .field private class [System.Windows.Forms]System.Windows.Forms.SplitContainer splitContainer2
  .field private class [System.Windows.Forms]System.Windows.Forms.TextBox txtBestMatch
  .field private class [System.Windows.Forms]System.Windows.Forms.TextBox txtTarget
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblElapsedTime
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label4
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblGenerations
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label2
  .field private class [System.Windows.Forms]System.Windows.Forms.Timer _timerElapsedTime
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 10 74 69 6D 65 72 45 6C 61 70 73 65 64 54   // ...timerElapsedT
                                                                                                                      69 6D 65 00 00 )                                  // ime..
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblGenPerSec
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label5
  .field private class [System.Windows.Forms]System.Windows.Forms.CheckBox chkParallel
  .field private static string _targetText
  .field private class [mscorlib]System.Threading.Tasks.TaskFactory _uiTasks
  .field private int32 _currentIteration
  .field private class [mscorlib]System.Threading.CancellationTokenSource _cancellation
  .field private valuetype [mscorlib]System.DateTimeOffset _startTime
  .field private valuetype [mscorlib]System.DateTimeOffset _lastTime
  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method MainForm::__ENCAddToList

  .method family strict virtual instance void 
          Dispose(bool disposing) cil managed
  {
    // Code size       43 (0x2b)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.Designer.vb' 
//000012: 		Protected Overrides Sub Dispose(ByVal disposing As Boolean)
    IL_0000:  nop
//000013: 			If disposing AndAlso (components IsNot Nothing) Then
    IL_0001:  ldarg.1
    IL_0002:  brfalse.s  IL_000c

    IL_0004:  ldarg.0
    IL_0005:  ldfld      class [System]System.ComponentModel.IContainer ShakespeareanMonkeys.MainForm::components
    IL_000a:  brtrue.s   IL_000f

    IL_000c:  ldc.i4.0
    IL_000d:  br.s       IL_0010

    IL_000f:  ldc.i4.1
    IL_0010:  stloc.0
//000014: 				components.Dispose()
//000015: 			End If
//000016: 			MyBase.Dispose(disposing)
//000017: 		End Sub
//000018: 
//000019: 		#Region "Windows Form Designer generated code"
//000020: 
//000021: 		''' <summary>
//000022: 		''' Required method for Designer support - do not modify
//000023: 		''' the contents of this method with the code editor.
//000024: 		''' </summary>
//000025: 		Private Sub InitializeComponent()
//000026: 			Me.splitContainer1 = New SplitContainer()
//000027: 			Me.lblGenPerSec = New Label()
//000028: 			Me.label5 = New Label()
//000029: 			Me.lblElapsedTime = New Label()
//000030: 			Me.label4 = New Label()
//000031: 			Me.lblGenerations = New Label()
//000032: 			Me.label2 = New Label()
//000033: 			Me.splitContainer2 = New SplitContainer()
//000034: 			Me.txtBestMatch = New TextBox()
//000035: 			Me.txtTarget = New TextBox()
//000036: 			Me.btnRun = New Button()
//000037: 			Me.txtMonkeysPerGeneration = New TextBox()
//000038: 			Me.label1 = New Label()
//000039: 			Me.timerElapsedTime = New Timer()
//000040: 			Me.chkParallel = New CheckBox()
//000041: 			Me.pictureBox1 = New PictureBox()
//000042: 			CType(Me.splitContainer1, System.ComponentModel.ISupportInitialize).BeginInit()
//000043: 			Me.splitContainer1.Panel1.SuspendLayout()
//000044: 			Me.splitContainer1.Panel2.SuspendLayout()
//000045: 			Me.splitContainer1.SuspendLayout()
//000046: 			CType(Me.splitContainer2, System.ComponentModel.ISupportInitialize).BeginInit()
//000047: 			Me.splitContainer2.Panel1.SuspendLayout()
//000048: 			Me.splitContainer2.Panel2.SuspendLayout()
//000049: 			Me.splitContainer2.SuspendLayout()
//000050: 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).BeginInit()
//000051: 			Me.SuspendLayout()
//000052: 			' 
//000053: 			' splitContainer1
//000054: 			' 
//000055: 			Me.splitContainer1.Dock = DockStyle.Fill
//000056: 			Me.splitContainer1.Location = New Point(0, 0)
//000057: 			Me.splitContainer1.Name = "splitContainer1"
//000058: 			' 
//000059: 			' splitContainer1.Panel1
//000060: 			' 
//000061: 			Me.splitContainer1.Panel1.Controls.Add(Me.pictureBox1)
//000062: 			' 
//000063: 			' splitContainer1.Panel2
//000064: 			' 
//000065: 			Me.splitContainer1.Panel2.Controls.Add(Me.chkParallel)
//000066: 			Me.splitContainer1.Panel2.Controls.Add(Me.lblGenPerSec)
//000067: 			Me.splitContainer1.Panel2.Controls.Add(Me.label5)
//000068: 			Me.splitContainer1.Panel2.Controls.Add(Me.lblElapsedTime)
//000069: 			Me.splitContainer1.Panel2.Controls.Add(Me.label4)
//000070: 			Me.splitContainer1.Panel2.Controls.Add(Me.lblGenerations)
//000071: 			Me.splitContainer1.Panel2.Controls.Add(Me.label2)
//000072: 			Me.splitContainer1.Panel2.Controls.Add(Me.splitContainer2)
//000073: 			Me.splitContainer1.Panel2.Controls.Add(Me.btnRun)
//000074: 			Me.splitContainer1.Panel2.Controls.Add(Me.txtMonkeysPerGeneration)
//000075: 			Me.splitContainer1.Panel2.Controls.Add(Me.label1)
//000076: 			Me.splitContainer1.Size = New Size(973, 389)
//000077: 			Me.splitContainer1.SplitterDistance = 301
//000078: 			Me.splitContainer1.TabIndex = 1
//000079: 			' 
//000080: 			' lblGenPerSec
//000081: 			' 
//000082: 			Me.lblGenPerSec.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000083: 			Me.lblGenPerSec.AutoSize = True
//000084: 			Me.lblGenPerSec.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
//000085: 			Me.lblGenPerSec.Location = New Point(601, 48)
//000086: 			Me.lblGenPerSec.Name = "lblGenPerSec"
//000087: 			Me.lblGenPerSec.Size = New Size(13, 17)
//000088: 			Me.lblGenPerSec.TabIndex = 9
//000089: 			Me.lblGenPerSec.Text = "-"
//000090: 			' 
//000091: 			' label5
//000092: 			' 
//000093: 			Me.label5.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000094: 			Me.label5.AutoSize = True
//000095: 			Me.label5.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
//000096: 			Me.label5.Location = New Point(454, 48)
//000097: 			Me.label5.Name = "label5"
//000098: 			Me.label5.Size = New Size(144, 17)
//000099: 			Me.label5.TabIndex = 8
//000100: 			Me.label5.Text = "Generations / Sec:"
//000101: 			' 
//000102: 			' lblElapsedTime
//000103: 			' 
//000104: 			Me.lblElapsedTime.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000105: 			Me.lblElapsedTime.AutoSize = True
//000106: 			Me.lblElapsedTime.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
//000107: 			Me.lblElapsedTime.Location = New Point(601, 9)
//000108: 			Me.lblElapsedTime.Name = "lblElapsedTime"
//000109: 			Me.lblElapsedTime.Size = New Size(13, 17)
//000110: 			Me.lblElapsedTime.TabIndex = 7
//000111: 			Me.lblElapsedTime.Text = "-"
//000112: 			' 
//000113: 			' label4
//000114: 			' 
//000115: 			Me.label4.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000116: 			Me.label4.AutoSize = True
//000117: 			Me.label4.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
//000118: 			Me.label4.Location = New Point(454, 9)
//000119: 			Me.label4.Name = "label4"
//000120: 			Me.label4.Size = New Size(48, 17)
//000121: 			Me.label4.TabIndex = 6
//000122: 			Me.label4.Text = "Time:"
//000123: 			' 
//000124: 			' lblGenerations
//000125: 			' 
//000126: 			Me.lblGenerations.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000127: 			Me.lblGenerations.AutoSize = True
//000128: 			Me.lblGenerations.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
//000129: 			Me.lblGenerations.Location = New Point(601, 29)
//000130: 			Me.lblGenerations.Name = "lblGenerations"
//000131: 			Me.lblGenerations.Size = New Size(13, 17)
//000132: 			Me.lblGenerations.TabIndex = 5
//000133: 			Me.lblGenerations.Text = "-"
//000134: 			' 
//000135: 			' label2
//000136: 			' 
//000137: 			Me.label2.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000138: 			Me.label2.AutoSize = True
//000139: 			Me.label2.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
//000140: 			Me.label2.Location = New Point(454, 29)
//000141: 			Me.label2.Name = "label2"
//000142: 			Me.label2.Size = New Size(102, 17)
//000143: 			Me.label2.TabIndex = 4
//000144: 			Me.label2.Text = "Generations:"
//000145: 			' 
//000146: 			' splitContainer2
//000147: 			' 
//000148: 			Me.splitContainer2.Anchor = (CType((((AnchorStyles.Top Or AnchorStyles.Bottom) Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
//000149: 			Me.splitContainer2.Location = New Point(2, 68)
//000150: 			Me.splitContainer2.Name = "splitContainer2"
//000151: 			' 
//000152: 			' splitContainer2.Panel1
//000153: 			' 
//000154: 			Me.splitContainer2.Panel1.Controls.Add(Me.txtBestMatch)
//000155: 			' 
//000156: 			' splitContainer2.Panel2
//000157: 			' 
//000158: 			Me.splitContainer2.Panel2.Controls.Add(Me.txtTarget)
//000159: 			Me.splitContainer2.Size = New Size(666, 321)
//000160: 			Me.splitContainer2.SplitterDistance = 325
//000161: 			Me.splitContainer2.TabIndex = 3
//000162: 			' 
//000163: 			' txtBestMatch
//000164: 			' 
//000165: 			Me.txtBestMatch.Dock = DockStyle.Fill
//000166: 			Me.txtBestMatch.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
//000167: 			Me.txtBestMatch.Location = New Point(0, 0)
//000168: 			Me.txtBestMatch.Multiline = True
//000169: 			Me.txtBestMatch.Name = "txtBestMatch"
//000170: 			Me.txtBestMatch.Size = New Size(325, 321)
//000171: 			Me.txtBestMatch.TabIndex = 3
//000172: 			' 
//000173: 			' txtTarget
//000174: 			' 
//000175: 			Me.txtTarget.Dock = DockStyle.Fill
//000176: 			Me.txtTarget.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
//000177: 			Me.txtTarget.Location = New Point(0, 0)
//000178: 			Me.txtTarget.Multiline = True
//000179: 			Me.txtTarget.Name = "txtTarget"
//000180: 			Me.txtTarget.Size = New Size(337, 321)
//000181: 			Me.txtTarget.TabIndex = 0
//000182: 			' 
//000183: 			' btnRun
//000184: 			' 
//000185: 			Me.btnRun.Font = New Font("Microsoft Sans Serif", 11F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
//000186: 			Me.btnRun.Location = New Point(17, 39)
//000187: 			Me.btnRun.Name = "btnRun"
//000188: 			Me.btnRun.Size = New Size(83, 26)
//000189: 			Me.btnRun.TabIndex = 2
//000190: 			Me.btnRun.Text = "Start"
//000191: 			Me.btnRun.UseVisualStyleBackColor = True
//000192: '			Me.btnRun.Click += New System.EventHandler(Me.btnRun_Click)
//000193: 			' 
//000194: 			' txtMonkeysPerGeneration
//000195: 			' 
//000196: 			Me.txtMonkeysPerGeneration.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
//000197: 			Me.txtMonkeysPerGeneration.Location = New Point(225, 12)
//000198: 			Me.txtMonkeysPerGeneration.Name = "txtMonkeysPerGeneration"
//000199: 			Me.txtMonkeysPerGeneration.Size = New Size(50, 26)
//000200: 			Me.txtMonkeysPerGeneration.TabIndex = 1
//000201: 			Me.txtMonkeysPerGeneration.Text = "2000"
//000202: 			' 
//000203: 			' label1
//000204: 			' 
//000205: 			Me.label1.AutoSize = True
//000206: 			Me.label1.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
//000207: 			Me.label1.Location = New Point(13, 13)
//000208: 			Me.label1.Name = "label1"
//000209: 			Me.label1.Size = New Size(206, 20)
//000210: 			Me.label1.TabIndex = 0
//000211: 			Me.label1.Text = "Monkeys Per Generation"
//000212: 			' 
//000213: 			' timerElapsedTime
//000214: 			' 
//000215: 			Me.timerElapsedTime.Interval = 1000
//000216: '			Me.timerElapsedTime.Tick += New System.EventHandler(Me.timerElapsedTime_Tick)
//000217: 			' 
//000218: 			' chkParallel
//000219: 			' 
//000220: 			Me.chkParallel.AutoSize = True
//000221: 			Me.chkParallel.Location = New Point(106, 45)
//000222: 			Me.chkParallel.Name = "chkParallel"
//000223: 			Me.chkParallel.Size = New Size(60, 17)
//000224: 			Me.chkParallel.TabIndex = 10
//000225: 			Me.chkParallel.Text = "Parallel"
//000226: 			Me.chkParallel.UseVisualStyleBackColor = True
//000227: 			' 
//000228: 			' pictureBox1
//000229: 			' 
//000230: 			Me.pictureBox1.BackColor = Color.Transparent
//000231: 			Me.pictureBox1.Dock = DockStyle.Fill
//000232: 			Me.pictureBox1.Image = My.Resources.HamletMonkey
//000233: 			Me.pictureBox1.Location = New Point(0, 0)
//000234: 			Me.pictureBox1.Name = "pictureBox1"
//000235: 			Me.pictureBox1.Size = New Size(301, 389)
//000236: 			Me.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom
//000237: 			Me.pictureBox1.TabIndex = 0
//000238: 			Me.pictureBox1.TabStop = False
//000239: 			' 
//000240: 			' MainForm
//000241: 			' 
//000242: 			Me.AutoScaleDimensions = New SizeF(6F, 13F)
//000243: 			Me.AutoScaleMode = AutoScaleMode.Font
//000244: 			Me.BackColor = Color.White
//000245: 			Me.ClientSize = New Size(973, 389)
//000246: 			Me.Controls.Add(Me.splitContainer1)
//000247: 			Me.Name = "MainForm"
//000248: 			Me.Text = "Shakespearean Monkeys"
//000249: 			Me.splitContainer1.Panel1.ResumeLayout(False)
//000250: 			Me.splitContainer1.Panel2.ResumeLayout(False)
//000251: 			Me.splitContainer1.Panel2.PerformLayout()
//000252: 			CType(Me.splitContainer1, System.ComponentModel.ISupportInitialize).EndInit()
//000253: 			Me.splitContainer1.ResumeLayout(False)
//000254: 			Me.splitContainer2.Panel1.ResumeLayout(False)
//000255: 			Me.splitContainer2.Panel1.PerformLayout()
//000256: 			Me.splitContainer2.Panel2.ResumeLayout(False)
//000257: 			Me.splitContainer2.Panel2.PerformLayout()
//000258: 			CType(Me.splitContainer2, System.ComponentModel.ISupportInitialize).EndInit()
//000259: 			Me.splitContainer2.ResumeLayout(False)
//000260: 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).EndInit()
//000261: 			Me.ResumeLayout(False)
//000262: 
//000263: 		End Sub
//000264: 
//000265: 		#End Region
//000266: 
//000267:         Private pictureBox1 As PictureBox
//000268: 		Private splitContainer1 As SplitContainer
//000269: 		Private label1 As Label
//000270: 		Private txtMonkeysPerGeneration As TextBox
//000271: 		Private WithEvents btnRun As Button
//000272: 		Private splitContainer2 As SplitContainer
//000273: 		Private txtBestMatch As TextBox
//000274: 		Private txtTarget As TextBox
//000275: 		Private lblElapsedTime As Label
//000276: 		Private label4 As Label
//000277: 		Private lblGenerations As Label
//000278: 		Private label2 As Label
//000279: 		Private WithEvents timerElapsedTime As Timer
//000280: 		Private lblGenPerSec As Label
//000281: 		Private label5 As Label
//000282: 		Private chkParallel As CheckBox
//000283: 	End Class
//000284: End Namespace
//000285: 
    IL_0011:  ldloc.0
    IL_0012:  brfalse.s  IL_0020

//000014: 				components.Dispose()
    IL_0014:  ldarg.0
    IL_0015:  ldfld      class [System]System.ComponentModel.IContainer ShakespeareanMonkeys.MainForm::components
    IL_001a:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
    IL_001f:  nop
//000015: 			End If
    IL_0020:  nop
//000016: 			MyBase.Dispose(disposing)
    IL_0021:  ldarg.0
    IL_0022:  ldarg.1
    IL_0023:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::Dispose(bool)
    IL_0028:  nop
//000017: 		End Sub
    IL_0029:  nop
    IL_002a:  ret
  } // end of method MainForm::Dispose

  .method private instance void  InitializeComponent() cil managed
  {
    // Code size       3183 (0xc6f)
    .maxstack  6
    .locals init ([0] valuetype [System.Drawing]System.Drawing.Point VB$t_struct$N0,
             [1] valuetype [System.Drawing]System.Drawing.Point VB$t_struct$S1,
             [2] valuetype [System.Drawing]System.Drawing.Size VB$t_struct$N2,
             [3] valuetype [System.Drawing]System.Drawing.Size VB$t_struct$S3,
             [4] valuetype [System.Drawing]System.Drawing.Color VB$t_struct$N4,
             [5] valuetype [System.Drawing]System.Drawing.SizeF VB$t_struct$N5,
             [6] valuetype [System.Drawing]System.Drawing.SizeF VB$t_struct$S6)
//000018: 
//000019: 		#Region "Windows Form Designer generated code"
//000020: 
//000021: 		''' <summary>
//000022: 		''' Required method for Designer support - do not modify
//000023: 		''' the contents of this method with the code editor.
//000024: 		''' </summary>
//000025: 		Private Sub InitializeComponent()
    IL_0000:  nop
//000026: 			Me.splitContainer1 = New SplitContainer()
    IL_0001:  ldarg.0
    IL_0002:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::.ctor()
    IL_0007:  stfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
//000027: 			Me.lblGenPerSec = New Label()
    IL_000c:  ldarg.0
    IL_000d:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0012:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
//000028: 			Me.label5 = New Label()
    IL_0017:  ldarg.0
    IL_0018:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_001d:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
//000029: 			Me.lblElapsedTime = New Label()
    IL_0022:  ldarg.0
    IL_0023:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0028:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
//000030: 			Me.label4 = New Label()
    IL_002d:  ldarg.0
    IL_002e:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0033:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
//000031: 			Me.lblGenerations = New Label()
    IL_0038:  ldarg.0
    IL_0039:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_003e:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
//000032: 			Me.label2 = New Label()
    IL_0043:  ldarg.0
    IL_0044:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0049:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
//000033: 			Me.splitContainer2 = New SplitContainer()
    IL_004e:  ldarg.0
    IL_004f:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::.ctor()
    IL_0054:  stfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
//000034: 			Me.txtBestMatch = New TextBox()
    IL_0059:  ldarg.0
    IL_005a:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TextBox::.ctor()
    IL_005f:  stfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
//000035: 			Me.txtTarget = New TextBox()
    IL_0064:  ldarg.0
    IL_0065:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TextBox::.ctor()
    IL_006a:  stfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
//000036: 			Me.btnRun = New Button()
    IL_006f:  ldarg.0
    IL_0070:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Button::.ctor()
    IL_0075:  callvirt   instance void ShakespeareanMonkeys.MainForm::set_btnRun(class [System.Windows.Forms]System.Windows.Forms.Button)
    IL_007a:  nop
//000037: 			Me.txtMonkeysPerGeneration = New TextBox()
    IL_007b:  ldarg.0
    IL_007c:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TextBox::.ctor()
    IL_0081:  stfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
//000038: 			Me.label1 = New Label()
    IL_0086:  ldarg.0
    IL_0087:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_008c:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
//000039: 			Me.timerElapsedTime = New Timer()
    IL_0091:  ldarg.0
    IL_0092:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Timer::.ctor()
    IL_0097:  callvirt   instance void ShakespeareanMonkeys.MainForm::set_timerElapsedTime(class [System.Windows.Forms]System.Windows.Forms.Timer)
    IL_009c:  nop
//000040: 			Me.chkParallel = New CheckBox()
    IL_009d:  ldarg.0
    IL_009e:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::.ctor()
    IL_00a3:  stfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
//000041: 			Me.pictureBox1 = New PictureBox()
    IL_00a8:  ldarg.0
    IL_00a9:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::.ctor()
    IL_00ae:  stfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
//000042: 			CType(Me.splitContainer1, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_00b3:  ldarg.0
    IL_00b4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_00b9:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00be:  nop
//000043: 			Me.splitContainer1.Panel1.SuspendLayout()
    IL_00bf:  ldarg.0
    IL_00c0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_00c5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_00ca:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00cf:  nop
//000044: 			Me.splitContainer1.Panel2.SuspendLayout()
    IL_00d0:  ldarg.0
    IL_00d1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_00d6:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_00db:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00e0:  nop
//000045: 			Me.splitContainer1.SuspendLayout()
    IL_00e1:  ldarg.0
    IL_00e2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_00e7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00ec:  nop
//000046: 			CType(Me.splitContainer2, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_00ed:  ldarg.0
    IL_00ee:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_00f3:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00f8:  nop
//000047: 			Me.splitContainer2.Panel1.SuspendLayout()
    IL_00f9:  ldarg.0
    IL_00fa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_00ff:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0104:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0109:  nop
//000048: 			Me.splitContainer2.Panel2.SuspendLayout()
    IL_010a:  ldarg.0
    IL_010b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0110:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0115:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_011a:  nop
//000049: 			Me.splitContainer2.SuspendLayout()
    IL_011b:  ldarg.0
    IL_011c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0121:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0126:  nop
//000050: 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_0127:  ldarg.0
    IL_0128:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_012d:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_0132:  nop
//000051: 			Me.SuspendLayout()
    IL_0133:  ldarg.0
    IL_0134:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0139:  nop
//000052: 			' 
//000053: 			' splitContainer1
//000054: 			' 
//000055: 			Me.splitContainer1.Dock = DockStyle.Fill
    IL_013a:  ldarg.0
    IL_013b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0140:  ldc.i4.5
    IL_0141:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_0146:  nop
//000056: 			Me.splitContainer1.Location = New Point(0, 0)
    IL_0147:  ldarg.0
    IL_0148:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_014d:  ldloca.s   VB$t_struct$S1
    IL_014f:  ldc.i4.0
    IL_0150:  ldc.i4.0
    IL_0151:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0156:  nop
    IL_0157:  ldloc.1
    IL_0158:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_015d:  nop
//000057: 			Me.splitContainer1.Name = "splitContainer1"
    IL_015e:  ldarg.0
    IL_015f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0164:  ldstr      "splitContainer1"
    IL_0169:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_016e:  nop
//000058: 			' 
//000059: 			' splitContainer1.Panel1
//000060: 			' 
//000061: 			Me.splitContainer1.Panel1.Controls.Add(Me.pictureBox1)
    IL_016f:  ldarg.0
    IL_0170:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0175:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_017a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_017f:  ldarg.0
    IL_0180:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0185:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_018a:  nop
//000062: 			' 
//000063: 			' splitContainer1.Panel2
//000064: 			' 
//000065: 			Me.splitContainer1.Panel2.Controls.Add(Me.chkParallel)
    IL_018b:  ldarg.0
    IL_018c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0191:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0196:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_019b:  ldarg.0
    IL_019c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_01a1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_01a6:  nop
//000066: 			Me.splitContainer1.Panel2.Controls.Add(Me.lblGenPerSec)
    IL_01a7:  ldarg.0
    IL_01a8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_01ad:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_01b2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_01b7:  ldarg.0
    IL_01b8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_01bd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_01c2:  nop
//000067: 			Me.splitContainer1.Panel2.Controls.Add(Me.label5)
    IL_01c3:  ldarg.0
    IL_01c4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_01c9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_01ce:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_01d3:  ldarg.0
    IL_01d4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_01d9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_01de:  nop
//000068: 			Me.splitContainer1.Panel2.Controls.Add(Me.lblElapsedTime)
    IL_01df:  ldarg.0
    IL_01e0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_01e5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_01ea:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_01ef:  ldarg.0
    IL_01f0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_01f5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_01fa:  nop
//000069: 			Me.splitContainer1.Panel2.Controls.Add(Me.label4)
    IL_01fb:  ldarg.0
    IL_01fc:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0201:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0206:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_020b:  ldarg.0
    IL_020c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_0211:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0216:  nop
//000070: 			Me.splitContainer1.Panel2.Controls.Add(Me.lblGenerations)
    IL_0217:  ldarg.0
    IL_0218:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_021d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0222:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0227:  ldarg.0
    IL_0228:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_022d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0232:  nop
//000071: 			Me.splitContainer1.Panel2.Controls.Add(Me.label2)
    IL_0233:  ldarg.0
    IL_0234:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0239:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_023e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0243:  ldarg.0
    IL_0244:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0249:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_024e:  nop
//000072: 			Me.splitContainer1.Panel2.Controls.Add(Me.splitContainer2)
    IL_024f:  ldarg.0
    IL_0250:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0255:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_025a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_025f:  ldarg.0
    IL_0260:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0265:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_026a:  nop
//000073: 			Me.splitContainer1.Panel2.Controls.Add(Me.btnRun)
    IL_026b:  ldarg.0
    IL_026c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0271:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0276:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_027b:  ldarg.0
    IL_027c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_0281:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0286:  nop
//000074: 			Me.splitContainer1.Panel2.Controls.Add(Me.txtMonkeysPerGeneration)
    IL_0287:  ldarg.0
    IL_0288:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_028d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0292:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0297:  ldarg.0
    IL_0298:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_029d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_02a2:  nop
//000075: 			Me.splitContainer1.Panel2.Controls.Add(Me.label1)
    IL_02a3:  ldarg.0
    IL_02a4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_02a9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_02ae:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_02b3:  ldarg.0
    IL_02b4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_02b9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_02be:  nop
//000076: 			Me.splitContainer1.Size = New Size(973, 389)
    IL_02bf:  ldarg.0
    IL_02c0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_02c5:  ldloca.s   VB$t_struct$S3
    IL_02c7:  ldc.i4     0x3cd
    IL_02cc:  ldc.i4     0x185
    IL_02d1:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_02d6:  nop
    IL_02d7:  ldloc.3
    IL_02d8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_02dd:  nop
//000077: 			Me.splitContainer1.SplitterDistance = 301
    IL_02de:  ldarg.0
    IL_02df:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_02e4:  ldc.i4     0x12d
    IL_02e9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_SplitterDistance(int32)
    IL_02ee:  nop
//000078: 			Me.splitContainer1.TabIndex = 1
    IL_02ef:  ldarg.0
    IL_02f0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_02f5:  ldc.i4.1
    IL_02f6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_02fb:  nop
//000079: 			' 
//000080: 			' lblGenPerSec
//000081: 			' 
//000082: 			Me.lblGenPerSec.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_02fc:  ldarg.0
    IL_02fd:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0302:  ldc.i4.s   9
    IL_0304:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0309:  nop
//000083: 			Me.lblGenPerSec.AutoSize = True
    IL_030a:  ldarg.0
    IL_030b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0310:  ldc.i4.1
    IL_0311:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_0316:  nop
//000084: 			Me.lblGenPerSec.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
    IL_0317:  ldarg.0
    IL_0318:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_031d:  ldstr      "Microsoft Sans Serif"
    IL_0322:  ldc.r4     10.
    IL_0327:  ldc.i4.0
    IL_0328:  ldc.i4.3
    IL_0329:  ldc.i4.0
    IL_032a:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_032f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0334:  nop
//000085: 			Me.lblGenPerSec.Location = New Point(601, 48)
    IL_0335:  ldarg.0
    IL_0336:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_033b:  ldloca.s   VB$t_struct$S1
    IL_033d:  ldc.i4     0x259
    IL_0342:  ldc.i4.s   48
    IL_0344:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0349:  nop
    IL_034a:  ldloc.1
    IL_034b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0350:  nop
//000086: 			Me.lblGenPerSec.Name = "lblGenPerSec"
    IL_0351:  ldarg.0
    IL_0352:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0357:  ldstr      "lblGenPerSec"
    IL_035c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0361:  nop
//000087: 			Me.lblGenPerSec.Size = New Size(13, 17)
    IL_0362:  ldarg.0
    IL_0363:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0368:  ldloca.s   VB$t_struct$S3
    IL_036a:  ldc.i4.s   13
    IL_036c:  ldc.i4.s   17
    IL_036e:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0373:  nop
    IL_0374:  ldloc.3
    IL_0375:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_037a:  nop
//000088: 			Me.lblGenPerSec.TabIndex = 9
    IL_037b:  ldarg.0
    IL_037c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0381:  ldc.i4.s   9
    IL_0383:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0388:  nop
//000089: 			Me.lblGenPerSec.Text = "-"
    IL_0389:  ldarg.0
    IL_038a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_038f:  ldstr      "-"
    IL_0394:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0399:  nop
//000090: 			' 
//000091: 			' label5
//000092: 			' 
//000093: 			Me.label5.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_039a:  ldarg.0
    IL_039b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03a0:  ldc.i4.s   9
    IL_03a2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_03a7:  nop
//000094: 			Me.label5.AutoSize = True
    IL_03a8:  ldarg.0
    IL_03a9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03ae:  ldc.i4.1
    IL_03af:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_03b4:  nop
//000095: 			Me.label5.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
    IL_03b5:  ldarg.0
    IL_03b6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03bb:  ldstr      "Microsoft Sans Serif"
    IL_03c0:  ldc.r4     10.
    IL_03c5:  ldc.i4.1
    IL_03c6:  ldc.i4.3
    IL_03c7:  ldc.i4.0
    IL_03c8:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_03cd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_03d2:  nop
//000096: 			Me.label5.Location = New Point(454, 48)
    IL_03d3:  ldarg.0
    IL_03d4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03d9:  ldloca.s   VB$t_struct$S1
    IL_03db:  ldc.i4     0x1c6
    IL_03e0:  ldc.i4.s   48
    IL_03e2:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_03e7:  nop
    IL_03e8:  ldloc.1
    IL_03e9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_03ee:  nop
//000097: 			Me.label5.Name = "label5"
    IL_03ef:  ldarg.0
    IL_03f0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03f5:  ldstr      "label5"
    IL_03fa:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_03ff:  nop
//000098: 			Me.label5.Size = New Size(144, 17)
    IL_0400:  ldarg.0
    IL_0401:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_0406:  ldloca.s   VB$t_struct$S3
    IL_0408:  ldc.i4     0x90
    IL_040d:  ldc.i4.s   17
    IL_040f:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0414:  nop
    IL_0415:  ldloc.3
    IL_0416:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_041b:  nop
//000099: 			Me.label5.TabIndex = 8
    IL_041c:  ldarg.0
    IL_041d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_0422:  ldc.i4.8
    IL_0423:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0428:  nop
//000100: 			Me.label5.Text = "Generations / Sec:"
    IL_0429:  ldarg.0
    IL_042a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_042f:  ldstr      "Generations / Sec:"
    IL_0434:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0439:  nop
//000101: 			' 
//000102: 			' lblElapsedTime
//000103: 			' 
//000104: 			Me.lblElapsedTime.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_043a:  ldarg.0
    IL_043b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0440:  ldc.i4.s   9
    IL_0442:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0447:  nop
//000105: 			Me.lblElapsedTime.AutoSize = True
    IL_0448:  ldarg.0
    IL_0449:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_044e:  ldc.i4.1
    IL_044f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_0454:  nop
//000106: 			Me.lblElapsedTime.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
    IL_0455:  ldarg.0
    IL_0456:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_045b:  ldstr      "Microsoft Sans Serif"
    IL_0460:  ldc.r4     10.
    IL_0465:  ldc.i4.0
    IL_0466:  ldc.i4.3
    IL_0467:  ldc.i4.0
    IL_0468:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_046d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0472:  nop
//000107: 			Me.lblElapsedTime.Location = New Point(601, 9)
    IL_0473:  ldarg.0
    IL_0474:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0479:  ldloca.s   VB$t_struct$S1
    IL_047b:  ldc.i4     0x259
    IL_0480:  ldc.i4.s   9
    IL_0482:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0487:  nop
    IL_0488:  ldloc.1
    IL_0489:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_048e:  nop
//000108: 			Me.lblElapsedTime.Name = "lblElapsedTime"
    IL_048f:  ldarg.0
    IL_0490:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0495:  ldstr      "lblElapsedTime"
    IL_049a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_049f:  nop
//000109: 			Me.lblElapsedTime.Size = New Size(13, 17)
    IL_04a0:  ldarg.0
    IL_04a1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_04a6:  ldloca.s   VB$t_struct$S3
    IL_04a8:  ldc.i4.s   13
    IL_04aa:  ldc.i4.s   17
    IL_04ac:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_04b1:  nop
    IL_04b2:  ldloc.3
    IL_04b3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_04b8:  nop
//000110: 			Me.lblElapsedTime.TabIndex = 7
    IL_04b9:  ldarg.0
    IL_04ba:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_04bf:  ldc.i4.7
    IL_04c0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_04c5:  nop
//000111: 			Me.lblElapsedTime.Text = "-"
    IL_04c6:  ldarg.0
    IL_04c7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_04cc:  ldstr      "-"
    IL_04d1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_04d6:  nop
//000112: 			' 
//000113: 			' label4
//000114: 			' 
//000115: 			Me.label4.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_04d7:  ldarg.0
    IL_04d8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_04dd:  ldc.i4.s   9
    IL_04df:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_04e4:  nop
//000116: 			Me.label4.AutoSize = True
    IL_04e5:  ldarg.0
    IL_04e6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_04eb:  ldc.i4.1
    IL_04ec:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_04f1:  nop
//000117: 			Me.label4.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
    IL_04f2:  ldarg.0
    IL_04f3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_04f8:  ldstr      "Microsoft Sans Serif"
    IL_04fd:  ldc.r4     10.
    IL_0502:  ldc.i4.1
    IL_0503:  ldc.i4.3
    IL_0504:  ldc.i4.0
    IL_0505:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_050a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_050f:  nop
//000118: 			Me.label4.Location = New Point(454, 9)
    IL_0510:  ldarg.0
    IL_0511:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_0516:  ldloca.s   VB$t_struct$S1
    IL_0518:  ldc.i4     0x1c6
    IL_051d:  ldc.i4.s   9
    IL_051f:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0524:  nop
    IL_0525:  ldloc.1
    IL_0526:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_052b:  nop
//000119: 			Me.label4.Name = "label4"
    IL_052c:  ldarg.0
    IL_052d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_0532:  ldstr      "label4"
    IL_0537:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_053c:  nop
//000120: 			Me.label4.Size = New Size(48, 17)
    IL_053d:  ldarg.0
    IL_053e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_0543:  ldloca.s   VB$t_struct$S3
    IL_0545:  ldc.i4.s   48
    IL_0547:  ldc.i4.s   17
    IL_0549:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_054e:  nop
    IL_054f:  ldloc.3
    IL_0550:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0555:  nop
//000121: 			Me.label4.TabIndex = 6
    IL_0556:  ldarg.0
    IL_0557:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_055c:  ldc.i4.6
    IL_055d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0562:  nop
//000122: 			Me.label4.Text = "Time:"
    IL_0563:  ldarg.0
    IL_0564:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_0569:  ldstr      "Time:"
    IL_056e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0573:  nop
//000123: 			' 
//000124: 			' lblGenerations
//000125: 			' 
//000126: 			Me.lblGenerations.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_0574:  ldarg.0
    IL_0575:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_057a:  ldc.i4.s   9
    IL_057c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0581:  nop
//000127: 			Me.lblGenerations.AutoSize = True
    IL_0582:  ldarg.0
    IL_0583:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0588:  ldc.i4.1
    IL_0589:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_058e:  nop
//000128: 			Me.lblGenerations.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
    IL_058f:  ldarg.0
    IL_0590:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0595:  ldstr      "Microsoft Sans Serif"
    IL_059a:  ldc.r4     10.
    IL_059f:  ldc.i4.0
    IL_05a0:  ldc.i4.3
    IL_05a1:  ldc.i4.0
    IL_05a2:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_05a7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_05ac:  nop
//000129: 			Me.lblGenerations.Location = New Point(601, 29)
    IL_05ad:  ldarg.0
    IL_05ae:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_05b3:  ldloca.s   VB$t_struct$S1
    IL_05b5:  ldc.i4     0x259
    IL_05ba:  ldc.i4.s   29
    IL_05bc:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_05c1:  nop
    IL_05c2:  ldloc.1
    IL_05c3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_05c8:  nop
//000130: 			Me.lblGenerations.Name = "lblGenerations"
    IL_05c9:  ldarg.0
    IL_05ca:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_05cf:  ldstr      "lblGenerations"
    IL_05d4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_05d9:  nop
//000131: 			Me.lblGenerations.Size = New Size(13, 17)
    IL_05da:  ldarg.0
    IL_05db:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_05e0:  ldloca.s   VB$t_struct$S3
    IL_05e2:  ldc.i4.s   13
    IL_05e4:  ldc.i4.s   17
    IL_05e6:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_05eb:  nop
    IL_05ec:  ldloc.3
    IL_05ed:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_05f2:  nop
//000132: 			Me.lblGenerations.TabIndex = 5
    IL_05f3:  ldarg.0
    IL_05f4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_05f9:  ldc.i4.5
    IL_05fa:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_05ff:  nop
//000133: 			Me.lblGenerations.Text = "-"
    IL_0600:  ldarg.0
    IL_0601:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0606:  ldstr      "-"
    IL_060b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0610:  nop
//000134: 			' 
//000135: 			' label2
//000136: 			' 
//000137: 			Me.label2.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_0611:  ldarg.0
    IL_0612:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0617:  ldc.i4.s   9
    IL_0619:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_061e:  nop
//000138: 			Me.label2.AutoSize = True
    IL_061f:  ldarg.0
    IL_0620:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0625:  ldc.i4.1
    IL_0626:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_062b:  nop
//000139: 			Me.label2.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
    IL_062c:  ldarg.0
    IL_062d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0632:  ldstr      "Microsoft Sans Serif"
    IL_0637:  ldc.r4     10.
    IL_063c:  ldc.i4.1
    IL_063d:  ldc.i4.3
    IL_063e:  ldc.i4.0
    IL_063f:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_0644:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0649:  nop
//000140: 			Me.label2.Location = New Point(454, 29)
    IL_064a:  ldarg.0
    IL_064b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0650:  ldloca.s   VB$t_struct$S1
    IL_0652:  ldc.i4     0x1c6
    IL_0657:  ldc.i4.s   29
    IL_0659:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_065e:  nop
    IL_065f:  ldloc.1
    IL_0660:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0665:  nop
//000141: 			Me.label2.Name = "label2"
    IL_0666:  ldarg.0
    IL_0667:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_066c:  ldstr      "label2"
    IL_0671:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0676:  nop
//000142: 			Me.label2.Size = New Size(102, 17)
    IL_0677:  ldarg.0
    IL_0678:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_067d:  ldloca.s   VB$t_struct$S3
    IL_067f:  ldc.i4.s   102
    IL_0681:  ldc.i4.s   17
    IL_0683:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0688:  nop
    IL_0689:  ldloc.3
    IL_068a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_068f:  nop
//000143: 			Me.label2.TabIndex = 4
    IL_0690:  ldarg.0
    IL_0691:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0696:  ldc.i4.4
    IL_0697:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_069c:  nop
//000144: 			Me.label2.Text = "Generations:"
    IL_069d:  ldarg.0
    IL_069e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_06a3:  ldstr      "Generations:"
    IL_06a8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_06ad:  nop
//000145: 			' 
//000146: 			' splitContainer2
//000147: 			' 
//000148: 			Me.splitContainer2.Anchor = (CType((((AnchorStyles.Top Or AnchorStyles.Bottom) Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
    IL_06ae:  ldarg.0
    IL_06af:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_06b4:  ldc.i4.s   15
    IL_06b6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_06bb:  nop
//000149: 			Me.splitContainer2.Location = New Point(2, 68)
    IL_06bc:  ldarg.0
    IL_06bd:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_06c2:  ldloca.s   VB$t_struct$S1
    IL_06c4:  ldc.i4.2
    IL_06c5:  ldc.i4.s   68
    IL_06c7:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_06cc:  nop
    IL_06cd:  ldloc.1
    IL_06ce:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_06d3:  nop
//000150: 			Me.splitContainer2.Name = "splitContainer2"
    IL_06d4:  ldarg.0
    IL_06d5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_06da:  ldstr      "splitContainer2"
    IL_06df:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_06e4:  nop
//000151: 			' 
//000152: 			' splitContainer2.Panel1
//000153: 			' 
//000154: 			Me.splitContainer2.Panel1.Controls.Add(Me.txtBestMatch)
    IL_06e5:  ldarg.0
    IL_06e6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_06eb:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_06f0:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_06f5:  ldarg.0
    IL_06f6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_06fb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0700:  nop
//000155: 			' 
//000156: 			' splitContainer2.Panel2
//000157: 			' 
//000158: 			Me.splitContainer2.Panel2.Controls.Add(Me.txtTarget)
    IL_0701:  ldarg.0
    IL_0702:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0707:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_070c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0711:  ldarg.0
    IL_0712:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_0717:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_071c:  nop
//000159: 			Me.splitContainer2.Size = New Size(666, 321)
    IL_071d:  ldarg.0
    IL_071e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0723:  ldloca.s   VB$t_struct$S3
    IL_0725:  ldc.i4     0x29a
    IL_072a:  ldc.i4     0x141
    IL_072f:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0734:  nop
    IL_0735:  ldloc.3
    IL_0736:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_073b:  nop
//000160: 			Me.splitContainer2.SplitterDistance = 325
    IL_073c:  ldarg.0
    IL_073d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0742:  ldc.i4     0x145
    IL_0747:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_SplitterDistance(int32)
    IL_074c:  nop
//000161: 			Me.splitContainer2.TabIndex = 3
    IL_074d:  ldarg.0
    IL_074e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0753:  ldc.i4.3
    IL_0754:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0759:  nop
//000162: 			' 
//000163: 			' txtBestMatch
//000164: 			' 
//000165: 			Me.txtBestMatch.Dock = DockStyle.Fill
    IL_075a:  ldarg.0
    IL_075b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_0760:  ldc.i4.5
    IL_0761:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_0766:  nop
//000166: 			Me.txtBestMatch.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
    IL_0767:  ldarg.0
    IL_0768:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_076d:  ldstr      "Microsoft Sans Serif"
    IL_0772:  ldc.r4     12.
    IL_0777:  ldc.i4.0
    IL_0778:  ldc.i4.3
    IL_0779:  ldc.i4.0
    IL_077a:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_077f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0784:  nop
//000167: 			Me.txtBestMatch.Location = New Point(0, 0)
    IL_0785:  ldarg.0
    IL_0786:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_078b:  ldloca.s   VB$t_struct$S1
    IL_078d:  ldc.i4.0
    IL_078e:  ldc.i4.0
    IL_078f:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0794:  nop
    IL_0795:  ldloc.1
    IL_0796:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_079b:  nop
//000168: 			Me.txtBestMatch.Multiline = True
    IL_079c:  ldarg.0
    IL_079d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_07a2:  ldc.i4.1
    IL_07a3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBox::set_Multiline(bool)
    IL_07a8:  nop
//000169: 			Me.txtBestMatch.Name = "txtBestMatch"
    IL_07a9:  ldarg.0
    IL_07aa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_07af:  ldstr      "txtBestMatch"
    IL_07b4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_07b9:  nop
//000170: 			Me.txtBestMatch.Size = New Size(325, 321)
    IL_07ba:  ldarg.0
    IL_07bb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_07c0:  ldloca.s   VB$t_struct$S3
    IL_07c2:  ldc.i4     0x145
    IL_07c7:  ldc.i4     0x141
    IL_07cc:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_07d1:  nop
    IL_07d2:  ldloc.3
    IL_07d3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_07d8:  nop
//000171: 			Me.txtBestMatch.TabIndex = 3
    IL_07d9:  ldarg.0
    IL_07da:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_07df:  ldc.i4.3
    IL_07e0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_07e5:  nop
//000172: 			' 
//000173: 			' txtTarget
//000174: 			' 
//000175: 			Me.txtTarget.Dock = DockStyle.Fill
    IL_07e6:  ldarg.0
    IL_07e7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_07ec:  ldc.i4.5
    IL_07ed:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_07f2:  nop
//000176: 			Me.txtTarget.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
    IL_07f3:  ldarg.0
    IL_07f4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_07f9:  ldstr      "Microsoft Sans Serif"
    IL_07fe:  ldc.r4     12.
    IL_0803:  ldc.i4.0
    IL_0804:  ldc.i4.3
    IL_0805:  ldc.i4.0
    IL_0806:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_080b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0810:  nop
//000177: 			Me.txtTarget.Location = New Point(0, 0)
    IL_0811:  ldarg.0
    IL_0812:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_0817:  ldloca.s   VB$t_struct$S1
    IL_0819:  ldc.i4.0
    IL_081a:  ldc.i4.0
    IL_081b:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0820:  nop
    IL_0821:  ldloc.1
    IL_0822:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0827:  nop
//000178: 			Me.txtTarget.Multiline = True
    IL_0828:  ldarg.0
    IL_0829:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_082e:  ldc.i4.1
    IL_082f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBox::set_Multiline(bool)
    IL_0834:  nop
//000179: 			Me.txtTarget.Name = "txtTarget"
    IL_0835:  ldarg.0
    IL_0836:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_083b:  ldstr      "txtTarget"
    IL_0840:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0845:  nop
//000180: 			Me.txtTarget.Size = New Size(337, 321)
    IL_0846:  ldarg.0
    IL_0847:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_084c:  ldloca.s   VB$t_struct$S3
    IL_084e:  ldc.i4     0x151
    IL_0853:  ldc.i4     0x141
    IL_0858:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_085d:  nop
    IL_085e:  ldloc.3
    IL_085f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0864:  nop
//000181: 			Me.txtTarget.TabIndex = 0
    IL_0865:  ldarg.0
    IL_0866:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_086b:  ldc.i4.0
    IL_086c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0871:  nop
//000182: 			' 
//000183: 			' btnRun
//000184: 			' 
//000185: 			Me.btnRun.Font = New Font("Microsoft Sans Serif", 11F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
    IL_0872:  ldarg.0
    IL_0873:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_0878:  ldstr      "Microsoft Sans Serif"
    IL_087d:  ldc.r4     11.
    IL_0882:  ldc.i4.1
    IL_0883:  ldc.i4.3
    IL_0884:  ldc.i4.0
    IL_0885:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_088a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_088f:  nop
//000186: 			Me.btnRun.Location = New Point(17, 39)
    IL_0890:  ldarg.0
    IL_0891:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_0896:  ldloca.s   VB$t_struct$S1
    IL_0898:  ldc.i4.s   17
    IL_089a:  ldc.i4.s   39
    IL_089c:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_08a1:  nop
    IL_08a2:  ldloc.1
    IL_08a3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_08a8:  nop
//000187: 			Me.btnRun.Name = "btnRun"
    IL_08a9:  ldarg.0
    IL_08aa:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_08af:  ldstr      "btnRun"
    IL_08b4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_08b9:  nop
//000188: 			Me.btnRun.Size = New Size(83, 26)
    IL_08ba:  ldarg.0
    IL_08bb:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_08c0:  ldloca.s   VB$t_struct$S3
    IL_08c2:  ldc.i4.s   83
    IL_08c4:  ldc.i4.s   26
    IL_08c6:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_08cb:  nop
    IL_08cc:  ldloc.3
    IL_08cd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_08d2:  nop
//000189: 			Me.btnRun.TabIndex = 2
    IL_08d3:  ldarg.0
    IL_08d4:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_08d9:  ldc.i4.2
    IL_08da:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_08df:  nop
//000190: 			Me.btnRun.Text = "Start"
    IL_08e0:  ldarg.0
    IL_08e1:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_08e6:  ldstr      "Start"
    IL_08eb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_08f0:  nop
//000191: 			Me.btnRun.UseVisualStyleBackColor = True
    IL_08f1:  ldarg.0
    IL_08f2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_08f7:  ldc.i4.1
    IL_08f8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_08fd:  nop
//000192: '			Me.btnRun.Click += New System.EventHandler(Me.btnRun_Click)
//000193: 			' 
//000194: 			' txtMonkeysPerGeneration
//000195: 			' 
//000196: 			Me.txtMonkeysPerGeneration.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
    IL_08fe:  ldarg.0
    IL_08ff:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_0904:  ldstr      "Microsoft Sans Serif"
    IL_0909:  ldc.r4     12.
    IL_090e:  ldc.i4.1
    IL_090f:  ldc.i4.3
    IL_0910:  ldc.i4.0
    IL_0911:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_0916:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_091b:  nop
//000197: 			Me.txtMonkeysPerGeneration.Location = New Point(225, 12)
    IL_091c:  ldarg.0
    IL_091d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_0922:  ldloca.s   VB$t_struct$S1
    IL_0924:  ldc.i4     0xe1
    IL_0929:  ldc.i4.s   12
    IL_092b:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0930:  nop
    IL_0931:  ldloc.1
    IL_0932:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0937:  nop
//000198: 			Me.txtMonkeysPerGeneration.Name = "txtMonkeysPerGeneration"
    IL_0938:  ldarg.0
    IL_0939:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_093e:  ldstr      "txtMonkeysPerGeneration"
    IL_0943:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0948:  nop
//000199: 			Me.txtMonkeysPerGeneration.Size = New Size(50, 26)
    IL_0949:  ldarg.0
    IL_094a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_094f:  ldloca.s   VB$t_struct$S3
    IL_0951:  ldc.i4.s   50
    IL_0953:  ldc.i4.s   26
    IL_0955:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_095a:  nop
    IL_095b:  ldloc.3
    IL_095c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0961:  nop
//000200: 			Me.txtMonkeysPerGeneration.TabIndex = 1
    IL_0962:  ldarg.0
    IL_0963:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_0968:  ldc.i4.1
    IL_0969:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_096e:  nop
//000201: 			Me.txtMonkeysPerGeneration.Text = "2000"
    IL_096f:  ldarg.0
    IL_0970:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_0975:  ldstr      "2000"
    IL_097a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBox::set_Text(string)
    IL_097f:  nop
//000202: 			' 
//000203: 			' label1
//000204: 			' 
//000205: 			Me.label1.AutoSize = True
    IL_0980:  ldarg.0
    IL_0981:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_0986:  ldc.i4.1
    IL_0987:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_098c:  nop
//000206: 			Me.label1.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
    IL_098d:  ldarg.0
    IL_098e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_0993:  ldstr      "Microsoft Sans Serif"
    IL_0998:  ldc.r4     12.
    IL_099d:  ldc.i4.1
    IL_099e:  ldc.i4.3
    IL_099f:  ldc.i4.0
    IL_09a0:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_09a5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_09aa:  nop
//000207: 			Me.label1.Location = New Point(13, 13)
    IL_09ab:  ldarg.0
    IL_09ac:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_09b1:  ldloca.s   VB$t_struct$S1
    IL_09b3:  ldc.i4.s   13
    IL_09b5:  ldc.i4.s   13
    IL_09b7:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_09bc:  nop
    IL_09bd:  ldloc.1
    IL_09be:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_09c3:  nop
//000208: 			Me.label1.Name = "label1"
    IL_09c4:  ldarg.0
    IL_09c5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_09ca:  ldstr      "label1"
    IL_09cf:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_09d4:  nop
//000209: 			Me.label1.Size = New Size(206, 20)
    IL_09d5:  ldarg.0
    IL_09d6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_09db:  ldloca.s   VB$t_struct$S3
    IL_09dd:  ldc.i4     0xce
    IL_09e2:  ldc.i4.s   20
    IL_09e4:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_09e9:  nop
    IL_09ea:  ldloc.3
    IL_09eb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_09f0:  nop
//000210: 			Me.label1.TabIndex = 0
    IL_09f1:  ldarg.0
    IL_09f2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_09f7:  ldc.i4.0
    IL_09f8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_09fd:  nop
//000211: 			Me.label1.Text = "Monkeys Per Generation"
    IL_09fe:  ldarg.0
    IL_09ff:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_0a04:  ldstr      "Monkeys Per Generation"
    IL_0a09:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0a0e:  nop
//000212: 			' 
//000213: 			' timerElapsedTime
//000214: 			' 
//000215: 			Me.timerElapsedTime.Interval = 1000
    IL_0a0f:  ldarg.0
    IL_0a10:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::get_timerElapsedTime()
    IL_0a15:  ldc.i4     0x3e8
    IL_0a1a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::set_Interval(int32)
    IL_0a1f:  nop
//000216: '			Me.timerElapsedTime.Tick += New System.EventHandler(Me.timerElapsedTime_Tick)
//000217: 			' 
//000218: 			' chkParallel
//000219: 			' 
//000220: 			Me.chkParallel.AutoSize = True
    IL_0a20:  ldarg.0
    IL_0a21:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a26:  ldc.i4.1
    IL_0a27:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_AutoSize(bool)
    IL_0a2c:  nop
//000221: 			Me.chkParallel.Location = New Point(106, 45)
    IL_0a2d:  ldarg.0
    IL_0a2e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a33:  ldloca.s   VB$t_struct$S1
    IL_0a35:  ldc.i4.s   106
    IL_0a37:  ldc.i4.s   45
    IL_0a39:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0a3e:  nop
    IL_0a3f:  ldloc.1
    IL_0a40:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0a45:  nop
//000222: 			Me.chkParallel.Name = "chkParallel"
    IL_0a46:  ldarg.0
    IL_0a47:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a4c:  ldstr      "chkParallel"
    IL_0a51:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0a56:  nop
//000223: 			Me.chkParallel.Size = New Size(60, 17)
    IL_0a57:  ldarg.0
    IL_0a58:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a5d:  ldloca.s   VB$t_struct$S3
    IL_0a5f:  ldc.i4.s   60
    IL_0a61:  ldc.i4.s   17
    IL_0a63:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0a68:  nop
    IL_0a69:  ldloc.3
    IL_0a6a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0a6f:  nop
//000224: 			Me.chkParallel.TabIndex = 10
    IL_0a70:  ldarg.0
    IL_0a71:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a76:  ldc.i4.s   10
    IL_0a78:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0a7d:  nop
//000225: 			Me.chkParallel.Text = "Parallel"
    IL_0a7e:  ldarg.0
    IL_0a7f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a84:  ldstr      "Parallel"
    IL_0a89:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0a8e:  nop
//000226: 			Me.chkParallel.UseVisualStyleBackColor = True
    IL_0a8f:  ldarg.0
    IL_0a90:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a95:  ldc.i4.1
    IL_0a96:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_0a9b:  nop
//000227: 			' 
//000228: 			' pictureBox1
//000229: 			' 
//000230: 			Me.pictureBox1.BackColor = Color.Transparent
    IL_0a9c:  ldarg.0
    IL_0a9d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0aa2:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_Transparent()
    IL_0aa7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0aac:  nop
//000231: 			Me.pictureBox1.Dock = DockStyle.Fill
    IL_0aad:  ldarg.0
    IL_0aae:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0ab3:  ldc.i4.5
    IL_0ab4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_0ab9:  nop
//000232: 			Me.pictureBox1.Image = My.Resources.HamletMonkey
    IL_0aba:  ldarg.0
    IL_0abb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0ac0:  call       class [System.Drawing]System.Drawing.Bitmap My.Resources.Resources::get_HamletMonkey()
    IL_0ac5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
    IL_0aca:  nop
//000233: 			Me.pictureBox1.Location = New Point(0, 0)
    IL_0acb:  ldarg.0
    IL_0acc:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0ad1:  ldloca.s   VB$t_struct$S1
    IL_0ad3:  ldc.i4.0
    IL_0ad4:  ldc.i4.0
    IL_0ad5:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0ada:  nop
    IL_0adb:  ldloc.1
    IL_0adc:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0ae1:  nop
//000234: 			Me.pictureBox1.Name = "pictureBox1"
    IL_0ae2:  ldarg.0
    IL_0ae3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0ae8:  ldstr      "pictureBox1"
    IL_0aed:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0af2:  nop
//000235: 			Me.pictureBox1.Size = New Size(301, 389)
    IL_0af3:  ldarg.0
    IL_0af4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0af9:  ldloca.s   VB$t_struct$S3
    IL_0afb:  ldc.i4     0x12d
    IL_0b00:  ldc.i4     0x185
    IL_0b05:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0b0a:  nop
    IL_0b0b:  ldloc.3
    IL_0b0c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0b11:  nop
//000236: 			Me.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom
    IL_0b12:  ldarg.0
    IL_0b13:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0b18:  ldc.i4.4
    IL_0b19:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_SizeMode(valuetype [System.Windows.Forms]System.Windows.Forms.PictureBoxSizeMode)
    IL_0b1e:  nop
//000237: 			Me.pictureBox1.TabIndex = 0
    IL_0b1f:  ldarg.0
    IL_0b20:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0b25:  ldc.i4.0
    IL_0b26:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabIndex(int32)
    IL_0b2b:  nop
//000238: 			Me.pictureBox1.TabStop = False
    IL_0b2c:  ldarg.0
    IL_0b2d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0b32:  ldc.i4.0
    IL_0b33:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabStop(bool)
    IL_0b38:  nop
//000239: 			' 
//000240: 			' MainForm
//000241: 			' 
//000242: 			Me.AutoScaleDimensions = New SizeF(6F, 13F)
    IL_0b39:  ldarg.0
    IL_0b3a:  ldloca.s   VB$t_struct$S6
    IL_0b3c:  ldc.r4     6.
    IL_0b41:  ldc.r4     13.
    IL_0b46:  call       instance void [System.Drawing]System.Drawing.SizeF::.ctor(float32,
                                                                                   float32)
    IL_0b4b:  nop
    IL_0b4c:  ldloc.s    VB$t_struct$S6
    IL_0b4e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleDimensions(valuetype [System.Drawing]System.Drawing.SizeF)
    IL_0b53:  nop
//000243: 			Me.AutoScaleMode = AutoScaleMode.Font
    IL_0b54:  ldarg.0
    IL_0b55:  ldc.i4.1
    IL_0b56:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleMode(valuetype [System.Windows.Forms]System.Windows.Forms.AutoScaleMode)
    IL_0b5b:  nop
//000244: 			Me.BackColor = Color.White
    IL_0b5c:  ldarg.0
    IL_0b5d:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_White()
    IL_0b62:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0b67:  nop
//000245: 			Me.ClientSize = New Size(973, 389)
    IL_0b68:  ldarg.0
    IL_0b69:  ldloca.s   VB$t_struct$S3
    IL_0b6b:  ldc.i4     0x3cd
    IL_0b70:  ldc.i4     0x185
    IL_0b75:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0b7a:  nop
    IL_0b7b:  ldloc.3
    IL_0b7c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_ClientSize(valuetype [System.Drawing]System.Drawing.Size)
    IL_0b81:  nop
//000246: 			Me.Controls.Add(Me.splitContainer1)
    IL_0b82:  ldarg.0
    IL_0b83:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b88:  ldarg.0
    IL_0b89:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0b8e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b93:  nop
//000247: 			Me.Name = "MainForm"
    IL_0b94:  ldarg.0
    IL_0b95:  ldstr      "MainForm"
    IL_0b9a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0b9f:  nop
//000248: 			Me.Text = "Shakespearean Monkeys"
    IL_0ba0:  ldarg.0
    IL_0ba1:  ldstr      "Shakespearean Monkeys"
    IL_0ba6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_Text(string)
    IL_0bab:  nop
//000249: 			Me.splitContainer1.Panel1.ResumeLayout(False)
    IL_0bac:  ldarg.0
    IL_0bad:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0bb2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0bb7:  ldc.i4.0
    IL_0bb8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0bbd:  nop
//000250: 			Me.splitContainer1.Panel2.ResumeLayout(False)
    IL_0bbe:  ldarg.0
    IL_0bbf:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0bc4:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0bc9:  ldc.i4.0
    IL_0bca:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0bcf:  nop
//000251: 			Me.splitContainer1.Panel2.PerformLayout()
    IL_0bd0:  ldarg.0
    IL_0bd1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0bd6:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0bdb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0be0:  nop
//000252: 			CType(Me.splitContainer1, System.ComponentModel.ISupportInitialize).EndInit()
    IL_0be1:  ldarg.0
    IL_0be2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0be7:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0bec:  nop
//000253: 			Me.splitContainer1.ResumeLayout(False)
    IL_0bed:  ldarg.0
    IL_0bee:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0bf3:  ldc.i4.0
    IL_0bf4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0bf9:  nop
//000254: 			Me.splitContainer2.Panel1.ResumeLayout(False)
    IL_0bfa:  ldarg.0
    IL_0bfb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0c00:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0c05:  ldc.i4.0
    IL_0c06:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0c0b:  nop
//000255: 			Me.splitContainer2.Panel1.PerformLayout()
    IL_0c0c:  ldarg.0
    IL_0c0d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0c12:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0c17:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0c1c:  nop
//000256: 			Me.splitContainer2.Panel2.ResumeLayout(False)
    IL_0c1d:  ldarg.0
    IL_0c1e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0c23:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0c28:  ldc.i4.0
    IL_0c29:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0c2e:  nop
//000257: 			Me.splitContainer2.Panel2.PerformLayout()
    IL_0c2f:  ldarg.0
    IL_0c30:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0c35:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0c3a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0c3f:  nop
//000258: 			CType(Me.splitContainer2, System.ComponentModel.ISupportInitialize).EndInit()
    IL_0c40:  ldarg.0
    IL_0c41:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0c46:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0c4b:  nop
//000259: 			Me.splitContainer2.ResumeLayout(False)
    IL_0c4c:  ldarg.0
    IL_0c4d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0c52:  ldc.i4.0
    IL_0c53:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0c58:  nop
//000260: 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).EndInit()
    IL_0c59:  ldarg.0
    IL_0c5a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0c5f:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0c64:  nop
//000261: 			Me.ResumeLayout(False)
    IL_0c65:  ldarg.0
    IL_0c66:  ldc.i4.0
    IL_0c67:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0c6c:  nop
//000262: 
//000263: 		End Sub
    IL_0c6d:  nop
    IL_0c6e:  ret
  } // end of method MainForm::InitializeComponent

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.Button 
          get_btnRun() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.Button V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::_btnRun
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_btnRun

  .method private newslot specialname strict virtual 
          instance void  set_btnRun(class [System.Windows.Forms]System.Windows.Forms.Button WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void ShakespeareanMonkeys.MainForm::btnRun_Click(object,
                                                                                   class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::_btnRun
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::_btnRun
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::remove_Click(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::_btnRun
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::_btnRun
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::_btnRun
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_Click(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_btnRun

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.Timer 
          get_timerElapsedTime() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.Timer V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::_timerElapsedTime
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_timerElapsedTime

  .method private newslot specialname strict virtual 
          instance void  set_timerElapsedTime(class [System.Windows.Forms]System.Windows.Forms.Timer WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void ShakespeareanMonkeys.MainForm::timerElapsedTime_Tick(object,
                                                                                            class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::_timerElapsedTime
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::_timerElapsedTime
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::remove_Tick(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::_timerElapsedTime
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::_timerElapsedTime
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::_timerElapsedTime
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::add_Tick(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_timerElapsedTime

  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       112 (0x70)
    .maxstack  3
    .locals init ([0] string[] VB$t_array$S0)
//000264: 
//000265: 		#End Region
//000266: 
//000267:         Private pictureBox1 As PictureBox
//000268: 		Private splitContainer1 As SplitContainer
//000269: 		Private label1 As Label
//000270: 		Private txtMonkeysPerGeneration As TextBox
//000271: 		Private WithEvents btnRun As Button
//000272: 		Private splitContainer2 As SplitContainer
//000273: 		Private txtBestMatch As TextBox
//000274: 		Private txtTarget As TextBox
//000275: 		Private lblElapsedTime As Label
//000276: 		Private label4 As Label
//000277: 		Private lblGenerations As Label
//000278: 		Private label2 As Label
//000279: 		Private WithEvents timerElapsedTime As Timer
//000280: 		Private lblGenPerSec As Label
//000281: 		Private label5 As Label
//000282: 		Private chkParallel As CheckBox
//000283: 	End Class
//000284: End Namespace
//000285: 
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> ShakespeareanMonkeys.MainForm::__ENCList
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb' 
//000018:         Private Shared _targetText As String =
    IL_000a:  ldc.i4.s   9
    IL_000c:  newarr     [mscorlib]System.String
    IL_0011:  stloc.0
    IL_0012:  ldloc.0
    IL_0013:  ldc.i4.0
    IL_0014:  ldstr      "To be or not to be, that is the question;"
    IL_0019:  stelem.ref
    IL_001a:  nop
    IL_001b:  ldloc.0
    IL_001c:  ldc.i4.1
    IL_001d:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0022:  stelem.ref
    IL_0023:  nop
    IL_0024:  ldloc.0
    IL_0025:  ldc.i4.2
    IL_0026:  ldstr      "Whether 'tis nobler in the mind to suffer"
    IL_002b:  stelem.ref
    IL_002c:  nop
    IL_002d:  ldloc.0
    IL_002e:  ldc.i4.3
    IL_002f:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0034:  stelem.ref
    IL_0035:  nop
    IL_0036:  ldloc.0
    IL_0037:  ldc.i4.4
    IL_0038:  ldstr      "The slings and arrows of outrageous fortune,"
    IL_003d:  stelem.ref
    IL_003e:  nop
    IL_003f:  ldloc.0
    IL_0040:  ldc.i4.5
    IL_0041:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0046:  stelem.ref
    IL_0047:  nop
    IL_0048:  ldloc.0
    IL_0049:  ldc.i4.6
    IL_004a:  ldstr      "Or to take arms against a sea of troubles,"
    IL_004f:  stelem.ref
    IL_0050:  nop
    IL_0051:  ldloc.0
    IL_0052:  ldc.i4.7
    IL_0053:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0058:  stelem.ref
    IL_0059:  nop
    IL_005a:  ldloc.0
    IL_005b:  ldc.i4.8
    IL_005c:  ldstr      "And by opposing, end them."
    IL_0061:  stelem.ref
    IL_0062:  nop
    IL_0063:  ldloc.0
    IL_0064:  call       string [mscorlib]System.String::Concat(string[])
    IL_0069:  stsfld     string ShakespeareanMonkeys.MainForm::_targetText
    IL_006e:  nop
    IL_006f:  ret
  } // end of method MainForm::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       86 (0x56)
    .maxstack  2
//000019:          "To be or not to be, that is the question;" & Environment.NewLine &
//000020:          "Whether 'tis nobler in the mind to suffer" & Environment.NewLine &
//000021:          "The slings and arrows of outrageous fortune," & Environment.NewLine & "Or to take arms against a sea of troubles," &
//000022:          Environment.NewLine & "And by opposing, end them."
//000023:         Private _uiTasks As TaskFactory
//000024: 
//000025:         Public Sub New()
    IL_0000:  nop
//000026:             InitializeComponent()
//000027: 
//000028:             txtTarget.Text = _targetText
//000029:             _uiTasks = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
//000030:         End Sub
//000031: 
//000032:         Private _currentIteration As Integer
//000033:         Private _cancellation As CancellationTokenSource
//000034: 
//000035:         Private Sub btnRun_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnRun.Click
//000036:             If _cancellation Is Nothing Then
//000037:                 _cancellation = New CancellationTokenSource()
//000038:                 Dim settings = New GeneticAlgorithmSettings With {.PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text)}
//000039: 
//000040:                 txtBestMatch.BackColor = SystemColors.Window
//000041:                 lblGenerations.BackColor = SystemColors.Control
//000042:                 lblGenerations.Text = "-"
//000043:                 lblGenPerSec.Text = lblGenerations.Text
//000044:                 lblElapsedTime.Text = "0"
//000045:                 btnRun.Text = "Cancel"
//000046:                 chkParallel.Visible = False
//000047: 
//000048:                 _lastTime = DateTimeOffset.Now
//000049:                 _startTime = _lastTime
//000050:                 timerElapsedTime.Start()
//000051: 
//000052:                 ' Run the work in the background.
//000053:                 _cancellation = New CancellationTokenSource()
//000054:                 Dim token = _cancellation.Token
//000055:                 Dim runParallel = chkParallel.Checked
//000056: 
//000057:                 ' When the task completes, update the UI.
//000058:                 Task.Factory.StartNew(Sub()
//000059:                                           ' Create the new genetic algorithm.
//000060:                                           Dim ga = New TextMatchGeneticAlgorithm(runParallel, _targetText, settings)
//000061:                                           Dim bestGenome? As TextMatchGenome = Nothing
//000062:                                           _currentIteration = 1
//000063:                                           ' Iterate until a solution is found or until cancellation is requested.
//000064:                                           Do
//000065:                                               token.ThrowIfCancellationRequested()
//000066: 
//000067:                                               ' Move to the next generation.
//000068:                                               ga.MoveNext()
//000069:                                               ' If we've found the best solution thus far, update the UI.
//000070:                                               If bestGenome Is Nothing OrElse ga.CurrentBest.Fitness < bestGenome.Value.Fitness Then
//000071:                                                   bestGenome = ga.CurrentBest
//000072:                                                   _uiTasks.StartNew(Sub()
//000073:                                                                         txtBestMatch.Text = bestGenome.Value.Text
//000074:                                                                     End Sub)
//000075:                                                   ' If we've found the solution, bail.
//000076:                                                   If bestGenome.Value.Text = _targetText Then
//000077:                                                       Exit Do
//000078:                                                   End If
//000079:                                               End If
//000080:                                               _currentIteration += 1
//000081:                                           Loop
//000082:                                       End Sub, token).ContinueWith(Sub(t)
//000083:                                                                        timerElapsedTime.Stop()
//000084:                                                                        chkParallel.Visible = True
//000085:                                                                        btnRun.Text = "Start"
//000086:                                                                        _cancellation = Nothing
//000087: 
//000088:                                                                        Select Case t.Status
//000089:                                                                            Case TaskStatus.Faulted
//000090:                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
//000091:                                                                            Case TaskStatus.RanToCompletion
//000092:                                                                                txtBestMatch.BackColor = Color.LightGreen
//000093:                                                                                lblGenerations.BackColor = Color.LemonChiffon
//000094:                                                                        End Select
//000095: 
//000096:                                                                    End Sub, _uiTasks.Scheduler)
//000097: 
//000098:             Else
//000099:                 _cancellation.Cancel()
//000100:             End If
//000101: 
//000102: 
//000103:         End Sub
//000104: 
//000105:         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
//000106:         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
//000107: 
//000108:         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
//000109:             Dim now = DateTimeOffset.Now
//000110:             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
//000111: 
//000112:             lblElapsedTime.Text = elapsed.ToString()
//000113:             lblGenerations.Text = _currentIteration.ToString()
//000114: 
//000115:             If elapsed > 2 Then
//000116:                 Dim diffSeconds = (now - _lastTime).TotalSeconds
//000117:                 If diffSeconds > 0 Then
//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
//000119:                 End If
//000120:             End If
//000121:         End Sub
//000122:     End Class
//000123: End Namespace
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::.ctor()
    IL_0007:  nop
    IL_0008:  ldarg.0
    IL_0009:  call       void ShakespeareanMonkeys.MainForm::__ENCAddToList(object)
    IL_000e:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.Designer.vb' 
//000006:         Private components As System.ComponentModel.IContainer = Nothing
    IL_000f:  ldarg.0
    IL_0010:  ldnull
    IL_0011:  stfld      class [System]System.ComponentModel.IContainer ShakespeareanMonkeys.MainForm::components
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb' 
//000105:         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
    IL_0016:  ldarg.0
    IL_0017:  ldsfld     valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::MinValue
    IL_001c:  stfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_startTime
//000106:         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
    IL_0021:  ldarg.0
    IL_0022:  ldsfld     valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::MinValue
    IL_0027:  stfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_lastTime
//000026:             InitializeComponent()
    IL_002c:  ldarg.0
    IL_002d:  callvirt   instance void ShakespeareanMonkeys.MainForm::InitializeComponent()
    IL_0032:  nop
//000027: 
//000028:             txtTarget.Text = _targetText
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_0039:  ldsfld     string ShakespeareanMonkeys.MainForm::_targetText
    IL_003e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBox::set_Text(string)
    IL_0043:  nop
//000029:             _uiTasks = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
    IL_0044:  ldarg.0
    IL_0045:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_004a:  newobj     instance void [mscorlib]System.Threading.Tasks.TaskFactory::.ctor(class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_004f:  stfld      class [mscorlib]System.Threading.Tasks.TaskFactory ShakespeareanMonkeys.MainForm::_uiTasks
//000030:         End Sub
    IL_0054:  nop
    IL_0055:  ret
  } // end of method MainForm::.ctor

  .method private instance void  btnRun_Click(object sender,
                                              class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       355 (0x163)
    .maxstack  3
    .locals init ([0] class ShakespeareanMonkeys.MainForm/_Closure$__1 $VB$Closure_ClosureVariable_23_C,
             [1] class ShakespeareanMonkeys.GeneticAlgorithmSettings VB$t_ref$S0,
             [2] valuetype [System.Drawing]System.Drawing.Color VB$t_struct$N0,
             [3] bool VB$CG$t_bool$S0)
//000031: 
//000032:         Private _currentIteration As Integer
//000033:         Private _cancellation As CancellationTokenSource
//000034: 
//000035:         Private Sub btnRun_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnRun.Click
    IL_0000:  nop
//000036:             If _cancellation Is Nothing Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  stloc.3
//000037:                 _cancellation = New CancellationTokenSource()
//000038:                 Dim settings = New GeneticAlgorithmSettings With {.PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text)}
//000039: 
//000040:                 txtBestMatch.BackColor = SystemColors.Window
//000041:                 lblGenerations.BackColor = SystemColors.Control
//000042:                 lblGenerations.Text = "-"
//000043:                 lblGenPerSec.Text = lblGenerations.Text
//000044:                 lblElapsedTime.Text = "0"
//000045:                 btnRun.Text = "Cancel"
//000046:                 chkParallel.Visible = False
//000047: 
//000048:                 _lastTime = DateTimeOffset.Now
//000049:                 _startTime = _lastTime
//000050:                 timerElapsedTime.Start()
//000051: 
//000052:                 ' Run the work in the background.
//000053:                 _cancellation = New CancellationTokenSource()
//000054:                 Dim token = _cancellation.Token
//000055:                 Dim runParallel = chkParallel.Checked
//000056: 
//000057:                 ' When the task completes, update the UI.
//000058:                 Task.Factory.StartNew(Sub()
//000059:                                           ' Create the new genetic algorithm.
//000060:                                           Dim ga = New TextMatchGeneticAlgorithm(runParallel, _targetText, settings)
//000061:                                           Dim bestGenome? As TextMatchGenome = Nothing
//000062:                                           _currentIteration = 1
//000063:                                           ' Iterate until a solution is found or until cancellation is requested.
//000064:                                           Do
//000065:                                               token.ThrowIfCancellationRequested()
//000066: 
//000067:                                               ' Move to the next generation.
//000068:                                               ga.MoveNext()
//000069:                                               ' If we've found the best solution thus far, update the UI.
//000070:                                               If bestGenome Is Nothing OrElse ga.CurrentBest.Fitness < bestGenome.Value.Fitness Then
//000071:                                                   bestGenome = ga.CurrentBest
//000072:                                                   _uiTasks.StartNew(Sub()
//000073:                                                                         txtBestMatch.Text = bestGenome.Value.Text
//000074:                                                                     End Sub)
//000075:                                                   ' If we've found the solution, bail.
//000076:                                                   If bestGenome.Value.Text = _targetText Then
//000077:                                                       Exit Do
//000078:                                                   End If
//000079:                                               End If
//000080:                                               _currentIteration += 1
//000081:                                           Loop
//000082:                                       End Sub, token).ContinueWith(Sub(t)
//000083:                                                                        timerElapsedTime.Stop()
//000084:                                                                        chkParallel.Visible = True
//000085:                                                                        btnRun.Text = "Start"
//000086:                                                                        _cancellation = Nothing
//000087: 
//000088:                                                                        Select Case t.Status
//000089:                                                                            Case TaskStatus.Faulted
//000090:                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
//000091:                                                                            Case TaskStatus.RanToCompletion
//000092:                                                                                txtBestMatch.BackColor = Color.LightGreen
//000093:                                                                                lblGenerations.BackColor = Color.LemonChiffon
//000094:                                                                        End Select
//000095: 
//000096:                                                                    End Sub, _uiTasks.Scheduler)
//000097: 
//000098:             Else
//000099:                 _cancellation.Cancel()
//000100:             End If
//000101: 
//000102: 
//000103:         End Sub
//000104: 
//000105:         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
//000106:         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
//000107: 
//000108:         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
//000109:             Dim now = DateTimeOffset.Now
//000110:             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
//000111: 
//000112:             lblElapsedTime.Text = elapsed.ToString()
//000113:             lblGenerations.Text = _currentIteration.ToString()
//000114: 
//000115:             If elapsed > 2 Then
//000116:                 Dim diffSeconds = (now - _lastTime).TotalSeconds
//000117:                 If diffSeconds > 0 Then
//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
//000119:                 End If
//000120:             End If
//000121:         End Sub
//000122:     End Class
//000123: End Namespace
    IL_000b:  ldloc.3
    IL_000c:  brfalse    IL_0153

    IL_0011:  newobj     instance void ShakespeareanMonkeys.MainForm/_Closure$__1::.ctor()
    IL_0016:  stloc.0
    IL_0017:  ldloc.0
    IL_0018:  ldarg.0
    IL_0019:  stfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Me
//000037:                 _cancellation = New CancellationTokenSource()
    IL_001e:  ldarg.0
    IL_001f:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_0024:  stfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
//000038:                 Dim settings = New GeneticAlgorithmSettings With {.PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text)}
    IL_0029:  ldloc.0
    IL_002a:  newobj     instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::.ctor()
    IL_002f:  stloc.1
    IL_0030:  ldloc.1
    IL_0031:  ldarg.0
    IL_0032:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_0037:  callvirt   instance string [System.Windows.Forms]System.Windows.Forms.TextBox::get_Text()
    IL_003c:  call       int32 [mscorlib]System.Int32::Parse(string)
    IL_0041:  callvirt   instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::set_PopulationSize(int32)
    IL_0046:  nop
    IL_0047:  ldloc.1
    IL_0048:  stfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_settings
//000039: 
//000040:                 txtBestMatch.BackColor = SystemColors.Window
    IL_004d:  ldarg.0
    IL_004e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_0053:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.SystemColors::get_Window()
    IL_0058:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBoxBase::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_005d:  nop
//000041:                 lblGenerations.BackColor = SystemColors.Control
    IL_005e:  ldarg.0
    IL_005f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0064:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.SystemColors::get_Control()
    IL_0069:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_006e:  nop
//000042:                 lblGenerations.Text = "-"
    IL_006f:  ldarg.0
    IL_0070:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0075:  ldstr      "-"
    IL_007a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_007f:  nop
//000043:                 lblGenPerSec.Text = lblGenerations.Text
    IL_0080:  ldarg.0
    IL_0081:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0086:  ldarg.0
    IL_0087:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_008c:  callvirt   instance string [System.Windows.Forms]System.Windows.Forms.Label::get_Text()
    IL_0091:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0096:  nop
//000044:                 lblElapsedTime.Text = "0"
    IL_0097:  ldarg.0
    IL_0098:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_009d:  ldstr      "0"
    IL_00a2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_00a7:  nop
//000045:                 btnRun.Text = "Cancel"
    IL_00a8:  ldarg.0
    IL_00a9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_00ae:  ldstr      "Cancel"
    IL_00b3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_00b8:  nop
//000046:                 chkParallel.Visible = False
    IL_00b9:  ldarg.0
    IL_00ba:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_00bf:  ldc.i4.0
    IL_00c0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_00c5:  nop
//000047: 
//000048:                 _lastTime = DateTimeOffset.Now
    IL_00c6:  ldarg.0
    IL_00c7:  call       valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::get_Now()
    IL_00cc:  stfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_lastTime
//000049:                 _startTime = _lastTime
    IL_00d1:  ldarg.0
    IL_00d2:  ldarg.0
    IL_00d3:  ldfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_lastTime
    IL_00d8:  stfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_startTime
//000050:                 timerElapsedTime.Start()
    IL_00dd:  ldarg.0
    IL_00de:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::get_timerElapsedTime()
    IL_00e3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::Start()
    IL_00e8:  nop
//000051: 
//000052:                 ' Run the work in the background.
//000053:                 _cancellation = New CancellationTokenSource()
    IL_00e9:  ldarg.0
    IL_00ea:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_00ef:  stfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
//000054:                 Dim token = _cancellation.Token
    IL_00f4:  ldloc.0
    IL_00f5:  ldarg.0
    IL_00f6:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
    IL_00fb:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_0100:  stfld      valuetype [mscorlib]System.Threading.CancellationToken ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_token
//000055:                 Dim runParallel = chkParallel.Checked
    IL_0105:  ldloc.0
    IL_0106:  ldarg.0
    IL_0107:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_010c:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_0111:  stfld      bool ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_runParallel
//000056: 
//000057:                 ' When the task completes, update the UI.
//000058:                 Task.Factory.StartNew(Sub()
    IL_0116:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_011b:  ldloc.0
    IL_011c:  dup
    IL_011d:  ldvirtftn  instance void ShakespeareanMonkeys.MainForm/_Closure$__1::_Lambda$__2()
    IL_0123:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0128:  ldloc.0
    IL_0129:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken ShakespeareanMonkeys.MainForm/_Closure$__1::$VB$Local_token
    IL_012e:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_0133:  ldarg.0
    IL_0134:  dup
    IL_0135:  ldvirtftn  instance void ShakespeareanMonkeys.MainForm::_Lambda$__1(class [mscorlib]System.Threading.Tasks.Task)
    IL_013b:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>::.ctor(object,
                                                                                                                           native int)
    IL_0140:  ldarg.0
    IL_0141:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory ShakespeareanMonkeys.MainForm::_uiTasks
    IL_0146:  callvirt   instance class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskFactory::get_Scheduler()
    IL_014b:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>,
                                                                                                                                  class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_0150:  pop
    IL_0151:  br.s       IL_0160

//000059:                                           ' Create the new genetic algorithm.
//000060:                                           Dim ga = New TextMatchGeneticAlgorithm(runParallel, _targetText, settings)
//000061:                                           Dim bestGenome? As TextMatchGenome = Nothing
//000062:                                           _currentIteration = 1
//000063:                                           ' Iterate until a solution is found or until cancellation is requested.
//000064:                                           Do
//000065:                                               token.ThrowIfCancellationRequested()
//000066: 
//000067:                                               ' Move to the next generation.
//000068:                                               ga.MoveNext()
//000069:                                               ' If we've found the best solution thus far, update the UI.
//000070:                                               If bestGenome Is Nothing OrElse ga.CurrentBest.Fitness < bestGenome.Value.Fitness Then
//000071:                                                   bestGenome = ga.CurrentBest
//000072:                                                   _uiTasks.StartNew(Sub()
//000073:                                                                         txtBestMatch.Text = bestGenome.Value.Text
//000074:                                                                     End Sub)
//000075:                                                   ' If we've found the solution, bail.
//000076:                                                   If bestGenome.Value.Text = _targetText Then
//000077:                                                       Exit Do
//000078:                                                   End If
//000079:                                               End If
//000080:                                               _currentIteration += 1
//000081:                                           Loop
//000082:                                       End Sub, token).ContinueWith(Sub(t)
//000083:                                                                        timerElapsedTime.Stop()
//000084:                                                                        chkParallel.Visible = True
//000085:                                                                        btnRun.Text = "Start"
//000086:                                                                        _cancellation = Nothing
//000087: 
//000088:                                                                        Select Case t.Status
//000089:                                                                            Case TaskStatus.Faulted
//000090:                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
//000091:                                                                            Case TaskStatus.RanToCompletion
//000092:                                                                                txtBestMatch.BackColor = Color.LightGreen
//000093:                                                                                lblGenerations.BackColor = Color.LemonChiffon
//000094:                                                                        End Select
//000095: 
//000096:                                                                    End Sub, _uiTasks.Scheduler)
//000097: 
//000098:             Else
    IL_0153:  nop
//000099:                 _cancellation.Cancel()
    IL_0154:  ldarg.0
    IL_0155:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
    IL_015a:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_015f:  nop
//000100:             End If
    IL_0160:  nop
//000101: 
//000102: 
//000103:         End Sub
    IL_0161:  nop
    IL_0162:  ret
  } // end of method MainForm::btnRun_Click

  .method private instance void  timerElapsedTime_Tick(object sender,
                                                       class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       177 (0xb1)
    .maxstack  3
    .locals init ([0] int32 elapsed,
             [1] valuetype [mscorlib]System.DateTimeOffset now,
             [2] float64 diffSeconds,
             [3] valuetype [mscorlib]System.TimeSpan VB$t_struct$S0,
             [4] valuetype [mscorlib]System.TimeSpan VB$t_struct$S1,
             [5] valuetype [mscorlib]System.TimeSpan VB$t_struct$S2,
             [6] valuetype [mscorlib]System.TimeSpan VB$t_struct$S3,
             [7] valuetype [mscorlib]System.TimeSpan VB$t_struct$S4,
             [8] valuetype [mscorlib]System.TimeSpan VB$t_struct$S5,
             [9] valuetype [mscorlib]System.TimeSpan VB$t_struct$S6,
             [10] valuetype [mscorlib]System.TimeSpan VB$t_struct$S7,
             [11] int32 VB$t_i4$S0,
             [12] bool VB$CG$t_bool$S0)
//000104: 
//000105:         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
//000106:         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
//000107: 
//000108:         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
    IL_0000:  nop
//000109:             Dim now = DateTimeOffset.Now
    IL_0001:  call       valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::get_Now()
    IL_0006:  stloc.1
//000110:             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
    IL_0007:  ldloc.1
    IL_0008:  ldarg.0
    IL_0009:  ldfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_startTime
    IL_000e:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.DateTimeOffset::op_Subtraction(valuetype [mscorlib]System.DateTimeOffset,
                                                                                                             valuetype [mscorlib]System.DateTimeOffset)
    IL_0013:  stloc.s    VB$t_struct$S7
    IL_0015:  ldloca.s   VB$t_struct$S7
    IL_0017:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
    IL_001c:  call       float64 [Microsoft.VisualBasic]Microsoft.VisualBasic.Conversion::Fix(float64)
    IL_0021:  call       float64 [mscorlib]System.Math::Round(float64)
    IL_0026:  conv.ovf.i4
    IL_0027:  stloc.0
//000111: 
//000112:             lblElapsedTime.Text = elapsed.ToString()
    IL_0028:  ldarg.0
    IL_0029:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_002e:  ldloca.s   elapsed
    IL_0030:  call       instance string [mscorlib]System.Int32::ToString()
    IL_0035:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_003a:  nop
//000113:             lblGenerations.Text = _currentIteration.ToString()
    IL_003b:  ldarg.0
    IL_003c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0041:  ldarg.0
    IL_0042:  ldflda     int32 ShakespeareanMonkeys.MainForm::_currentIteration
    IL_0047:  call       instance string [mscorlib]System.Int32::ToString()
    IL_004c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0051:  nop
//000114: 
//000115:             If elapsed > 2 Then
    IL_0052:  ldloc.0
    IL_0053:  ldc.i4.2
    IL_0054:  cgt
    IL_0056:  stloc.s    VB$CG$t_bool$S0
//000116:                 Dim diffSeconds = (now - _lastTime).TotalSeconds
//000117:                 If diffSeconds > 0 Then
//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
//000119:                 End If
//000120:             End If
//000121:         End Sub
//000122:     End Class
//000123: End Namespace
    IL_0058:  ldloc.s    VB$CG$t_bool$S0
    IL_005a:  brfalse.s  IL_00ae

//000116:                 Dim diffSeconds = (now - _lastTime).TotalSeconds
    IL_005c:  ldloc.1
    IL_005d:  ldarg.0
    IL_005e:  ldfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_lastTime
    IL_0063:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.DateTimeOffset::op_Subtraction(valuetype [mscorlib]System.DateTimeOffset,
                                                                                                             valuetype [mscorlib]System.DateTimeOffset)
    IL_0068:  stloc.s    VB$t_struct$S7
    IL_006a:  ldloca.s   VB$t_struct$S7
    IL_006c:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
    IL_0071:  stloc.2
//000117:                 If diffSeconds > 0 Then
    IL_0072:  ldloc.2
    IL_0073:  ldc.r8     0.0
    IL_007c:  cgt
    IL_007e:  stloc.s    VB$CG$t_bool$S0
//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
//000119:                 End If
//000120:             End If
//000121:         End Sub
//000122:     End Class
//000123: End Namespace
    IL_0080:  ldloc.s    VB$CG$t_bool$S0
    IL_0082:  brfalse.s  IL_00ad

//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
    IL_0084:  ldarg.0
    IL_0085:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_008a:  ldarg.0
    IL_008b:  ldfld      int32 ShakespeareanMonkeys.MainForm::_currentIteration
    IL_0090:  conv.r8
    IL_0091:  ldloc.2
    IL_0092:  div
    IL_0093:  call       float64 [Microsoft.VisualBasic]Microsoft.VisualBasic.Conversion::Fix(float64)
    IL_0098:  call       float64 [mscorlib]System.Math::Round(float64)
    IL_009d:  conv.ovf.i4
    IL_009e:  stloc.s    VB$t_i4$S0
    IL_00a0:  ldloca.s   VB$t_i4$S0
    IL_00a2:  call       instance string [mscorlib]System.Int32::ToString()
    IL_00a7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_00ac:  nop
//000119:                 End If
    IL_00ad:  nop
//000120:             End If
    IL_00ae:  nop
//000121:         End Sub
    IL_00af:  nop
    IL_00b0:  ret
  } // end of method MainForm::timerElapsedTime_Tick

  .method private specialname instance void 
          _Lambda$__1(class [mscorlib]System.Threading.Tasks.Task t) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       145 (0x91)
    .maxstack  3
    .locals init ([0] valuetype [mscorlib]System.Threading.Tasks.TaskStatus VB$t_i4$L0,
             [1] valuetype [System.Drawing]System.Drawing.Color VB$t_struct$N0,
             [2] int32 VB$CG$t_i4$S0)
//000082:                                       End Sub, token).ContinueWith(Sub(t)
    IL_0000:  nop
//000083:                                                                        timerElapsedTime.Stop()
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::get_timerElapsedTime()
    IL_0007:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::Stop()
    IL_000c:  nop
//000084:                                                                        chkParallel.Visible = True
    IL_000d:  ldarg.0
    IL_000e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0013:  ldc.i4.1
    IL_0014:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_0019:  nop
//000085:                                                                        btnRun.Text = "Start"
    IL_001a:  ldarg.0
    IL_001b:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
    IL_0020:  ldstr      "Start"
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_002a:  nop
//000086:                                                                        _cancellation = Nothing
    IL_002b:  ldarg.0
    IL_002c:  ldnull
    IL_002d:  stfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
//000087: 
//000088:                                                                        Select Case t.Status
    IL_0032:  nop
    IL_0033:  ldarg.1
    IL_0034:  callvirt   instance valuetype [mscorlib]System.Threading.Tasks.TaskStatus [mscorlib]System.Threading.Tasks.Task::get_Status()
    IL_0039:  ldc.i4.5
    IL_003a:  sub
    IL_003b:  stloc.2
//000089:                                                                            Case TaskStatus.Faulted
//000090:                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
//000091:                                                                            Case TaskStatus.RanToCompletion
//000092:                                                                                txtBestMatch.BackColor = Color.LightGreen
//000093:                                                                                lblGenerations.BackColor = Color.LemonChiffon
//000094:                                                                        End Select
//000095: 
//000096:                                                                    End Sub, _uiTasks.Scheduler)
//000097: 
//000098:             Else
//000099:                 _cancellation.Cancel()
//000100:             End If
//000101: 
//000102: 
//000103:         End Sub
//000104: 
//000105:         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
//000106:         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
//000107: 
//000108:         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
//000109:             Dim now = DateTimeOffset.Now
//000110:             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
//000111: 
//000112:             lblElapsedTime.Text = elapsed.ToString()
//000113:             lblGenerations.Text = _currentIteration.ToString()
//000114: 
//000115:             If elapsed > 2 Then
//000116:                 Dim diffSeconds = (now - _lastTime).TotalSeconds
//000117:                 If diffSeconds > 0 Then
//000118:                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
//000119:                 End If
//000120:             End If
//000121:         End Sub
//000122:     End Class
//000123: End Namespace
    IL_003c:  ldloc.2
    IL_003d:  switch     ( 
                          IL_006b,
                          IL_008e,
                          IL_0050)
    IL_004e:  br.s       IL_008e

//000089:                                                                            Case TaskStatus.Faulted
    IL_0050:  nop
//000090:                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
    IL_0051:  ldarg.1
    IL_0052:  callvirt   instance class [mscorlib]System.AggregateException [mscorlib]System.Threading.Tasks.Task::get_Exception()
    IL_0057:  callvirt   instance string [mscorlib]System.AggregateException::ToString()
    IL_005c:  ldc.i4.s   16
    IL_005e:  ldstr      "Error"
    IL_0063:  call       valuetype [Microsoft.VisualBasic]Microsoft.VisualBasic.MsgBoxResult [Microsoft.VisualBasic]Microsoft.VisualBasic.Interaction::MsgBox(object,
                                                                                                                                                              valuetype [Microsoft.VisualBasic]Microsoft.VisualBasic.MsgBoxStyle,
                                                                                                                                                              object)
    IL_0068:  pop
    IL_0069:  br.s       IL_008e

//000091:                                                                            Case TaskStatus.RanToCompletion
    IL_006b:  nop
//000092:                                                                                txtBestMatch.BackColor = Color.LightGreen
    IL_006c:  ldarg.0
    IL_006d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_0072:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_LightGreen()
    IL_0077:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBoxBase::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_007c:  nop
//000093:                                                                                lblGenerations.BackColor = Color.LemonChiffon
    IL_007d:  ldarg.0
    IL_007e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0083:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_LemonChiffon()
    IL_0088:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_008d:  nop
//000094:                                                                        End Select
    IL_008e:  nop
//000095: 
//000096:                                                                    End Sub, _uiTasks.Scheduler)
    IL_008f:  nop
    IL_0090:  ret
  } // end of method MainForm::_Lambda$__1

  .property instance class [System.Windows.Forms]System.Windows.Forms.Button
          btnRun()
  {
    .set instance void ShakespeareanMonkeys.MainForm::set_btnRun(class [System.Windows.Forms]System.Windows.Forms.Button)
    .get instance class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::get_btnRun()
  } // end of property MainForm::btnRun
  .property instance class [System.Windows.Forms]System.Windows.Forms.Timer
          timerElapsedTime()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::get_timerElapsedTime()
    .set instance void ShakespeareanMonkeys.MainForm::set_timerElapsedTime(class [System.Windows.Forms]System.Windows.Forms.Timer)
  } // end of property MainForm::timerElapsedTime
} // end of class ShakespeareanMonkeys.MainForm

.class private auto ansi sealed ShakespeareanMonkeys.Program
       extends [mscorlib]System.Object
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       27 (0x1b)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\Module1.vb' 
//000015:         Sub Main()
    IL_0000:  nop
//000016:             Application.EnableVisualStyles()
    IL_0001:  call       void [System.Windows.Forms]System.Windows.Forms.Application::EnableVisualStyles()
    IL_0006:  nop
//000017:             Application.SetCompatibleTextRenderingDefault(False)
    IL_0007:  ldc.i4.0
    IL_0008:  call       void [System.Windows.Forms]System.Windows.Forms.Application::SetCompatibleTextRenderingDefault(bool)
    IL_000d:  nop
//000018:             Application.Run(New MainForm())
    IL_000e:  newobj     instance void ShakespeareanMonkeys.MainForm::.ctor()
    IL_0013:  call       void [System.Windows.Forms]System.Windows.Forms.Application::Run(class [System.Windows.Forms]System.Windows.Forms.Form)
    IL_0018:  nop
//000019:         End Sub
    IL_0019:  nop
    IL_001a:  ret
  } // end of method Program::Main

} // end of class ShakespeareanMonkeys.Program

.class private auto ansi sealed My.Resources.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly specialname static class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       59 (0x3b)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager ResourceManager,
             [1] class [mscorlib]System.Resources.ResourceManager temp,
             [2] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Resources.Designer.vb' 
//000040: 			Get
    IL_0000:  nop
//000041: 				If Object.ReferenceEquals(resourceMan, Nothing) Then
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  call       bool [mscorlib]System.Object::ReferenceEquals(object,
                                                                       object)
    IL_000c:  stloc.2
//000042: 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
//000043: 					resourceMan = temp
//000044: 				End If
//000045: 				Return resourceMan
//000046: 			End Get
//000047: 		End Property
//000048: 
//000049: 		''' <summary>
//000050: 		'''   Overrides the current thread's CurrentUICulture property for all
//000051: 		'''   resource lookups using this strongly typed resource class.
//000052: 		''' </summary>
//000053: 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000054: 		Friend Property Culture() As Global.System.Globalization.CultureInfo
//000055: 			Get
//000056: 				Return resourceCulture
//000057: 			End Get
//000058: 			Set(ByVal value As System.Globalization.CultureInfo)
//000059: 				resourceCulture = value
//000060: 			End Set
//000061: 		End Property
//000062: 
//000063: 		Friend ReadOnly Property HamletMonkey() As Bitmap
//000064: 			Get
//000065:                 Dim obj = ResourceManager.GetObject("HamletMonkey", resourceCulture)
//000066: 				Return (CType(obj, Bitmap))
//000067: 			End Get
//000068: 		End Property
//000069: 	End Module
//000070: End Namespace
    IL_000d:  ldloc.2
    IL_000e:  brfalse.s  IL_0030

//000042: 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
    IL_0010:  ldstr      "Resources"
    IL_0015:  ldtoken    My.Resources.Resources
    IL_001a:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_001f:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0024:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_0029:  stloc.1
//000043: 					resourceMan = temp
    IL_002a:  ldloc.1
    IL_002b:  stsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
//000044: 				End If
    IL_0030:  nop
//000045: 				Return resourceMan
    IL_0031:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0036:  stloc.0
    IL_0037:  br.s       IL_0039

//000046: 			End Get
    IL_0039:  ldloc.0
    IL_003a:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly specialname static class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo Culture)
//000047: 		End Property
//000048: 
//000049: 		''' <summary>
//000050: 		'''   Overrides the current thread's CurrentUICulture property for all
//000051: 		'''   resource lookups using this strongly typed resource class.
//000052: 		''' </summary>
//000053: 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000054: 		Friend Property Culture() As Global.System.Globalization.CultureInfo
//000055: 			Get
    IL_0000:  nop
//000056: 				Return resourceCulture
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000057: 			End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly specialname static void 
          set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       9 (0x9)
    .maxstack  8
//000058: 			Set(ByVal value As System.Globalization.CultureInfo)
    IL_0000:  nop
//000059: 				resourceCulture = value
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
//000060: 			End Set
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Resources::set_Culture

  .method assembly specialname static class [System.Drawing]System.Drawing.Bitmap 
          get_HamletMonkey() cil managed
  {
    // Code size       38 (0x26)
    .maxstack  3
    .locals init ([0] class [System.Drawing]System.Drawing.Bitmap HamletMonkey,
             [1] object obj)
//000061: 		End Property
//000062: 
//000063: 		Friend ReadOnly Property HamletMonkey() As Bitmap
//000064: 			Get
    IL_0000:  nop
//000065:                 Dim obj = ResourceManager.GetObject("HamletMonkey", resourceCulture)
    IL_0001:  call       class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::get_ResourceManager()
    IL_0006:  ldstr      "HamletMonkey"
    IL_000b:  ldsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
    IL_0010:  callvirt   instance object [mscorlib]System.Resources.ResourceManager::GetObject(string,
                                                                                               class [mscorlib]System.Globalization.CultureInfo)
    IL_0015:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
    IL_001a:  stloc.1
//000066: 				Return (CType(obj, Bitmap))
    IL_001b:  ldloc.1
    IL_001c:  castclass  [System.Drawing]System.Drawing.Bitmap
    IL_0021:  stloc.0
    IL_0022:  br.s       IL_0024

//000067: 			End Get
    IL_0024:  ldloc.0
    IL_0025:  ret
  } // end of method Resources::get_HamletMonkey

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::get_Culture()
    .set void My.Resources.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
  .property class [System.Drawing]System.Drawing.Bitmap
          HamletMonkey()
  {
    .get class [System.Drawing]System.Drawing.Bitmap My.Resources.Resources::get_HamletMonkey()
  } // end of property Resources::HamletMonkey
} // end of class My.Resources.Resources

.class private auto ansi sealed beforefieldinit My.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .field private static class My.Settings defaultInstance
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       22 (0x16)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Settings.Designer.vb' 
//000018:         Private Shared defaultInstance As Settings = (CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New Settings()), Settings))
    IL_0000:  newobj     instance void My.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  My.Settings
    IL_000f:  stsfld     class My.Settings My.Settings::defaultInstance
    IL_0014:  nop
    IL_0015:  ret
  } // end of method Settings::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Settings::.ctor

  .method public specialname static class My.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class My.Settings Default)
//000019: 
//000020: 		Public Shared ReadOnly Property [Default]() As Settings
//000021: 			Get
    IL_0000:  nop
//000022: 				Return defaultInstance
    IL_0001:  ldsfld     class My.Settings My.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000023: 			End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .property class My.Settings Default()
  {
    .get class My.Settings My.Settings::get_Default()
  } // end of property Settings::Default
} // end of class My.Settings

.class public auto ansi ShakespeareanMonkeys.TextMatchGeneticAlgorithm
       extends [mscorlib]System.Object
{
  .class auto ansi nested assembly _Closure$__3
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32 $VB$Local_maxFitness
    .field public int64 $VB$Local_sumOfMaxMinusFitness
    .field public class ShakespeareanMonkeys.TextMatchGeneticAlgorithm $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__3::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       57 (0x39)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_0036

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_maxFitness
      IL_0019:  stfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_maxFitness
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
      IL_0025:  stfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_sumOfMaxMinusFitness
      IL_0031:  stfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_sumOfMaxMinusFitness
      IL_0036:  nop
      IL_0037:  nop
      IL_0038:  ret
    } // end of method _Closure$__3::.ctor

    .method public specialname instance int64 
            _Lambda$__6(valuetype ShakespeareanMonkeys.TextMatchGenome g) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       25 (0x19)
      .maxstack  2
      .locals init ([0] int64 _Lambda$__6)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb' 
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_maxFitness
      IL_0006:  ldarga.s   g
      IL_0008:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
      IL_000d:  sub.ovf
      IL_000e:  call       int32 [Microsoft.VisualBasic]Microsoft.VisualBasic.Conversion::Fix(int32)
      IL_0013:  conv.i8
      IL_0014:  stloc.0
      IL_0015:  br.s       IL_0017

      IL_0017:  ldloc.0
      IL_0018:  ret
    } // end of method _Closure$__3::_Lambda$__6

    .method public specialname instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> 
            _Lambda$__7(int32 i) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       62 (0x3e)
      .maxstack  5
      .locals init ([0] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> _Lambda$__7)
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
      IL_0006:  ldarg.0
      IL_0007:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
      IL_000c:  ldarg.0
      IL_000d:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_sumOfMaxMinusFitness
      IL_0012:  ldarg.0
      IL_0013:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_maxFitness
      IL_0018:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::FindRandomHighQualityParent(int64,
                                                                                                                                                               int32)
      IL_001d:  ldarg.0
      IL_001e:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
      IL_0023:  ldarg.0
      IL_0024:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_sumOfMaxMinusFitness
      IL_0029:  ldarg.0
      IL_002a:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_maxFitness
      IL_002f:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::FindRandomHighQualityParent(int64,
                                                                                                                                                               int32)
      IL_0034:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateChildren(valuetype ShakespeareanMonkeys.TextMatchGenome,
                                                                                                                                                    valuetype ShakespeareanMonkeys.TextMatchGenome)
      IL_0039:  stloc.0
      IL_003a:  br.s       IL_003c

      IL_003c:  ldloc.0
      IL_003d:  ret
    } // end of method _Closure$__3::_Lambda$__7

    .method public specialname instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> 
            _Lambda$__9(int32 i) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       62 (0x3e)
      .maxstack  5
      .locals init ([0] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> _Lambda$__9)
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
      IL_0006:  ldarg.0
      IL_0007:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
      IL_000c:  ldarg.0
      IL_000d:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_sumOfMaxMinusFitness
      IL_0012:  ldarg.0
      IL_0013:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_maxFitness
      IL_0018:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::FindRandomHighQualityParent(int64,
                                                                                                                                                               int32)
      IL_001d:  ldarg.0
      IL_001e:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
      IL_0023:  ldarg.0
      IL_0024:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_sumOfMaxMinusFitness
      IL_0029:  ldarg.0
      IL_002a:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_maxFitness
      IL_002f:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::FindRandomHighQualityParent(int64,
                                                                                                                                                               int32)
      IL_0034:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateChildren(valuetype ShakespeareanMonkeys.TextMatchGenome,
                                                                                                                                                    valuetype ShakespeareanMonkeys.TextMatchGenome)
      IL_0039:  stloc.0
      IL_003a:  br.s       IL_003c

      IL_003c:  ldloc.0
      IL_003d:  ret
    } // end of method _Closure$__3::_Lambda$__9

  } // end of class _Closure$__3

  .field private static class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom _random
  .field private static char[] _validChars
  .field private string _targetText
  .field private class ShakespeareanMonkeys.GeneticAlgorithmSettings _settings
  .field private valuetype ShakespeareanMonkeys.TextMatchGenome[] _currentPopulation
  .field private bool _runParallel
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       86 (0x56)
    .maxstack  3
    .locals init ([0] int32 i,
             [1] int32 pos,
             [2] bool VB$CG$t_bool$S0)
//000021: 		Shared Sub New()
    IL_0000:  nop
//000014: 		Private Shared _random As New ThreadSafeRandom()
    IL_0001:  newobj     instance void [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom::.ctor()
    IL_0006:  stsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
//000015: 		Private Shared _validChars() As Char
//000016: 		Private _targetText As String
//000017: 		Private _settings As GeneticAlgorithmSettings
//000018: 		Private _currentPopulation() As TextMatchGenome
//000019: 		Private _runParallel As Boolean
//000020: 
//000021: 		Shared Sub New()
//000022:             ' Initialize the valid characters to newlines plus all the alphanumerics and symbols.
//000023: 			_validChars = New Char(2 + (127 - 32) - 1){}
    IL_000b:  ldc.i4.s   97
    IL_000d:  newarr     [mscorlib]System.Char
    IL_0012:  stsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
//000024: 			_validChars(0) = ChrW(10)
    IL_0017:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_001c:  ldc.i4.0
    IL_001d:  ldc.i4.s   10
    IL_001f:  stelem.i2
//000025: 			_validChars(1) = ChrW(13)
    IL_0020:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0025:  ldc.i4.1
    IL_0026:  ldc.i4.s   13
    IL_0028:  stelem.i2
//000026:             Dim i = 2
    IL_0029:  ldc.i4.2
    IL_002a:  stloc.0
//000027:             Dim pos = 32
    IL_002b:  ldc.i4.s   32
    IL_002d:  stloc.1
//000028: 			Do While i < _validChars.Length
//000029: 				_validChars(i) = ChrW(pos)
//000030: 				i += 1
//000031: 				pos += 1
//000032: 			Loop
//000033: 		End Sub
//000034: 
//000035: 		Public Sub New(ByVal runParallel As Boolean, ByVal targetText As String, ByVal settings As GeneticAlgorithmSettings)
//000036: 			If settings Is Nothing Then
//000037: 				Throw New ArgumentNullException("settings")
//000038: 			End If
//000039: 			If targetText Is Nothing Then
//000040: 				Throw New ArgumentNullException("targetText")
//000041: 			End If
//000042: 			_runParallel = runParallel
//000043: 			_settings = settings
//000044: 			_targetText = targetText
//000045: 		End Sub
//000046: 
//000047: 		Public Sub MoveNext()
//000048:             ' If this is the first iteration, create a random population.
//000049: 			If _currentPopulation Is Nothing Then
//000050: 				_currentPopulation = CreateRandomPopulation()
//000051: 			' Otherwise, iterate
//000052: 			Else
//000053: 				_currentPopulation = CreateNextGeneration()
//000054: 			End If
//000055: 		End Sub
//000056: 
//000057: 		Public ReadOnly Property CurrentBest() As TextMatchGenome
//000058: 			Get
//000059: 				Return _currentPopulation(0)
//000060: 			End Get
//000061: 		End Property
//000062: 
//000063: 		Private Function CreateRandomPopulation() As TextMatchGenome()
//000064: 			Return (
//000065: 			    From i In Enumerable.Range(0, _settings.PopulationSize)
//000066: 			    Select CreateRandomGenome(_random)).ToArray()
//000067: 		End Function
//000068: 
//000069: 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
//000070: 			Dim sb = New StringBuilder(_targetText.Length)
//000071:             For i = 0 To _targetText.Length - 1
//000072:                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
//000073:             Next i
//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
//000075: 		End Function
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_002e:  br.s       IL_0046

//000029: 				_validChars(i) = ChrW(pos)
    IL_0030:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0035:  ldloc.0
    IL_0036:  ldloc.1
    IL_0037:  call       char [Microsoft.VisualBasic]Microsoft.VisualBasic.Strings::ChrW(int32)
    IL_003c:  stelem.i2
//000030: 				i += 1
    IL_003d:  ldloc.0
    IL_003e:  ldc.i4.1
    IL_003f:  add.ovf
    IL_0040:  stloc.0
//000031: 				pos += 1
    IL_0041:  ldloc.1
    IL_0042:  ldc.i4.1
    IL_0043:  add.ovf
    IL_0044:  stloc.1
//000032: 			Loop
    IL_0045:  nop
//000028: 			Do While i < _validChars.Length
    IL_0046:  ldloc.0
    IL_0047:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_004c:  ldlen
    IL_004d:  conv.ovf.i4
    IL_004e:  clt
    IL_0050:  stloc.2
//000029: 				_validChars(i) = ChrW(pos)
//000030: 				i += 1
//000031: 				pos += 1
//000032: 			Loop
//000033: 		End Sub
//000034: 
//000035: 		Public Sub New(ByVal runParallel As Boolean, ByVal targetText As String, ByVal settings As GeneticAlgorithmSettings)
//000036: 			If settings Is Nothing Then
//000037: 				Throw New ArgumentNullException("settings")
//000038: 			End If
//000039: 			If targetText Is Nothing Then
//000040: 				Throw New ArgumentNullException("targetText")
//000041: 			End If
//000042: 			_runParallel = runParallel
//000043: 			_settings = settings
//000044: 			_targetText = targetText
//000045: 		End Sub
//000046: 
//000047: 		Public Sub MoveNext()
//000048:             ' If this is the first iteration, create a random population.
//000049: 			If _currentPopulation Is Nothing Then
//000050: 				_currentPopulation = CreateRandomPopulation()
//000051: 			' Otherwise, iterate
//000052: 			Else
//000053: 				_currentPopulation = CreateNextGeneration()
//000054: 			End If
//000055: 		End Sub
//000056: 
//000057: 		Public ReadOnly Property CurrentBest() As TextMatchGenome
//000058: 			Get
//000059: 				Return _currentPopulation(0)
//000060: 			End Get
//000061: 		End Property
//000062: 
//000063: 		Private Function CreateRandomPopulation() As TextMatchGenome()
//000064: 			Return (
//000065: 			    From i In Enumerable.Range(0, _settings.PopulationSize)
//000066: 			    Select CreateRandomGenome(_random)).ToArray()
//000067: 		End Function
//000068: 
//000069: 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
//000070: 			Dim sb = New StringBuilder(_targetText.Length)
//000071:             For i = 0 To _targetText.Length - 1
//000072:                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
//000073:             Next i
//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
//000075: 		End Function
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0051:  ldloc.2
    IL_0052:  brtrue.s   IL_0030

//000033: 		End Sub
    IL_0054:  nop
    IL_0055:  ret
  } // end of method TextMatchGeneticAlgorithm::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor(bool runParallel,
                               string targetText,
                               class ShakespeareanMonkeys.GeneticAlgorithmSettings settings) cil managed
  {
    // Code size       71 (0x47)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
//000034: 
//000035: 		Public Sub New(ByVal runParallel As Boolean, ByVal targetText As String, ByVal settings As GeneticAlgorithmSettings)
    IL_0000:  nop
//000036: 			If settings Is Nothing Then
//000037: 				Throw New ArgumentNullException("settings")
//000038: 			End If
//000039: 			If targetText Is Nothing Then
//000040: 				Throw New ArgumentNullException("targetText")
//000041: 			End If
//000042: 			_runParallel = runParallel
//000043: 			_settings = settings
//000044: 			_targetText = targetText
//000045: 		End Sub
//000046: 
//000047: 		Public Sub MoveNext()
//000048:             ' If this is the first iteration, create a random population.
//000049: 			If _currentPopulation Is Nothing Then
//000050: 				_currentPopulation = CreateRandomPopulation()
//000051: 			' Otherwise, iterate
//000052: 			Else
//000053: 				_currentPopulation = CreateNextGeneration()
//000054: 			End If
//000055: 		End Sub
//000056: 
//000057: 		Public ReadOnly Property CurrentBest() As TextMatchGenome
//000058: 			Get
//000059: 				Return _currentPopulation(0)
//000060: 			End Get
//000061: 		End Property
//000062: 
//000063: 		Private Function CreateRandomPopulation() As TextMatchGenome()
//000064: 			Return (
//000065: 			    From i In Enumerable.Range(0, _settings.PopulationSize)
//000066: 			    Select CreateRandomGenome(_random)).ToArray()
//000067: 		End Function
//000068: 
//000069: 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
//000070: 			Dim sb = New StringBuilder(_targetText.Length)
//000071:             For i = 0 To _targetText.Length - 1
//000072:                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
//000073:             Next i
//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
//000075: 		End Function
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000036: 			If settings Is Nothing Then
    IL_0008:  ldarg.3
    IL_0009:  ldnull
    IL_000a:  ceq
    IL_000c:  stloc.0
//000037: 				Throw New ArgumentNullException("settings")
//000038: 			End If
//000039: 			If targetText Is Nothing Then
//000040: 				Throw New ArgumentNullException("targetText")
//000041: 			End If
//000042: 			_runParallel = runParallel
//000043: 			_settings = settings
//000044: 			_targetText = targetText
//000045: 		End Sub
//000046: 
//000047: 		Public Sub MoveNext()
//000048:             ' If this is the first iteration, create a random population.
//000049: 			If _currentPopulation Is Nothing Then
//000050: 				_currentPopulation = CreateRandomPopulation()
//000051: 			' Otherwise, iterate
//000052: 			Else
//000053: 				_currentPopulation = CreateNextGeneration()
//000054: 			End If
//000055: 		End Sub
//000056: 
//000057: 		Public ReadOnly Property CurrentBest() As TextMatchGenome
//000058: 			Get
//000059: 				Return _currentPopulation(0)
//000060: 			End Get
//000061: 		End Property
//000062: 
//000063: 		Private Function CreateRandomPopulation() As TextMatchGenome()
//000064: 			Return (
//000065: 			    From i In Enumerable.Range(0, _settings.PopulationSize)
//000066: 			    Select CreateRandomGenome(_random)).ToArray()
//000067: 		End Function
//000068: 
//000069: 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
//000070: 			Dim sb = New StringBuilder(_targetText.Length)
//000071:             For i = 0 To _targetText.Length - 1
//000072:                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
//000073:             Next i
//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
//000075: 		End Function
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_000d:  ldloc.0
    IL_000e:  brfalse.s  IL_001b

//000037: 				Throw New ArgumentNullException("settings")
    IL_0010:  ldstr      "settings"
    IL_0015:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
    IL_001a:  throw

//000038: 			End If
    IL_001b:  nop
//000039: 			If targetText Is Nothing Then
    IL_001c:  ldarg.2
    IL_001d:  ldnull
    IL_001e:  ceq
    IL_0020:  stloc.0
//000040: 				Throw New ArgumentNullException("targetText")
//000041: 			End If
//000042: 			_runParallel = runParallel
//000043: 			_settings = settings
//000044: 			_targetText = targetText
//000045: 		End Sub
//000046: 
//000047: 		Public Sub MoveNext()
//000048:             ' If this is the first iteration, create a random population.
//000049: 			If _currentPopulation Is Nothing Then
//000050: 				_currentPopulation = CreateRandomPopulation()
//000051: 			' Otherwise, iterate
//000052: 			Else
//000053: 				_currentPopulation = CreateNextGeneration()
//000054: 			End If
//000055: 		End Sub
//000056: 
//000057: 		Public ReadOnly Property CurrentBest() As TextMatchGenome
//000058: 			Get
//000059: 				Return _currentPopulation(0)
//000060: 			End Get
//000061: 		End Property
//000062: 
//000063: 		Private Function CreateRandomPopulation() As TextMatchGenome()
//000064: 			Return (
//000065: 			    From i In Enumerable.Range(0, _settings.PopulationSize)
//000066: 			    Select CreateRandomGenome(_random)).ToArray()
//000067: 		End Function
//000068: 
//000069: 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
//000070: 			Dim sb = New StringBuilder(_targetText.Length)
//000071:             For i = 0 To _targetText.Length - 1
//000072:                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
//000073:             Next i
//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
//000075: 		End Function
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0021:  ldloc.0
    IL_0022:  brfalse.s  IL_002f

//000040: 				Throw New ArgumentNullException("targetText")
    IL_0024:  ldstr      "targetText"
    IL_0029:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
    IL_002e:  throw

//000041: 			End If
    IL_002f:  nop
//000042: 			_runParallel = runParallel
    IL_0030:  ldarg.0
    IL_0031:  ldarg.1
    IL_0032:  stfld      bool ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_runParallel
//000043: 			_settings = settings
    IL_0037:  ldarg.0
    IL_0038:  ldarg.3
    IL_0039:  stfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
//000044: 			_targetText = targetText
    IL_003e:  ldarg.0
    IL_003f:  ldarg.2
    IL_0040:  stfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
//000045: 		End Sub
    IL_0045:  nop
    IL_0046:  ret
  } // end of method TextMatchGeneticAlgorithm::.ctor

  .method public instance void  MoveNext() cil managed
  {
    // Code size       44 (0x2c)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
//000046: 
//000047: 		Public Sub MoveNext()
    IL_0000:  nop
//000048:             ' If this is the first iteration, create a random population.
//000049: 			If _currentPopulation Is Nothing Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  stloc.0
//000050: 				_currentPopulation = CreateRandomPopulation()
//000051: 			' Otherwise, iterate
//000052: 			Else
//000053: 				_currentPopulation = CreateNextGeneration()
//000054: 			End If
//000055: 		End Sub
//000056: 
//000057: 		Public ReadOnly Property CurrentBest() As TextMatchGenome
//000058: 			Get
//000059: 				Return _currentPopulation(0)
//000060: 			End Get
//000061: 		End Property
//000062: 
//000063: 		Private Function CreateRandomPopulation() As TextMatchGenome()
//000064: 			Return (
//000065: 			    From i In Enumerable.Range(0, _settings.PopulationSize)
//000066: 			    Select CreateRandomGenome(_random)).ToArray()
//000067: 		End Function
//000068: 
//000069: 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
//000070: 			Dim sb = New StringBuilder(_targetText.Length)
//000071:             For i = 0 To _targetText.Length - 1
//000072:                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
//000073:             Next i
//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
//000075: 		End Function
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_000b:  ldloc.0
    IL_000c:  brfalse.s  IL_001c

//000050: 				_currentPopulation = CreateRandomPopulation()
    IL_000e:  ldarg.0
    IL_000f:  ldarg.0
    IL_0010:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateRandomPopulation()
    IL_0015:  stfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_001a:  br.s       IL_0029

//000051: 			' Otherwise, iterate
//000052: 			Else
    IL_001c:  nop
//000053: 				_currentPopulation = CreateNextGeneration()
    IL_001d:  ldarg.0
    IL_001e:  ldarg.0
    IL_001f:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateNextGeneration()
    IL_0024:  stfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
//000054: 			End If
    IL_0029:  nop
//000055: 		End Sub
    IL_002a:  nop
    IL_002b:  ret
  } // end of method TextMatchGeneticAlgorithm::MoveNext

  .method public specialname instance valuetype ShakespeareanMonkeys.TextMatchGenome 
          get_CurrentBest() cil managed
  {
    // Code size       23 (0x17)
    .maxstack  2
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome CurrentBest)
//000056: 
//000057: 		Public ReadOnly Property CurrentBest() As TextMatchGenome
//000058: 			Get
    IL_0000:  nop
//000059: 				Return _currentPopulation(0)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0007:  ldc.i4.0
    IL_0008:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_000d:  ldobj      ShakespeareanMonkeys.TextMatchGenome
    IL_0012:  stloc.0
    IL_0013:  br.s       IL_0015

//000060: 			End Get
    IL_0015:  ldloc.0
    IL_0016:  ret
  } // end of method TextMatchGeneticAlgorithm::get_CurrentBest

  .method private instance valuetype ShakespeareanMonkeys.TextMatchGenome[] 
          CreateRandomPopulation() cil managed
  {
    // Code size       46 (0x2e)
    .maxstack  3
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome[] CreateRandomPopulation)
//000061: 		End Property
//000062: 
//000063: 		Private Function CreateRandomPopulation() As TextMatchGenome()
    IL_0000:  nop
//000064: 			Return (
    IL_0001:  ldc.i4.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0008:  callvirt   instance int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_PopulationSize()
    IL_000d:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_0012:  ldarg.0
    IL_0013:  dup
    IL_0014:  ldvirtftn  instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_Lambda$__4(int32)
    IL_001a:  newobj     instance void class [mscorlib]System.Func`2<int32,valuetype ShakespeareanMonkeys.TextMatchGenome>::.ctor(object,
                                                                                                                                  native int)
    IL_001f:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<int32,valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                         class [mscorlib]System.Func`2<!!0,!!1>)
    IL_0024:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_0029:  stloc.0
    IL_002a:  br.s       IL_002c

//000065: 			    From i In Enumerable.Range(0, _settings.PopulationSize)
//000066: 			    Select CreateRandomGenome(_random)).ToArray()
//000067: 		End Function
    IL_002c:  ldloc.0
    IL_002d:  ret
  } // end of method TextMatchGeneticAlgorithm::CreateRandomPopulation

  .method private instance valuetype ShakespeareanMonkeys.TextMatchGenome 
          CreateRandomGenome(class [mscorlib]System.Random rand) cil managed
  {
    // Code size       123 (0x7b)
    .maxstack  5
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome CreateRandomGenome,
             [1] class [mscorlib]System.Text.StringBuilder sb,
             [2] int32 i,
             [3] int32 VB$t_i4$L0,
             [4] valuetype ShakespeareanMonkeys.TextMatchGenome VB$t_struct$S0,
             [5] valuetype ShakespeareanMonkeys.TextMatchGenome VB$t_struct$S1,
             [6] int32 VB$CG$t_i4$S0)
//000068: 
//000069: 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
    IL_0000:  nop
//000070: 			Dim sb = New StringBuilder(_targetText.Length)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_0007:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_000c:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor(int32)
    IL_0011:  stloc.1
//000071:             For i = 0 To _targetText.Length - 1
    IL_0012:  ldc.i4.0
    IL_0013:  ldarg.0
    IL_0014:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_0019:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_001e:  ldc.i4.1
    IL_001f:  sub.ovf
    IL_0020:  stloc.3
    IL_0021:  stloc.2
    IL_0022:  br.s       IL_0044

//000072:                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
    IL_0024:  ldloc.1
    IL_0025:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_002a:  ldarg.1
    IL_002b:  ldc.i4.0
    IL_002c:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0031:  ldlen
    IL_0032:  conv.ovf.i4
    IL_0033:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0038:  ldelem.u2
    IL_0039:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(char)
    IL_003e:  pop
//000073:             Next i
    IL_003f:  nop
    IL_0040:  ldloc.2
    IL_0041:  ldc.i4.1
    IL_0042:  add.ovf
    IL_0043:  stloc.2
//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
//000075: 		End Function
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0044:  ldloc.2
    IL_0045:  ldloc.3
    IL_0046:  stloc.s    VB$CG$t_i4$S0
    IL_0048:  ldloc.s    VB$CG$t_i4$S0
    IL_004a:  ble.s      IL_0024

//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
    IL_004c:  ldloca.s   VB$t_struct$S0
    IL_004e:  initobj    ShakespeareanMonkeys.TextMatchGenome
    IL_0054:  ldloc.s    VB$t_struct$S0
    IL_0056:  stloc.s    VB$t_struct$S1
    IL_0058:  ldloca.s   VB$t_struct$S1
    IL_005a:  ldloc.1
    IL_005b:  callvirt   instance string [mscorlib]System.Text.StringBuilder::ToString()
    IL_0060:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    IL_0065:  nop
    IL_0066:  ldloca.s   VB$t_struct$S1
    IL_0068:  ldarg.0
    IL_0069:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_006e:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_TargetText(string)
    IL_0073:  nop
    IL_0074:  ldloc.s    VB$t_struct$S1
    IL_0076:  stloc.0
    IL_0077:  br.s       IL_0079

//000075: 		End Function
    IL_0079:  ldloc.0
    IL_007a:  ret
  } // end of method TextMatchGeneticAlgorithm::CreateRandomGenome

  .method private instance valuetype ShakespeareanMonkeys.TextMatchGenome[] 
          CreateNextGeneration() cil managed
  {
    // Code size       205 (0xcd)
    .maxstack  4
    .locals init ([0] class ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3 $VB$Closure_ClosureVariable_4C_3E,
             [1] valuetype ShakespeareanMonkeys.TextMatchGenome[] CreateNextGeneration,
             [2] bool VB$CG$t_bool$S0)
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
    IL_0000:  nop
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0001:  newobj     instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.0
    IL_0009:  stfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Me
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
    IL_000e:  ldloc.0
    IL_000f:  ldarg.0
    IL_0010:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0015:  ldnull
    IL_0016:  ldftn      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_Lambda$__5(valuetype ShakespeareanMonkeys.TextMatchGenome)
    IL_001c:  newobj     instance void class [mscorlib]System.Func`2<valuetype ShakespeareanMonkeys.TextMatchGenome,int32>::.ctor(object,
                                                                                                                                  native int)
    IL_0021:  call       int32 [System.Core]System.Linq.Enumerable::Max<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                        class [mscorlib]System.Func`2<!!0,int32>)
    IL_0026:  ldc.i4.1
    IL_0027:  add.ovf
    IL_0028:  stfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_maxFitness
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
    IL_002d:  ldloc.0
    IL_002e:  ldarg.0
    IL_002f:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0034:  ldloc.0
    IL_0035:  dup
    IL_0036:  ldvirtftn  instance int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::_Lambda$__6(valuetype ShakespeareanMonkeys.TextMatchGenome)
    IL_003c:  newobj     instance void class [mscorlib]System.Func`2<valuetype ShakespeareanMonkeys.TextMatchGenome,int64>::.ctor(object,
                                                                                                                                  native int)
    IL_0041:  call       int64 [System.Core]System.Linq.Enumerable::Sum<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                        class [mscorlib]System.Func`2<!!0,int64>)
    IL_0046:  stfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::$VB$Local_sumOfMaxMinusFitness
//000080: 
//000081: 			If _runParallel Then
    IL_004b:  ldarg.0
    IL_004c:  ldfld      bool ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_runParallel
    IL_0051:  stloc.2
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0052:  ldloc.2
    IL_0053:  brfalse.s  IL_0090

//000082:                 Return (
    IL_0055:  ldc.i4.0
    IL_0056:  ldarg.0
    IL_0057:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_005c:  callvirt   instance int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_PopulationSize()
    IL_0061:  ldc.i4.2
    IL_0062:  div
    IL_0063:  call       class [System.Core]System.Linq.ParallelQuery`1<int32> [System.Core]System.Linq.ParallelEnumerable::Range(int32,
                                                                                                                                  int32)
    IL_0068:  ldloc.0
    IL_0069:  dup
    IL_006a:  ldvirtftn  instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::_Lambda$__7(int32)
    IL_0070:  newobj     instance void class [mscorlib]System.Func`2<int32,class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>>::.ctor(object,
                                                                                                                                                                                            native int)
    IL_0075:  ldnull
    IL_0076:  ldftn      valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_Lambda$__8(int32,
                                                                                                                                    valuetype ShakespeareanMonkeys.TextMatchGenome)
    IL_007c:  newobj     instance void class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome>::.ctor(object,
                                                                                                                                                                                 native int)
    IL_0081:  call       class [System.Core]System.Linq.ParallelQuery`1<!!2> [System.Core]System.Linq.ParallelEnumerable::SelectMany<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                                                                                                          class [mscorlib]System.Func`2<!!0,class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1>>,
                                                                                                                                                                                                                                          class [mscorlib]System.Func`3<!!0,!!1,!!2>)
    IL_0086:  call       !!0[] [System.Core]System.Linq.ParallelEnumerable::ToArray<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [System.Core]System.Linq.ParallelQuery`1<!!0>)
    IL_008b:  stloc.1
    IL_008c:  br.s       IL_00cb

    IL_008e:  br.s       IL_00ca

//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
//000087: 			Else
    IL_0090:  nop
//000088:                 Return (
    IL_0091:  ldc.i4.0
    IL_0092:  ldarg.0
    IL_0093:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0098:  callvirt   instance int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_PopulationSize()
    IL_009d:  ldc.i4.2
    IL_009e:  div
    IL_009f:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_00a4:  ldloc.0
    IL_00a5:  dup
    IL_00a6:  ldvirtftn  instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm/_Closure$__3::_Lambda$__9(int32)
    IL_00ac:  newobj     instance void class [mscorlib]System.Func`2<int32,class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>>::.ctor(object,
                                                                                                                                                                                            native int)
    IL_00b1:  ldnull
    IL_00b2:  ldftn      valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_Lambda$__10(int32,
                                                                                                                                     valuetype ShakespeareanMonkeys.TextMatchGenome)
    IL_00b8:  newobj     instance void class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome>::.ctor(object,
                                                                                                                                                                                 native int)
    IL_00bd:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!2> [System.Core]System.Linq.Enumerable::SelectMany<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                                                            class [mscorlib]System.Func`2<!!0,class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1>>,
                                                                                                                                                                                                                                            class [mscorlib]System.Func`3<!!0,!!1,!!2>)
    IL_00c2:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_00c7:  stloc.1
    IL_00c8:  br.s       IL_00cb

//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
//000093: 			End If
    IL_00ca:  nop
//000094: 		End Function
    IL_00cb:  ldloc.1
    IL_00cc:  ret
  } // end of method TextMatchGeneticAlgorithm::CreateNextGeneration

  .method private instance valuetype ShakespeareanMonkeys.TextMatchGenome[] 
          CreateChildren(valuetype ShakespeareanMonkeys.TextMatchGenome parent1,
                         valuetype ShakespeareanMonkeys.TextMatchGenome parent2) cil managed
  {
    // Code size       199 (0xc7)
    .maxstack  6
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome child1,
             [1] valuetype ShakespeareanMonkeys.TextMatchGenome child2,
             [2] valuetype ShakespeareanMonkeys.TextMatchGenome[] CreateChildren,
             [3] valuetype ShakespeareanMonkeys.TextMatchGenome[] VB$LW$t_array$S0,
             [4] bool VB$CG$t_bool$S0)
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
    IL_0000:  nop
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
    IL_0001:  ldloca.s   child1
    IL_0003:  initobj    ShakespeareanMonkeys.TextMatchGenome
//000099:             Dim child2 As TextMatchGenome = Nothing
    IL_0009:  ldloca.s   child2
    IL_000b:  initobj    ShakespeareanMonkeys.TextMatchGenome
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
    IL_0011:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0016:  callvirt   instance float64 [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom::NextDouble()
    IL_001b:  ldarg.0
    IL_001c:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0021:  callvirt   instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_CrossoverProbability()
    IL_0026:  clt
    IL_0028:  stloc.s    VB$CG$t_bool$S0
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_002a:  ldloc.s    VB$CG$t_bool$S0
    IL_002c:  brfalse.s  IL_0042

//000101:                 Crossover(_random, parent1, parent2, child1, child2)
    IL_002e:  ldarg.0
    IL_002f:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0034:  ldarg.1
    IL_0035:  ldarg.2
    IL_0036:  ldloca.s   child1
    IL_0038:  ldloca.s   child2
    IL_003a:  callvirt   instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::Crossover(class [mscorlib]System.Random,
                                                                                                 valuetype ShakespeareanMonkeys.TextMatchGenome,
                                                                                                 valuetype ShakespeareanMonkeys.TextMatchGenome,
                                                                                                 valuetype ShakespeareanMonkeys.TextMatchGenome&,
                                                                                                 valuetype ShakespeareanMonkeys.TextMatchGenome&)
    IL_003f:  nop
    IL_0040:  br.s       IL_0047

//000102:             Else
    IL_0042:  nop
//000103:                 child1 = parent1
    IL_0043:  ldarg.1
    IL_0044:  stloc.0
//000104:                 child2 = parent2
    IL_0045:  ldarg.2
    IL_0046:  stloc.1
//000105:             End If
    IL_0047:  nop
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
    IL_0048:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_004d:  callvirt   instance float64 [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom::NextDouble()
    IL_0052:  ldarg.0
    IL_0053:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0058:  callvirt   instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_MutationProbability()
    IL_005d:  clt
    IL_005f:  stloc.s    VB$CG$t_bool$S0
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0061:  ldloc.s    VB$CG$t_bool$S0
    IL_0063:  brfalse.s  IL_0073

//000109:                 Mutate(_random, child1)
    IL_0065:  ldarg.0
    IL_0066:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_006b:  ldloca.s   child1
    IL_006d:  callvirt   instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::Mutate(class [mscorlib]System.Random,
                                                                                              valuetype ShakespeareanMonkeys.TextMatchGenome&)
    IL_0072:  nop
//000110:             End If
    IL_0073:  nop
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
    IL_0074:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0079:  callvirt   instance float64 [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom::NextDouble()
    IL_007e:  ldarg.0
    IL_007f:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0084:  callvirt   instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_MutationProbability()
    IL_0089:  clt
    IL_008b:  stloc.s    VB$CG$t_bool$S0
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_008d:  ldloc.s    VB$CG$t_bool$S0
    IL_008f:  brfalse.s  IL_009f

//000112:                 Mutate(_random, child2)
    IL_0091:  ldarg.0
    IL_0092:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0097:  ldloca.s   child2
    IL_0099:  callvirt   instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::Mutate(class [mscorlib]System.Random,
                                                                                              valuetype ShakespeareanMonkeys.TextMatchGenome&)
    IL_009e:  nop
//000113:             End If
    IL_009f:  nop
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
    IL_00a0:  ldc.i4.2
    IL_00a1:  newarr     ShakespeareanMonkeys.TextMatchGenome
    IL_00a6:  stloc.3
    IL_00a7:  ldloc.3
    IL_00a8:  ldc.i4.0
    IL_00a9:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_00ae:  ldloc.0
    IL_00af:  stobj      ShakespeareanMonkeys.TextMatchGenome
    IL_00b4:  ldloc.3
    IL_00b5:  ldc.i4.1
    IL_00b6:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_00bb:  ldloc.1
    IL_00bc:  stobj      ShakespeareanMonkeys.TextMatchGenome
    IL_00c1:  ldloc.3
    IL_00c2:  stloc.2
    IL_00c3:  br.s       IL_00c5

//000117:         End Function
    IL_00c5:  ldloc.2
    IL_00c6:  ret
  } // end of method TextMatchGeneticAlgorithm::CreateChildren

  .method private instance valuetype ShakespeareanMonkeys.TextMatchGenome 
          FindRandomHighQualityParent(int64 sumOfMaxMinusFitness,
                                      int32 max) cil managed
  {
    // Code size       126 (0x7e)
    .maxstack  3
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome FindRandomHighQualityParent,
             [1] int64 val,
             [2] int32 i,
             [3] int32 maxMinusFitness,
             [4] int32 VB$t_i4$L0,
             [5] bool VB$CG$t_bool$S0,
             [6] int32 VB$CG$t_i4$S0)
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
    IL_0000:  nop
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
    IL_0001:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0006:  callvirt   instance float64 [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom::NextDouble()
    IL_000b:  ldarg.1
    IL_000c:  conv.r8
    IL_000d:  mul
    IL_000e:  call       float64 [Microsoft.VisualBasic]Microsoft.VisualBasic.Conversion::Fix(float64)
    IL_0013:  call       float64 [mscorlib]System.Math::Round(float64)
    IL_0018:  conv.ovf.i8
    IL_0019:  stloc.1
//000121:             For i = 0 To _currentPopulation.Length - 1
    IL_001a:  ldc.i4.0
    IL_001b:  ldarg.0
    IL_001c:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0021:  ldlen
    IL_0022:  conv.ovf.i4
    IL_0023:  ldc.i4.1
    IL_0024:  sub.ovf
    IL_0025:  stloc.s    VB$t_i4$L0
    IL_0027:  stloc.2
    IL_0028:  br.s       IL_0068

//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
    IL_002a:  ldarg.2
    IL_002b:  ldarg.0
    IL_002c:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0031:  ldloc.2
    IL_0032:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_0037:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
    IL_003c:  sub.ovf
    IL_003d:  stloc.3
//000123:                 If val < maxMinusFitness Then
    IL_003e:  ldloc.1
    IL_003f:  ldloc.3
    IL_0040:  conv.i8
    IL_0041:  clt
    IL_0043:  stloc.s    VB$CG$t_bool$S0
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0045:  ldloc.s    VB$CG$t_bool$S0
    IL_0047:  brfalse.s  IL_005d

//000124:                     Return _currentPopulation(i)
    IL_0049:  ldarg.0
    IL_004a:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_004f:  ldloc.2
    IL_0050:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_0055:  ldobj      ShakespeareanMonkeys.TextMatchGenome
    IL_005a:  stloc.0
    IL_005b:  br.s       IL_007c

//000125:                 End If
    IL_005d:  nop
//000126:                 val -= maxMinusFitness
    IL_005e:  ldloc.1
    IL_005f:  ldloc.3
    IL_0060:  conv.i8
    IL_0061:  sub.ovf
    IL_0062:  stloc.1
//000127:             Next i
    IL_0063:  nop
    IL_0064:  ldloc.2
    IL_0065:  ldc.i4.1
    IL_0066:  add.ovf
    IL_0067:  stloc.2
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
//000152: 				Return _text
//000153: 			End Get
//000154: 			Set(ByVal value As String)
//000155: 				_text = value
//000156: 				RecomputeFitness()
//000157: 			End Set
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
//000162: 				Return _targetText
//000163: 			End Get
//000164: 			Set(ByVal value As String)
//000165: 				_targetText = value
//000166: 				RecomputeFitness()
//000167: 			End Set
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0068:  ldloc.2
    IL_0069:  ldloc.s    VB$t_i4$L0
    IL_006b:  stloc.s    VB$CG$t_i4$S0
    IL_006d:  ldloc.s    VB$CG$t_i4$S0
    IL_006f:  ble.s      IL_002a

//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
    IL_0071:  ldstr      "Not to be, apparently."
    IL_0076:  newobj     instance void [mscorlib]System.InvalidOperationException::.ctor(string)
    IL_007b:  throw

//000129: 		End Function
    IL_007c:  ldloc.0
    IL_007d:  ret
  } // end of method TextMatchGeneticAlgorithm::FindRandomHighQualityParent

  .method private instance void  Crossover(class [mscorlib]System.Random rand,
                                           valuetype ShakespeareanMonkeys.TextMatchGenome p1,
                                           valuetype ShakespeareanMonkeys.TextMatchGenome p2,
                                           [out] valuetype ShakespeareanMonkeys.TextMatchGenome& child1,
                                           [out] valuetype ShakespeareanMonkeys.TextMatchGenome& child2) cil managed
  {
    // Code size       167 (0xa7)
    .maxstack  5
    .locals init ([0] int32 crossoverPoint,
             [1] valuetype ShakespeareanMonkeys.TextMatchGenome VB$t_struct$S0,
             [2] valuetype ShakespeareanMonkeys.TextMatchGenome VB$t_struct$S1)
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
    IL_0000:  nop
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
    IL_0001:  ldarg.1
    IL_0002:  ldc.i4.1
    IL_0003:  ldarga.s   p1
    IL_0005:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_000a:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_000f:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0014:  stloc.0
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
    IL_0015:  ldarg.s    child1
    IL_0017:  ldloca.s   VB$t_struct$S0
    IL_0019:  initobj    ShakespeareanMonkeys.TextMatchGenome
    IL_001f:  ldloc.1
    IL_0020:  stloc.2
    IL_0021:  ldloca.s   VB$t_struct$S1
    IL_0023:  ldarga.s   p1
    IL_0025:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_002a:  ldc.i4.0
    IL_002b:  ldloc.0
    IL_002c:  callvirt   instance string [mscorlib]System.String::Substring(int32,
                                                                            int32)
    IL_0031:  ldarga.s   p2
    IL_0033:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0038:  ldloc.0
    IL_0039:  callvirt   instance string [mscorlib]System.String::Substring(int32)
    IL_003e:  call       string [mscorlib]System.String::Concat(string,
                                                                string)
    IL_0043:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    IL_0048:  nop
    IL_0049:  ldloca.s   VB$t_struct$S1
    IL_004b:  ldarg.0
    IL_004c:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_0051:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_TargetText(string)
    IL_0056:  nop
    IL_0057:  ldloc.2
    IL_0058:  stobj      ShakespeareanMonkeys.TextMatchGenome
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
    IL_005d:  ldarg.s    child2
    IL_005f:  ldloca.s   VB$t_struct$S1
    IL_0061:  initobj    ShakespeareanMonkeys.TextMatchGenome
    IL_0067:  ldloc.2
    IL_0068:  stloc.1
    IL_0069:  ldloca.s   VB$t_struct$S0
    IL_006b:  ldarga.s   p2
    IL_006d:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0072:  ldc.i4.0
    IL_0073:  ldloc.0
    IL_0074:  callvirt   instance string [mscorlib]System.String::Substring(int32,
                                                                            int32)
    IL_0079:  ldarga.s   p1
    IL_007b:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0080:  ldloc.0
    IL_0081:  callvirt   instance string [mscorlib]System.String::Substring(int32)
    IL_0086:  call       string [mscorlib]System.String::Concat(string,
                                                                string)
    IL_008b:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    IL_0090:  nop
    IL_0091:  ldloca.s   VB$t_struct$S0
    IL_0093:  ldarg.0
    IL_0094:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_0099:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_TargetText(string)
    IL_009e:  nop
    IL_009f:  ldloc.1
    IL_00a0:  stobj      ShakespeareanMonkeys.TextMatchGenome
//000137:         End Sub
    IL_00a5:  nop
    IL_00a6:  ret
  } // end of method TextMatchGeneticAlgorithm::Crossover

  .method private instance void  Mutate(class [mscorlib]System.Random rand,
                                        valuetype ShakespeareanMonkeys.TextMatchGenome& genome) cil managed
  {
    // Code size       73 (0x49)
    .maxstack  6
    .locals init ([0] class [mscorlib]System.Text.StringBuilder sb)
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
    IL_0000:  nop
//000140: 			Dim sb = New StringBuilder(genome.Text)
    IL_0001:  ldarg.2
    IL_0002:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0007:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor(string)
    IL_000c:  stloc.0
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
    IL_000d:  ldloc.0
    IL_000e:  ldarg.1
    IL_000f:  ldc.i4.0
    IL_0010:  ldarg.2
    IL_0011:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0016:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_001b:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0020:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0025:  ldarg.1
    IL_0026:  ldc.i4.0
    IL_0027:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_002c:  ldlen
    IL_002d:  conv.ovf.i4
    IL_002e:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0033:  ldelem.u2
    IL_0034:  callvirt   instance void [mscorlib]System.Text.StringBuilder::set_Chars(int32,
                                                                                      char)
    IL_0039:  nop
//000142: 			genome.Text = sb.ToString()
    IL_003a:  ldarg.2
    IL_003b:  ldloc.0
    IL_003c:  callvirt   instance string [mscorlib]System.Text.StringBuilder::ToString()
    IL_0041:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    IL_0046:  nop
//000143: 		End Sub
    IL_0047:  nop
    IL_0048:  ret
  } // end of method TextMatchGeneticAlgorithm::Mutate

  .method private specialname instance valuetype ShakespeareanMonkeys.TextMatchGenome 
          _Lambda$__4(int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  2
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome _Lambda$__4)
//000066: 			    Select CreateRandomGenome(_random)).ToArray()
    IL_0000:  ldarg.0
    IL_0001:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0006:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateRandomGenome(class [mscorlib]System.Random)
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method TextMatchGeneticAlgorithm::_Lambda$__4

  .method private specialname static int32 
          _Lambda$__5(valuetype ShakespeareanMonkeys.TextMatchGenome g) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 _Lambda$__5)
//000067: 		End Function
//000068: 
//000069: 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
//000070: 			Dim sb = New StringBuilder(_targetText.Length)
//000071:             For i = 0 To _targetText.Length - 1
//000072:                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
//000073:             Next i
//000074: 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
//000075: 		End Function
//000076: 
//000077: 		Private Function CreateNextGeneration() As TextMatchGenome()
//000078: 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
    IL_0000:  ldarga.s   g
    IL_0002:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method TextMatchGeneticAlgorithm::_Lambda$__5

  .method private specialname static valuetype ShakespeareanMonkeys.TextMatchGenome 
          _Lambda$__8(int32 i,
                      valuetype ShakespeareanMonkeys.TextMatchGenome child) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       6 (0x6)
    .maxstack  1
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome _Lambda$__8)
//000079: 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
//000080: 
//000081: 			If _runParallel Then
//000082:                 Return (
//000083:                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
//000084:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                     Select child).ToArray()
    IL_0000:  ldarg.1
    IL_0001:  stloc.0
    IL_0002:  br.s       IL_0004

    IL_0004:  ldloc.0
    IL_0005:  ret
  } // end of method TextMatchGeneticAlgorithm::_Lambda$__8

  .method private specialname static valuetype ShakespeareanMonkeys.TextMatchGenome 
          _Lambda$__10(int32 i,
                       valuetype ShakespeareanMonkeys.TextMatchGenome child) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       6 (0x6)
    .maxstack  1
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome _Lambda$__10)
//000087: 			Else
//000088:                 Return (
//000089:                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
//000090:                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000091:                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000092:                     Select child).ToArray()
    IL_0000:  ldarg.1
    IL_0001:  stloc.0
    IL_0002:  br.s       IL_0004

    IL_0004:  ldloc.0
    IL_0005:  ret
  } // end of method TextMatchGeneticAlgorithm::_Lambda$__10

  .property instance valuetype ShakespeareanMonkeys.TextMatchGenome
          CurrentBest()
  {
    .get instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::get_CurrentBest()
  } // end of property TextMatchGeneticAlgorithm::CurrentBest
} // end of class ShakespeareanMonkeys.TextMatchGeneticAlgorithm

.class public sequential ansi sealed ShakespeareanMonkeys.TextMatchGenome
       extends [mscorlib]System.ValueType
{
  .field private string _targetText
  .field private string _text
  .field private int32 privateFitness
  .method public specialname instance string 
          get_Text() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] string Text)
//000093: 			End If
//000094: 		End Function
//000095: 
//000096:         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
//000097:             ' Crossover parents to create two children.
//000098:             Dim child1 As TextMatchGenome = Nothing
//000099:             Dim child2 As TextMatchGenome = Nothing
//000100:             If _random.NextDouble() < _settings.CrossoverProbability Then
//000101:                 Crossover(_random, parent1, parent2, child1, child2)
//000102:             Else
//000103:                 child1 = parent1
//000104:                 child2 = parent2
//000105:             End If
//000106: 
//000107:             ' Potentially mutate one or both children.
//000108:             If _random.NextDouble() < _settings.MutationProbability Then
//000109:                 Mutate(_random, child1)
//000110:             End If
//000111:             If _random.NextDouble() < _settings.MutationProbability Then
//000112:                 Mutate(_random, child2)
//000113:             End If
//000114: 
//000115:             ' Return the young'ens.
//000116:             Return {child1, child2}
//000117:         End Function
//000118: 
//000119: 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
//000120:             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
//000121:             For i = 0 To _currentPopulation.Length - 1
//000122:                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
//000123:                 If val < maxMinusFitness Then
//000124:                     Return _currentPopulation(i)
//000125:                 End If
//000126:                 val -= maxMinusFitness
//000127:             Next i
//000128: 			Throw New InvalidOperationException("Not to be, apparently.")
//000129: 		End Function
//000130: 
//000131:         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
//000132:                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
//000133:                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
//000134:             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
//000135:             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000136:             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
//000137:         End Sub
//000138: 
//000139: 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
//000140: 			Dim sb = New StringBuilder(genome.Text)
//000141: 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
//000142: 			genome.Text = sb.ToString()
//000143: 		End Sub
//000144: 	End Class
//000145: 
//000146: 	Public Structure TextMatchGenome
//000147:         Private _targetText As String
//000148: 		Private _text As String
//000149: 
//000150: 		Public Property Text() As String
//000151: 			Get
    IL_0000:  nop
//000152: 				Return _text
    IL_0001:  ldarg.0
    IL_0002:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_text
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000153: 			End Get
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method TextMatchGenome::get_Text

  .method public specialname instance void 
          set_Text(string 'value') cil managed
  {
    // Code size       17 (0x11)
    .maxstack  8
//000154: 			Set(ByVal value As String)
    IL_0000:  nop
//000155: 				_text = value
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      string ShakespeareanMonkeys.TextMatchGenome::_text
//000156: 				RecomputeFitness()
    IL_0008:  ldarg.0
    IL_0009:  call       instance void ShakespeareanMonkeys.TextMatchGenome::RecomputeFitness()
    IL_000e:  nop
//000157: 			End Set
    IL_000f:  nop
    IL_0010:  ret
  } // end of method TextMatchGenome::set_Text

  .method public specialname instance string 
          get_TargetText() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] string TargetText)
//000158: 		End Property
//000159: 
//000160: 		Public Property TargetText() As String
//000161: 			Get
    IL_0000:  nop
//000162: 				Return _targetText
    IL_0001:  ldarg.0
    IL_0002:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000163: 			End Get
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method TextMatchGenome::get_TargetText

  .method public specialname instance void 
          set_TargetText(string 'value') cil managed
  {
    // Code size       17 (0x11)
    .maxstack  8
//000164: 			Set(ByVal value As String)
    IL_0000:  nop
//000165: 				_targetText = value
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
//000166: 				RecomputeFitness()
    IL_0008:  ldarg.0
    IL_0009:  call       instance void ShakespeareanMonkeys.TextMatchGenome::RecomputeFitness()
    IL_000e:  nop
//000167: 			End Set
    IL_000f:  nop
    IL_0010:  ret
  } // end of method TextMatchGenome::set_TargetText

  .method private instance void  RecomputeFitness() cil managed
  {
    // Code size       122 (0x7a)
    .maxstack  3
    .locals init ([0] int32 diffs,
             [1] int32 i,
             [2] int32 VB$t_i4$L0,
             [3] bool VB$CG$t_bool$S0,
             [4] int32 VB$CG$t_i4$S0)
//000168: 		End Property
//000169: 
//000170: 		Private Sub RecomputeFitness()
    IL_0000:  nop
//000171: 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_text
    IL_0007:  brfalse.s  IL_0011

    IL_0009:  ldarg.0
    IL_000a:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
    IL_000f:  brtrue.s   IL_0014

    IL_0011:  ldc.i4.0
    IL_0012:  br.s       IL_0015

    IL_0014:  ldc.i4.1
    IL_0015:  stloc.3
//000172:                 Dim diffs = 0
//000173:                 For i = 0 To _targetText.Length - 1
//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0016:  ldloc.3
    IL_0017:  brfalse.s  IL_006a

//000172:                 Dim diffs = 0
    IL_0019:  ldc.i4.0
    IL_001a:  stloc.0
//000173:                 For i = 0 To _targetText.Length - 1
    IL_001b:  ldc.i4.0
    IL_001c:  ldarg.0
    IL_001d:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
    IL_0022:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0027:  ldc.i4.1
    IL_0028:  sub.ovf
    IL_0029:  stloc.2
    IL_002a:  stloc.1
    IL_002b:  br.s       IL_0058

//000174:                     If _targetText.Chars(i) <> _text.Chars(i) Then
    IL_002d:  ldarg.0
    IL_002e:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
    IL_0033:  ldloc.1
    IL_0034:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_0039:  ldarg.0
    IL_003a:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_text
    IL_003f:  ldloc.1
    IL_0040:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_0045:  ceq
    IL_0047:  ldc.i4.0
    IL_0048:  ceq
    IL_004a:  stloc.3
//000175:                         diffs += 1
//000176:                     End If
//000177:                 Next i
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_004b:  ldloc.3
    IL_004c:  brfalse.s  IL_0052

//000175:                         diffs += 1
    IL_004e:  ldloc.0
    IL_004f:  ldc.i4.1
    IL_0050:  add.ovf
    IL_0051:  stloc.0
//000176:                     End If
    IL_0052:  nop
//000177:                 Next i
    IL_0053:  nop
    IL_0054:  ldloc.1
    IL_0055:  ldc.i4.1
    IL_0056:  add.ovf
    IL_0057:  stloc.1
//000178: 				Fitness = diffs
//000179: 			Else
//000180: 				Fitness = Int32.MaxValue
//000181: 			End If
//000182: 		End Sub
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
//000187: 				Return privateFitness
//000188: 			End Get
//000189: 			Private Set(ByVal value As Integer)
//000190: 				privateFitness = value
//000191: 			End Set
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0058:  ldloc.1
    IL_0059:  ldloc.2
    IL_005a:  stloc.s    VB$CG$t_i4$S0
    IL_005c:  ldloc.s    VB$CG$t_i4$S0
    IL_005e:  ble.s      IL_002d

//000178: 				Fitness = diffs
    IL_0060:  ldarg.0
    IL_0061:  ldloc.0
    IL_0062:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Fitness(int32)
    IL_0067:  nop
    IL_0068:  br.s       IL_0077

//000179: 			Else
    IL_006a:  nop
//000180: 				Fitness = Int32.MaxValue
    IL_006b:  ldarg.0
    IL_006c:  ldc.i4     0x7fffffff
    IL_0071:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Fitness(int32)
    IL_0076:  nop
//000181: 			End If
    IL_0077:  nop
//000182: 		End Sub
    IL_0078:  nop
    IL_0079:  ret
  } // end of method TextMatchGenome::RecomputeFitness

  .method public specialname instance int32 
          get_Fitness() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 Fitness)
//000183: 
//000184: 		Private privateFitness As Integer
//000185: 		Public Property Fitness() As Integer
//000186: 			Get
    IL_0000:  nop
//000187: 				Return privateFitness
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 ShakespeareanMonkeys.TextMatchGenome::privateFitness
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000188: 			End Get
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method TextMatchGenome::get_Fitness

  .method private specialname instance void 
          set_Fitness(int32 'value') cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
//000189: 			Private Set(ByVal value As Integer)
    IL_0000:  nop
//000190: 				privateFitness = value
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      int32 ShakespeareanMonkeys.TextMatchGenome::privateFitness
//000191: 			End Set
    IL_0008:  nop
    IL_0009:  ret
  } // end of method TextMatchGenome::set_Fitness

  .property instance string Text()
  {
    .set instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    .get instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
  } // end of property TextMatchGenome::Text
  .property instance string TargetText()
  {
    .get instance string ShakespeareanMonkeys.TextMatchGenome::get_TargetText()
    .set instance void ShakespeareanMonkeys.TextMatchGenome::set_TargetText(string)
  } // end of property TextMatchGenome::TargetText
  .property instance int32 Fitness()
  {
    .set instance void ShakespeareanMonkeys.TextMatchGenome::set_Fitness(int32)
    .get instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
  } // end of property TextMatchGenome::Fitness
} // end of class ShakespeareanMonkeys.TextMatchGenome

.class public auto ansi ShakespeareanMonkeys.GeneticAlgorithmSettings
       extends [mscorlib]System.Object
{
  .field private int32 _populationSize
  .field private float64 _mutationProbability
  .field private float64 _crossoverProbability
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       47 (0x2f)
    .maxstack  8
//000192: 		End Property
//000193: 	End Structure
//000194: 
//000195: 	Public Class GeneticAlgorithmSettings
//000196: 		Public Property PopulationSize() As Integer
//000197: 			Get
//000198: 				Return _populationSize
//000199: 			End Get
//000200: 			Set(ByVal value As Integer)
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000232:         Private _populationSize As Integer = 30
    IL_0007:  ldarg.0
    IL_0008:  ldc.i4.s   30
    IL_000a:  stfld      int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::_populationSize
//000233:         Private _mutationProbability As Double = 0.01
    IL_000f:  ldarg.0
    IL_0010:  ldc.r8     1.e-002
    IL_0019:  stfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_mutationProbability
//000234:         Private _crossoverProbability As Double = 0.87
    IL_001e:  ldarg.0
    IL_001f:  ldc.r8     0.87
    IL_0028:  stfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_crossoverProbability
    IL_002d:  nop
    IL_002e:  ret
  } // end of method GeneticAlgorithmSettings::.ctor

  .method public specialname instance int32 
          get_PopulationSize() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 PopulationSize)
//000197: 			Get
    IL_0000:  nop
//000198: 				Return _populationSize
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::_populationSize
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000199: 			End Get
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method GeneticAlgorithmSettings::get_PopulationSize

  .method public specialname instance void 
          set_PopulationSize(int32 'value') cil managed
  {
    // Code size       40 (0x28)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
//000200: 			Set(ByVal value As Integer)
    IL_0000:  nop
//000201: 				If value < 1 OrElse value Mod 2 <> 0 Then
    IL_0001:  ldarg.1
    IL_0002:  ldc.i4.1
    IL_0003:  blt.s      IL_000e

    IL_0005:  ldarg.1
    IL_0006:  ldc.i4.2
    IL_0007:  rem
    IL_0008:  ldc.i4.0
    IL_0009:  bne.un.s   IL_000e

    IL_000b:  ldc.i4.0
    IL_000c:  br.s       IL_000f

    IL_000e:  ldc.i4.1
    IL_000f:  stloc.0
//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
//000203: 				End If
//000204: 				_populationSize = value
//000205: 			End Set
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
//000210: 				Return _mutationProbability
//000211: 			End Get
//000212: 			Set(ByVal value As Double)
//000213: 				If value < 0 OrElse value > 1 Then
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_0010:  ldloc.0
    IL_0011:  brfalse.s  IL_001e

//000202: 					Throw New ArgumentOutOfRangeException("PopulationSize")
    IL_0013:  ldstr      "PopulationSize"
    IL_0018:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_001d:  throw

//000203: 				End If
    IL_001e:  nop
//000204: 				_populationSize = value
    IL_001f:  ldarg.0
    IL_0020:  ldarg.1
    IL_0021:  stfld      int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::_populationSize
//000205: 			End Set
    IL_0026:  nop
    IL_0027:  ret
  } // end of method GeneticAlgorithmSettings::set_PopulationSize

  .method public specialname instance float64 
          get_MutationProbability() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] float64 MutationProbability)
//000206: 		End Property
//000207: 
//000208: 		Public Property MutationProbability() As Double
//000209: 			Get
    IL_0000:  nop
//000210: 				Return _mutationProbability
    IL_0001:  ldarg.0
    IL_0002:  ldfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_mutationProbability
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000211: 			End Get
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method GeneticAlgorithmSettings::get_MutationProbability

  .method public specialname instance void 
          set_MutationProbability(float64 'value') cil managed
  {
    // Code size       54 (0x36)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
//000212: 			Set(ByVal value As Double)
    IL_0000:  nop
//000213: 				If value < 0 OrElse value > 1 Then
    IL_0001:  ldarg.1
    IL_0002:  ldc.r8     0.0
    IL_000b:  blt.s      IL_001c

    IL_000d:  ldarg.1
    IL_000e:  ldc.r8     1.
    IL_0017:  bgt.s      IL_001c

    IL_0019:  ldc.i4.0
    IL_001a:  br.s       IL_001d

    IL_001c:  ldc.i4.1
    IL_001d:  stloc.0
//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
//000215: 				End If
//000216: 				_mutationProbability = value
//000217: 			End Set
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
//000222: 				Return _crossoverProbability
//000223: 			End Get
//000224: 			Set(ByVal value As Double)
//000225: 				If value < 0 OrElse value > 1 Then
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_001e:  ldloc.0
    IL_001f:  brfalse.s  IL_002c

//000214: 					Throw New ArgumentOutOfRangeException("MutationProbability")
    IL_0021:  ldstr      "MutationProbability"
    IL_0026:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_002b:  throw

//000215: 				End If
    IL_002c:  nop
//000216: 				_mutationProbability = value
    IL_002d:  ldarg.0
    IL_002e:  ldarg.1
    IL_002f:  stfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_mutationProbability
//000217: 			End Set
    IL_0034:  nop
    IL_0035:  ret
  } // end of method GeneticAlgorithmSettings::set_MutationProbability

  .method public specialname instance float64 
          get_CrossoverProbability() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] float64 CrossoverProbability)
//000218: 		End Property
//000219: 
//000220: 		Public Property CrossoverProbability() As Double
//000221: 			Get
    IL_0000:  nop
//000222: 				Return _crossoverProbability
    IL_0001:  ldarg.0
    IL_0002:  ldfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_crossoverProbability
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000223: 			End Get
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method GeneticAlgorithmSettings::get_CrossoverProbability

  .method public specialname instance void 
          set_CrossoverProbability(float64 'value') cil managed
  {
    // Code size       54 (0x36)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
//000224: 			Set(ByVal value As Double)
    IL_0000:  nop
//000225: 				If value < 0 OrElse value > 1 Then
    IL_0001:  ldarg.1
    IL_0002:  ldc.r8     0.0
    IL_000b:  blt.s      IL_001c

    IL_000d:  ldarg.1
    IL_000e:  ldc.r8     1.
    IL_0017:  bgt.s      IL_001c

    IL_0019:  ldc.i4.0
    IL_001a:  br.s       IL_001d

    IL_001c:  ldc.i4.1
    IL_001d:  stloc.0
//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
//000227: 				End If
//000228: 				_crossoverProbability = value
//000229: 			End Set
//000230: 		End Property
//000231: 
//000232:         Private _populationSize As Integer = 30
//000233:         Private _mutationProbability As Double = 0.01
//000234:         Private _crossoverProbability As Double = 0.87
//000235: 	End Class
//000236: End Namespace
    IL_001e:  ldloc.0
    IL_001f:  brfalse.s  IL_002c

//000226: 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
    IL_0021:  ldstr      "CrossoverProbability"
    IL_0026:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_002b:  throw

//000227: 				End If
    IL_002c:  nop
//000228: 				_crossoverProbability = value
    IL_002d:  ldarg.0
    IL_002e:  ldarg.1
    IL_002f:  stfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_crossoverProbability
//000229: 			End Set
    IL_0034:  nop
    IL_0035:  ret
  } // end of method GeneticAlgorithmSettings::set_CrossoverProbability

  .property instance int32 PopulationSize()
  {
    .get instance int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_PopulationSize()
    .set instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::set_PopulationSize(int32)
  } // end of property GeneticAlgorithmSettings::PopulationSize
  .property instance float64 MutationProbability()
  {
    .get instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_MutationProbability()
    .set instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::set_MutationProbability(float64)
  } // end of property GeneticAlgorithmSettings::MutationProbability
  .property instance float64 CrossoverProbability()
  {
    .get instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_CrossoverProbability()
    .set instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::set_CrossoverProbability(float64)
  } // end of property GeneticAlgorithmSettings::CrossoverProbability
} // end of class ShakespeareanMonkeys.GeneticAlgorithmSettings

.class private auto ansi sealed VB$AnonymousDelegate_0
       extends [mscorlib]System.MulticastDelegate
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 12 3C 67 65 6E 65 72 61 74 65 64 20 6D 65   // ...<generated me
                                                                                                 74 68 6F 64 3E 01 00 54 0E 04 54 79 70 65 12 3C   // thod>..T..Type.<
                                                                                                 67 65 6E 65 72 61 74 65 64 20 6D 65 74 68 6F 64   // generated method
                                                                                                 3E )                                              // >
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public specialname rtspecialname 
          instance void  .ctor(object TargetObject,
                               native int TargetMethod) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_0::.ctor

  .method public newslot strict virtual instance class [mscorlib]System.IAsyncResult 
          BeginInvoke(class [mscorlib]System.AsyncCallback DelegateCallback,
                      object DelegateAsyncState) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_0::BeginInvoke

  .method public newslot strict virtual instance void 
          EndInvoke(class [mscorlib]System.IAsyncResult DelegateAsyncResult) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_0::EndInvoke

  .method public newslot strict virtual instance void 
          Invoke() runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_0::Invoke

} // end of class VB$AnonymousDelegate_0


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
