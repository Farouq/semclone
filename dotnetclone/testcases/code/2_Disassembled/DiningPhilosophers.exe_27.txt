
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern Microsoft.VisualBasic
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 10:0:0:0
}
.assembly extern PresentationFramework
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern WindowsBase
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Xaml
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern PresentationCore
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly DiningPhilosophers
{
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 29 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ..).NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 2C 50 72   // ,Version=v4.0,Pr
                                                                                                        6F 66 69 6C 65 3D 43 6C 69 65 6E 74 01 00 54 0E   // ofile=Client..T.
                                                                                                        14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C 61   // .FrameworkDispla
                                                                                                        79 4E 61 6D 65 1F 2E 4E 45 54 20 46 72 61 6D 65   // yName..NET Frame
                                                                                                        77 6F 72 6B 20 34 20 43 6C 69 65 6E 74 20 50 72   // work 4 Client Pr
                                                                                                        6F 66 69 6C 65 )                                  // ofile
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 12 44 69 6E 69 6E 67 50 68 69 6C 6F 73 6F   // ...DiningPhiloso
                                                                                                70 68 65 72 73 00 00 )                            // phers..
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 12 44 69 6E 69 6E 67 50 68 69 6C 6F 73 6F   // ...DiningPhiloso
                                                                                              70 68 65 72 73 00 00 )                            // phers..

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [PresentationFramework]System.Windows.ThemeInfoAttribute::.ctor(valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation,
                                                                                        valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation) = ( 01 00 00 00 00 00 01 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public Resources.resources
{
  // Offset: 0x00000000 Length: 0x000000B4
}
.mresource public DiningPhilosophers.g.resources
{
  // Offset: 0x000000B8 Length: 0x000004C3
}
.module DiningPhilosophers.exe
// MVID: {B822FE05-CC0C-4921-804D-F84EB0900F4E}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x011D0000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi My.MyApplication
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase
{
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method MyApplication::.ctor

} // end of class My.MyApplication

.class private auto ansi My.MyComputer
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer
{
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  8
    .language '{3A12D0B8-C26C-11D0-B442-00A0244A1DD2}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File '17d14f5c-a337-4978-8281-53493378c1071.vb' not found
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer::.ctor()
    IL_0007:  nop
    IL_0008:  nop
    IL_0009:  ret
  } // end of method MyComputer::.ctor

} // end of class My.MyComputer

.class private auto ansi sealed beforefieldinit My.MyProject
       extends [mscorlib]System.Object
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi sealed nested assembly MyWebServices
         extends [mscorlib]System.Object
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.MyGroupCollectionAttribute::.ctor(string,
                                                                                                         string,
                                                                                                         string,
                                                                                                         string) = ( 01 00 34 53 79 73 74 65 6D 2E 57 65 62 2E 53 65   // ..4System.Web.Se
                                                                                                                     72 76 69 63 65 73 2E 50 72 6F 74 6F 63 6F 6C 73   // rvices.Protocols
                                                                                                                     2E 53 6F 61 70 48 74 74 70 43 6C 69 65 6E 74 50   // .SoapHttpClientP
                                                                                                                     72 6F 74 6F 63 6F 6C 12 43 72 65 61 74 65 5F 5F   // rotocol.Create__
                                                                                                                     49 6E 73 74 61 6E 63 65 5F 5F 13 44 69 73 70 6F   // Instance__.Dispo
                                                                                                                     73 65 5F 5F 49 6E 73 74 61 6E 63 65 5F 5F 00 00   // se__Instance__..
                                                                                                                     00 ) 
    .method public strict virtual instance bool 
            Equals(object o) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] bool Equals)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_0008:  call       instance bool [mscorlib]System.Object::Equals(object)
      IL_000d:  stloc.0
      IL_000e:  br.s       IL_0010

      IL_0010:  ldloc.0
      IL_0011:  ret
    } // end of method MyWebServices::Equals

    .method public strict virtual instance int32 
            GetHashCode() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] int32 GetHashCode)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 [mscorlib]System.Object::GetHashCode()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::GetHashCode

    .method assembly hidebysig instance class [mscorlib]System.Type 
            GetType() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       16 (0x10)
      .maxstack  1
      .locals init ([0] class [mscorlib]System.Type GetType)
      IL_0000:  nop
      IL_0001:  ldtoken    My.MyProject/MyWebServices
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  stloc.0
      IL_000c:  br.s       IL_000e

      IL_000e:  ldloc.0
      IL_000f:  ret
    } // end of method MyWebServices::GetType

    .method public strict virtual instance string 
            ToString() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] string ToString)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string [mscorlib]System.Object::ToString()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::ToString

    .method private static !!T  Create__Instance__<.ctor T>(!!T 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       32 (0x20)
      .maxstack  2
      .locals init ([0] !!T Create__Instance__,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  box        !!T
      IL_0007:  ldnull
      IL_0008:  ceq
      IL_000a:  stloc.1
      IL_000b:  ldloc.1
      IL_000c:  brfalse.s  IL_0018

      IL_000e:  call       !!0 [mscorlib]System.Activator::CreateInstance<!!0>()
      IL_0013:  stloc.0
      IL_0014:  br.s       IL_001e

      IL_0016:  br.s       IL_001d

      IL_0018:  nop
      IL_0019:  ldarg.0
      IL_001a:  stloc.0
      IL_001b:  br.s       IL_001e

      IL_001d:  nop
      IL_001e:  ldloc.0
      IL_001f:  ret
    } // end of method MyWebServices::Create__Instance__

    .method private instance void  Dispose__Instance__<T>(!!T& 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] !!T VB$t_generic$S0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldloca.s   VB$t_generic$S0
      IL_0004:  initobj    !!T
      IL_000a:  ldloc.0
      IL_000b:  stobj      !!T
      IL_0010:  nop
      IL_0011:  ret
    } // end of method MyWebServices::Dispose__Instance__

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MyWebServices::.ctor

  } // end of class MyWebServices

  .class auto ansi sealed nested assembly ThreadSafeObjectProvider`1<.ctor T>
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .field private static !T m_ThreadStaticValue
    .custom instance void [mscorlib]System.ThreadStaticAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname instance !T 
            get_GetInstance() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       38 (0x26)
      .maxstack  2
      .locals init ([0] !T GetInstance,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0006:  box        !T
      IL_000b:  ldnull
      IL_000c:  ceq
      IL_000e:  stloc.1
      IL_000f:  ldloc.1
      IL_0010:  brfalse.s  IL_001c

      IL_0012:  call       !!0 [mscorlib]System.Activator::CreateInstance<!T>()
      IL_0017:  stsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_001c:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0021:  stloc.0
      IL_0022:  br.s       IL_0024

      IL_0024:  ldloc.0
      IL_0025:  ret
    } // end of method ThreadSafeObjectProvider`1::get_GetInstance

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method ThreadSafeObjectProvider`1::.ctor

    .property instance !T GetInstance()
    {
      .get instance !T My.MyProject/ThreadSafeObjectProvider`1::get_GetInstance()
    } // end of property ThreadSafeObjectProvider`1::GetInstance
  } // end of class ThreadSafeObjectProvider`1

  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> m_ComputerObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> m_AppObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> m_UserObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> m_MyWebServicesObjectProvider
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       42 (0x2a)
    .maxstack  8
    IL_0000:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::.ctor()
    IL_0005:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_000a:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::.ctor()
    IL_000f:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0014:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::.ctor()
    IL_0019:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_001e:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::.ctor()
    IL_0023:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0028:  nop
    IL_0029:  ret
  } // end of method MyProject::.cctor

  .method assembly specialname static class My.MyComputer 
          get_Computer() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyComputer Computer)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Computer

  .method assembly specialname static class My.MyApplication 
          get_Application() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyApplication Application)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Application

  .method assembly specialname static class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User 
          get_User() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User User)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_User

  .method assembly specialname static class My.MyProject/MyWebServices 
          get_WebServices() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyProject/MyWebServices WebServices)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_WebServices

  .property class My.MyComputer Computer()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0B 4D 79 2E 43 6F 6D 70 75 74 65 72 00 00 ) // ...My.Computer..
    .get class My.MyComputer My.MyProject::get_Computer()
  } // end of property MyProject::Computer
  .property class My.MyApplication Application()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 41 70 70 6C 69 63 61 74 69 6F   // ...My.Applicatio
                                                                                                       6E 00 00 )                                        // n..
    .get class My.MyApplication My.MyProject::get_Application()
  } // end of property MyProject::Application
  .property class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User
          User()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 07 4D 79 2E 55 73 65 72 00 00 )             // ...My.User..
    .get class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User My.MyProject::get_User()
  } // end of property MyProject::User
  .property class My.MyProject/MyWebServices
          WebServices()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 57 65 62 53 65 72 76 69 63 65   // ...My.WebService
                                                                                                       73 00 00 )                                        // s..
    .get class My.MyProject/MyWebServices My.MyProject::get_WebServices()
  } // end of property MyProject::WebServices
} // end of class My.MyProject

.class public auto ansi beforefieldinit DiningPhilosophers.App
       extends [PresentationFramework]System.Windows.Application
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
    IL_000a:  nop
    IL_000b:  ret
  } // end of method App::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationFramework]System.Windows.Application::.ctor()
    IL_0006:  nop
    IL_0007:  ldarg.0
    IL_0008:  call       void DiningPhilosophers.App::__ENCAddToList(object)
    IL_000d:  nop
    IL_000e:  nop
    IL_000f:  ret
  } // end of method App::.ctor

  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.App::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method App::__ENCAddToList

  .method public instance void  InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       21 (0x15)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\DiningPhilosophers\DiningPhilosophers_VisualBasic\obj\Debug\Application.g.vb' 
//000049:         Public Sub InitializeComponent()
    IL_0000:  nop
//000050:             
//000051:             #ExternalSource("..\..\Application.xaml",4)
//000052:             Me.StartupUri = New System.Uri("MainWindow.xaml", System.UriKind.Relative)
    IL_0001:  ldarg.0
    IL_0002:  ldstr      "MainWindow.xaml"
    IL_0007:  ldc.i4.2
    IL_0008:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_000d:  callvirt   instance void [PresentationFramework]System.Windows.Application::set_StartupUri(class [System]System.Uri)
    IL_0012:  nop
//000053:             
//000054:             #End ExternalSource
//000055:         End Sub
    IL_0013:  nop
    IL_0014:  ret
  } // end of method App::InitializeComponent

  .method public static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       23 (0x17)
    .maxstack  1
    .locals init ([0] class DiningPhilosophers.App app)
//000056:         
//000057:         '''<summary>
//000058:         '''Application Entry Point.
//000059:         '''</summary>
//000060:         <System.STAThreadAttribute(),  _
//000061:          System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
//000062:         Public Shared Sub Main()
    IL_0000:  nop
//000063:             Dim app As DiningPhilosophers.App = New DiningPhilosophers.App()
    IL_0001:  newobj     instance void DiningPhilosophers.App::.ctor()
    IL_0006:  stloc.0
//000064:             app.InitializeComponent
    IL_0007:  ldloc.0
    IL_0008:  callvirt   instance void DiningPhilosophers.App::InitializeComponent()
    IL_000d:  nop
//000065:             app.Run
    IL_000e:  ldloc.0
    IL_000f:  callvirt   instance int32 [PresentationFramework]System.Windows.Application::Run()
    IL_0014:  pop
//000066:         End Sub
    IL_0015:  nop
    IL_0016:  ret
  } // end of method App::Main

} // end of class DiningPhilosophers.App

.class public auto ansi DiningPhilosophers.CircularPanel
       extends [PresentationFramework]System.Windows.Controls.Panel
{
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationFramework]System.Windows.Controls.Panel::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method CircularPanel::.ctor

  .method family strict virtual instance valuetype [WindowsBase]System.Windows.Size 
          MeasureOverride(valuetype [WindowsBase]System.Windows.Size availableSize) cil managed
  {
    // Code size       215 (0xd7)
    .maxstack  2
    .locals init ([0] valuetype [WindowsBase]System.Windows.Size maxChildSize,
             [1] valuetype [WindowsBase]System.Windows.Size MeasureOverride,
             [2] class [PresentationCore]System.Windows.UIElement child,
             [3] valuetype [WindowsBase]System.Windows.Size VB$t_struct$S0,
             [4] class [mscorlib]System.Collections.IEnumerator VB$t_ref$L0,
             [5] valuetype [WindowsBase]System.Windows.Size VB$t_struct$S1,
             [6] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\DiningPhilosophers\DiningPhilosophers_VisualBasic\CircularPanel.vb' 
//000013: 		Protected Overrides Function MeasureOverride(ByVal availableSize As Size) As Size
    IL_0000:  nop
//000014: 			Dim maxChildSize = New Size()
    IL_0001:  ldloca.s   maxChildSize
    IL_0003:  initobj    [WindowsBase]System.Windows.Size
//000015:             For Each child As UIElement In InternalChildren
//000016:                 child.Measure(availableSize)
//000017:                 If maxChildSize.Width < child.DesiredSize.Width Then
//000018:                     maxChildSize.Width = child.DesiredSize.Width
//000019:                 End If
//000020:                 If maxChildSize.Height < child.DesiredSize.Height Then
//000021:                     maxChildSize.Height = child.DesiredSize.Height
//000022:                 End If
//000023:             Next child
//000024: 			Return maxChildSize
//000025: 		End Function
//000026: 
//000027: 		Protected Overrides Function ArrangeOverride(ByVal finalSize As Size) As Size
//000028: 			Dim children = InternalChildren.OfType(Of UIElement)().ToArray()
//000029: 			If children.Length > 0 Then
//000030:                 Dim midPanel = New Point(finalSize.Width / 2, finalSize.Height / 2)
//000031: 				Dim maxChild = New Size(children.Max(Function(u) u.DesiredSize.Width), children.Max(Function(u) u.DesiredSize.Height))
//000032: 				Dim radius = New Size((finalSize.Width - maxChild.Width) / 2, (finalSize.Height - maxChild.Height) / 2)
//000033:                 Dim arcRadiansPerChild = Math.PI * 2 / children.Length
//000034: 
//000035:                 Dim curPos = 0
//000036: 				For Each child In children
//000037: 					Dim childAngleInRadians = curPos * arcRadiansPerChild
//000038:                     Dim childPosition = New Point((Math.Sin(childAngleInRadians) * radius.Width) + (midPanel.X - (child.DesiredSize.Width / 2)),
//000039:                                                   (Math.Cos(childAngleInRadians) * radius.Height) + (midPanel.Y - (child.DesiredSize.Height / 2)))
//000040: 					child.Arrange(New Rect(childPosition, child.DesiredSize))
//000041: 					curPos += 1
//000042: 				Next child
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
    IL_0009:  nop
//000015:             For Each child As UIElement In InternalChildren
    .try
    {
      IL_000a:  ldarg.0
      IL_000b:  callvirt   instance class [PresentationFramework]System.Windows.Controls.UIElementCollection [PresentationFramework]System.Windows.Controls.Panel::get_InternalChildren()
      IL_0010:  callvirt   instance class [mscorlib]System.Collections.IEnumerator [PresentationFramework]System.Windows.Controls.UIElementCollection::GetEnumerator()
      IL_0015:  stloc.s    VB$t_ref$L0
      IL_0017:  br         IL_009c

//000016:                 child.Measure(availableSize)
//000017:                 If maxChildSize.Width < child.DesiredSize.Width Then
//000018:                     maxChildSize.Width = child.DesiredSize.Width
//000019:                 End If
//000020:                 If maxChildSize.Height < child.DesiredSize.Height Then
//000021:                     maxChildSize.Height = child.DesiredSize.Height
//000022:                 End If
//000023:             Next child
//000024: 			Return maxChildSize
//000025: 		End Function
//000026: 
//000027: 		Protected Overrides Function ArrangeOverride(ByVal finalSize As Size) As Size
//000028: 			Dim children = InternalChildren.OfType(Of UIElement)().ToArray()
//000029: 			If children.Length > 0 Then
//000030:                 Dim midPanel = New Point(finalSize.Width / 2, finalSize.Height / 2)
//000031: 				Dim maxChild = New Size(children.Max(Function(u) u.DesiredSize.Width), children.Max(Function(u) u.DesiredSize.Height))
//000032: 				Dim radius = New Size((finalSize.Width - maxChild.Width) / 2, (finalSize.Height - maxChild.Height) / 2)
//000033:                 Dim arcRadiansPerChild = Math.PI * 2 / children.Length
//000034: 
//000035:                 Dim curPos = 0
//000036: 				For Each child In children
//000037: 					Dim childAngleInRadians = curPos * arcRadiansPerChild
//000038:                     Dim childPosition = New Point((Math.Sin(childAngleInRadians) * radius.Width) + (midPanel.X - (child.DesiredSize.Width / 2)),
//000039:                                                   (Math.Cos(childAngleInRadians) * radius.Height) + (midPanel.Y - (child.DesiredSize.Height / 2)))
//000040: 					child.Arrange(New Rect(childPosition, child.DesiredSize))
//000041: 					curPos += 1
//000042: 				Next child
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
      IL_001c:  ldloc.s    VB$t_ref$L0
      IL_001e:  callvirt   instance object [mscorlib]System.Collections.IEnumerator::get_Current()
      IL_0023:  castclass  [PresentationCore]System.Windows.UIElement
      IL_0028:  stloc.2
//000016:                 child.Measure(availableSize)
      IL_0029:  ldloc.2
      IL_002a:  ldarg.1
      IL_002b:  callvirt   instance void [PresentationCore]System.Windows.UIElement::Measure(valuetype [WindowsBase]System.Windows.Size)
      IL_0030:  nop
//000017:                 If maxChildSize.Width < child.DesiredSize.Width Then
      IL_0031:  ldloca.s   maxChildSize
      IL_0033:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
      IL_0038:  ldloc.2
      IL_0039:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
      IL_003e:  stloc.3
      IL_003f:  ldloca.s   VB$t_struct$S0
      IL_0041:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
      IL_0046:  clt
      IL_0048:  stloc.s    VB$CG$t_bool$S0
//000018:                     maxChildSize.Width = child.DesiredSize.Width
//000019:                 End If
//000020:                 If maxChildSize.Height < child.DesiredSize.Height Then
//000021:                     maxChildSize.Height = child.DesiredSize.Height
//000022:                 End If
//000023:             Next child
//000024: 			Return maxChildSize
//000025: 		End Function
//000026: 
//000027: 		Protected Overrides Function ArrangeOverride(ByVal finalSize As Size) As Size
//000028: 			Dim children = InternalChildren.OfType(Of UIElement)().ToArray()
//000029: 			If children.Length > 0 Then
//000030:                 Dim midPanel = New Point(finalSize.Width / 2, finalSize.Height / 2)
//000031: 				Dim maxChild = New Size(children.Max(Function(u) u.DesiredSize.Width), children.Max(Function(u) u.DesiredSize.Height))
//000032: 				Dim radius = New Size((finalSize.Width - maxChild.Width) / 2, (finalSize.Height - maxChild.Height) / 2)
//000033:                 Dim arcRadiansPerChild = Math.PI * 2 / children.Length
//000034: 
//000035:                 Dim curPos = 0
//000036: 				For Each child In children
//000037: 					Dim childAngleInRadians = curPos * arcRadiansPerChild
//000038:                     Dim childPosition = New Point((Math.Sin(childAngleInRadians) * radius.Width) + (midPanel.X - (child.DesiredSize.Width / 2)),
//000039:                                                   (Math.Cos(childAngleInRadians) * radius.Height) + (midPanel.Y - (child.DesiredSize.Height / 2)))
//000040: 					child.Arrange(New Rect(childPosition, child.DesiredSize))
//000041: 					curPos += 1
//000042: 				Next child
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
      IL_004a:  ldloc.s    VB$CG$t_bool$S0
      IL_004c:  brfalse.s  IL_0065

//000018:                     maxChildSize.Width = child.DesiredSize.Width
      IL_004e:  ldloca.s   maxChildSize
      IL_0050:  ldloc.2
      IL_0051:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
      IL_0056:  stloc.s    VB$t_struct$S1
      IL_0058:  ldloca.s   VB$t_struct$S1
      IL_005a:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
      IL_005f:  call       instance void [WindowsBase]System.Windows.Size::set_Width(float64)
      IL_0064:  nop
//000019:                 End If
      IL_0065:  nop
//000020:                 If maxChildSize.Height < child.DesiredSize.Height Then
      IL_0066:  ldloca.s   maxChildSize
      IL_0068:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
      IL_006d:  ldloc.2
      IL_006e:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
      IL_0073:  stloc.s    VB$t_struct$S1
      IL_0075:  ldloca.s   VB$t_struct$S1
      IL_0077:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
      IL_007c:  clt
      IL_007e:  stloc.s    VB$CG$t_bool$S0
//000021:                     maxChildSize.Height = child.DesiredSize.Height
//000022:                 End If
//000023:             Next child
//000024: 			Return maxChildSize
//000025: 		End Function
//000026: 
//000027: 		Protected Overrides Function ArrangeOverride(ByVal finalSize As Size) As Size
//000028: 			Dim children = InternalChildren.OfType(Of UIElement)().ToArray()
//000029: 			If children.Length > 0 Then
//000030:                 Dim midPanel = New Point(finalSize.Width / 2, finalSize.Height / 2)
//000031: 				Dim maxChild = New Size(children.Max(Function(u) u.DesiredSize.Width), children.Max(Function(u) u.DesiredSize.Height))
//000032: 				Dim radius = New Size((finalSize.Width - maxChild.Width) / 2, (finalSize.Height - maxChild.Height) / 2)
//000033:                 Dim arcRadiansPerChild = Math.PI * 2 / children.Length
//000034: 
//000035:                 Dim curPos = 0
//000036: 				For Each child In children
//000037: 					Dim childAngleInRadians = curPos * arcRadiansPerChild
//000038:                     Dim childPosition = New Point((Math.Sin(childAngleInRadians) * radius.Width) + (midPanel.X - (child.DesiredSize.Width / 2)),
//000039:                                                   (Math.Cos(childAngleInRadians) * radius.Height) + (midPanel.Y - (child.DesiredSize.Height / 2)))
//000040: 					child.Arrange(New Rect(childPosition, child.DesiredSize))
//000041: 					curPos += 1
//000042: 				Next child
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
      IL_0080:  ldloc.s    VB$CG$t_bool$S0
      IL_0082:  brfalse.s  IL_009a

//000021:                     maxChildSize.Height = child.DesiredSize.Height
      IL_0084:  ldloca.s   maxChildSize
      IL_0086:  ldloc.2
      IL_0087:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
      IL_008c:  stloc.3
      IL_008d:  ldloca.s   VB$t_struct$S0
      IL_008f:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
      IL_0094:  call       instance void [WindowsBase]System.Windows.Size::set_Height(float64)
      IL_0099:  nop
//000022:                 End If
      IL_009a:  nop
//000023:             Next child
      IL_009b:  nop
//000024: 			Return maxChildSize
//000025: 		End Function
//000026: 
//000027: 		Protected Overrides Function ArrangeOverride(ByVal finalSize As Size) As Size
//000028: 			Dim children = InternalChildren.OfType(Of UIElement)().ToArray()
//000029: 			If children.Length > 0 Then
//000030:                 Dim midPanel = New Point(finalSize.Width / 2, finalSize.Height / 2)
//000031: 				Dim maxChild = New Size(children.Max(Function(u) u.DesiredSize.Width), children.Max(Function(u) u.DesiredSize.Height))
//000032: 				Dim radius = New Size((finalSize.Width - maxChild.Width) / 2, (finalSize.Height - maxChild.Height) / 2)
//000033:                 Dim arcRadiansPerChild = Math.PI * 2 / children.Length
//000034: 
//000035:                 Dim curPos = 0
//000036: 				For Each child In children
//000037: 					Dim childAngleInRadians = curPos * arcRadiansPerChild
//000038:                     Dim childPosition = New Point((Math.Sin(childAngleInRadians) * radius.Width) + (midPanel.X - (child.DesiredSize.Width / 2)),
//000039:                                                   (Math.Cos(childAngleInRadians) * radius.Height) + (midPanel.Y - (child.DesiredSize.Height / 2)))
//000040: 					child.Arrange(New Rect(childPosition, child.DesiredSize))
//000041: 					curPos += 1
//000042: 				Next child
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
      IL_009c:  ldloc.s    VB$t_ref$L0
      IL_009e:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_00a3:  stloc.s    VB$CG$t_bool$S0
      IL_00a5:  ldloc.s    VB$CG$t_bool$S0
      IL_00a7:  brtrue     IL_001c

      IL_00ac:  nop
      IL_00ad:  leave.s    IL_00d1

    }  // end .try
    finally
    {
      IL_00af:  ldloc.s    VB$t_ref$L0
      IL_00b1:  isinst     [mscorlib]System.IDisposable
      IL_00b6:  ldnull
      IL_00b7:  ceq
      IL_00b9:  ldc.i4.0
      IL_00ba:  ceq
      IL_00bc:  stloc.s    VB$CG$t_bool$S0
      IL_00be:  ldloc.s    VB$CG$t_bool$S0
      IL_00c0:  brfalse.s  IL_00cf

      IL_00c2:  ldloc.s    VB$t_ref$L0
      IL_00c4:  isinst     [mscorlib]System.IDisposable
      IL_00c9:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_00ce:  nop
      IL_00cf:  nop
      IL_00d0:  endfinally
//000024: 			Return maxChildSize
    }  // end handler
    IL_00d1:  ldloc.0
    IL_00d2:  stloc.1
    IL_00d3:  br.s       IL_00d5

//000025: 		End Function
    IL_00d5:  ldloc.1
    IL_00d6:  ret
  } // end of method CircularPanel::MeasureOverride

  .method family strict virtual instance valuetype [WindowsBase]System.Windows.Size 
          ArrangeOverride(valuetype [WindowsBase]System.Windows.Size finalSize) cil managed
  {
    // Code size       388 (0x184)
    .maxstack  6
    .locals init ([0] valuetype [WindowsBase]System.Windows.Size ArrangeOverride,
             [1] class [PresentationCore]System.Windows.UIElement[] children,
             [2] float64 arcRadiansPerChild,
             [3] int32 curPos,
             [4] valuetype [WindowsBase]System.Windows.Size maxChild,
             [5] valuetype [WindowsBase]System.Windows.Point midPanel,
             [6] valuetype [WindowsBase]System.Windows.Size radius,
             [7] class [PresentationCore]System.Windows.UIElement child,
             [8] float64 childAngleInRadians,
             [9] valuetype [WindowsBase]System.Windows.Point childPosition,
             [10] valuetype [WindowsBase]System.Windows.Size VB$t_struct$S1,
             [11] int32 VB$t_i4$L0,
             [12] class [PresentationCore]System.Windows.UIElement[] VB$t_array$L0,
             [13] valuetype [WindowsBase]System.Windows.Size VB$t_struct$S2,
             [14] valuetype [WindowsBase]System.Windows.Rect VB$t_struct$S3,
             [15] bool VB$CG$t_bool$S0)
//000026: 
//000027: 		Protected Overrides Function ArrangeOverride(ByVal finalSize As Size) As Size
    IL_0000:  nop
//000028: 			Dim children = InternalChildren.OfType(Of UIElement)().ToArray()
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance class [PresentationFramework]System.Windows.Controls.UIElementCollection [PresentationFramework]System.Windows.Controls.Panel::get_InternalChildren()
    IL_0007:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0> [System.Core]System.Linq.Enumerable::OfType<class [PresentationCore]System.Windows.UIElement>(class [mscorlib]System.Collections.IEnumerable)
    IL_000c:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<class [PresentationCore]System.Windows.UIElement>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_0011:  stloc.1
//000029: 			If children.Length > 0 Then
    IL_0012:  ldloc.1
    IL_0013:  ldlen
    IL_0014:  conv.ovf.i4
    IL_0015:  ldc.i4.0
    IL_0016:  cgt
    IL_0018:  stloc.s    VB$CG$t_bool$S0
//000030:                 Dim midPanel = New Point(finalSize.Width / 2, finalSize.Height / 2)
//000031: 				Dim maxChild = New Size(children.Max(Function(u) u.DesiredSize.Width), children.Max(Function(u) u.DesiredSize.Height))
//000032: 				Dim radius = New Size((finalSize.Width - maxChild.Width) / 2, (finalSize.Height - maxChild.Height) / 2)
//000033:                 Dim arcRadiansPerChild = Math.PI * 2 / children.Length
//000034: 
//000035:                 Dim curPos = 0
//000036: 				For Each child In children
//000037: 					Dim childAngleInRadians = curPos * arcRadiansPerChild
//000038:                     Dim childPosition = New Point((Math.Sin(childAngleInRadians) * radius.Width) + (midPanel.X - (child.DesiredSize.Width / 2)),
//000039:                                                   (Math.Cos(childAngleInRadians) * radius.Height) + (midPanel.Y - (child.DesiredSize.Height / 2)))
//000040: 					child.Arrange(New Rect(childPosition, child.DesiredSize))
//000041: 					curPos += 1
//000042: 				Next child
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
    IL_001a:  ldloc.s    VB$CG$t_bool$S0
    IL_001c:  brfalse    IL_017d

//000030:                 Dim midPanel = New Point(finalSize.Width / 2, finalSize.Height / 2)
    IL_0021:  ldloca.s   midPanel
    IL_0023:  ldarga.s   finalSize
    IL_0025:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
    IL_002a:  ldc.r8     2.
    IL_0033:  div
    IL_0034:  ldarga.s   finalSize
    IL_0036:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
    IL_003b:  ldc.r8     2.
    IL_0044:  div
    IL_0045:  call       instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_004a:  nop
//000031: 				Dim maxChild = New Size(children.Max(Function(u) u.DesiredSize.Width), children.Max(Function(u) u.DesiredSize.Height))
    IL_004b:  ldloca.s   maxChild
    IL_004d:  ldloc.1
    IL_004e:  ldnull
    IL_004f:  ldftn      float64 DiningPhilosophers.CircularPanel::_Lambda$__1(class [PresentationCore]System.Windows.UIElement)
    IL_0055:  newobj     instance void class [mscorlib]System.Func`2<class [PresentationCore]System.Windows.UIElement,float64>::.ctor(object,
                                                                                                                                      native int)
    IL_005a:  call       float64 [System.Core]System.Linq.Enumerable::Max<class [PresentationCore]System.Windows.UIElement>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                            class [mscorlib]System.Func`2<!!0,float64>)
    IL_005f:  ldloc.1
    IL_0060:  ldnull
    IL_0061:  ldftn      float64 DiningPhilosophers.CircularPanel::_Lambda$__2(class [PresentationCore]System.Windows.UIElement)
    IL_0067:  newobj     instance void class [mscorlib]System.Func`2<class [PresentationCore]System.Windows.UIElement,float64>::.ctor(object,
                                                                                                                                      native int)
    IL_006c:  call       float64 [System.Core]System.Linq.Enumerable::Max<class [PresentationCore]System.Windows.UIElement>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                            class [mscorlib]System.Func`2<!!0,float64>)
    IL_0071:  call       instance void [WindowsBase]System.Windows.Size::.ctor(float64,
                                                                               float64)
    IL_0076:  nop
//000032: 				Dim radius = New Size((finalSize.Width - maxChild.Width) / 2, (finalSize.Height - maxChild.Height) / 2)
    IL_0077:  ldloca.s   radius
    IL_0079:  ldarga.s   finalSize
    IL_007b:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
    IL_0080:  ldloca.s   maxChild
    IL_0082:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
    IL_0087:  sub
    IL_0088:  ldc.r8     2.
    IL_0091:  div
    IL_0092:  ldarga.s   finalSize
    IL_0094:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
    IL_0099:  ldloca.s   maxChild
    IL_009b:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
    IL_00a0:  sub
    IL_00a1:  ldc.r8     2.
    IL_00aa:  div
    IL_00ab:  call       instance void [WindowsBase]System.Windows.Size::.ctor(float64,
                                                                               float64)
    IL_00b0:  nop
//000033:                 Dim arcRadiansPerChild = Math.PI * 2 / children.Length
    IL_00b1:  ldc.r8     6.2831853071795862
    IL_00ba:  ldloc.1
    IL_00bb:  ldlen
    IL_00bc:  conv.ovf.i4
    IL_00bd:  conv.r8
    IL_00be:  div
    IL_00bf:  stloc.2
//000034: 
//000035:                 Dim curPos = 0
    IL_00c0:  ldc.i4.0
    IL_00c1:  stloc.3
//000036: 				For Each child In children
    IL_00c2:  ldloc.1
    IL_00c3:  stloc.s    VB$t_array$L0
    IL_00c5:  ldc.i4.0
    IL_00c6:  stloc.s    VB$t_i4$L0
    IL_00c8:  br         IL_016c

//000037: 					Dim childAngleInRadians = curPos * arcRadiansPerChild
//000038:                     Dim childPosition = New Point((Math.Sin(childAngleInRadians) * radius.Width) + (midPanel.X - (child.DesiredSize.Width / 2)),
//000039:                                                   (Math.Cos(childAngleInRadians) * radius.Height) + (midPanel.Y - (child.DesiredSize.Height / 2)))
//000040: 					child.Arrange(New Rect(childPosition, child.DesiredSize))
//000041: 					curPos += 1
//000042: 				Next child
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
    IL_00cd:  ldloc.s    VB$t_array$L0
    IL_00cf:  ldloc.s    VB$t_i4$L0
    IL_00d1:  ldelem.ref
    IL_00d2:  stloc.s    child
//000037: 					Dim childAngleInRadians = curPos * arcRadiansPerChild
    IL_00d4:  ldloc.3
    IL_00d5:  conv.r8
    IL_00d6:  ldloc.2
    IL_00d7:  mul
    IL_00d8:  stloc.s    childAngleInRadians
//000038:                     Dim childPosition = New Point((Math.Sin(childAngleInRadians) * radius.Width) + (midPanel.X - (child.DesiredSize.Width / 2)),
    IL_00da:  ldloca.s   childPosition
    IL_00dc:  ldloc.s    childAngleInRadians
    IL_00de:  call       float64 [mscorlib]System.Math::Sin(float64)
    IL_00e3:  ldloca.s   radius
    IL_00e5:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
    IL_00ea:  mul
    IL_00eb:  ldloca.s   midPanel
    IL_00ed:  call       instance float64 [WindowsBase]System.Windows.Point::get_X()
    IL_00f2:  ldloc.s    child
    IL_00f4:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
    IL_00f9:  stloc.s    VB$t_struct$S1
    IL_00fb:  ldloca.s   VB$t_struct$S1
    IL_00fd:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
    IL_0102:  ldc.r8     2.
    IL_010b:  div
    IL_010c:  sub
    IL_010d:  add
    IL_010e:  ldloc.s    childAngleInRadians
    IL_0110:  call       float64 [mscorlib]System.Math::Cos(float64)
    IL_0115:  ldloca.s   radius
    IL_0117:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
    IL_011c:  mul
    IL_011d:  ldloca.s   midPanel
    IL_011f:  call       instance float64 [WindowsBase]System.Windows.Point::get_Y()
    IL_0124:  ldloc.s    child
    IL_0126:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
    IL_012b:  stloc.s    VB$t_struct$S2
    IL_012d:  ldloca.s   VB$t_struct$S2
    IL_012f:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
    IL_0134:  ldc.r8     2.
    IL_013d:  div
    IL_013e:  sub
    IL_013f:  add
    IL_0140:  call       instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_0145:  nop
//000039:                                                   (Math.Cos(childAngleInRadians) * radius.Height) + (midPanel.Y - (child.DesiredSize.Height / 2)))
//000040: 					child.Arrange(New Rect(childPosition, child.DesiredSize))
    IL_0146:  ldloc.s    child
    IL_0148:  ldloca.s   VB$t_struct$S3
    IL_014a:  ldloc.s    childPosition
    IL_014c:  ldloc.s    child
    IL_014e:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
    IL_0153:  call       instance void [WindowsBase]System.Windows.Rect::.ctor(valuetype [WindowsBase]System.Windows.Point,
                                                                               valuetype [WindowsBase]System.Windows.Size)
    IL_0158:  nop
    IL_0159:  ldloc.s    VB$t_struct$S3
    IL_015b:  callvirt   instance void [PresentationCore]System.Windows.UIElement::Arrange(valuetype [WindowsBase]System.Windows.Rect)
    IL_0160:  nop
//000041: 					curPos += 1
    IL_0161:  ldloc.3
    IL_0162:  ldc.i4.1
    IL_0163:  add.ovf
    IL_0164:  stloc.3
//000042: 				Next child
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
    IL_0165:  ldloc.s    VB$t_i4$L0
    IL_0167:  ldc.i4.1
    IL_0168:  add.ovf
    IL_0169:  stloc.s    VB$t_i4$L0
//000042: 				Next child
    IL_016b:  nop
//000043: 			End If
//000044: 			Return finalSize
//000045: 		End Function
//000046: 	End Class
//000047: End Namespace
    IL_016c:  ldloc.s    VB$t_i4$L0
    IL_016e:  ldloc.s    VB$t_array$L0
    IL_0170:  ldlen
    IL_0171:  conv.ovf.i4
    IL_0172:  clt
    IL_0174:  stloc.s    VB$CG$t_bool$S0
    IL_0176:  ldloc.s    VB$CG$t_bool$S0
    IL_0178:  brtrue     IL_00cd

//000043: 			End If
    IL_017d:  nop
//000044: 			Return finalSize
    IL_017e:  ldarg.1
    IL_017f:  stloc.0
    IL_0180:  br.s       IL_0182

//000045: 		End Function
    IL_0182:  ldloc.0
    IL_0183:  ret
  } // end of method CircularPanel::ArrangeOverride

  .method private specialname static float64 
          _Lambda$__1(class [PresentationCore]System.Windows.UIElement u) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       19 (0x13)
    .maxstack  1
    .locals init ([0] float64 _Lambda$__1,
             [1] valuetype [WindowsBase]System.Windows.Size VB$t_struct$S0)
//000031: 				Dim maxChild = New Size(children.Max(Function(u) u.DesiredSize.Width), children.Max(Function(u) u.DesiredSize.Height))
    IL_0000:  ldarg.0
    IL_0001:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
    IL_0006:  stloc.1
    IL_0007:  ldloca.s   VB$t_struct$S0
    IL_0009:  call       instance float64 [WindowsBase]System.Windows.Size::get_Width()
    IL_000e:  stloc.0
    IL_000f:  br.s       IL_0011

    IL_0011:  ldloc.0
    IL_0012:  ret
  } // end of method CircularPanel::_Lambda$__1

  .method private specialname static float64 
          _Lambda$__2(class [PresentationCore]System.Windows.UIElement u) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       19 (0x13)
    .maxstack  1
    .locals init ([0] float64 _Lambda$__2,
             [1] valuetype [WindowsBase]System.Windows.Size VB$t_struct$S0)
    IL_0000:  ldarg.0
    IL_0001:  callvirt   instance valuetype [WindowsBase]System.Windows.Size [PresentationCore]System.Windows.UIElement::get_DesiredSize()
    IL_0006:  stloc.1
    IL_0007:  ldloca.s   VB$t_struct$S0
    IL_0009:  call       instance float64 [WindowsBase]System.Windows.Size::get_Height()
    IL_000e:  stloc.0
    IL_000f:  br.s       IL_0011

    IL_0011:  ldloc.0
    IL_0012:  ret
  } // end of method CircularPanel::_Lambda$__2

} // end of class DiningPhilosophers.CircularPanel

.class public auto ansi beforefieldinit DiningPhilosophers.MainWindow
       extends [PresentationFramework]System.Windows.Window
       implements [System.Xaml]System.Windows.Markup.IComponentConnector
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi nested assembly _Closure$__1
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi nested assembly _Closure$__2
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public int32 $VB$Local_index
      .field public class DiningPhilosophers.MainWindow/_Closure$__1 $VB$NonLocal_$VB$Closure_ClosureVariable_5C_3B
      .method public specialname rtspecialname 
              instance void  .ctor(class DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       33 (0x21)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_001e

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::$VB$Local_index
        IL_0019:  stfld      int32 DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::$VB$Local_index
        IL_001e:  nop
        IL_001f:  nop
        IL_0020:  ret
      } // end of method _Closure$__2::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__2::.ctor

      .method public specialname instance void 
              _Lambda$__5() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       39 (0x27)
        .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\DiningPhilosophers\DiningPhilosophers_VisualBasic\MainWindow.xaml.vb' 
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class DiningPhilosophers.MainWindow/_Closure$__1 DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_5C_3B
        IL_0006:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__1::$VB$Me
        IL_000b:  ldarg.0
        IL_000c:  ldfld      class DiningPhilosophers.MainWindow/_Closure$__1 DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_5C_3B
        IL_0011:  ldfld      class [mscorlib]System.Threading.SemaphoreSlim[] DiningPhilosophers.MainWindow/_Closure$__1::$VB$Local_forks
        IL_0016:  ldarg.0
        IL_0017:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::$VB$Local_index
        IL_001c:  callvirt   instance void DiningPhilosophers.MainWindow::RunPhilosopherSyncWithOrderedForks(class [mscorlib]System.Threading.SemaphoreSlim[],
                                                                                                             int32)
        IL_0021:  nop
        IL_0022:  nop
        IL_0023:  br.s       IL_0025

        IL_0025:  nop
        IL_0026:  ret
      } // end of method _Closure$__2::_Lambda$__5

    } // end of class _Closure$__2

    .field public class [mscorlib]System.Threading.SemaphoreSlim[] $VB$Local_forks
    .field public class DiningPhilosophers.MainWindow $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class DiningPhilosophers.MainWindow/_Closure$__1 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       45 (0x2d)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_002a

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      class [mscorlib]System.Threading.SemaphoreSlim[] DiningPhilosophers.MainWindow/_Closure$__1::$VB$Local_forks
      IL_0019:  stfld      class [mscorlib]System.Threading.SemaphoreSlim[] DiningPhilosophers.MainWindow/_Closure$__1::$VB$Local_forks
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__1::$VB$Me
      IL_0025:  stfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__1::$VB$Me
      IL_002a:  nop
      IL_002b:  nop
      IL_002c:  ret
    } // end of method _Closure$__1::.ctor

  } // end of class _Closure$__1

  .class auto ansi nested assembly _Closure$__3
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32 $VB$Local_index
    .field public class DiningPhilosophers.MainWindow $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__3::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class DiningPhilosophers.MainWindow/_Closure$__3 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       45 (0x2d)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_002a

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__3::$VB$Local_index
      IL_0019:  stfld      int32 DiningPhilosophers.MainWindow/_Closure$__3::$VB$Local_index
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
      IL_0025:  stfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
      IL_002a:  nop
      IL_002b:  nop
      IL_002c:  ret
    } // end of method _Closure$__3::.ctor

    .method public specialname instance void 
            _Lambda$__6() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       38 (0x26)
      .maxstack  8
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
      IL_0000:  nop
//000117:                                  _philosophers(index).Fill = _think
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
      IL_0007:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
      IL_000c:  ldarg.0
      IL_000d:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__3::$VB$Local_index
      IL_0012:  ldelem.ref
      IL_0013:  ldarg.0
      IL_0014:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
      IL_0019:  ldfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_think
      IL_001e:  callvirt   instance void [PresentationFramework]System.Windows.Shapes.Shape::set_Fill(class [PresentationCore]System.Windows.Media.Brush)
      IL_0023:  nop
//000118:                              End Sub).Wait()
      IL_0024:  nop
      IL_0025:  ret
    } // end of method _Closure$__3::_Lambda$__6

    .method public specialname instance void 
            _Lambda$__7() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       40 (0x28)
      .maxstack  8
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
      IL_0006:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
      IL_000b:  ldarg.0
      IL_000c:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__3::$VB$Local_index
      IL_0011:  ldelem.ref
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
      IL_0018:  ldfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_wait
      IL_001d:  callvirt   instance void [PresentationFramework]System.Windows.Shapes.Shape::set_Fill(class [PresentationCore]System.Windows.Media.Brush)
      IL_0022:  nop
      IL_0023:  nop
      IL_0024:  br.s       IL_0026

      IL_0026:  nop
      IL_0027:  ret
    } // end of method _Closure$__3::_Lambda$__7

    .method public specialname instance void 
            _Lambda$__8() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       40 (0x28)
      .maxstack  8
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
      IL_0006:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
      IL_000b:  ldarg.0
      IL_000c:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__3::$VB$Local_index
      IL_0011:  ldelem.ref
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
      IL_0018:  ldfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_eat
      IL_001d:  callvirt   instance void [PresentationFramework]System.Windows.Shapes.Shape::set_Fill(class [PresentationCore]System.Windows.Media.Brush)
      IL_0022:  nop
      IL_0023:  nop
      IL_0024:  br.s       IL_0026

      IL_0026:  nop
      IL_0027:  ret
    } // end of method _Closure$__3::_Lambda$__8

  } // end of class _Closure$__3

  .class auto ansi nested assembly _Closure$__4
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi nested assembly _Closure$__5
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public int32 $VB$Local_index
      .field public class DiningPhilosophers.MainWindow/_Closure$__4 $VB$NonLocal_$VB$Closure_ClosureVariable_8B_36
      .method public specialname rtspecialname 
              instance void  .ctor(class DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       33 (0x21)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_001e

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::$VB$Local_index
        IL_0019:  stfld      int32 DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::$VB$Local_index
        IL_001e:  nop
        IL_001f:  nop
        IL_0020:  ret
      } // end of method _Closure$__5::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__5::.ctor

      .method public specialname instance void 
              _Lambda$__10() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       39 (0x27)
        .maxstack  8
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class DiningPhilosophers.MainWindow/_Closure$__4 DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::$VB$NonLocal_$VB$Closure_ClosureVariable_8B_36
        IL_0006:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__4::$VB$Me
        IL_000b:  ldarg.0
        IL_000c:  ldfld      class DiningPhilosophers.MainWindow/_Closure$__4 DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::$VB$NonLocal_$VB$Closure_ClosureVariable_8B_36
        IL_0011:  ldfld      class [System]System.Threading.Semaphore[] DiningPhilosophers.MainWindow/_Closure$__4::$VB$Local_forks
        IL_0016:  ldarg.0
        IL_0017:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::$VB$Local_index
        IL_001c:  callvirt   instance void DiningPhilosophers.MainWindow::RunPhilosopherSyncWithWaitAll(class [System]System.Threading.Semaphore[],
                                                                                                        int32)
        IL_0021:  nop
        IL_0022:  nop
        IL_0023:  br.s       IL_0025

        IL_0025:  nop
        IL_0026:  ret
      } // end of method _Closure$__5::_Lambda$__10

    } // end of class _Closure$__5

    .field public class [System]System.Threading.Semaphore[] $VB$Local_forks
    .field public class DiningPhilosophers.MainWindow $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__4::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class DiningPhilosophers.MainWindow/_Closure$__4 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       45 (0x2d)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_002a

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      class [System]System.Threading.Semaphore[] DiningPhilosophers.MainWindow/_Closure$__4::$VB$Local_forks
      IL_0019:  stfld      class [System]System.Threading.Semaphore[] DiningPhilosophers.MainWindow/_Closure$__4::$VB$Local_forks
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__4::$VB$Me
      IL_0025:  stfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__4::$VB$Me
      IL_002a:  nop
      IL_002b:  nop
      IL_002c:  ret
    } // end of method _Closure$__4::.ctor

  } // end of class _Closure$__4

  .class auto ansi nested assembly _Closure$__6
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32 $VB$Local_index
    .field public class DiningPhilosophers.MainWindow $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__6::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class DiningPhilosophers.MainWindow/_Closure$__6 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       45 (0x2d)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_002a

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__6::$VB$Local_index
      IL_0019:  stfld      int32 DiningPhilosophers.MainWindow/_Closure$__6::$VB$Local_index
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
      IL_0025:  stfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
      IL_002a:  nop
      IL_002b:  nop
      IL_002c:  ret
    } // end of method _Closure$__6::.ctor

    .method public specialname instance void 
            _Lambda$__11() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       40 (0x28)
      .maxstack  8
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
      IL_0006:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
      IL_000b:  ldarg.0
      IL_000c:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__6::$VB$Local_index
      IL_0011:  ldelem.ref
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
      IL_0018:  ldfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_think
      IL_001d:  callvirt   instance void [PresentationFramework]System.Windows.Shapes.Shape::set_Fill(class [PresentationCore]System.Windows.Media.Brush)
      IL_0022:  nop
      IL_0023:  nop
      IL_0024:  br.s       IL_0026

      IL_0026:  nop
      IL_0027:  ret
    } // end of method _Closure$__6::_Lambda$__11

    .method public specialname instance void 
            _Lambda$__12() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       40 (0x28)
      .maxstack  8
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
      IL_0006:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
      IL_000b:  ldarg.0
      IL_000c:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__6::$VB$Local_index
      IL_0011:  ldelem.ref
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
      IL_0018:  ldfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_wait
      IL_001d:  callvirt   instance void [PresentationFramework]System.Windows.Shapes.Shape::set_Fill(class [PresentationCore]System.Windows.Media.Brush)
      IL_0022:  nop
      IL_0023:  nop
      IL_0024:  br.s       IL_0026

      IL_0026:  nop
      IL_0027:  ret
    } // end of method _Closure$__6::_Lambda$__12

    .method public specialname instance void 
            _Lambda$__13() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       40 (0x28)
      .maxstack  8
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
      IL_0006:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
      IL_000b:  ldarg.0
      IL_000c:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__6::$VB$Local_index
      IL_0011:  ldelem.ref
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
      IL_0018:  ldfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_eat
      IL_001d:  callvirt   instance void [PresentationFramework]System.Windows.Shapes.Shape::set_Fill(class [PresentationCore]System.Windows.Media.Brush)
      IL_0022:  nop
      IL_0023:  nop
      IL_0024:  br.s       IL_0026

      IL_0026:  nop
      IL_0027:  ret
    } // end of method _Closure$__6::_Lambda$__13

  } // end of class _Closure$__6

  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .field private static literal int32 NUM_PHILOSOPHERS = int32(0x00000005)
  .field private static literal int32 TIMESCALE = int32(0x000000C8)
  .field private class [PresentationFramework]System.Windows.Shapes.Ellipse[] _philosophers
  .field private class [mscorlib]System.Threading.Tasks.TaskFactory _ui
  .field private class [PresentationCore]System.Windows.Media.Brush _think
  .field private class [PresentationCore]System.Windows.Media.Brush _eat
  .field private class [PresentationCore]System.Windows.Media.Brush _wait
  .field private class DiningPhilosophers.CircularPanel _circularPanel1
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0E 63 69 72 63 75 6C 61 72 50 61 6E 65 6C   // ...circularPanel
                                                                                                                      31 00 00 )                                        // 1..
  .field private bool _contentLoaded
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
    IL_000a:  nop
    IL_000b:  ret
  } // end of method MainWindow::.cctor

  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> DiningPhilosophers.MainWindow::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method MainWindow::__ENCAddToList

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       87 (0x57)
    .maxstack  2
//000033:         Public Sub New()
    IL_0000:  nop
//000034:             ' Initialize the component's layout.
//000035:             InitializeComponent()
//000036: 
//000037:             ' Grab a TaskFactory for creating Tasks that run on the UI.
//000038:             _ui = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
//000039: 
//000040:             ' Initialize the philosophers, and then run them.
//000041:             ConfigurePhilosophers()
//000042: 
//000043:             ' Uncomment one of the following three lines.
//000044:             RunWithSemaphoresSyncWithOrderedForks() ' 1. use synchronous semaphores, with ordered forks.
//000045:             'RunWithSemaphoresSyncWithWaitAll()  ' 2. use synchronous semaphores, with WaitAll.
//000046:         End Sub
//000047: 
//000048: #Region "Colors"
//000049:         ''' <summary>A brush for rendering thinking philosophers.</summary>
//000050:         Private _think As Brush = Brushes.Yellow
//000051:         ''' <summary>A brush for rendering eating philosophers.</summary>
//000052:         Private _eat As Brush = Brushes.Green
//000053:         ''' <summary>A brush for rendering waiting philosophers.</summary>
//000054:         Private _wait As Brush = Brushes.Red
//000055: #End Region
//000056: 
//000057: #Region "Helpers"
//000058:         ''' <summary>Initialize the philosophers.</summary>
//000059:         ''' <param name="numPhilosophers">The number of philosophers to initialize.</param>
//000060:         Private Sub ConfigurePhilosophers()
//000061:             _philosophers = (
//000062:              From i In Enumerable.Range(0, NUM_PHILOSOPHERS)
//000063:              Select New Ellipse With {.Height = 75, .Width = 75, .Fill = Brushes.Red, .Stroke = Brushes.Black}).ToArray()
//000064:             For Each philosopher In _philosophers
//000065:                 circularPanel1.Children.Add(philosopher)
//000066:             Next philosopher
//000067:         End Sub
//000068: 
//000069:         ''' <summary>Gets the fork IDs of the forks for a particular philosopher.</summary>
//000070:         ''' <param name="philosopherIndex">The index of the philosopher whose IDs are being retrieved.</param>
//000071:         ''' <param name="numForks">The number of forks that exist.</param>
//000072:         ''' <param name="left">The ID of the philosopher's left fork.</param>
//000073:         ''' <param name="right">The ID of the philosopher's right fork.</param>
//000074:         ''' <param name="sort">Whether to sort the forks, so that the left fork is always smaller than the right.</param>
//000075:         Private Sub GetForkIds(ByVal philosopherIndex As Integer, ByVal numForks As Integer,
//000076:                                <System.Runtime.InteropServices.Out()> ByRef left As Integer,
//000077:                                <System.Runtime.InteropServices.Out()> ByRef right As Integer, ByVal sort As Boolean)
//000078:             ' The forks for a philosopher are the ones at philosopherIndex and philosopherIndex+1, though
//000079:             ' the latter can wrap around.  We need to ensure they're always acquired in the right order, to
//000080:             ' prevent deadlock, so order them.
//000081:             left = philosopherIndex
//000082:             right = (philosopherIndex + 1) Mod numForks
//000083:             If sort AndAlso left > right Then
//000084:                 Dim tmp = left
//000085:                 left = right
//000086:                 right = tmp
//000087:             End If
//000088:         End Sub
//000089: #End Region
//000090: 
//000091: #Region "Synchronous, Ordered"
//000092:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000093:         Private Sub RunWithSemaphoresSyncWithOrderedForks()
//000094:             Dim forks = (
//000095:              From i In Enumerable.Range(0, _philosophers.Length)
//000096:              Select New SemaphoreSlim(1, 1)).ToArray()
//000097:             For i = 0 To _philosophers.Length - 1
//000098:                 Dim index = i
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [PresentationFramework]System.Windows.Window::.ctor()
    IL_0007:  nop
    IL_0008:  ldarg.0
    IL_0009:  call       void DiningPhilosophers.MainWindow::__ENCAddToList(object)
    IL_000e:  nop
//000050:         Private _think As Brush = Brushes.Yellow
    IL_000f:  ldarg.0
    IL_0010:  call       class [PresentationCore]System.Windows.Media.SolidColorBrush [PresentationCore]System.Windows.Media.Brushes::get_Yellow()
    IL_0015:  stfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_think
//000051:         ''' <summary>A brush for rendering eating philosophers.</summary>
//000052:         Private _eat As Brush = Brushes.Green
    IL_001a:  ldarg.0
    IL_001b:  call       class [PresentationCore]System.Windows.Media.SolidColorBrush [PresentationCore]System.Windows.Media.Brushes::get_Green()
    IL_0020:  stfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_eat
//000053:         ''' <summary>A brush for rendering waiting philosophers.</summary>
//000054:         Private _wait As Brush = Brushes.Red
    IL_0025:  ldarg.0
    IL_0026:  call       class [PresentationCore]System.Windows.Media.SolidColorBrush [PresentationCore]System.Windows.Media.Brushes::get_Red()
    IL_002b:  stfld      class [PresentationCore]System.Windows.Media.Brush DiningPhilosophers.MainWindow::_wait
//000035:             InitializeComponent()
    IL_0030:  ldarg.0
    IL_0031:  callvirt   instance void DiningPhilosophers.MainWindow::InitializeComponent()
    IL_0036:  nop
//000036: 
//000037:             ' Grab a TaskFactory for creating Tasks that run on the UI.
//000038:             _ui = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
    IL_0037:  ldarg.0
    IL_0038:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_003d:  newobj     instance void [mscorlib]System.Threading.Tasks.TaskFactory::.ctor(class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_0042:  stfld      class [mscorlib]System.Threading.Tasks.TaskFactory DiningPhilosophers.MainWindow::_ui
//000039: 
//000040:             ' Initialize the philosophers, and then run them.
//000041:             ConfigurePhilosophers()
    IL_0047:  ldarg.0
    IL_0048:  callvirt   instance void DiningPhilosophers.MainWindow::ConfigurePhilosophers()
    IL_004d:  nop
//000042: 
//000043:             ' Uncomment one of the following three lines.
//000044:             RunWithSemaphoresSyncWithOrderedForks() ' 1. use synchronous semaphores, with ordered forks.
    IL_004e:  ldarg.0
    IL_004f:  callvirt   instance void DiningPhilosophers.MainWindow::RunWithSemaphoresSyncWithOrderedForks()
    IL_0054:  nop
//000045:             'RunWithSemaphoresSyncWithWaitAll()  ' 2. use synchronous semaphores, with WaitAll.
//000046:         End Sub
    IL_0055:  nop
    IL_0056:  ret
  } // end of method MainWindow::.ctor

  .method private instance void  ConfigurePhilosophers() cil managed
  {
    // Code size       86 (0x56)
    .maxstack  4
    .locals init ([0] class [PresentationFramework]System.Windows.Shapes.Ellipse philosopher,
             [1] int32 VB$t_i4$L0,
             [2] class [PresentationFramework]System.Windows.Shapes.Ellipse[] VB$t_array$L0,
             [3] bool VB$CG$t_bool$S0)
//000047: 
//000048: #Region "Colors"
//000049:         ''' <summary>A brush for rendering thinking philosophers.</summary>
//000050:         Private _think As Brush = Brushes.Yellow
//000051:         ''' <summary>A brush for rendering eating philosophers.</summary>
//000052:         Private _eat As Brush = Brushes.Green
//000053:         ''' <summary>A brush for rendering waiting philosophers.</summary>
//000054:         Private _wait As Brush = Brushes.Red
//000055: #End Region
//000056: 
//000057: #Region "Helpers"
//000058:         ''' <summary>Initialize the philosophers.</summary>
//000059:         ''' <param name="numPhilosophers">The number of philosophers to initialize.</param>
//000060:         Private Sub ConfigurePhilosophers()
    IL_0000:  nop
//000061:             _philosophers = (
    IL_0001:  ldarg.0
    IL_0002:  ldc.i4.0
    IL_0003:  ldc.i4.5
    IL_0004:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_0009:  ldnull
    IL_000a:  ldftn      class [PresentationFramework]System.Windows.Shapes.Ellipse DiningPhilosophers.MainWindow::_Lambda$__3(int32)
    IL_0010:  newobj     instance void class [mscorlib]System.Func`2<int32,class [PresentationFramework]System.Windows.Shapes.Ellipse>::.ctor(object,
                                                                                                                                              native int)
    IL_0015:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<int32,class [PresentationFramework]System.Windows.Shapes.Ellipse>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                     class [mscorlib]System.Func`2<!!0,!!1>)
    IL_001a:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<class [PresentationFramework]System.Windows.Shapes.Ellipse>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_001f:  stfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
//000062:              From i In Enumerable.Range(0, NUM_PHILOSOPHERS)
//000063:              Select New Ellipse With {.Height = 75, .Width = 75, .Fill = Brushes.Red, .Stroke = Brushes.Black}).ToArray()
//000064:             For Each philosopher In _philosophers
    IL_0024:  ldarg.0
    IL_0025:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
    IL_002a:  stloc.2
    IL_002b:  ldc.i4.0
    IL_002c:  stloc.1
    IL_002d:  br.s       IL_004a

//000065:                 circularPanel1.Children.Add(philosopher)
//000066:             Next philosopher
//000067:         End Sub
//000068: 
//000069:         ''' <summary>Gets the fork IDs of the forks for a particular philosopher.</summary>
//000070:         ''' <param name="philosopherIndex">The index of the philosopher whose IDs are being retrieved.</param>
//000071:         ''' <param name="numForks">The number of forks that exist.</param>
//000072:         ''' <param name="left">The ID of the philosopher's left fork.</param>
//000073:         ''' <param name="right">The ID of the philosopher's right fork.</param>
//000074:         ''' <param name="sort">Whether to sort the forks, so that the left fork is always smaller than the right.</param>
//000075:         Private Sub GetForkIds(ByVal philosopherIndex As Integer, ByVal numForks As Integer,
//000076:                                <System.Runtime.InteropServices.Out()> ByRef left As Integer,
//000077:                                <System.Runtime.InteropServices.Out()> ByRef right As Integer, ByVal sort As Boolean)
//000078:             ' The forks for a philosopher are the ones at philosopherIndex and philosopherIndex+1, though
//000079:             ' the latter can wrap around.  We need to ensure they're always acquired in the right order, to
//000080:             ' prevent deadlock, so order them.
//000081:             left = philosopherIndex
//000082:             right = (philosopherIndex + 1) Mod numForks
//000083:             If sort AndAlso left > right Then
//000084:                 Dim tmp = left
//000085:                 left = right
//000086:                 right = tmp
//000087:             End If
//000088:         End Sub
//000089: #End Region
//000090: 
//000091: #Region "Synchronous, Ordered"
//000092:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000093:         Private Sub RunWithSemaphoresSyncWithOrderedForks()
//000094:             Dim forks = (
//000095:              From i In Enumerable.Range(0, _philosophers.Length)
//000096:              Select New SemaphoreSlim(1, 1)).ToArray()
//000097:             For i = 0 To _philosophers.Length - 1
//000098:                 Dim index = i
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_002f:  ldloc.2
    IL_0030:  ldloc.1
    IL_0031:  ldelem.ref
    IL_0032:  stloc.0
//000065:                 circularPanel1.Children.Add(philosopher)
    IL_0033:  ldarg.0
    IL_0034:  callvirt   instance class DiningPhilosophers.CircularPanel DiningPhilosophers.MainWindow::get_circularPanel1()
    IL_0039:  callvirt   instance class [PresentationFramework]System.Windows.Controls.UIElementCollection [PresentationFramework]System.Windows.Controls.Panel::get_Children()
    IL_003e:  ldloc.0
    IL_003f:  callvirt   instance int32 [PresentationFramework]System.Windows.Controls.UIElementCollection::Add(class [PresentationCore]System.Windows.UIElement)
    IL_0044:  pop
//000066:             Next philosopher
//000067:         End Sub
//000068: 
//000069:         ''' <summary>Gets the fork IDs of the forks for a particular philosopher.</summary>
//000070:         ''' <param name="philosopherIndex">The index of the philosopher whose IDs are being retrieved.</param>
//000071:         ''' <param name="numForks">The number of forks that exist.</param>
//000072:         ''' <param name="left">The ID of the philosopher's left fork.</param>
//000073:         ''' <param name="right">The ID of the philosopher's right fork.</param>
//000074:         ''' <param name="sort">Whether to sort the forks, so that the left fork is always smaller than the right.</param>
//000075:         Private Sub GetForkIds(ByVal philosopherIndex As Integer, ByVal numForks As Integer,
//000076:                                <System.Runtime.InteropServices.Out()> ByRef left As Integer,
//000077:                                <System.Runtime.InteropServices.Out()> ByRef right As Integer, ByVal sort As Boolean)
//000078:             ' The forks for a philosopher are the ones at philosopherIndex and philosopherIndex+1, though
//000079:             ' the latter can wrap around.  We need to ensure they're always acquired in the right order, to
//000080:             ' prevent deadlock, so order them.
//000081:             left = philosopherIndex
//000082:             right = (philosopherIndex + 1) Mod numForks
//000083:             If sort AndAlso left > right Then
//000084:                 Dim tmp = left
//000085:                 left = right
//000086:                 right = tmp
//000087:             End If
//000088:         End Sub
//000089: #End Region
//000090: 
//000091: #Region "Synchronous, Ordered"
//000092:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000093:         Private Sub RunWithSemaphoresSyncWithOrderedForks()
//000094:             Dim forks = (
//000095:              From i In Enumerable.Range(0, _philosophers.Length)
//000096:              Select New SemaphoreSlim(1, 1)).ToArray()
//000097:             For i = 0 To _philosophers.Length - 1
//000098:                 Dim index = i
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0045:  ldloc.1
    IL_0046:  ldc.i4.1
    IL_0047:  add.ovf
    IL_0048:  stloc.1
//000066:             Next philosopher
    IL_0049:  nop
//000067:         End Sub
//000068: 
//000069:         ''' <summary>Gets the fork IDs of the forks for a particular philosopher.</summary>
//000070:         ''' <param name="philosopherIndex">The index of the philosopher whose IDs are being retrieved.</param>
//000071:         ''' <param name="numForks">The number of forks that exist.</param>
//000072:         ''' <param name="left">The ID of the philosopher's left fork.</param>
//000073:         ''' <param name="right">The ID of the philosopher's right fork.</param>
//000074:         ''' <param name="sort">Whether to sort the forks, so that the left fork is always smaller than the right.</param>
//000075:         Private Sub GetForkIds(ByVal philosopherIndex As Integer, ByVal numForks As Integer,
//000076:                                <System.Runtime.InteropServices.Out()> ByRef left As Integer,
//000077:                                <System.Runtime.InteropServices.Out()> ByRef right As Integer, ByVal sort As Boolean)
//000078:             ' The forks for a philosopher are the ones at philosopherIndex and philosopherIndex+1, though
//000079:             ' the latter can wrap around.  We need to ensure they're always acquired in the right order, to
//000080:             ' prevent deadlock, so order them.
//000081:             left = philosopherIndex
//000082:             right = (philosopherIndex + 1) Mod numForks
//000083:             If sort AndAlso left > right Then
//000084:                 Dim tmp = left
//000085:                 left = right
//000086:                 right = tmp
//000087:             End If
//000088:         End Sub
//000089: #End Region
//000090: 
//000091: #Region "Synchronous, Ordered"
//000092:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000093:         Private Sub RunWithSemaphoresSyncWithOrderedForks()
//000094:             Dim forks = (
//000095:              From i In Enumerable.Range(0, _philosophers.Length)
//000096:              Select New SemaphoreSlim(1, 1)).ToArray()
//000097:             For i = 0 To _philosophers.Length - 1
//000098:                 Dim index = i
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_004a:  ldloc.1
    IL_004b:  ldloc.2
    IL_004c:  ldlen
    IL_004d:  conv.ovf.i4
    IL_004e:  clt
    IL_0050:  stloc.3
    IL_0051:  ldloc.3
    IL_0052:  brtrue.s   IL_002f

//000067:         End Sub
    IL_0054:  nop
    IL_0055:  ret
  } // end of method MainWindow::ConfigurePhilosophers

  .method private instance void  GetForkIds(int32 philosopherIndex,
                                            int32 numForks,
                                            [out] int32& left,
                                            [out] int32& right,
                                            bool sort) cil managed
  {
    // Code size       46 (0x2e)
    .maxstack  3
    .locals init ([0] int32 tmp,
             [1] bool VB$CG$t_bool$S0)
//000068: 
//000069:         ''' <summary>Gets the fork IDs of the forks for a particular philosopher.</summary>
//000070:         ''' <param name="philosopherIndex">The index of the philosopher whose IDs are being retrieved.</param>
//000071:         ''' <param name="numForks">The number of forks that exist.</param>
//000072:         ''' <param name="left">The ID of the philosopher's left fork.</param>
//000073:         ''' <param name="right">The ID of the philosopher's right fork.</param>
//000074:         ''' <param name="sort">Whether to sort the forks, so that the left fork is always smaller than the right.</param>
//000075:         Private Sub GetForkIds(ByVal philosopherIndex As Integer, ByVal numForks As Integer,
    IL_0000:  nop
//000076:                                <System.Runtime.InteropServices.Out()> ByRef left As Integer,
//000077:                                <System.Runtime.InteropServices.Out()> ByRef right As Integer, ByVal sort As Boolean)
//000078:             ' The forks for a philosopher are the ones at philosopherIndex and philosopherIndex+1, though
//000079:             ' the latter can wrap around.  We need to ensure they're always acquired in the right order, to
//000080:             ' prevent deadlock, so order them.
//000081:             left = philosopherIndex
    IL_0001:  ldarg.3
    IL_0002:  ldarg.1
    IL_0003:  stind.i4
//000082:             right = (philosopherIndex + 1) Mod numForks
    IL_0004:  ldarg.s    right
    IL_0006:  ldarg.1
    IL_0007:  ldc.i4.1
    IL_0008:  add.ovf
    IL_0009:  ldarg.2
    IL_000a:  rem
    IL_000b:  stind.i4
//000083:             If sort AndAlso left > right Then
    IL_000c:  ldarg.s    sort
    IL_000e:  brfalse.s  IL_0017

    IL_0010:  ldarg.3
    IL_0011:  ldind.i4
    IL_0012:  ldarg.s    right
    IL_0014:  ldind.i4
    IL_0015:  bgt.s      IL_001a

    IL_0017:  ldc.i4.0
    IL_0018:  br.s       IL_001b

    IL_001a:  ldc.i4.1
    IL_001b:  stloc.1
//000084:                 Dim tmp = left
//000085:                 left = right
//000086:                 right = tmp
//000087:             End If
//000088:         End Sub
//000089: #End Region
//000090: 
//000091: #Region "Synchronous, Ordered"
//000092:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000093:         Private Sub RunWithSemaphoresSyncWithOrderedForks()
//000094:             Dim forks = (
//000095:              From i In Enumerable.Range(0, _philosophers.Length)
//000096:              Select New SemaphoreSlim(1, 1)).ToArray()
//000097:             For i = 0 To _philosophers.Length - 1
//000098:                 Dim index = i
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_001c:  ldloc.1
    IL_001d:  brfalse.s  IL_002b

//000084:                 Dim tmp = left
    IL_001f:  ldarg.3
    IL_0020:  ldind.i4
    IL_0021:  stloc.0
//000085:                 left = right
    IL_0022:  ldarg.3
    IL_0023:  ldarg.s    right
    IL_0025:  ldind.i4
    IL_0026:  stind.i4
//000086:                 right = tmp
    IL_0027:  ldarg.s    right
    IL_0029:  ldloc.0
    IL_002a:  stind.i4
//000087:             End If
    IL_002b:  nop
//000088:         End Sub
    IL_002c:  nop
    IL_002d:  ret
  } // end of method MainWindow::GetForkIds

  .method private instance void  RunWithSemaphoresSyncWithOrderedForks() cil managed
  {
    // Code size       132 (0x84)
    .maxstack  4
    .locals init ([0] class DiningPhilosophers.MainWindow/_Closure$__1 $VB$Closure_ClosureVariable_5C_3B,
             [1] class DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2 $VB$Closure_ClosureVariable_60_C,
             [2] int32 i,
             [3] int32 VB$t_i4$L0,
             [4] int32 VB$CG$t_i4$S0)
//000089: #End Region
//000090: 
//000091: #Region "Synchronous, Ordered"
//000092:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000093:         Private Sub RunWithSemaphoresSyncWithOrderedForks()
    IL_0000:  nop
//000094:             Dim forks = (
//000095:              From i In Enumerable.Range(0, _philosophers.Length)
//000096:              Select New SemaphoreSlim(1, 1)).ToArray()
//000097:             For i = 0 To _philosophers.Length - 1
//000098:                 Dim index = i
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0001:  newobj     instance void DiningPhilosophers.MainWindow/_Closure$__1::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.0
    IL_0009:  stfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__1::$VB$Me
//000094:             Dim forks = (
    IL_000e:  ldloc.0
    IL_000f:  ldc.i4.0
    IL_0010:  ldarg.0
    IL_0011:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
    IL_0016:  ldlen
    IL_0017:  conv.ovf.i4
    IL_0018:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_001d:  ldnull
    IL_001e:  ldftn      class [mscorlib]System.Threading.SemaphoreSlim DiningPhilosophers.MainWindow::_Lambda$__4(int32)
    IL_0024:  newobj     instance void class [mscorlib]System.Func`2<int32,class [mscorlib]System.Threading.SemaphoreSlim>::.ctor(object,
                                                                                                                                  native int)
    IL_0029:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<int32,class [mscorlib]System.Threading.SemaphoreSlim>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                         class [mscorlib]System.Func`2<!!0,!!1>)
    IL_002e:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<class [mscorlib]System.Threading.SemaphoreSlim>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_0033:  stfld      class [mscorlib]System.Threading.SemaphoreSlim[] DiningPhilosophers.MainWindow/_Closure$__1::$VB$Local_forks
//000095:              From i In Enumerable.Range(0, _philosophers.Length)
//000096:              Select New SemaphoreSlim(1, 1)).ToArray()
//000097:             For i = 0 To _philosophers.Length - 1
    IL_0038:  ldc.i4.0
    IL_0039:  ldarg.0
    IL_003a:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
    IL_003f:  ldlen
    IL_0040:  conv.ovf.i4
    IL_0041:  ldc.i4.1
    IL_0042:  sub.ovf
    IL_0043:  stloc.3
    IL_0044:  stloc.2
    IL_0045:  br.s       IL_007a

//000098:                 Dim index = i
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0047:  ldloc.1
    IL_0048:  newobj     instance void DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::.ctor(class DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2)
    IL_004d:  stloc.1
    IL_004e:  ldloc.1
    IL_004f:  ldloc.0
    IL_0050:  stfld      class DiningPhilosophers.MainWindow/_Closure$__1 DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_5C_3B
//000098:                 Dim index = i
    IL_0055:  ldloc.1
    IL_0056:  ldloc.2
    IL_0057:  stfld      int32 DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::$VB$Local_index
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
    IL_005c:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0061:  ldloc.1
    IL_0062:  dup
    IL_0063:  ldvirtftn  instance void DiningPhilosophers.MainWindow/_Closure$__1/_Closure$__2::_Lambda$__5()
    IL_0069:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_006e:  ldc.i4.2
    IL_006f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.Tasks.TaskCreationOptions)
    IL_0074:  pop
//000100:             Next i
    IL_0075:  nop
    IL_0076:  ldloc.2
    IL_0077:  ldc.i4.1
    IL_0078:  add.ovf
    IL_0079:  stloc.2
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_007a:  ldloc.2
    IL_007b:  ldloc.3
    IL_007c:  stloc.s    VB$CG$t_i4$S0
    IL_007e:  ldloc.s    VB$CG$t_i4$S0
    IL_0080:  ble.s      IL_0047

//000101:         End Sub
    IL_0082:  nop
    IL_0083:  ret
  } // end of method MainWindow::RunWithSemaphoresSyncWithOrderedForks

  .method private instance void  RunPhilosopherSyncWithOrderedForks(class [mscorlib]System.Threading.SemaphoreSlim[] forks,
                                                                    int32 index) cil managed
  {
    // Code size       242 (0xf2)
    .maxstack  6
    .locals init ([0] class DiningPhilosophers.MainWindow/_Closure$__3 $VB$Closure_ClosureVariable_69_6E,
             [1] class [mscorlib]System.Threading.SemaphoreSlim fork1,
             [2] int32 fork1Id,
             [3] class [mscorlib]System.Threading.SemaphoreSlim fork2,
             [4] int32 fork2Id,
             [5] class [mscorlib]System.Random rand,
             [6] bool VB$CG$t_bool$S0)
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
    IL_0000:  nop
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0001:  newobj     instance void DiningPhilosophers.MainWindow/_Closure$__3::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.2
    IL_0009:  stfld      int32 DiningPhilosophers.MainWindow/_Closure$__3::$VB$Local_index
    IL_000e:  ldloc.0
    IL_000f:  ldarg.0
    IL_0010:  stfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__3::$VB$Me
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
    IL_0015:  ldarg.0
    IL_0016:  ldloc.0
    IL_0017:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__3::$VB$Local_index
    IL_001c:  ldarg.1
    IL_001d:  ldlen
    IL_001e:  conv.ovf.i4
    IL_001f:  ldloca.s   fork1Id
    IL_0021:  ldloca.s   fork2Id
    IL_0023:  ldc.i4.1
    IL_0024:  callvirt   instance void DiningPhilosophers.MainWindow::GetForkIds(int32,
                                                                                 int32,
                                                                                 int32&,
                                                                                 int32&,
                                                                                 bool)
    IL_0029:  nop
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
    IL_002a:  ldarg.1
    IL_002b:  ldloc.2
    IL_002c:  ldelem.ref
    IL_002d:  stloc.1
    IL_002e:  ldarg.1
    IL_002f:  ldloc.s    fork2Id
    IL_0031:  ldelem.ref
    IL_0032:  stloc.3
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
    IL_0033:  ldloc.0
    IL_0034:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__3::$VB$Local_index
    IL_0039:  newobj     instance void [mscorlib]System.Random::.ctor(int32)
    IL_003e:  stloc.s    rand
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0040:  br         IL_00e6

//000116:                 _ui.StartNew(Sub()
    IL_0045:  ldarg.0
    IL_0046:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory DiningPhilosophers.MainWindow::_ui
    IL_004b:  ldloc.0
    IL_004c:  dup
    IL_004d:  ldvirtftn  instance void DiningPhilosophers.MainWindow/_Closure$__3::_Lambda$__6()
    IL_0053:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0058:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_005d:  callvirt   instance void [mscorlib]System.Threading.Tasks.Task::Wait()
    IL_0062:  nop
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
    IL_0063:  ldloc.s    rand
    IL_0065:  ldc.i4.s   10
    IL_0067:  callvirt   instance int32 [mscorlib]System.Random::Next(int32)
    IL_006c:  ldc.i4     0xc8
    IL_0071:  mul.ovf
    IL_0072:  call       void [mscorlib]System.Threading.Thread::Sleep(int32)
    IL_0077:  nop
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
    IL_0078:  ldloc.1
    IL_0079:  callvirt   instance void [mscorlib]System.Threading.SemaphoreSlim::Wait()
    IL_007e:  nop
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
    IL_007f:  ldarg.0
    IL_0080:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory DiningPhilosophers.MainWindow::_ui
    IL_0085:  ldloc.0
    IL_0086:  dup
    IL_0087:  ldvirtftn  instance void DiningPhilosophers.MainWindow/_Closure$__3::_Lambda$__7()
    IL_008d:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0092:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_0097:  callvirt   instance void [mscorlib]System.Threading.Tasks.Task::Wait()
    IL_009c:  nop
//000125:                 fork2.Wait()
    IL_009d:  ldloc.3
    IL_009e:  callvirt   instance void [mscorlib]System.Threading.SemaphoreSlim::Wait()
    IL_00a3:  nop
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
    IL_00a4:  ldarg.0
    IL_00a5:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory DiningPhilosophers.MainWindow::_ui
    IL_00aa:  ldloc.0
    IL_00ab:  dup
    IL_00ac:  ldvirtftn  instance void DiningPhilosophers.MainWindow/_Closure$__3::_Lambda$__8()
    IL_00b2:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_00b7:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_00bc:  callvirt   instance void [mscorlib]System.Threading.Tasks.Task::Wait()
    IL_00c1:  nop
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
    IL_00c2:  ldloc.s    rand
    IL_00c4:  ldc.i4.s   10
    IL_00c6:  callvirt   instance int32 [mscorlib]System.Random::Next(int32)
    IL_00cb:  ldc.i4     0xc8
    IL_00d0:  mul.ovf
    IL_00d1:  call       void [mscorlib]System.Threading.Thread::Sleep(int32)
    IL_00d6:  nop
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
    IL_00d7:  ldloc.1
    IL_00d8:  callvirt   instance int32 [mscorlib]System.Threading.SemaphoreSlim::Release()
    IL_00dd:  pop
//000133:                 fork2.Release()
    IL_00de:  ldloc.3
    IL_00df:  callvirt   instance int32 [mscorlib]System.Threading.SemaphoreSlim::Release()
    IL_00e4:  pop
//000134:             End While
    IL_00e5:  nop
//000114:             While True
    IL_00e6:  ldc.i4.1
    IL_00e7:  stloc.s    VB$CG$t_bool$S0
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_00e9:  ldloc.s    VB$CG$t_bool$S0
    IL_00eb:  brtrue     IL_0045

//000135:         End Sub
    IL_00f0:  nop
    IL_00f1:  ret
  } // end of method MainWindow::RunPhilosopherSyncWithOrderedForks

  .method private instance void  RunWithSemaphoresSyncWithWaitAll() cil managed
  {
    // Code size       132 (0x84)
    .maxstack  4
    .locals init ([0] class DiningPhilosophers.MainWindow/_Closure$__4 $VB$Closure_ClosureVariable_8B_36,
             [1] class DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5 $VB$Closure_ClosureVariable_8F_C,
             [2] int32 i,
             [3] int32 VB$t_i4$L0,
             [4] int32 VB$CG$t_i4$S0)
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
    IL_0000:  nop
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0001:  newobj     instance void DiningPhilosophers.MainWindow/_Closure$__4::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.0
    IL_0009:  stfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__4::$VB$Me
//000141:             Dim forks = (
    IL_000e:  ldloc.0
    IL_000f:  ldc.i4.0
    IL_0010:  ldarg.0
    IL_0011:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
    IL_0016:  ldlen
    IL_0017:  conv.ovf.i4
    IL_0018:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_001d:  ldnull
    IL_001e:  ldftn      class [System]System.Threading.Semaphore DiningPhilosophers.MainWindow::_Lambda$__9(int32)
    IL_0024:  newobj     instance void class [mscorlib]System.Func`2<int32,class [System]System.Threading.Semaphore>::.ctor(object,
                                                                                                                            native int)
    IL_0029:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<int32,class [System]System.Threading.Semaphore>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                   class [mscorlib]System.Func`2<!!0,!!1>)
    IL_002e:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<class [System]System.Threading.Semaphore>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_0033:  stfld      class [System]System.Threading.Semaphore[] DiningPhilosophers.MainWindow/_Closure$__4::$VB$Local_forks
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
//000144:             For i = 0 To _philosophers.Length - 1
    IL_0038:  ldc.i4.0
    IL_0039:  ldarg.0
    IL_003a:  ldfld      class [PresentationFramework]System.Windows.Shapes.Ellipse[] DiningPhilosophers.MainWindow::_philosophers
    IL_003f:  ldlen
    IL_0040:  conv.ovf.i4
    IL_0041:  ldc.i4.1
    IL_0042:  sub.ovf
    IL_0043:  stloc.3
    IL_0044:  stloc.2
    IL_0045:  br.s       IL_007a

//000145:                 Dim index = i
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
//000147:             Next i
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0047:  ldloc.1
    IL_0048:  newobj     instance void DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::.ctor(class DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5)
    IL_004d:  stloc.1
    IL_004e:  ldloc.1
    IL_004f:  ldloc.0
    IL_0050:  stfld      class DiningPhilosophers.MainWindow/_Closure$__4 DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::$VB$NonLocal_$VB$Closure_ClosureVariable_8B_36
//000145:                 Dim index = i
    IL_0055:  ldloc.1
    IL_0056:  ldloc.2
    IL_0057:  stfld      int32 DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::$VB$Local_index
//000146:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithWaitAll(forks, index), TaskCreationOptions.LongRunning)
    IL_005c:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0061:  ldloc.1
    IL_0062:  dup
    IL_0063:  ldvirtftn  instance void DiningPhilosophers.MainWindow/_Closure$__4/_Closure$__5::_Lambda$__10()
    IL_0069:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_006e:  ldc.i4.2
    IL_006f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.Tasks.TaskCreationOptions)
    IL_0074:  pop
//000147:             Next i
    IL_0075:  nop
    IL_0076:  ldloc.2
    IL_0077:  ldc.i4.1
    IL_0078:  add.ovf
    IL_0079:  stloc.2
//000148:         End Sub
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_007a:  ldloc.2
    IL_007b:  ldloc.3
    IL_007c:  stloc.s    VB$CG$t_i4$S0
    IL_007e:  ldloc.s    VB$CG$t_i4$S0
    IL_0080:  ble.s      IL_0047

//000148:         End Sub
    IL_0082:  nop
    IL_0083:  ret
  } // end of method MainWindow::RunWithSemaphoresSyncWithWaitAll

  .method private instance void  RunPhilosopherSyncWithWaitAll(class [System]System.Threading.Semaphore[] forks,
                                                               int32 index) cil managed
  {
    // Code size       256 (0x100)
    .maxstack  6
    .locals init ([0] class DiningPhilosophers.MainWindow/_Closure$__6 $VB$Closure_ClosureVariable_98_65,
             [1] class [System]System.Threading.Semaphore fork1,
             [2] int32 fork1Id,
             [3] class [System]System.Threading.Semaphore fork2,
             [4] int32 fork2Id,
             [5] class [mscorlib]System.Random rand,
             [6] class [mscorlib]System.Threading.WaitHandle[] VB$LW$t_array$S0,
             [7] bool VB$CG$t_bool$S0)
//000149: 
//000150:         ''' <summary>Runs a philosopher synchronously.</summary>
//000151:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000152:         ''' <param name="index">The philosopher's index number.</param>
//000153:         Private Sub RunPhilosopherSyncWithWaitAll(ByVal forks() As Semaphore, ByVal index As Integer)
    IL_0000:  nop
//000154:             ' Assign forks.
//000155:             Dim fork1Id, fork2Id As Integer
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0001:  newobj     instance void DiningPhilosophers.MainWindow/_Closure$__6::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.2
    IL_0009:  stfld      int32 DiningPhilosophers.MainWindow/_Closure$__6::$VB$Local_index
    IL_000e:  ldloc.0
    IL_000f:  ldarg.0
    IL_0010:  stfld      class DiningPhilosophers.MainWindow DiningPhilosophers.MainWindow/_Closure$__6::$VB$Me
//000156:             GetForkIds(index, forks.Length, fork1Id, fork2Id, False)
    IL_0015:  ldarg.0
    IL_0016:  ldloc.0
    IL_0017:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__6::$VB$Local_index
    IL_001c:  ldarg.1
    IL_001d:  ldlen
    IL_001e:  conv.ovf.i4
    IL_001f:  ldloca.s   fork1Id
    IL_0021:  ldloca.s   fork2Id
    IL_0023:  ldc.i4.0
    IL_0024:  callvirt   instance void DiningPhilosophers.MainWindow::GetForkIds(int32,
                                                                                 int32,
                                                                                 int32&,
                                                                                 int32&,
                                                                                 bool)
    IL_0029:  nop
//000157:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
    IL_002a:  ldarg.1
    IL_002b:  ldloc.2
    IL_002c:  ldelem.ref
    IL_002d:  stloc.1
    IL_002e:  ldarg.1
    IL_002f:  ldloc.s    fork2Id
    IL_0031:  ldelem.ref
    IL_0032:  stloc.3
//000158: 
//000159:             ' Think and Eat, repeatedly.
//000160:             Dim rand = New Random(index)
    IL_0033:  ldloc.0
    IL_0034:  ldfld      int32 DiningPhilosophers.MainWindow/_Closure$__6::$VB$Local_index
    IL_0039:  newobj     instance void [mscorlib]System.Random::.ctor(int32)
    IL_003e:  stloc.s    rand
//000161:             While True
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_0040:  br         IL_00f4

//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
    IL_0045:  ldarg.0
    IL_0046:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory DiningPhilosophers.MainWindow::_ui
    IL_004b:  ldloc.0
    IL_004c:  dup
    IL_004d:  ldvirtftn  instance void DiningPhilosophers.MainWindow/_Closure$__6::_Lambda$__11()
    IL_0053:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0058:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_005d:  callvirt   instance void [mscorlib]System.Threading.Tasks.Task::Wait()
    IL_0062:  nop
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
    IL_0063:  ldloc.s    rand
    IL_0065:  ldc.i4.s   10
    IL_0067:  callvirt   instance int32 [mscorlib]System.Random::Next(int32)
    IL_006c:  ldc.i4     0xc8
    IL_0071:  mul.ovf
    IL_0072:  call       void [mscorlib]System.Threading.Thread::Sleep(int32)
    IL_0077:  nop
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
    IL_0078:  ldarg.0
    IL_0079:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory DiningPhilosophers.MainWindow::_ui
    IL_007e:  ldloc.0
    IL_007f:  dup
    IL_0080:  ldvirtftn  instance void DiningPhilosophers.MainWindow/_Closure$__6::_Lambda$__12()
    IL_0086:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_008b:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_0090:  callvirt   instance void [mscorlib]System.Threading.Tasks.Task::Wait()
    IL_0095:  nop
//000168:                 WaitHandle.WaitAll({fork1, fork2})
    IL_0096:  ldc.i4.2
    IL_0097:  newarr     [mscorlib]System.Threading.WaitHandle
    IL_009c:  stloc.s    VB$LW$t_array$S0
    IL_009e:  ldloc.s    VB$LW$t_array$S0
    IL_00a0:  ldc.i4.0
    IL_00a1:  ldloc.1
    IL_00a2:  stelem.ref
    IL_00a3:  nop
    IL_00a4:  ldloc.s    VB$LW$t_array$S0
    IL_00a6:  ldc.i4.1
    IL_00a7:  ldloc.3
    IL_00a8:  stelem.ref
    IL_00a9:  nop
    IL_00aa:  ldloc.s    VB$LW$t_array$S0
    IL_00ac:  call       bool [mscorlib]System.Threading.WaitHandle::WaitAll(class [mscorlib]System.Threading.WaitHandle[])
    IL_00b1:  pop
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
    IL_00b2:  ldarg.0
    IL_00b3:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory DiningPhilosophers.MainWindow::_ui
    IL_00b8:  ldloc.0
    IL_00b9:  dup
    IL_00ba:  ldvirtftn  instance void DiningPhilosophers.MainWindow/_Closure$__6::_Lambda$__13()
    IL_00c0:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_00c5:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_00ca:  callvirt   instance void [mscorlib]System.Threading.Tasks.Task::Wait()
    IL_00cf:  nop
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
    IL_00d0:  ldloc.s    rand
    IL_00d2:  ldc.i4.s   10
    IL_00d4:  callvirt   instance int32 [mscorlib]System.Random::Next(int32)
    IL_00d9:  ldc.i4     0xc8
    IL_00de:  mul.ovf
    IL_00df:  call       void [mscorlib]System.Threading.Thread::Sleep(int32)
    IL_00e4:  nop
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
    IL_00e5:  ldloc.1
    IL_00e6:  callvirt   instance int32 [System]System.Threading.Semaphore::Release()
    IL_00eb:  pop
//000176:                 fork2.Release()
    IL_00ec:  ldloc.3
    IL_00ed:  callvirt   instance int32 [System]System.Threading.Semaphore::Release()
    IL_00f2:  pop
//000177:             End While
    IL_00f3:  nop
//000161:             While True
    IL_00f4:  ldc.i4.1
    IL_00f5:  stloc.s    VB$CG$t_bool$S0
//000162:                 ' Think (Yellow).
//000163:                 _ui.StartNew(Sub() _philosophers(index).Fill = _think).Wait()
//000164:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000165: 
//000166:                 ' Wait for forks (Red).
//000167:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000168:                 WaitHandle.WaitAll({fork1, fork2})
//000169: 
//000170:                 ' Eat (Green).
//000171:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000172:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000173: 
//000174:                 ' Done with forks.
//000175:                 fork1.Release()
//000176:                 fork2.Release()
//000177:             End While
//000178:         End Sub
//000179: #End Region
//000180: 
//000181:     End Class
//000182: End Namespace
    IL_00f7:  ldloc.s    VB$CG$t_bool$S0
    IL_00f9:  brtrue     IL_0045

//000178:         End Sub
    IL_00fe:  nop
    IL_00ff:  ret
  } // end of method MainWindow::RunPhilosopherSyncWithWaitAll

  .method assembly newslot specialname strict virtual 
          instance class DiningPhilosophers.CircularPanel 
          get_circularPanel1() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class DiningPhilosophers.CircularPanel V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class DiningPhilosophers.CircularPanel DiningPhilosophers.MainWindow::_circularPanel1
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainWindow::get_circularPanel1

  .method assembly newslot specialname strict virtual 
          instance void  set_circularPanel1(class DiningPhilosophers.CircularPanel WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class DiningPhilosophers.CircularPanel DiningPhilosophers.MainWindow::_circularPanel1
    IL_0007:  nop
    IL_0008:  ret
  } // end of method MainWindow::set_circularPanel1

  .method public newslot strict virtual final 
          instance void  InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .override [System.Xaml]System.Windows.Markup.IComponentConnector::InitializeComponent
    // Code size       44 (0x2c)
    .maxstack  2
    .locals init ([0] class [System]System.Uri resourceLocater,
             [1] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\DiningPhilosophers\DiningPhilosophers_VisualBasic\obj\Debug\MainWindow.g.vb' 
//000061:         Public Sub InitializeComponent() Implements System.Windows.Markup.IComponentConnector.InitializeComponent
    IL_0000:  nop
//000062:             If _contentLoaded Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool DiningPhilosophers.MainWindow::_contentLoaded
    IL_0007:  stloc.1
//000063:                 Return
//000064:             End If
//000065:             _contentLoaded = true
//000066:             Dim resourceLocater As System.Uri = New System.Uri("/DiningPhilosophers;component/mainwindow.xaml", System.UriKind.Relative)
//000067:             
//000068:             #ExternalSource("..\..\MainWindow.xaml",1)
//000069:             System.Windows.Application.LoadComponent(Me, resourceLocater)
//000070:             
//000071:             #End ExternalSource
//000072:         End Sub
//000073:         
//000074:         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000075:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")>  _
//000076:         Friend Function _CreateDelegate(ByVal delegateType As System.Type, ByVal handler As String) As System.[Delegate]
//000077:             Return System.[Delegate].CreateDelegate(delegateType, Me, handler)
//000078:         End Function
//000079:         
//000080:         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000081:          System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
//000082:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes"),  _
//000083:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"),  _
//000084:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")>  _
//000085:         Sub System_Windows_Markup_IComponentConnector_Connect(ByVal connectionId As Integer, ByVal target As Object) Implements System.Windows.Markup.IComponentConnector.Connect
//000086:             If (connectionId = 1) Then
//000087:                 Me.circularPanel1 = CType(target,DiningPhilosophers.CircularPanel)
//000088:                 Return
//000089:             End If
//000090:             Me._contentLoaded = true
//000091:         End Sub
//000092:     End Class
//000093: End Namespace
//000094: 
    IL_0008:  ldloc.1
    IL_0009:  brfalse.s  IL_000e

//000063:                 Return
    IL_000b:  nop
    IL_000c:  br.s       IL_002a

//000064:             End If
    IL_000e:  nop
//000065:             _contentLoaded = true
    IL_000f:  ldarg.0
    IL_0010:  ldc.i4.1
    IL_0011:  stfld      bool DiningPhilosophers.MainWindow::_contentLoaded
//000066:             Dim resourceLocater As System.Uri = New System.Uri("/DiningPhilosophers;component/mainwindow.xaml", System.UriKind.Relative)
    IL_0016:  ldstr      "/DiningPhilosophers;component/mainwindow.xaml"
    IL_001b:  ldc.i4.2
    IL_001c:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_0021:  stloc.0
//000067:             
//000068:             #ExternalSource("..\..\MainWindow.xaml",1)
//000069:             System.Windows.Application.LoadComponent(Me, resourceLocater)
    IL_0022:  ldarg.0
    IL_0023:  ldloc.0
    IL_0024:  call       void [PresentationFramework]System.Windows.Application::LoadComponent(object,
                                                                                               class [System]System.Uri)
    IL_0029:  nop
//000070:             
//000071:             #End ExternalSource
//000072:         End Sub
    IL_002a:  nop
    IL_002b:  ret
  } // end of method MainWindow::InitializeComponent

  .method assembly instance class [mscorlib]System.Delegate 
          _CreateDelegate(class [mscorlib]System.Type delegateType,
                          string 'handler') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       14 (0xe)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Delegate _CreateDelegate)
//000073:         
//000074:         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000075:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")>  _
//000076:         Friend Function _CreateDelegate(ByVal delegateType As System.Type, ByVal handler As String) As System.[Delegate]
    IL_0000:  nop
//000077:             Return System.[Delegate].CreateDelegate(delegateType, Me, handler)
    IL_0001:  ldarg.1
    IL_0002:  ldarg.0
    IL_0003:  ldarg.2
    IL_0004:  call       class [mscorlib]System.Delegate [mscorlib]System.Delegate::CreateDelegate(class [mscorlib]System.Type,
                                                                                                   object,
                                                                                                   string)
    IL_0009:  stloc.0
    IL_000a:  br.s       IL_000c

//000078:         End Function
    IL_000c:  ldloc.0
    IL_000d:  ret
  } // end of method MainWindow::_CreateDelegate

  .method public newslot strict virtual final 
          instance void  System_Windows_Markup_IComponentConnector_Connect(int32 connectionId,
                                                                           object target) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .override [System.Xaml]System.Windows.Markup.IComponentConnector::Connect
    // Code size       35 (0x23)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
//000079:         
//000080:         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000081:          System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
//000082:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes"),  _
//000083:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"),  _
//000084:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")>  _
//000085:         Sub System_Windows_Markup_IComponentConnector_Connect(ByVal connectionId As Integer, ByVal target As Object) Implements System.Windows.Markup.IComponentConnector.Connect
    IL_0000:  nop
//000086:             If (connectionId = 1) Then
    IL_0001:  ldarg.1
    IL_0002:  ldc.i4.1
    IL_0003:  ceq
    IL_0005:  stloc.0
//000087:                 Me.circularPanel1 = CType(target,DiningPhilosophers.CircularPanel)
//000088:                 Return
//000089:             End If
//000090:             Me._contentLoaded = true
//000091:         End Sub
//000092:     End Class
//000093: End Namespace
//000094: 
    IL_0006:  ldloc.0
    IL_0007:  brfalse.s  IL_0019

//000087:                 Me.circularPanel1 = CType(target,DiningPhilosophers.CircularPanel)
    IL_0009:  ldarg.0
    IL_000a:  ldarg.2
    IL_000b:  castclass  DiningPhilosophers.CircularPanel
    IL_0010:  callvirt   instance void DiningPhilosophers.MainWindow::set_circularPanel1(class DiningPhilosophers.CircularPanel)
    IL_0015:  nop
//000088:                 Return
    IL_0016:  nop
    IL_0017:  br.s       IL_0021

//000089:             End If
    IL_0019:  nop
//000090:             Me._contentLoaded = true
    IL_001a:  ldarg.0
    IL_001b:  ldc.i4.1
    IL_001c:  stfld      bool DiningPhilosophers.MainWindow::_contentLoaded
//000091:         End Sub
    IL_0021:  nop
    IL_0022:  ret
  } // end of method MainWindow::System_Windows_Markup_IComponentConnector_Connect

  .method private specialname static class [PresentationFramework]System.Windows.Shapes.Ellipse 
          _Lambda$__3(int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       68 (0x44)
    .maxstack  2
    .locals init ([0] class [PresentationFramework]System.Windows.Shapes.Ellipse _Lambda$__3,
             [1] class [PresentationFramework]System.Windows.Shapes.Ellipse VB$t_ref$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\DiningPhilosophers\DiningPhilosophers_VisualBasic\MainWindow.xaml.vb' 
//000063:              Select New Ellipse With {.Height = 75, .Width = 75, .Fill = Brushes.Red, .Stroke = Brushes.Black}).ToArray()
    IL_0000:  newobj     instance void [PresentationFramework]System.Windows.Shapes.Ellipse::.ctor()
    IL_0005:  stloc.1
    IL_0006:  ldloc.1
    IL_0007:  ldc.r8     75.
    IL_0010:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::set_Height(float64)
    IL_0015:  nop
    IL_0016:  ldloc.1
    IL_0017:  ldc.r8     75.
    IL_0020:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::set_Width(float64)
    IL_0025:  nop
    IL_0026:  ldloc.1
    IL_0027:  call       class [PresentationCore]System.Windows.Media.SolidColorBrush [PresentationCore]System.Windows.Media.Brushes::get_Red()
    IL_002c:  callvirt   instance void [PresentationFramework]System.Windows.Shapes.Shape::set_Fill(class [PresentationCore]System.Windows.Media.Brush)
    IL_0031:  nop
    IL_0032:  ldloc.1
    IL_0033:  call       class [PresentationCore]System.Windows.Media.SolidColorBrush [PresentationCore]System.Windows.Media.Brushes::get_Black()
    IL_0038:  callvirt   instance void [PresentationFramework]System.Windows.Shapes.Shape::set_Stroke(class [PresentationCore]System.Windows.Media.Brush)
    IL_003d:  nop
    IL_003e:  ldloc.1
    IL_003f:  stloc.0
    IL_0040:  br.s       IL_0042

    IL_0042:  ldloc.0
    IL_0043:  ret
  } // end of method MainWindow::_Lambda$__3

  .method private specialname static class [mscorlib]System.Threading.SemaphoreSlim 
          _Lambda$__4(int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Threading.SemaphoreSlim _Lambda$__4)
//000064:             For Each philosopher In _philosophers
//000065:                 circularPanel1.Children.Add(philosopher)
//000066:             Next philosopher
//000067:         End Sub
//000068: 
//000069:         ''' <summary>Gets the fork IDs of the forks for a particular philosopher.</summary>
//000070:         ''' <param name="philosopherIndex">The index of the philosopher whose IDs are being retrieved.</param>
//000071:         ''' <param name="numForks">The number of forks that exist.</param>
//000072:         ''' <param name="left">The ID of the philosopher's left fork.</param>
//000073:         ''' <param name="right">The ID of the philosopher's right fork.</param>
//000074:         ''' <param name="sort">Whether to sort the forks, so that the left fork is always smaller than the right.</param>
//000075:         Private Sub GetForkIds(ByVal philosopherIndex As Integer, ByVal numForks As Integer,
//000076:                                <System.Runtime.InteropServices.Out()> ByRef left As Integer,
//000077:                                <System.Runtime.InteropServices.Out()> ByRef right As Integer, ByVal sort As Boolean)
//000078:             ' The forks for a philosopher are the ones at philosopherIndex and philosopherIndex+1, though
//000079:             ' the latter can wrap around.  We need to ensure they're always acquired in the right order, to
//000080:             ' prevent deadlock, so order them.
//000081:             left = philosopherIndex
//000082:             right = (philosopherIndex + 1) Mod numForks
//000083:             If sort AndAlso left > right Then
//000084:                 Dim tmp = left
//000085:                 left = right
//000086:                 right = tmp
//000087:             End If
//000088:         End Sub
//000089: #End Region
//000090: 
//000091: #Region "Synchronous, Ordered"
//000092:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000093:         Private Sub RunWithSemaphoresSyncWithOrderedForks()
//000094:             Dim forks = (
//000095:              From i In Enumerable.Range(0, _philosophers.Length)
//000096:              Select New SemaphoreSlim(1, 1)).ToArray()
    IL_0000:  ldc.i4.1
    IL_0001:  ldc.i4.1
    IL_0002:  newobj     instance void [mscorlib]System.Threading.SemaphoreSlim::.ctor(int32,
                                                                                       int32)
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method MainWindow::_Lambda$__4

  .method private specialname static class [System]System.Threading.Semaphore 
          _Lambda$__9(int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  2
    .locals init ([0] class [System]System.Threading.Semaphore _Lambda$__9)
//000097:             For i = 0 To _philosophers.Length - 1
//000098:                 Dim index = i
//000099:                 Task.Factory.StartNew(Sub() RunPhilosopherSyncWithOrderedForks(forks, index), TaskCreationOptions.LongRunning)
//000100:             Next i
//000101:         End Sub
//000102: 
//000103:         ''' <summary>Runs a philosopher synchronously.</summary>
//000104:         ''' <param name="forks">The forks, represented as semaphores.</param>
//000105:         ''' <param name="index">The philosopher's index number.</param>
//000106:         Private Sub RunPhilosopherSyncWithOrderedForks(ByVal forks() As SemaphoreSlim, ByVal index As Integer)
//000107:             ' Assign forks.
//000108:             Dim fork1Id, fork2Id As Integer
//000109:             GetForkIds(index, forks.Length, fork1Id, fork2Id, True)
//000110:             Dim fork1 = forks(fork1Id), fork2 = forks(fork2Id)
//000111: 
//000112:             ' Think and Eat, repeatedly.
//000113:             Dim rand = New Random(index)
//000114:             While True
//000115:                 ' Think (Yellow).
//000116:                 _ui.StartNew(Sub()
//000117:                                  _philosophers(index).Fill = _think
//000118:                              End Sub).Wait()
//000119:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000120: 
//000121:                 ' Wait for forks (Red).
//000122:                 fork1.Wait()
//000123: 
//000124:                 _ui.StartNew(Sub() _philosophers(index).Fill = _wait).Wait()
//000125:                 fork2.Wait()
//000126: 
//000127:                 ' Eat (Green).
//000128:                 _ui.StartNew(Sub() _philosophers(index).Fill = _eat).Wait()
//000129:                 Thread.Sleep(rand.Next(10) * TIMESCALE)
//000130: 
//000131:                 ' Done with forks.
//000132:                 fork1.Release()
//000133:                 fork2.Release()
//000134:             End While
//000135:         End Sub
//000136: #End Region
//000137: 
//000138: #Region "Synchronous, WaitAll"
//000139:         ''' <summary>Runs the philosophers utilizing one thread per philosopher.</summary>
//000140:         Private Sub RunWithSemaphoresSyncWithWaitAll()
//000141:             Dim forks = (
//000142:              From i In Enumerable.Range(0, _philosophers.Length)
//000143:              Select New Semaphore(1, 1)).ToArray()
    IL_0000:  ldc.i4.1
    IL_0001:  ldc.i4.1
    IL_0002:  newobj     instance void [System]System.Threading.Semaphore::.ctor(int32,
                                                                                 int32)
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method MainWindow::_Lambda$__9

  .property instance class DiningPhilosophers.CircularPanel
          circularPanel1()
  {
    .get instance class DiningPhilosophers.CircularPanel DiningPhilosophers.MainWindow::get_circularPanel1()
    .set instance void DiningPhilosophers.MainWindow::set_circularPanel1(class DiningPhilosophers.CircularPanel)
  } // end of property MainWindow::circularPanel1
} // end of class DiningPhilosophers.MainWindow

.class private auto ansi sealed My.Resources.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly specialname static class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       56 (0x38)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager ResourceManager,
             [1] class [mscorlib]System.Resources.ResourceManager temp,
             [2] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\DiningPhilosophers\DiningPhilosophers_VisualBasic\My Project\Resources.Designer.vb' 
//000038: 			Get
    IL_0000:  nop
//000039: 				If (resourceMan Is Nothing) Then
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  ceq
    IL_0009:  stloc.2
//000040: 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
//000041: 					resourceMan = temp
//000042: 				End If
//000043: 				Return resourceMan
//000044: 			End Get
//000045: 		End Property
//000046: 
//000047: 		''' <summary>
//000048: 		'''   Overrides the current thread's CurrentUICulture property for all
//000049: 		'''   resource lookups using this strongly typed resource class.
//000050: 		''' </summary>
//000051: 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000052: 		Friend Property Culture() As Global.System.Globalization.CultureInfo
//000053: 			Get
//000054: 				Return resourceCulture
//000055: 			End Get
//000056: 			Set(ByVal value As System.Globalization.CultureInfo)
//000057: 				resourceCulture = value
//000058: 			End Set
//000059: 		End Property
//000060: 	End Module
//000061: End Namespace
    IL_000a:  ldloc.2
    IL_000b:  brfalse.s  IL_002d

//000040: 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
    IL_000d:  ldstr      "Resources"
    IL_0012:  ldtoken    My.Resources.Resources
    IL_0017:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_001c:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0021:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_0026:  stloc.1
//000041: 					resourceMan = temp
    IL_0027:  ldloc.1
    IL_0028:  stsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
//000042: 				End If
    IL_002d:  nop
//000043: 				Return resourceMan
    IL_002e:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0033:  stloc.0
    IL_0034:  br.s       IL_0036

//000044: 			End Get
    IL_0036:  ldloc.0
    IL_0037:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly specialname static class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo Culture)
//000045: 		End Property
//000046: 
//000047: 		''' <summary>
//000048: 		'''   Overrides the current thread's CurrentUICulture property for all
//000049: 		'''   resource lookups using this strongly typed resource class.
//000050: 		''' </summary>
//000051: 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000052: 		Friend Property Culture() As Global.System.Globalization.CultureInfo
//000053: 			Get
    IL_0000:  nop
//000054: 				Return resourceCulture
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000055: 			End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly specialname static void 
          set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       9 (0x9)
    .maxstack  8
//000056: 			Set(ByVal value As System.Globalization.CultureInfo)
    IL_0000:  nop
//000057: 				resourceCulture = value
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
//000058: 			End Set
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::get_Culture()
    .set void My.Resources.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
} // end of class My.Resources.Resources

.class private auto ansi sealed beforefieldinit My.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .field private static class My.Settings defaultInstance
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       22 (0x16)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\DiningPhilosophers\DiningPhilosophers_VisualBasic\My Project\Settings.Designer.vb' 
//000018: 		Private Shared defaultInstance As Settings = (CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New Settings()), Settings))
    IL_0000:  newobj     instance void My.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  My.Settings
    IL_000f:  stsfld     class My.Settings My.Settings::defaultInstance
    IL_0014:  nop
    IL_0015:  ret
  } // end of method Settings::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Settings::.ctor

  .method public specialname static class My.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class My.Settings Default)
//000019: 
//000020: 		Public Shared ReadOnly Property [Default]() As Settings
//000021: 			Get
    IL_0000:  nop
//000022: 				Return defaultInstance
    IL_0001:  ldsfld     class My.Settings My.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000023: 			End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .property class My.Settings Default()
  {
    .get class My.Settings My.Settings::get_Default()
  } // end of property Settings::Default
} // end of class My.Settings

.class private auto ansi sealed VB$AnonymousDelegate_1
       extends [mscorlib]System.MulticastDelegate
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 12 3C 67 65 6E 65 72 61 74 65 64 20 6D 65   // ...<generated me
                                                                                                 74 68 6F 64 3E 01 00 54 0E 04 54 79 70 65 12 3C   // thod>..T..Type.<
                                                                                                 67 65 6E 65 72 61 74 65 64 20 6D 65 74 68 6F 64   // generated method
                                                                                                 3E )                                              // >
  .method public specialname rtspecialname 
          instance void  .ctor(object TargetObject,
                               native int TargetMethod) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_1::.ctor

  .method public newslot strict virtual instance class [mscorlib]System.IAsyncResult 
          BeginInvoke(class [mscorlib]System.AsyncCallback DelegateCallback,
                      object DelegateAsyncState) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_1::BeginInvoke

  .method public newslot strict virtual instance void 
          EndInvoke(class [mscorlib]System.IAsyncResult DelegateAsyncResult) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_1::EndInvoke

  .method public newslot strict virtual instance void 
          Invoke() runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_1::Invoke

} // end of class VB$AnonymousDelegate_1


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
