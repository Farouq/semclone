<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Driver.fs" startline="11" endline="41"><![CDATA[
     let writeInColor color msg =
         let oldColor = Console.ForegroundColor
         Console.ForegroundColor <- color
         Console.WriteLine(msg.ToString())
         Console.ForegroundColor <- oldColor
 
     writeInColor ConsoleColor.Green "
 
     let SIPNP = 
         BindingFlags.Static ||| BindingFlags.Instance ||| 
         BindingFlags.Public ||| BindingFlags.NonPublic
     Assembly.GetExecutingAssembly().GetTypes() |> Array.iter (fun typ ->
             typ.GetMethods(SIPNP) |> Array.iter (fun meth ->
                 let customAttrs = meth.GetCustomAttributes(false)
                 try
                     let result = customAttrs |> Array.find (fun attr -> attr 
                     if result 
                         writeInColor ConsoleColor.Blue ("==========> Executing " + (result 
                         try
                             meth.Invoke(null, [| |]) |> ignore
                         with
                         | ex -> 
                             writeInColor ConsoleColor.Red ("Exception
                             writeInColor ConsoleColor.Yellow (ex.StackTrace)
                     else
                         ()
                 with
                 |   ex -> ()
             )
         )
     0
     Assembly.GetExecutingAssembly().GetTypes() |> Array.iter (fun typ ->
             typ.GetMethods(SIPNP) |> Array.iter (fun meth ->
                 let customAttrs = meth.GetCustomAttributes(false)
                 try
                     let result = customAttrs |> Array.find (fun attr -> attr 
                     if result 
                         writeInColor ConsoleColor.Blue ("==========> Executing " + (result 
                         try
                             meth.Invoke(null, [| |]) |> ignore
                         with
                         | ex -> 
                             writeInColor ConsoleColor.Red ("Exception
                             writeInColor ConsoleColor.Yellow (ex.StackTrace)
                     else
                         ()
                 with
                 |   ex -> ()
             )
         )
     0
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\CustomAttributes.fs" startline="32" endline="33"><![CDATA[
     let e = new ObsoleteExperiment()
     e.TestMethod()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\CustomAttributes.fs" startline="34" endline="49"><![CDATA[
 
 
 // ============= Conditional
 type ConditionalDemo(data 
     [<Conditional("DEBUG")>]
     member c.DumpInternals() =
         Console.WriteLine("data
             data, count)
     override c.ToString() =
         String.Format("ConditionalDemo()")
 
 [<Example("Conditional usage")>]
 let conditionalUsage() =
     let cd = new ConditionalDemo("password", 5)
     Console.WriteLine(cd.ToString())
     cd.DumpInternals()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\CustomAttributes.fs" startline="50" endline="60"><![CDATA[
     
 
 // ============= ParamArray
 
 type ParamArrayExperiment() =
     member e.TestMethod( [<System.ParamArray>] args 
         for o in args do
             System.Console.WriteLine(o.ToString())
 
 let varargsFunction([<System.ParamArray>] args 
     for o in args do
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\CustomAttributes.fs" startline="61" endline="74"><![CDATA[
         System.Console.WriteLine(o.ToString())
 
 [<Example("ParamArray usage")>]
 let paramArrayUsage() =
     let e = new ParamArrayExperiment()
     e.TestMethod("one", 2, 3.0)
     e.TestMethod("This is just one argument")
     e.TestMethod() // No arguments, empty array
 
     //varargsFunction("one", 2, 3.0)
     // error
     // but here has type 'a * 'b * 'c
 
     ()        
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\CustomAttributes.fs" startline="75" endline="107"><![CDATA[
 
 
 // ============= Blame example
 [<AttributeUsage(AttributeTargets.Assembly |||
                  AttributeTargets.Class |||
                  AttributeTargets.Constructor |||
                  AttributeTargets.Enum |||
                  AttributeTargets.Field |||
                  AttributeTargets.Interface |||
                  AttributeTargets.Method |||
                  AttributeTargets.Module |||
                  AttributeTargets.Struct)>]
 type BlameAttribute(owner 
     inherit Attribute()
     
     let mutable reason = ""
     
     member public b.Owner 
         with get() = owner
     member public b.Reason
         with get() = reason
         and set(value) = reason <- value
     
     override b.ToString() =
         String.Format("Blame {0}{1}",
             b.Owner, 
             if b.Reason = "" 
                 then ", just because!" 
                 else ", because " + b.Reason)
 
 [<Blame("Aaron Erickson", Reason="I told you not to use this!")>]
 let faultyMethod() =
     null.ToString()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\CustomAttributes.fs" startline="108" endline="123"><![CDATA[
 
 [<Example("Custom attribute creation and consumption example")>]
 let blameExample() =
     try
         faultyMethod() |> ignore
     with
     | ex -> 
         let target = ex.TargetSite
         let custAttrs = 
             target.GetCustomAttributes(typeof<BlameAttribute>, true)
         if custAttrs.Length > 0 then
             let blame = (custAttrs.[0]) 
             Console.WriteLine("Aha! {0} did it!", blame.Owner)
         else
             Console.WriteLine("Nobody to blame, sorry!")
     ()
 
 
 // ============= Attributes
 
 [<assembly
 [<assembly
 do
     ()
 
 
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Packaging.fs" startline="9" endline="11"><![CDATA[
     Console.WriteLine("Much shorter, thank you")
     
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Packaging.fs" startline="12" endline="33"><![CDATA[
     
 module Examples =
 
     open System
 
     type Person(fn 
         member this.FirstName = fn
         member this.LastName = ln
         member this.Age = a
         override this.ToString() =
             String.Format("{0} {1} is {2} years old",
                 this.FirstName, this.LastName, this.Age)
 
 module MoreExamples =
 
     type Student() =
         override this.ToString() = "Student"
 
 module FunctionalExample =
     let doSomething() =
         Console.WriteLine("I did something!")
     let aValue = 5
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Generics.fs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Generics.fs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Generics.fs" startline="18" endline="36"><![CDATA[
 let s1 = new Stack<System.String>()
 
 type TwoArgGeneric<'a, 'b>(a 
     let vA = a
     let vB = b
     override tag.ToString() =
         System.String.Format("TwoArgGeneric({0},{1})", a, b)
         
 type Reflector<'a>() =
     member r.GetMembers() =
         let ty = typeof<'a>
         ty.GetMembers()
 
 type Reflector2() =
     static member GetMembers<'a>() =
         typeof<'a>.GetMembers()
 
 
 let stringMembers = Reflector2.GetMembers<System.String>()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Inheritance.fs" startline="117" endline="123"><![CDATA[
     let s = new Student("Ted", "Pattison", 50, "Beer", "DevelopMentor")
     System.Console.WriteLine("{0} {1} attends {2} and is studying {3}",
         s.FirstName, s.LastName, s.School, s.Subject)
 
     let p = new Student("Ted", "Neward", 38)
     p.Greet(s)
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Inheritance.fs" startline="124" endline="137"><![CDATA[
 
 type Printer() =
     member this.PrintName(p 
         System.Console.WriteLine("{0}", p.FirstName)
     member this.GenericPrintName(p 
         System.Console.WriteLine("{0}", p.FirstName)
     
 [<Example("Overriding examples")>]    
 let overriding_examples() =
     let p = new Student("Ken", "Sipe", 40)
     let p_str = p.ToString()
     System.Console.WriteLine(p_str)
         // prints "Inheritance+Person"
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Inheritance.fs" startline="138" endline="160"><![CDATA[
 
 [<Example("Casting examples")>]
 let casting_examples() =
     // This will NOT compile
     //let p 
     
     let p 
     let s = p 
     let pToStudent = p 
 
     let printer = new Printer()
     printer.PrintName(p)
     printer.PrintName(s)
     
     let p2 
     let s2 
     
     let oi = box 42
     System.Console.WriteLine("oi's type is {0}", oi.GetType())
     let i 
     System.Console.WriteLine("i's type is {0}", i.GetType())
 
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Inheritance.fs" startline="161" endline="170"><![CDATA[
 
 [<Example("Equality and comparison examples")>]
 let eqcom_examples() =
     let t1 = (1, 1)
     let t2 = (1, 1)
     let t3 = (1, 2)
     System.Console.WriteLine("{0}", (t1 = t2)) // true
     System.Console.WriteLine("{0}", (t1 < t3)) // true
     System.Console.WriteLine("{0}", (t3 < t1)) // false
     ()
 
 [<Example("Interface examples")>]
 let interface_examples() =
     let p = new Student("Rachel", "Reese", 28, "Silverlight", "Agilitrain")
     let pclone = (p 
 
     ()
 
 [<Example("Object expression examples")>]
 let obj_expr_examples() =
     let p = { new IDrinker with
                 member this.Drink() =
                     System.Console.WriteLine("Sip")
                 member this.FavoriteDrink =
                     "Macallan 25" }
     p.Drink()
     
     let p2 = { new Person("Ted", "Neward", 38) with
                 member this.DoTheCloneThing() = null
                 member this.Work() =
                     System.Console.WriteLine("Writing a book!") }
     p2.Work()
 
     ()
     System.Console.WriteLine("{0}", (t1 < t3)) // true
     System.Console.WriteLine("{0}", (t3 < t1)) // false
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Inheritance.fs" startline="171" endline="177"><![CDATA[
 
 [<Example("Interface examples")>]
 let interface_examples() =
     let p = new Student("Rachel", "Reese", 28, "Silverlight", "Agilitrain")
     let pclone = (p 
 
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Inheritance.fs" startline="178" endline="194"><![CDATA[
 
 [<Example("Object expression examples")>]
 let obj_expr_examples() =
     let p = { new IDrinker with
                 member this.Drink() =
                     System.Console.WriteLine("Sip")
                 member this.FavoriteDrink =
                     "Macallan 25" }
     p.Drink()
     
     let p2 = { new Person("Ted", "Neward", 38) with
                 member this.DoTheCloneThing() = null
                 member this.Work() =
                     System.Console.WriteLine("Writing a book!") }
     p2.Work()
 
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="225" endline="283"><![CDATA[
     let p1 = new Person("Ted", "Neward", 38)
     let p2 = new Person("Aaron", "Erickson")
     let p3 = new Person()
     for p in [p1; p2; p3] do
         System.Console.WriteLine("{0} is {1} years old",
             p.FullName, p.Age)
     p1.Age <- p1.Age+1
     let p4 = new Person("Ted", "Neward", Age = 38)
     
     let p5 = new FlexiPerson()
     let p6 = new FlexiPerson(FirstName="Ted")
     let p7 = new FlexiPerson(LastName="Neward", Age=38)
     let op5 = new OptiPerson()
     let op6 = new OptiPerson(firstName="Ted")
     let op7 = new OptiPerson(firstName="Neward", age=38)
     
     System.Console.WriteLine("{0}'s heart says {1}",
         p1.FullName, p1.["Heart"])
     
     System.Console.WriteLine("{0}'s heart says {1}",
         p1.FullName, p1.Organ("Heart"))
     
     p1.Greet(p2, "Howdy!")
     let greeting = p1.CreateGreeting(p2, "Howdy!")
     System.Console.WriteLine(greeting)
     p1.Greet(p2)
     
     let wwwww = 
         p1.WhoWhatWhereWhenWhy(
             whenn=System.DateTime.Now,
             where="in the sitting room",
             what="relaxing",
             why="because I'm tired")
     System.Console.WriteLine(wwwww)
     
     System.Console.WriteLine(arg=[||], format="This is a message")
     
     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
                     System.DateTime.Now, "because I'm tired")
     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
                     why="because I'm tired",
                     whenn=System.DateTime.Now)
     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
                     ?why=Some("because I'm tired"),
                     whenn=System.DateTime.Now)
     
     let T800 = 
         if Skynet.AfterJudgmentDay then
             Skynet.CreateTerminator()
         else
             new Person("Arnold", "Schwarzenegger", 50)
             
     let ted = new Munchkin(1)
     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
     let ted = ted <<== coolArmor
     
     let compare = p1 <==> p2
 
     ()
 
 
 [<Class>]
 type Student(name 
     member s.Name = name
     member s.Subject = subject
 
 type Student with
     new() = Student("", "")
     new(name, subject, school) = 
         Student(name, subject)
     member s.FullDescription = s.Name + " " + s.Subject
 
 type System.String with
     member s.IsUpper =
         s.ToUpper() = s
 
 
 [<Example("Type extension usage")>]
 let typeExtensionExample() =
     let ted = 
         new Student("Ted", "International Relations")
 
     ()
 
 
 // ======================== Access Modifiers
 
 [<Class>]
 type private Sport(name) =
     member private p.Rules
         with get() = ""
 
 [<Class>]
 type (* public *) ExampleClass(field1 
     [<DefaultValue>]
     val mutable (* private *) valField 
 
     // Always private
     let mutable mutField2 = "Changeable"
     let helper = field1 + ", helped"
 
     (* public *)
     new () =
         ExampleClass("")
 
     member (* public *) e.Property 
         with (* public *) get() = field1
     member (* public *) e.ReadWriteProp
         with (* public *) get() = mutField2
         and (* public *) set(value) = mutField2 <- value
 
 
 // ======================== Delegates and Events
 
 type Watcher() =
     static member GoingAway(args 
         System.Console.WriteLine("Going away now....")
 
 type Notify = delegate of string -> string
 
 type Child() =
     member this.Respond(msg 
         System.Console.WriteLine("You want me to {0}? No!")
         "No!"
 
 type CurriedDelegate = delegate of int * int -> int
 type TupledDelegate = delegate of (int * int) -> int
 type DelegateTarget() =
     member this.CurriedAdd (x 
     member this.TupledAdd (x 
 
 type ConcertEventArgs(city 
     inherit System.EventArgs()
     member cea.City = city
     override cea.ToString() =
         System.String.Format("city
     
 type RockBand(name 
     let concertEvent = new DelegateEvent<System.EventHandler>()
 
     member rb.Name = name
 
     [<CLIEvent>]
     member rb.OnConcert = concertEvent.Publish
     member rb.HoldConcert(city 
         concertEvent.Trigger([| rb; 
             new ConcertEventArgs(city) |])
         System.Console.WriteLine("Rockin' {0}!")
 
 type Fan(home 
     do
         favBand.OnConcert.AddHandler(
             System.EventHandler(f.FavoriteBandComingToTown))
     member f.FavoriteBandComingToTown 
             (_ 
             (args 
         let cea = args 
         if home = cea.City then
             System.Console.WriteLine("I'm SO going!")
         else
             System.Console.WriteLine("Darn")
 
 [<Example("")>]
 let events_examples() =
     let ad = System.AppDomain.CurrentDomain
     ad.ProcessExit.Add(Watcher.GoingAway)
 
     let c = new Child()
     let np = new Notify(c.Respond)
     let response = np.Invoke("Clean your room!")
     System.Console.WriteLine(response)
     
     let dt = new DelegateTarget()
     let cd1 = new CurriedDelegate(dt.CurriedAdd)
     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
     let td1 = new TupledDelegate(dt.TupledAdd)
     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
     
     let rb = new RockBand("The Functional Ya-Yas")
     rb.OnConcert 
         |> Event.filter 
             (fun evArgs ->
                 let cea = evArgs 
                 if cea.City = "Sacramento" then false
                     // Nobody wants to tour in Sacramento
                 else true)
         |> Event.add
             (fun evArgs ->
                 let cea = evArgs 
                 System.Console.WriteLine("{0} is rockin' {1}",
                     rb.Name, cea.City))
     let f1 = new Fan("Detroit", rb)
     let f2 = new Fan("Cleveland", rb)
     let f3 = new Fan("Detroit", rb)
     rb.HoldConcert("Detroit")
 
     ()
 
 
 
 
 
 // ======================== Experiments; not for publication
 
 type Experiment() =
     member e.TestMethod( [<System.ParamArray>] args 
         for o in args do
             System.Console.WriteLine(o.ToString())
 
 let e = new Experiment()
 e.TestMethod("one", 2, 3.0)
 e.TestMethod("This is just one argument")
 e.TestMethod() // No arguments, empty array
 
 let varargsFunction([<System.ParamArray>] args 
     for o in args do
         System.Console.WriteLine(o.ToString())
 
 let private privateFunction() =
     printfn "You can't call me!"
         
 //varargsFunction("one", 2, 3.0)
 // error
 // but here has type 'a * 'b * 'c
 
 let f x = x + x
 
 let inline fi x = x + x
 
 let r = fi "Hello"
     p1.Age <- p1.Age+1
     let p4 = new Person("Ted", "Neward", Age = 38)
     
     let p5 = new FlexiPerson()
     let p6 = new FlexiPerson(FirstName="Ted")
     let p7 = new FlexiPerson(LastName="Neward", Age=38)
     let op5 = new OptiPerson()
     let op6 = new OptiPerson(firstName="Ted")
     let op7 = new OptiPerson(firstName="Neward", age=38)
     
     System.Console.WriteLine("{0}'s heart says {1}",
         p1.FullName, p1.["Heart"])
     
     System.Console.WriteLine("{0}'s heart says {1}",
         p1.FullName, p1.Organ("Heart"))
     
     p1.Greet(p2, "Howdy!")
     let greeting = p1.CreateGreeting(p2, "Howdy!")
     System.Console.WriteLine(greeting)
     p1.Greet(p2)
     
     let wwwww = 
         p1.WhoWhatWhereWhenWhy(
             whenn=System.DateTime.Now,
             where="in the sitting room",
             what="relaxing",
             why="because I'm tired")
     System.Console.WriteLine(wwwww)
     
     System.Console.WriteLine(arg=[||], format="This is a message")
     
     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
                     System.DateTime.Now, "because I'm tired")
     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
                     why="because I'm tired",
                     whenn=System.DateTime.Now)
     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
                     ?why=Some("because I'm tired"),
                     whenn=System.DateTime.Now)
     
     let T800 = 
         if Skynet.AfterJudgmentDay then
             Skynet.CreateTerminator()
         else
             new Person("Arnold", "Schwarzenegger", 50)
             
     let ted = new Munchkin(1)
     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
     let ted = ted <<== coolArmor
     
     let compare = p1 <==> p2
 
     ()
 
 
 [<Class>]
 type Student(name 
     member s.Name = name
     member s.Subject = subject
 
 type Student with
     new() = Student("", "")
     new(name, subject, school) = 
         Student(name, subject)
     member s.FullDescription = s.Name + " " + s.Subject
 
 type System.String with
     member s.IsUpper =
         s.ToUpper() = s
 
 
 [<Example("Type extension usage")>]
 let typeExtensionExample() =
     let ted = 
         new Student("Ted", "International Relations")
 
     ()
 
 
 // ======================== Access Modifiers
 
 [<Class>]
 type private Sport(name) =
     member private p.Rules
         with get() = ""
 
 [<Class>]
 type (* public *) ExampleClass(field1 
     [<DefaultValue>]
     val mutable (* private *) valField 
 
     // Always private
     let mutable mutField2 = "Changeable"
     let helper = field1 + ", helped"
 
     (* public *)
     new () =
         ExampleClass("")
 
     member (* public *) e.Property 
         with (* public *) get() = field1
     member (* public *) e.ReadWriteProp
         with (* public *) get() = mutField2
         and (* public *) set(value) = mutField2 <- value
 
 
 // ======================== Delegates and Events
 
 type Watcher() =
     static member GoingAway(args 
         System.Console.WriteLine("Going away now....")
 
 type Notify = delegate of string -> string
 
 type Child() =
     member this.Respond(msg 
         System.Console.WriteLine("You want me to {0}? No!")
         "No!"
 
 type CurriedDelegate = delegate of int * int -> int
 type TupledDelegate = delegate of (int * int) -> int
 type DelegateTarget() =
     member this.CurriedAdd (x 
     member this.TupledAdd (x 
 
 type ConcertEventArgs(city 
     inherit System.EventArgs()
     member cea.City = city
     override cea.ToString() =
         System.String.Format("city
     
 type RockBand(name 
     let concertEvent = new DelegateEvent<System.EventHandler>()
 
     member rb.Name = name
 
     [<CLIEvent>]
     member rb.OnConcert = concertEvent.Publish
     member rb.HoldConcert(city 
         concertEvent.Trigger([| rb; 
             new ConcertEventArgs(city) |])
         System.Console.WriteLine("Rockin' {0}!")
 
 type Fan(home 
     do
         favBand.OnConcert.AddHandler(
             System.EventHandler(f.FavoriteBandComingToTown))
     member f.FavoriteBandComingToTown 
             (_ 
             (args 
         let cea = args 
         if home = cea.City then
             System.Console.WriteLine("I'm SO going!")
         else
             System.Console.WriteLine("Darn")
 
 [<Example("")>]
 let events_examples() =
     let ad = System.AppDomain.CurrentDomain
     ad.ProcessExit.Add(Watcher.GoingAway)
 
     let c = new Child()
     let np = new Notify(c.Respond)
     let response = np.Invoke("Clean your room!")
     System.Console.WriteLine(response)
     
     let dt = new DelegateTarget()
     let cd1 = new CurriedDelegate(dt.CurriedAdd)
     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
     let td1 = new TupledDelegate(dt.TupledAdd)
     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
     
     let rb = new RockBand("The Functional Ya-Yas")
     rb.OnConcert 
         |> Event.filter 
             (fun evArgs ->
                 let cea = evArgs 
                 if cea.City = "Sacramento" then false
                     // Nobody wants to tour in Sacramento
                 else true)
         |> Event.add
             (fun evArgs ->
                 let cea = evArgs 
                 System.Console.WriteLine("{0} is rockin' {1}",
                     rb.Name, cea.City))
     let f1 = new Fan("Detroit", rb)
     let f2 = new Fan("Cleveland", rb)
     let f3 = new Fan("Detroit", rb)
     rb.HoldConcert("Detroit")
 
     ()
 
 
 
 
 
 // ======================== Experiments; not for publication
 
 type Experiment() =
     member e.TestMethod( [<System.ParamArray>] args 
         for o in args do
             System.Console.WriteLine(o.ToString())
 
 let e = new Experiment()
 e.TestMethod("one", 2, 3.0)
 e.TestMethod("This is just one argument")
 e.TestMethod() // No arguments, empty array
 
 let varargsFunction([<System.ParamArray>] args 
     for o in args do
         System.Console.WriteLine(o.ToString())
 
 let private privateFunction() =
     printfn "You can't call me!"
         
 //varargsFunction("one", 2, 3.0)
 // error
 // but here has type 'a * 'b * 'c
 
 let f x = x + x
 
 let inline fi x = x + x
 
 let r = fi "Hello"
             new Person("Arnold", "Schwarzenegger", 50)
             
     let ted = new Munchkin(1)
     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
     let ted = ted <<== coolArmor
     
     let compare = p1 <==> p2
 
     ()
 
 
 [<Class>]
 type Student(name 
     member s.Name = name
     member s.Subject = subject
 
 type Student with
     new() = Student("", "")
     new(name, subject, school) = 
         Student(name, subject)
     member s.FullDescription = s.Name + " " + s.Subject
 
 type System.String with
     member s.IsUpper =
         s.ToUpper() = s
 
 
 [<Example("Type extension usage")>]
 let typeExtensionExample() =
     let ted = 
         new Student("Ted", "International Relations")
 
     ()
 
 
 // ======================== Access Modifiers
 
 [<Class>]
 type private Sport(name) =
     member private p.Rules
         with get() = ""
 
 [<Class>]
 type (* public *) ExampleClass(field1 
     [<DefaultValue>]
     val mutable (* private *) valField 
 
     // Always private
     let mutable mutField2 = "Changeable"
     let helper = field1 + ", helped"
 
     (* public *)
     new () =
         ExampleClass("")
 
     member (* public *) e.Property 
         with (* public *) get() = field1
     member (* public *) e.ReadWriteProp
         with (* public *) get() = mutField2
         and (* public *) set(value) = mutField2 <- value
 
 
 // ======================== Delegates and Events
 
 type Watcher() =
     static member GoingAway(args 
         System.Console.WriteLine("Going away now....")
 
 type Notify = delegate of string -> string
 
 type Child() =
     member this.Respond(msg 
         System.Console.WriteLine("You want me to {0}? No!")
         "No!"
 
 type CurriedDelegate = delegate of int * int -> int
 type TupledDelegate = delegate of (int * int) -> int
 type DelegateTarget() =
     member this.CurriedAdd (x 
     member this.TupledAdd (x 
 
 type ConcertEventArgs(city 
     inherit System.EventArgs()
     member cea.City = city
     override cea.ToString() =
         System.String.Format("city
     
 type RockBand(name 
     let concertEvent = new DelegateEvent<System.EventHandler>()
 
     member rb.Name = name
 
     [<CLIEvent>]
     member rb.OnConcert = concertEvent.Publish
     member rb.HoldConcert(city 
         concertEvent.Trigger([| rb; 
             new ConcertEventArgs(city) |])
         System.Console.WriteLine("Rockin' {0}!")
 
 type Fan(home 
     do
         favBand.OnConcert.AddHandler(
             System.EventHandler(f.FavoriteBandComingToTown))
     member f.FavoriteBandComingToTown 
             (_ 
             (args 
         let cea = args 
         if home = cea.City then
             System.Console.WriteLine("I'm SO going!")
         else
             System.Console.WriteLine("Darn")
 
 [<Example("")>]
 let events_examples() =
     let ad = System.AppDomain.CurrentDomain
     ad.ProcessExit.Add(Watcher.GoingAway)
 
     let c = new Child()
     let np = new Notify(c.Respond)
     let response = np.Invoke("Clean your room!")
     System.Console.WriteLine(response)
     
     let dt = new DelegateTarget()
     let cd1 = new CurriedDelegate(dt.CurriedAdd)
     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
     let td1 = new TupledDelegate(dt.TupledAdd)
     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
     
     let rb = new RockBand("The Functional Ya-Yas")
     rb.OnConcert 
         |> Event.filter 
             (fun evArgs ->
                 let cea = evArgs 
                 if cea.City = "Sacramento" then false
                     // Nobody wants to tour in Sacramento
                 else true)
         |> Event.add
             (fun evArgs ->
                 let cea = evArgs 
                 System.Console.WriteLine("{0} is rockin' {1}",
                     rb.Name, cea.City))
     let f1 = new Fan("Detroit", rb)
     let f2 = new Fan("Cleveland", rb)
     let f3 = new Fan("Detroit", rb)
     rb.HoldConcert("Detroit")
 
     ()
 
 
 
 
 
 // ======================== Experiments; not for publication
 
 type Experiment() =
     member e.TestMethod( [<System.ParamArray>] args 
         for o in args do
             System.Console.WriteLine(o.ToString())
 
 let e = new Experiment()
 e.TestMethod("one", 2, 3.0)
 e.TestMethod("This is just one argument")
 e.TestMethod() // No arguments, empty array
 
 let varargsFunction([<System.ParamArray>] args 
     for o in args do
         System.Console.WriteLine(o.ToString())
 
 let private privateFunction() =
     printfn "You can't call me!"
         
 //varargsFunction("one", 2, 3.0)
 // error
 // but here has type 'a * 'b * 'c
 
 let f x = x + x
 
 let inline fi x = x + x
 
 let r = fi "Hello"
     let ted = new Munchkin(1)
     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
     let ted = ted <<== coolArmor
     
     let compare = p1 <==> p2
 
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="284" endline="299"><![CDATA[
 
 
 [<Class>]
 type Student(name 
     member s.Name = name
     member s.Subject = subject
 
 type Student with
     new() = Student("", "")
     new(name, subject, school) = 
         Student(name, subject)
     member s.FullDescription = s.Name + " " + s.Subject
 
 type System.String with
     member s.IsUpper =
         s.ToUpper() = s
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="300" endline="307"><![CDATA[
 
 
 [<Example("Type extension usage")>]
 let typeExtensionExample() =
     let ted = 
         new Student("Ted", "International Relations")
 
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="308" endline="421"><![CDATA[
 
 
 // ======================== Access Modifiers
 
 [<Class>]
 type private Sport(name) =
     member private p.Rules
         with get() = ""
 
 [<Class>]
 type (* public *) ExampleClass(field1 
     [<DefaultValue>]
     val mutable (* private *) valField 
 
     // Always private
     let mutable mutField2 = "Changeable"
     let helper = field1 + ", helped"
 
     (* public *)
     new () =
         ExampleClass("")
 
     member (* public *) e.Property 
         with (* public *) get() = field1
     member (* public *) e.ReadWriteProp
         with (* public *) get() = mutField2
         and (* public *) set(value) = mutField2 <- value
 
 
 // ======================== Delegates and Events
 
 type Watcher() =
     static member GoingAway(args 
         System.Console.WriteLine("Going away now....")
 
 type Notify = delegate of string -> string
 
 type Child() =
     member this.Respond(msg 
         System.Console.WriteLine("You want me to {0}? No!")
         "No!"
 
 type CurriedDelegate = delegate of int * int -> int
 type TupledDelegate = delegate of (int * int) -> int
 type DelegateTarget() =
     member this.CurriedAdd (x 
     member this.TupledAdd (x 
 
 type ConcertEventArgs(city 
     inherit System.EventArgs()
     member cea.City = city
     override cea.ToString() =
         System.String.Format("city
     
 type RockBand(name 
     let concertEvent = new DelegateEvent<System.EventHandler>()
 
     member rb.Name = name
 
     [<CLIEvent>]
     member rb.OnConcert = concertEvent.Publish
     member rb.HoldConcert(city 
         concertEvent.Trigger([| rb; 
             new ConcertEventArgs(city) |])
         System.Console.WriteLine("Rockin' {0}!")
 
 type Fan(home 
     do
         favBand.OnConcert.AddHandler(
             System.EventHandler(f.FavoriteBandComingToTown))
     member f.FavoriteBandComingToTown 
             (_ 
             (args 
         let cea = args 
         if home = cea.City then
             System.Console.WriteLine("I'm SO going!")
         else
             System.Console.WriteLine("Darn")
 
 [<Example("")>]
 let events_examples() =
     let ad = System.AppDomain.CurrentDomain
     ad.ProcessExit.Add(Watcher.GoingAway)
 
     let c = new Child()
     let np = new Notify(c.Respond)
     let response = np.Invoke("Clean your room!")
     System.Console.WriteLine(response)
     
     let dt = new DelegateTarget()
     let cd1 = new CurriedDelegate(dt.CurriedAdd)
     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
     let td1 = new TupledDelegate(dt.TupledAdd)
     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
     
     let rb = new RockBand("The Functional Ya-Yas")
     rb.OnConcert 
         |> Event.filter 
             (fun evArgs ->
                 let cea = evArgs 
                 if cea.City = "Sacramento" then false
                     // Nobody wants to tour in Sacramento
                 else true)
         |> Event.add
             (fun evArgs ->
                 let cea = evArgs 
                 System.Console.WriteLine("{0} is rockin' {1}",
                     rb.Name, cea.City))
     let f1 = new Fan("Detroit", rb)
     let f2 = new Fan("Cleveland", rb)
     let f3 = new Fan("Detroit", rb)
     rb.HoldConcert("Detroit")
 
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="422" endline="440"><![CDATA[
 
 
 
 
 
 // ======================== Experiments; not for publication
 
 type Experiment() =
     member e.TestMethod( [<System.ParamArray>] args 
         for o in args do
             System.Console.WriteLine(o.ToString())
 
 let e = new Experiment()
 e.TestMethod("one", 2, 3.0)
 e.TestMethod("This is just one argument")
 e.TestMethod() // No arguments, empty array
 
 let varargsFunction([<System.ParamArray>] args 
     for o in args do
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="441" endline="444"><![CDATA[
         System.Console.WriteLine(o.ToString())
 
 let private privateFunction() =
     printfn "You can't call me!"
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="445" endline="450"><![CDATA[
         
 //varargsFunction("one", 2, 3.0)
 // error
 // but here has type 'a * 'b * 'c
 
 let f x = x + x
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="451" endline="452"><![CDATA[
 
 let inline fi x = x + x
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\Class.fs" startline="149" endline="454"><![CDATA[
     static let humansKilled = 3000000000L
 type Skynet() =
     [<DefaultValue>]
     static val mutable private terminatorsBuilt 
     static member CreateTerminator() = 
         Skynet.terminatorsBuilt <- Skynet.terminatorsBuilt+1L
         new Person("T", "800", 0)
     static member AfterJudgmentDay 
         with get() = 
             let jd = new System.DateTime(1997, 8, 29)
             System.DateTime.Now.ToBinary() > jd.ToBinary()
     static let humansKilled = 3000000000L
 
 
 
 [<Class>]
 type Complex(r 
     member c.R = r
     member c.I = i
     static member (+) (c1 
         new Complex(c1.R + c2.R, c1.I + c2.I)
     static member (-) (c1 
         new Complex(c1.R - c2.R, c1.I - c2.I)
     static member (~-) (c 
         new Complex(-(c.R), c.I)
 
 [<Class>]
 type PrivatePerson private(fn, ln, a) =
     private new() = PrivatePerson("", "", 0)
     static member Create(fn, ln, a) = new PrivatePerson(fn, ln, a)
     static member Create() = new PrivatePerson()
 
 
 
 type Location =
     | Headgear
     | Footwear
     | Armor
     | OneHanded
     | TwoHanded
     | None
 
 [<Class>]
 type Item(name 
                   bonus 
     member mi.Name = name
     member mi.Bonus = bonus
     member mi.Location = loc
     override mi.ToString() =
         System.String.Format("{0} ({1})", mi.Name, mi.Bonus)
     
 [<Class>]
 type Munchkin(level 
     let mutable armor 
         new Item("Clothes of Ineptitude", Armor, 0, 0)
     let mutable headgear 
         new Item("Hair", Headgear, 0, 0)
     let mutable footwear 
         new Item("Bare Feet", Footwear, 0, 0)
     let mutable miscItems 
     do
         List.iter
             (fun (it 
                 match it.Location with
                 | Armor -> armor <- it
                 | Headgear -> headgear <- it
                 | Footwear -> footwear <- it
                 | None -> miscItems <- it 
                 | _ -> failwith "E_NOTIMPL"
             )
             items
     new() = Munchkin(1, [])
     new(level 
     member m.Level
         with get() = level
     member m.Items
         with get() = [ armor; headgear; footwear ] @ miscItems
     member m.TotalBonus =
         level + (List.sumBy (fun (it 
     static member (<<==) (m 
         new Munchkin( m.Level, mi 
     static member (~+) (m
         new Munchkin( m.Level + 1, m.Items)
 
 
 [<Example("Basic class usage")>]
 let class_usage() =
     let p1 = new Person("Ted", "Neward", 38)
     let p2 = new Person("Aaron", "Erickson")
     let p3 = new Person()
     for p in [p1; p2; p3] do
         System.Console.WriteLine("{0} is {1} years old",
             p.FullName, p.Age)
     p1.Age <- p1.Age+1
     let p4 = new Person("Ted", "Neward", Age = 38)
     
     let p5 = new FlexiPerson()
     let p6 = new FlexiPerson(FirstName="Ted")
     let p7 = new FlexiPerson(LastName="Neward", Age=38)
     let op5 = new OptiPerson()
     let op6 = new OptiPerson(firstName="Ted")
     let op7 = new OptiPerson(firstName="Neward", age=38)
     
     System.Console.WriteLine("{0}'s heart says {1}",
         p1.FullName, p1.["Heart"])
     
     System.Console.WriteLine("{0}'s heart says {1}",
         p1.FullName, p1.Organ("Heart"))
     
     p1.Greet(p2, "Howdy!")
     let greeting = p1.CreateGreeting(p2, "Howdy!")
     System.Console.WriteLine(greeting)
     p1.Greet(p2)
     
     let wwwww = 
         p1.WhoWhatWhereWhenWhy(
             whenn=System.DateTime.Now,
             where="in the sitting room",
             what="relaxing",
             why="because I'm tired")
     System.Console.WriteLine(wwwww)
     
     System.Console.WriteLine(arg=[||], format="This is a message")
     
     let alibi1 = p1.Alibi("relaxing", "in the sitting room",
                     System.DateTime.Now, "because I'm tired")
     let alibi2 = p1.Alibi("relaxing", "in the sitting room",
                     why="because I'm tired",
                     whenn=System.DateTime.Now)
     let alibi3 = p1.Alibi("relaxing", "in the sitting room",
                     ?why=Some("because I'm tired"),
                     whenn=System.DateTime.Now)
     
     let T800 = 
         if Skynet.AfterJudgmentDay then
             Skynet.CreateTerminator()
         else
             new Person("Arnold", "Schwarzenegger", 50)
             
     let ted = new Munchkin(1)
     let coolArmor = new Item("Functional Plate", Armor, 5, 0)
     let ted = ted <<== coolArmor
     
     let compare = p1 <==> p2
 
     ()
 
 
 [<Class>]
 type Student(name 
     member s.Name = name
     member s.Subject = subject
 
 type Student with
     new() = Student("", "")
     new(name, subject, school) = 
         Student(name, subject)
     member s.FullDescription = s.Name + " " + s.Subject
 
 type System.String with
     member s.IsUpper =
         s.ToUpper() = s
 
 
 [<Example("Type extension usage")>]
 let typeExtensionExample() =
     let ted = 
         new Student("Ted", "International Relations")
 
     ()
 
 
 // ======================== Access Modifiers
 
 [<Class>]
 type private Sport(name) =
     member private p.Rules
         with get() = ""
 
 [<Class>]
 type (* public *) ExampleClass(field1 
     [<DefaultValue>]
     val mutable (* private *) valField 
 
     // Always private
     let mutable mutField2 = "Changeable"
     let helper = field1 + ", helped"
 
     (* public *)
     new () =
         ExampleClass("")
 
     member (* public *) e.Property 
         with (* public *) get() = field1
     member (* public *) e.ReadWriteProp
         with (* public *) get() = mutField2
         and (* public *) set(value) = mutField2 <- value
 
 
 // ======================== Delegates and Events
 
 type Watcher() =
     static member GoingAway(args 
         System.Console.WriteLine("Going away now....")
 
 type Notify = delegate of string -> string
 
 type Child() =
     member this.Respond(msg 
         System.Console.WriteLine("You want me to {0}? No!")
         "No!"
 
 type CurriedDelegate = delegate of int * int -> int
 type TupledDelegate = delegate of (int * int) -> int
 type DelegateTarget() =
     member this.CurriedAdd (x 
     member this.TupledAdd (x 
 
 type ConcertEventArgs(city 
     inherit System.EventArgs()
     member cea.City = city
     override cea.ToString() =
         System.String.Format("city
     
 type RockBand(name 
     let concertEvent = new DelegateEvent<System.EventHandler>()
 
     member rb.Name = name
 
     [<CLIEvent>]
     member rb.OnConcert = concertEvent.Publish
     member rb.HoldConcert(city 
         concertEvent.Trigger([| rb; 
             new ConcertEventArgs(city) |])
         System.Console.WriteLine("Rockin' {0}!")
 
 type Fan(home 
     do
         favBand.OnConcert.AddHandler(
             System.EventHandler(f.FavoriteBandComingToTown))
     member f.FavoriteBandComingToTown 
             (_ 
             (args 
         let cea = args 
         if home = cea.City then
             System.Console.WriteLine("I'm SO going!")
         else
             System.Console.WriteLine("Darn")
 
 [<Example("")>]
 let events_examples() =
     let ad = System.AppDomain.CurrentDomain
     ad.ProcessExit.Add(Watcher.GoingAway)
 
     let c = new Child()
     let np = new Notify(c.Respond)
     let response = np.Invoke("Clean your room!")
     System.Console.WriteLine(response)
     
     let dt = new DelegateTarget()
     let cd1 = new CurriedDelegate(dt.CurriedAdd)
     //let cd2 = new CurriedDelegate(dt.TupledAdd) // will not compile
     let td1 = new TupledDelegate(dt.TupledAdd)
     //let td2 = new TupledDelegate(dt.CurriedAdd) // will not compile
     
     let rb = new RockBand("The Functional Ya-Yas")
     rb.OnConcert 
         |> Event.filter 
             (fun evArgs ->
                 let cea = evArgs 
                 if cea.City = "Sacramento" then false
                     // Nobody wants to tour in Sacramento
                 else true)
         |> Event.add
             (fun evArgs ->
                 let cea = evArgs 
                 System.Console.WriteLine("{0} is rockin' {1}",
                     rb.Name, cea.City))
     let f1 = new Fan("Detroit", rb)
     let f2 = new Fan("Cleveland", rb)
     let f3 = new Fan("Detroit", rb)
     rb.HoldConcert("Detroit")
 
     ()
 
 
 
 
 
 // ======================== Experiments; not for publication
 
 type Experiment() =
     member e.TestMethod( [<System.ParamArray>] args 
         for o in args do
             System.Console.WriteLine(o.ToString())
 
 let e = new Experiment()
 e.TestMethod("one", 2, 3.0)
 e.TestMethod("This is just one argument")
 e.TestMethod() // No arguments, empty array
 
 let varargsFunction([<System.ParamArray>] args 
     for o in args do
         System.Console.WriteLine(o.ToString())
 
 let private privateFunction() =
     printfn "You can't call me!"
         
 //varargsFunction("one", 2, 3.0)
 // error
 // but here has type 'a * 'b * 'c
 
 let f x = x + x
 
 let inline fi x = x + x
 
 let r = fi "Hello"
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\ComplexCompositeTypes.fs" startline="21" endline="427"><![CDATA[
     let diner 
         ("Grand Slam", "Two eggs, two bacon, three pancakes", 2.99);
         ("Chicken strips", "Five strips and sauce", 3.99) 
     ]
     for (name, desc, price) in diner do
         System.Console.WriteLine("{0} costs {1}", name, price)
 
 
 
 // ======================== Enumerated types
 type Soda =
     | Coke = 1
     | DietCoke = 2
     | SevenUp = 3
 
 [<System.Flags>]
 type SuicideSoda =
     | Coke = 0x0001
     | DietCoke = 0x0002
     | SevenUp = 0x0004
     | Grenadine = 0x0008
 
 [<Example("Enum usage example")>]
 let enum_usage() =
     let drink = Soda.DietCoke
     let message = 
         match drink with
         | Coke -> "Ah, so refreshing!"
         | DietCoke -> "Just one calorie!"
         | _ -> "Bleah"
     System.Console.WriteLine(message)    
 
     let message = 
         match drink with
         | Soda.Coke -> "Ah, so refreshing!"
         | Soda.DietCoke -> "Just one calorie!"
         | _ -> "Bleah"
     System.Console.WriteLine(message)    
     
     let rawValue = int Soda.DietCoke
 
     let rawInt = 20
     let unknownDrink = enum<Soda>(rawInt)
     let message = 
         match drink with
         | Soda.Coke -> "Ah, so refreshing!"
         | Soda.DietCoke -> "Just one calorie!"
         | Soda.SevenUp -> "Clear soda!"
         | _ -> failwith "This should never happen!"
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\ComplexCompositeTypes.fs" startline="45" endline="94"><![CDATA[
     let drink = Soda.DietCoke
     let message = 
         match drink with
         | Coke -> "Ah, so refreshing!"
         | DietCoke -> "Just one calorie!"
         | _ -> "Bleah"
     System.Console.WriteLine(message)    
 
     let message = 
         match drink with
         | Soda.Coke -> "Ah, so refreshing!"
         | Soda.DietCoke -> "Just one calorie!"
         | _ -> "Bleah"
     System.Console.WriteLine(message)    
     
     let rawValue = int Soda.DietCoke
 
     let rawInt = 20
     let unknownDrink = enum<Soda>(rawInt)
     let message = 
         match drink with
         | Soda.Coke -> "Ah, so refreshing!"
         | Soda.DietCoke -> "Just one calorie!"
         | Soda.SevenUp -> "Clear soda!"
         | _ -> failwith "This should never happen!"
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Soda.DietCoke -> "Just one calorie!"
         | _ -> "Bleah"
     System.Console.WriteLine(message)    
     
     let rawValue = int Soda.DietCoke
 
     let rawInt = 20
     let unknownDrink = enum<Soda>(rawInt)
     let message = 
         match drink with
         | Soda.Coke -> "Ah, so refreshing!"
         | Soda.DietCoke -> "Just one calorie!"
         | Soda.SevenUp -> "Clear soda!"
         | _ -> failwith "This should never happen!"
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | _ -> "Bleah"
     System.Console.WriteLine(message)    
     
     let rawValue = int Soda.DietCoke
 
     let rawInt = 20
     let unknownDrink = enum<Soda>(rawInt)
     let message = 
         match drink with
         | Soda.Coke -> "Ah, so refreshing!"
         | Soda.DietCoke -> "Just one calorie!"
         | Soda.SevenUp -> "Clear soda!"
         | _ -> failwith "This should never happen!"
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine(message)    
     
     let rawValue = int Soda.DietCoke
 
     let rawInt = 20
     let unknownDrink = enum<Soda>(rawInt)
     let message = 
         match drink with
         | Soda.Coke -> "Ah, so refreshing!"
         | Soda.DietCoke -> "Just one calorie!"
         | Soda.SevenUp -> "Clear soda!"
         | _ -> failwith "This should never happen!"
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Soda.DietCoke -> "Just one calorie!"
         | Soda.SevenUp -> "Clear soda!"
         | _ -> failwith "This should never happen!"
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Soda.SevenUp -> "Clear soda!"
         | _ -> failwith "This should never happen!"
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | _ -> failwith "This should never happen!"
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine(message)    
 
     let perfectDrink = SuicideSoda.Coke &&& SuicideSoda.Grenadine
     System.Console.WriteLine("It contains Coke? {0}",
         (if perfectDrink &&& SuicideSoda.Coke = SuicideSoda.Coke 
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
             then "true" else "false"))
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("It contains DietCoke? {0}",
         (if perfectDrink &&& SuicideSoda.DietCoke = 
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
             SuicideSoda.Coke then "true" else "false"))
 
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     let enumNames = System.Enum.GetNames(typeof<Soda>)
     let enumValues = System.Enum.GetValues(typeof<Soda>)
     (* This doesn't compile; not sure if I can make it do so *)
     (*
     let isFlagSet (enum 
         let enumType = enum.GetType()
         if System.Enum.IsDefined(enumType, flag) then
             if (int enum) &&& (int flag) = (int flag) then
                 true
             else
                 false
         else
             false
     *)
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\ComplexCompositeTypes.fs" startline="95" endline="148"><![CDATA[
 
     
 
 // ======================== Discriminated unions
 type Color =
     | RGB of int * int * int
     | CMYK of int * int * int * int
     | Black
     | Blue
     | Green
     | Red
     | White
     | Cyan
     | Gray
     member this.RGBValue =
         match this with
         | RGB(r,g,b) -> (r, g, b)
         | Red -> (255, 0, 0)
         | Green -> (0, 255, 0)
         | Blue -> (0, 0, 255)
         | Black -> (0, 0, 0)
         | White -> (255, 255, 255)
         | Cyan -> (64, 128, 128)
         | Gray -> (192, 192, 192)
         | CMYK(c,m,y,k) ->
             failwith "I have no idea how to do that"
 
 [<Example("Discriminated union examples")>]
 let discriminatedunion_examples() =
     let c = Black
     System.Console.WriteLine(c)
     let message =
         match c with
         | Black -> "Black"
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | _ -> "Not black"
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine(message)
     let black = RGB(0,0,0)
     System.Console.WriteLine(c)
     let colorStr =
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         match c with
         | Black | RGB(0,0,0) -> "Black"
         | White | RGB(255, 255, 255) -> "White"
         | Red | RGB(255, 0, 0) -> "Red"
         | Blue | RGB(0, 0, 255) -> "Blue"
         | Cyan | RGB(64, 128, 128) -> "Cyan"
         | Gray | RGB(192, 192, 192) -> "Gray"
         | Green | RGB(0, 255, 0) -> "Green"
         | RGB(r,g,b) ->
             System.String.Format("({0},{1},{2})",
                 r, g, b)
         | CMYK(c,m,y,k) ->
             System.String.Format("[{0},{1},{2},{3}]",
                 c,m,y,k)
     System.Console.WriteLine(colorStr)
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine(colorStr)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\ComplexCompositeTypes.fs" startline="149" endline="179"><![CDATA[
 
 type BinaryTree =
     | Node of obj * BinaryTree * BinaryTree
     | Empty
     member bt.Contents =
         match bt with
         | Empty -> ""
         | Node(data, left, right) ->
             "(" + left.Contents + ")" +
             "
             "(" + right.Contents + ")"
     member bt.iter (fn 
         match bt with
         | Empty -> ()
         | Node(data, left, right) ->
             left.iter(fn)
             fn(data)
             right.iter(fn)
 
 [<Example("More discriminated union (tree) examples")>]
 let tree_examples() =
     let tree =
         Node("Ted",
             Node("Aaron",
                 Empty,
                 Empty),
             Node("Talbott",
                 Node("Rick", Empty, Empty),
                 Empty))
     System.Console.WriteLine("Contents = {0}", tree.Contents)
     tree.iter(System.Console.WriteLine)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\ComplexCompositeTypes.fs" startline="180" endline="205"><![CDATA[
 
 type Employee =
     | Grunt of string
     | Manager of string * Employee list
     member e.Name =
         match e with
         | Grunt(n) -> n
         | Manager(n, _) -> n
     member e.Subordinates =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) -> es
     member e.Empire =
         match e with
         | Grunt(_) -> []
         | Manager(_, es) ->
             List.collect 
                 (fun (e 
 
 [<Example("More discriminated union examples")>]
 let employeetree_examples() =
     let aaron = Grunt("Coder")
     let CEO = Manager("CEO", [ aaron ])
     let CFO = Manager("CFO", [ aaron ])
     let VP_RD = Manager("VP, R&D", [aaron])
     ()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\ComplexCompositeTypes.fs" startline="206" endline="314"><![CDATA[
 
 type State =
     | New
     | Opened
     | Closed
     member s.Open() =
         match s with
         | New -> Opened
         | Opened -> 
             failwith "Error to Open an Opened state"
         | Closed ->
             Opened
     member s.Close() =
         match s with
         | New ->
             failwith "Error to Close a New state"
         | Opened -> Closed
         | Closed -> Closed
 
 
 
 // ======================== Structs
 
 [<Struct>]
 type Point(x 
     member pt.X = x
     member pt.Y = y
     override pt.ToString() =
         System.String.Format("({0},{1})", x, y)
 
 type AnotherPoint(x 
     struct
         member pt.X = x
         member pt.Y = y
     end
 
 [<Struct>]
 type MutPoint =
     val mutable X 
     val mutable Y 
     
 [<Example("Struct examples")>]
 let struct_examples() =
     let origin = new Point()
     System.Console.WriteLine("Point = {0},{1}", origin.X, origin.Y)
     let notOrigin = new Point(12, 12)
     System.Console.WriteLine("Point = {0},{1}", 
         notOrigin.X, notOrigin.Y)
         
     let newPoint = new Point((notOrigin.X - 6), (notOrigin.Y) - 6)
     System.Console.WriteLine("Point = {0},{1}", 
         newPoint.X, newPoint.Y)
 
     let mutable mutPt = new MutPoint()
     mutPt.X <- 10
     mutPt.Y <- 10
     System.Console.WriteLine("Point = {0},{1}", 
         mutPt.X, mutPt.Y)
     
     let a = new Point(12, 12)
     let b = new Point(12, 12)
     System.Console.WriteLine("a = b? {0}",
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a = b) then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a.Equals(b)? {0}",
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a.Equals(b)) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a <> b? {0}",
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a <> b) then "yes" else "no")
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     let c = new Point(6, 12)
     let d = new Point(18, 12)
     let e = new Point(12, 6)
     let f = new Point(12, 18)
     System.Console.WriteLine("a > c? {0}",
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a > c) then "yes" else "no") // yes
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a > d? {0}",
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a > d) then "yes" else "no") // no
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a > e? {0}",
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a > e) then "yes" else "no") // yes
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a > f? {0}",
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a > f) then "yes" else "no") // no
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a < c? {0}",
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a < c) then "yes" else "no") // no
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a < d? {0}",
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a < d) then "yes" else "no") // yes
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a < e? {0}",
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a < e) then "yes" else "no") // no
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a < f? {0}",
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if (a < f) then "yes" else "no") // yes
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a.GetHashCode() = {0}",
         a.GetHashCode())
     System.Console.WriteLine("b.GetHashCode() = {0}",
         b.GetHashCode())
     System.Console.WriteLine("a hash = b hash? {0}",
         a.GetHashCode() = b.GetHashCode())
 
     let message =
         match (a.X, a.Y) with
         | (0, 0) -> "You're at the origin!"
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | (12, 12) -> "You're at 12, 12!"
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | (_, _) -> "Who knows where you are?"
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine(message)
     
     let (|Point|) (x 
         inPt.X = x && inPt.Y = y
     let message =
         match newPoint with
         | Point(0, 0) true -> "You're at the origin!"
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | Point(12, 12) true -> "You're at 12,12!"
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         | _ -> "Who knows where you are?"
     System.Console.WriteLine(message)
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine(message)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Objects\ComplexCompositeTypes.fs" startline="315" endline="427"><![CDATA[
 
 
 
 // ======================== Record types
 
 type Author =
     | Author of string * string * int
     member a.FirstName =
         match a with
         | Author(first, _, _) -> first
     member a.LastName =
         match a with
         | Author(_, last, _) -> last
     member a.Age =
         match a with
         | Author(_, _, age) -> age
 
 type AuthorRecord = {
     FirstName 
     LastName 
     Age 
 
 type ProgrammingLanguage = {
     Name 
     YearsInUse 
 type SpokenLanguage = {
     Name 
     YearsInUse 
 
 type Person = 
     { FirstName 
       LastName 
       FavoriteColor 
     member p.FullName =
         System.String.Format("{0} {1}",
             p.FirstName, p.LastName)
 
 [<Example("Record type examples")>]
 let record_examples() =
     let ted = ("Ted", "Neward", 38)
     let aaron = ("Aaron", "Erickson")
     let rick = ("Rick", "Minerich", "I'd rather not say")
     
     let ted = Author("Ted", "Neward", 38)
     let aaron = Author("Aaron", "Erickson", 35)
     let rick = Author("Rick", "Minerich", 0)
     let talbott = Author("Crowell", "Talbott", 35)
     
     let authors = [
         Author("Ted", "Neward", 38);
         Author("Aaron", "Erickson", 35);
         Author("Rick", "Minerich", 0);
         Author("Crowell", "Talbott", 35)
     ]
     for a in authors do
         match a with
         | Author(first, last, age) -> 
             System.Console.WriteLine("Hello, {0}", first)
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; Age = 38 }
     System.Console.WriteLine("Hello, {0}", ted.FirstName)
     
     let talbott = { LastName = "Crowell"; FirstName = "Talbott"; Age = 35 }
     
     let english = { Name = "English"; YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { Name = "F#"; YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // SpokenLanguage
     
     let english = { 
         SpokenLanguage.Name = "English"; 
         SpokenLanguage.YearsInUse = 1000 }
     System.Console.WriteLine("english IS-A {0}", 
         english.GetType()) // SpokenLanguage
     let fsharp = { 
         ProgrammingLanguage.Name = "F#"; 
         ProgrammingLanguage.YearsInUse = 5 }
     System.Console.WriteLine("fsharp IS-A {0}", 
         fsharp.GetType()) // ProgrammingLanguage
     
     let ted = { FirstName = "Ted"; LastName = "Neward"; FavoriteColor = "Black" }
     let michael = { ted with FirstName = "Michael" }
     let matthew = { ted with FirstName = "Matthew" }
     let people = [ 
         ted; michael; matthew;
         { FirstName="Aaron"; LastName="Erickson"; 
             FavoriteColor="White" }
         { FirstName="Rick"; LastName="Minerich";
             FavoriteColor="Blue" }
         { FirstName="Talbott"; LastName="Crowell";
             FavoriteColor="Red" }
     ]
 
     for n in people do    
         match n with
         | { Person.LastName = "Neward" } ->
             System.Console.WriteLine("Hi, {0}!", n.FirstName)
         | _ ->
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
             System.Console.WriteLine("Who are you, {0}?", 
                 n.FullName)
 
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     let a = { FirstName="Ted"; LastName="Neward"; Age=38 }
     let b = { FirstName="Ted"; LastName="Neward"; Age=38 }
     System.Console.WriteLine("a = b? {0}",
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if a = b then "yes" else "no")
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a.Equals(b)? {0}",
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if a.Equals(b) then "yes" else "no")
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
     System.Console.WriteLine("a <> b? {0}",
         if a <> b then "yes" else "no")
     ()    
     
         if a <> b then "yes" else "no")
     ()    
     
]]></source>
</source_elements></project>
