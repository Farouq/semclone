
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Windows.Forms
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern ParallelExtensionsExtras
{
  .ver 1:2:0:0
}
.assembly extern System.Drawing
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:0:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly ShakespeareanMonkeys
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 14 53 68 61 6B 65 73 70 65 61 72 65 61 6E   // ...Shakespearean
                                                                                              4D 6F 6E 6B 65 79 73 00 00 )                      // Monkeys..
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 14 53 68 61 6B 65 73 70 65 61 72 65 61 6E   // ...Shakespearean
                                                                                                4D 6F 6E 6B 65 79 73 00 00 )                      // Monkeys..

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = ( 01 00 24 31 34 32 38 61 33 31 38 2D 33 37 62 39   // ..$1428a318-37b9
                                                                                                  2D 34 61 36 34 2D 61 32 65 30 2D 64 65 36 61 35   // -4a64-a2e0-de6a5
                                                                                                  35 65 37 33 32 64 66 00 00 )                      // 5e732df..
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public ShakespeareanMonkeys.MainForm.resources
{
  // Offset: 0x00000000 Length: 0x000000B4
}
.mresource public ShakespeareanMonkeys.Properties.Resources.resources
{
  // Offset: 0x000000B8 Length: 0x0000CED7
}
.module ShakespeareanMonkeys.exe
// MVID: {C0A36275-5BFB-4729-A60F-A6EEC22635E9}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x01300000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi sealed beforefieldinit ShakespeareanMonkeys.Properties.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class ShakespeareanMonkeys.Properties.Settings defaultInstance
  .method public hidebysig specialname static 
          class ShakespeareanMonkeys.Properties.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class ShakespeareanMonkeys.Properties.Settings CS$1$0000)
    .language '{3F5162F8-07C6-11D3-9053-00C04FA302A1}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_CSharp\Properties\Settings.Designer.cs' 
//000021:             get {
    IL_0000:  nop
//000022:                 return defaultInstance;
    IL_0001:  ldsfld     class ShakespeareanMonkeys.Properties.Settings ShakespeareanMonkeys.Properties.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000023:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  ret
  } // end of method Settings::.ctor

  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       21 (0x15)
    .maxstack  8
//000018:         private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
    IL_0000:  newobj     instance void ShakespeareanMonkeys.Properties.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  ShakespeareanMonkeys.Properties.Settings
    IL_000f:  stsfld     class ShakespeareanMonkeys.Properties.Settings ShakespeareanMonkeys.Properties.Settings::defaultInstance
//000019:         
//000020:         public static Settings Default {
//000021:             get {
//000022:                 return defaultInstance;
//000023:             }
//000024:         }
//000025:     }
//000026: }
    IL_0014:  ret
  } // end of method Settings::.cctor

  .property class ShakespeareanMonkeys.Properties.Settings
          Default()
  {
    .get class ShakespeareanMonkeys.Properties.Settings ShakespeareanMonkeys.Properties.Settings::get_Default()
  } // end of property Settings::Default
} // end of class ShakespeareanMonkeys.Properties.Settings

.class public auto ansi ShakespeareanMonkeys.TextMatchGeneticAlgorithm
       extends [mscorlib]System.Object
{
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClassf'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32 maxFitness
    .field public int64 sumOfMaxMinusFitness
    .field public class ShakespeareanMonkeys.TextMatchGeneticAlgorithm '<>4__this'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClassf'::.ctor

    .method public hidebysig instance int64 
            '<CreateNextGeneration>b__5'(valuetype ShakespeareanMonkeys.TextMatchGenome g) cil managed
    {
      // Code size       20 (0x14)
      .maxstack  2
      .locals init ([0] int64 CS$1$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_CSharp\TextMatchGeneticAlgorithm.cs' 
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::maxFitness
      IL_0006:  ldarga.s   g
      IL_0008:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
      IL_000d:  sub
      IL_000e:  conv.i8
      IL_000f:  stloc.0
      IL_0010:  br.s       IL_0012

//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
      IL_0012:  ldloc.0
      IL_0013:  ret
    } // end of method '<>c__DisplayClassf'::'<CreateNextGeneration>b__5'

    .method public hidebysig instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> 
            '<CreateNextGeneration>b__6'(int32 i) cil managed
    {
      // Code size       62 (0x3e)
      .maxstack  5
      .locals init ([0] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> CS$1$0000)
//000083:                         from child in CreateChildren(
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<>4__this'
      IL_0006:  ldarg.0
      IL_0007:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<>4__this'
      IL_000c:  ldarg.0
      IL_000d:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::sumOfMaxMinusFitness
      IL_0012:  ldarg.0
      IL_0013:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::maxFitness
      IL_0018:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::FindRandomHighQualityParent(int64,
                                                                                                                                                               int32)
      IL_001d:  ldarg.0
      IL_001e:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<>4__this'
      IL_0023:  ldarg.0
      IL_0024:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::sumOfMaxMinusFitness
      IL_0029:  ldarg.0
      IL_002a:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::maxFitness
      IL_002f:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::FindRandomHighQualityParent(int64,
                                                                                                                                                               int32)
      IL_0034:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateChildren(valuetype ShakespeareanMonkeys.TextMatchGenome,
                                                                                                                                                    valuetype ShakespeareanMonkeys.TextMatchGenome)
      IL_0039:  stloc.0
      IL_003a:  br.s       IL_003c

//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
      IL_003c:  ldloc.0
      IL_003d:  ret
    } // end of method '<>c__DisplayClassf'::'<CreateNextGeneration>b__6'

    .method public hidebysig instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> 
            '<CreateNextGeneration>b__8'(int32 i) cil managed
    {
      // Code size       62 (0x3e)
      .maxstack  5
      .locals init ([0] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> CS$1$0000)
//000092:                         from child in CreateChildren(
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<>4__this'
      IL_0006:  ldarg.0
      IL_0007:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<>4__this'
      IL_000c:  ldarg.0
      IL_000d:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::sumOfMaxMinusFitness
      IL_0012:  ldarg.0
      IL_0013:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::maxFitness
      IL_0018:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::FindRandomHighQualityParent(int64,
                                                                                                                                                               int32)
      IL_001d:  ldarg.0
      IL_001e:  ldfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<>4__this'
      IL_0023:  ldarg.0
      IL_0024:  ldfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::sumOfMaxMinusFitness
      IL_0029:  ldarg.0
      IL_002a:  ldfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::maxFitness
      IL_002f:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::FindRandomHighQualityParent(int64,
                                                                                                                                                               int32)
      IL_0034:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateChildren(valuetype ShakespeareanMonkeys.TextMatchGenome,
                                                                                                                                                    valuetype ShakespeareanMonkeys.TextMatchGenome)
      IL_0039:  stloc.0
      IL_003a:  br.s       IL_003c

//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
      IL_003c:  ldloc.0
      IL_003d:  ret
    } // end of method '<>c__DisplayClassf'::'<CreateNextGeneration>b__8'

  } // end of class '<>c__DisplayClassf'

  .field private static class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom _random
  .field private static char[] _validChars
  .field private string _targetText
  .field private class ShakespeareanMonkeys.GeneticAlgorithmSettings _settings
  .field private valuetype ShakespeareanMonkeys.TextMatchGenome[] _currentPopulation
  .field private bool _runParallel
  .field private static class [mscorlib]System.Func`2<valuetype ShakespeareanMonkeys.TextMatchGenome,int32> 'CS$<>9__CachedAnonymousMethodDelegatea'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome> 'CS$<>9__CachedAnonymousMethodDelegatec'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome> 'CS$<>9__CachedAnonymousMethodDelegatee'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       83 (0x53)
    .maxstack  3
    .locals init ([0] int32 i,
             [1] int32 pos,
             [2] bool CS$4$0000)
//000018:         private static ThreadSafeRandom _random = new ThreadSafeRandom();
    IL_0000:  newobj     instance void [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom::.ctor()
    IL_0005:  stsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
//000019:         private static char[] _validChars;
//000020:         private string _targetText;
//000021:         private GeneticAlgorithmSettings _settings;
//000022:         private TextMatchGenome[] _currentPopulation;
//000023:         private bool _runParallel;
//000024: 
//000025:         static TextMatchGeneticAlgorithm()
//000026:         {
    IL_000a:  nop
//000027:             // Initialize the valid characters to newlines plus all the alphanumerics and symbols
//000028:             _validChars = new char[2 + (127 - 32)];
    IL_000b:  ldc.i4.s   97
    IL_000d:  newarr     [mscorlib]System.Char
    IL_0012:  stsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
//000029:             _validChars[0] = (char)10;
    IL_0017:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_001c:  ldc.i4.0
    IL_001d:  ldc.i4.s   10
    IL_001f:  stelem.i2
//000030:             _validChars[1] = (char)13;
    IL_0020:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0025:  ldc.i4.1
    IL_0026:  ldc.i4.s   13
    IL_0028:  stelem.i2
//000031:             for (int i = 2, pos = 32; i < _validChars.Length; i++, pos++)
    IL_0029:  ldc.i4.2
    IL_002a:  stloc.0
    IL_002b:  ldc.i4.s   32
    IL_002d:  stloc.1
//000032:             {
//000033:                 _validChars[i] = (char)pos;
//000034:             }
//000035:         }
//000036: 
//000037:         public TextMatchGeneticAlgorithm(bool runParallel, string targetText, GeneticAlgorithmSettings settings)
//000038:         {
//000039:             if (settings == null) throw new ArgumentNullException("settings");
//000040:             if (targetText == null) throw new ArgumentNullException("targetText");
//000041:             _runParallel = runParallel;
//000042:             _settings = settings;
//000043:             _targetText = targetText;
//000044:         }
//000045: 
//000046:         public void MoveNext()
//000047:         {
//000048:             // If this is the first iteration, create a random population
//000049:             if (_currentPopulation == null)
//000050:             {
//000051:                 _currentPopulation = CreateRandomPopulation();
//000052:             }
//000053:             // Otherwise, iterate
//000054:             else _currentPopulation = CreateNextGeneration();
//000055:         }
//000056: 
//000057:         public TextMatchGenome CurrentBest { get { return _currentPopulation[0]; } }
//000058: 
//000059:         private TextMatchGenome[] CreateRandomPopulation()
//000060:         {
//000061:             return (from i in Enumerable.Range(0, _settings.PopulationSize)
//000062:                     select CreateRandomGenome(_random)).ToArray();
//000063:         }
//000064: 
//000065:         private TextMatchGenome CreateRandomGenome(Random rand)
//000066:         {
//000067:             var sb = new StringBuilder(_targetText.Length);
//000068:             for (int i = 0; i < _targetText.Length; i++)
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_002e:  br.s       IL_0043

//000032:             {
    IL_0030:  nop
//000033:                 _validChars[i] = (char)pos;
    IL_0031:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0036:  ldloc.0
    IL_0037:  ldloc.1
    IL_0038:  conv.u2
    IL_0039:  stelem.i2
//000034:             }
    IL_003a:  nop
//000031:             for (int i = 2, pos = 32; i < _validChars.Length; i++, pos++)
    IL_003b:  ldloc.0
    IL_003c:  ldc.i4.1
    IL_003d:  add
    IL_003e:  stloc.0
    IL_003f:  ldloc.1
    IL_0040:  ldc.i4.1
    IL_0041:  add
    IL_0042:  stloc.1
    IL_0043:  ldloc.0
    IL_0044:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0049:  ldlen
    IL_004a:  conv.i4
    IL_004b:  clt
    IL_004d:  stloc.2
//000032:             {
//000033:                 _validChars[i] = (char)pos;
//000034:             }
//000035:         }
//000036: 
//000037:         public TextMatchGeneticAlgorithm(bool runParallel, string targetText, GeneticAlgorithmSettings settings)
//000038:         {
//000039:             if (settings == null) throw new ArgumentNullException("settings");
//000040:             if (targetText == null) throw new ArgumentNullException("targetText");
//000041:             _runParallel = runParallel;
//000042:             _settings = settings;
//000043:             _targetText = targetText;
//000044:         }
//000045: 
//000046:         public void MoveNext()
//000047:         {
//000048:             // If this is the first iteration, create a random population
//000049:             if (_currentPopulation == null)
//000050:             {
//000051:                 _currentPopulation = CreateRandomPopulation();
//000052:             }
//000053:             // Otherwise, iterate
//000054:             else _currentPopulation = CreateNextGeneration();
//000055:         }
//000056: 
//000057:         public TextMatchGenome CurrentBest { get { return _currentPopulation[0]; } }
//000058: 
//000059:         private TextMatchGenome[] CreateRandomPopulation()
//000060:         {
//000061:             return (from i in Enumerable.Range(0, _settings.PopulationSize)
//000062:                     select CreateRandomGenome(_random)).ToArray();
//000063:         }
//000064: 
//000065:         private TextMatchGenome CreateRandomGenome(Random rand)
//000066:         {
//000067:             var sb = new StringBuilder(_targetText.Length);
//000068:             for (int i = 0; i < _targetText.Length; i++)
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_004e:  ldloc.2
    IL_004f:  brtrue.s   IL_0030

//000035:         }
    IL_0051:  nop
    IL_0052:  ret
  } // end of method TextMatchGeneticAlgorithm::.cctor

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(bool runParallel,
                               string targetText,
                               class ShakespeareanMonkeys.GeneticAlgorithmSettings settings) cil managed
  {
    // Code size       75 (0x4b)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
//000036: 
//000037:         public TextMatchGeneticAlgorithm(bool runParallel, string targetText, GeneticAlgorithmSettings settings)
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000038:         {
    IL_0007:  nop
//000039:             if (settings == null) throw new ArgumentNullException("settings");
    IL_0008:  ldarg.3
    IL_0009:  ldnull
    IL_000a:  ceq
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.0
//000040:             if (targetText == null) throw new ArgumentNullException("targetText");
//000041:             _runParallel = runParallel;
//000042:             _settings = settings;
//000043:             _targetText = targetText;
//000044:         }
//000045: 
//000046:         public void MoveNext()
//000047:         {
//000048:             // If this is the first iteration, create a random population
//000049:             if (_currentPopulation == null)
//000050:             {
//000051:                 _currentPopulation = CreateRandomPopulation();
//000052:             }
//000053:             // Otherwise, iterate
//000054:             else _currentPopulation = CreateNextGeneration();
//000055:         }
//000056: 
//000057:         public TextMatchGenome CurrentBest { get { return _currentPopulation[0]; } }
//000058: 
//000059:         private TextMatchGenome[] CreateRandomPopulation()
//000060:         {
//000061:             return (from i in Enumerable.Range(0, _settings.PopulationSize)
//000062:                     select CreateRandomGenome(_random)).ToArray();
//000063:         }
//000064: 
//000065:         private TextMatchGenome CreateRandomGenome(Random rand)
//000066:         {
//000067:             var sb = new StringBuilder(_targetText.Length);
//000068:             for (int i = 0; i < _targetText.Length; i++)
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0010:  ldloc.0
    IL_0011:  brtrue.s   IL_001e

//000039:             if (settings == null) throw new ArgumentNullException("settings");
    IL_0013:  ldstr      "settings"
    IL_0018:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
    IL_001d:  throw

//000040:             if (targetText == null) throw new ArgumentNullException("targetText");
    IL_001e:  ldarg.2
    IL_001f:  ldnull
    IL_0020:  ceq
    IL_0022:  ldc.i4.0
    IL_0023:  ceq
    IL_0025:  stloc.0
//000041:             _runParallel = runParallel;
//000042:             _settings = settings;
//000043:             _targetText = targetText;
//000044:         }
//000045: 
//000046:         public void MoveNext()
//000047:         {
//000048:             // If this is the first iteration, create a random population
//000049:             if (_currentPopulation == null)
//000050:             {
//000051:                 _currentPopulation = CreateRandomPopulation();
//000052:             }
//000053:             // Otherwise, iterate
//000054:             else _currentPopulation = CreateNextGeneration();
//000055:         }
//000056: 
//000057:         public TextMatchGenome CurrentBest { get { return _currentPopulation[0]; } }
//000058: 
//000059:         private TextMatchGenome[] CreateRandomPopulation()
//000060:         {
//000061:             return (from i in Enumerable.Range(0, _settings.PopulationSize)
//000062:                     select CreateRandomGenome(_random)).ToArray();
//000063:         }
//000064: 
//000065:         private TextMatchGenome CreateRandomGenome(Random rand)
//000066:         {
//000067:             var sb = new StringBuilder(_targetText.Length);
//000068:             for (int i = 0; i < _targetText.Length; i++)
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0026:  ldloc.0
    IL_0027:  brtrue.s   IL_0034

//000040:             if (targetText == null) throw new ArgumentNullException("targetText");
    IL_0029:  ldstr      "targetText"
    IL_002e:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
    IL_0033:  throw

//000041:             _runParallel = runParallel;
    IL_0034:  ldarg.0
    IL_0035:  ldarg.1
    IL_0036:  stfld      bool ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_runParallel
//000042:             _settings = settings;
    IL_003b:  ldarg.0
    IL_003c:  ldarg.3
    IL_003d:  stfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
//000043:             _targetText = targetText;
    IL_0042:  ldarg.0
    IL_0043:  ldarg.2
    IL_0044:  stfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
//000044:         }
    IL_0049:  nop
    IL_004a:  ret
  } // end of method TextMatchGeneticAlgorithm::.ctor

  .method public hidebysig instance void 
          MoveNext() cil managed
  {
    // Code size       46 (0x2e)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
//000045: 
//000046:         public void MoveNext()
//000047:         {
    IL_0000:  nop
//000048:             // If this is the first iteration, create a random population
//000049:             if (_currentPopulation == null)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  ldc.i4.0
    IL_000b:  ceq
    IL_000d:  stloc.0
//000050:             {
//000051:                 _currentPopulation = CreateRandomPopulation();
//000052:             }
//000053:             // Otherwise, iterate
//000054:             else _currentPopulation = CreateNextGeneration();
//000055:         }
//000056: 
//000057:         public TextMatchGenome CurrentBest { get { return _currentPopulation[0]; } }
//000058: 
//000059:         private TextMatchGenome[] CreateRandomPopulation()
//000060:         {
//000061:             return (from i in Enumerable.Range(0, _settings.PopulationSize)
//000062:                     select CreateRandomGenome(_random)).ToArray();
//000063:         }
//000064: 
//000065:         private TextMatchGenome CreateRandomGenome(Random rand)
//000066:         {
//000067:             var sb = new StringBuilder(_targetText.Length);
//000068:             for (int i = 0; i < _targetText.Length; i++)
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_000e:  ldloc.0
    IL_000f:  brtrue.s   IL_0021

//000050:             {
    IL_0011:  nop
//000051:                 _currentPopulation = CreateRandomPopulation();
    IL_0012:  ldarg.0
    IL_0013:  ldarg.0
    IL_0014:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateRandomPopulation()
    IL_0019:  stfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
//000052:             }
    IL_001e:  nop
//000053:             // Otherwise, iterate
//000054:             else _currentPopulation = CreateNextGeneration();
//000055:         }
//000056: 
//000057:         public TextMatchGenome CurrentBest { get { return _currentPopulation[0]; } }
//000058: 
//000059:         private TextMatchGenome[] CreateRandomPopulation()
//000060:         {
//000061:             return (from i in Enumerable.Range(0, _settings.PopulationSize)
//000062:                     select CreateRandomGenome(_random)).ToArray();
//000063:         }
//000064: 
//000065:         private TextMatchGenome CreateRandomGenome(Random rand)
//000066:         {
//000067:             var sb = new StringBuilder(_targetText.Length);
//000068:             for (int i = 0; i < _targetText.Length; i++)
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_001f:  br.s       IL_002d

//000054:             else _currentPopulation = CreateNextGeneration();
    IL_0021:  ldarg.0
    IL_0022:  ldarg.0
    IL_0023:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateNextGeneration()
    IL_0028:  stfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
//000055:         }
    IL_002d:  ret
  } // end of method TextMatchGeneticAlgorithm::MoveNext

  .method public hidebysig specialname instance valuetype ShakespeareanMonkeys.TextMatchGenome 
          get_CurrentBest() cil managed
  {
    // Code size       23 (0x17)
    .maxstack  2
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome CS$1$0000)
//000056: 
//000057:         public TextMatchGenome CurrentBest { get { return _currentPopulation[0]; } }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0007:  ldc.i4.0
    IL_0008:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_000d:  ldobj      ShakespeareanMonkeys.TextMatchGenome
    IL_0012:  stloc.0
    IL_0013:  br.s       IL_0015

    IL_0015:  ldloc.0
    IL_0016:  ret
  } // end of method TextMatchGeneticAlgorithm::get_CurrentBest

  .method private hidebysig instance valuetype ShakespeareanMonkeys.TextMatchGenome[] 
          CreateRandomPopulation() cil managed
  {
    // Code size       45 (0x2d)
    .maxstack  4
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome[] CS$1$0000)
//000058: 
//000059:         private TextMatchGenome[] CreateRandomPopulation()
//000060:         {
    IL_0000:  nop
//000061:             return (from i in Enumerable.Range(0, _settings.PopulationSize)
    IL_0001:  ldc.i4.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0008:  callvirt   instance int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_PopulationSize()
    IL_000d:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_0012:  ldarg.0
    IL_0013:  ldftn      instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'<CreateRandomPopulation>b__0'(int32)
    IL_0019:  newobj     instance void class [mscorlib]System.Func`2<int32,valuetype ShakespeareanMonkeys.TextMatchGenome>::.ctor(object,
                                                                                                                                  native int)
    IL_001e:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<int32,valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                         class [mscorlib]System.Func`2<!!0,!!1>)
    IL_0023:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_0028:  stloc.0
    IL_0029:  br.s       IL_002b

//000062:                     select CreateRandomGenome(_random)).ToArray();
//000063:         }
    IL_002b:  ldloc.0
    IL_002c:  ret
  } // end of method TextMatchGeneticAlgorithm::CreateRandomPopulation

  .method private hidebysig instance valuetype ShakespeareanMonkeys.TextMatchGenome 
          CreateRandomGenome(class [mscorlib]System.Random rand) cil managed
  {
    // Code size       117 (0x75)
    .maxstack  5
    .locals init ([0] class [mscorlib]System.Text.StringBuilder sb,
             [1] int32 i,
             [2] valuetype ShakespeareanMonkeys.TextMatchGenome '<>g__initLocal1',
             [3] valuetype ShakespeareanMonkeys.TextMatchGenome CS$1$0000,
             [4] bool CS$4$0001)
//000064: 
//000065:         private TextMatchGenome CreateRandomGenome(Random rand)
//000066:         {
    IL_0000:  nop
//000067:             var sb = new StringBuilder(_targetText.Length);
    IL_0001:  ldarg.0
    IL_0002:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_0007:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_000c:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor(int32)
    IL_0011:  stloc.0
//000068:             for (int i = 0; i < _targetText.Length; i++)
    IL_0012:  ldc.i4.0
    IL_0013:  stloc.1
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0014:  br.s       IL_0037

//000069:             {
    IL_0016:  nop
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
    IL_0017:  ldloc.0
    IL_0018:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_001d:  ldarg.1
    IL_001e:  ldc.i4.0
    IL_001f:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0024:  ldlen
    IL_0025:  conv.i4
    IL_0026:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_002b:  ldelem.u2
    IL_002c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(char)
    IL_0031:  pop
//000071:             }
    IL_0032:  nop
//000068:             for (int i = 0; i < _targetText.Length; i++)
    IL_0033:  ldloc.1
    IL_0034:  ldc.i4.1
    IL_0035:  add
    IL_0036:  stloc.1
    IL_0037:  ldloc.1
    IL_0038:  ldarg.0
    IL_0039:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_003e:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0043:  clt
    IL_0045:  stloc.s    CS$4$0001
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0047:  ldloc.s    CS$4$0001
    IL_0049:  brtrue.s   IL_0016

//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
    IL_004b:  ldloca.s   '<>g__initLocal1'
    IL_004d:  initobj    ShakespeareanMonkeys.TextMatchGenome
    IL_0053:  ldloca.s   '<>g__initLocal1'
    IL_0055:  ldloc.0
    IL_0056:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_005b:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    IL_0060:  nop
    IL_0061:  ldloca.s   '<>g__initLocal1'
    IL_0063:  ldarg.0
    IL_0064:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_0069:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_TargetText(string)
    IL_006e:  nop
    IL_006f:  ldloc.2
    IL_0070:  stloc.3
    IL_0071:  br.s       IL_0073

//000073:         }
    IL_0073:  ldloc.3
    IL_0074:  ret
  } // end of method TextMatchGeneticAlgorithm::CreateRandomGenome

  .method private hidebysig instance valuetype ShakespeareanMonkeys.TextMatchGenome[] 
          CreateNextGeneration() cil managed
  {
    // Code size       280 (0x118)
    .maxstack  5
    .locals init ([0] class [mscorlib]System.Func`2<int32,class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>> 'CS$<>9__CachedAnonymousMethodDelegateb',
             [1] class [mscorlib]System.Func`2<int32,class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>> 'CS$<>9__CachedAnonymousMethodDelegated',
             [2] class ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf' 'CS$<>8__locals10',
             [3] valuetype ShakespeareanMonkeys.TextMatchGenome[] CS$1$0000,
             [4] bool CS$4$0001)
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0000:  ldnull
    IL_0001:  stloc.0
    IL_0002:  ldnull
    IL_0003:  stloc.1
    IL_0004:  newobj     instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::.ctor()
    IL_0009:  stloc.2
    IL_000a:  ldloc.2
    IL_000b:  ldarg.0
    IL_000c:  stfld      class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<>4__this'
//000076:         {
    IL_0011:  nop
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
    IL_0012:  ldloc.2
    IL_0013:  ldarg.0
    IL_0014:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_0019:  ldsfld     class [mscorlib]System.Func`2<valuetype ShakespeareanMonkeys.TextMatchGenome,int32> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatea'
    IL_001e:  brtrue.s   IL_0033

    IL_0020:  ldnull
    IL_0021:  ldftn      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'<CreateNextGeneration>b__4'(valuetype ShakespeareanMonkeys.TextMatchGenome)
    IL_0027:  newobj     instance void class [mscorlib]System.Func`2<valuetype ShakespeareanMonkeys.TextMatchGenome,int32>::.ctor(object,
                                                                                                                                  native int)
    IL_002c:  stsfld     class [mscorlib]System.Func`2<valuetype ShakespeareanMonkeys.TextMatchGenome,int32> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatea'
    IL_0031:  br.s       IL_0033

    IL_0033:  ldsfld     class [mscorlib]System.Func`2<valuetype ShakespeareanMonkeys.TextMatchGenome,int32> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatea'
    IL_0038:  call       int32 [System.Core]System.Linq.Enumerable::Max<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                        class [mscorlib]System.Func`2<!!0,int32>)
    IL_003d:  ldc.i4.1
    IL_003e:  add
    IL_003f:  stfld      int32 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::maxFitness
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
    IL_0044:  ldloc.2
    IL_0045:  ldarg.0
    IL_0046:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_004b:  ldloc.2
    IL_004c:  ldftn      instance int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<CreateNextGeneration>b__5'(valuetype ShakespeareanMonkeys.TextMatchGenome)
    IL_0052:  newobj     instance void class [mscorlib]System.Func`2<valuetype ShakespeareanMonkeys.TextMatchGenome,int64>::.ctor(object,
                                                                                                                                  native int)
    IL_0057:  call       int64 [System.Core]System.Linq.Enumerable::Sum<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                        class [mscorlib]System.Func`2<!!0,int64>)
    IL_005c:  stfld      int64 ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::sumOfMaxMinusFitness
//000079: 
//000080:             if (_runParallel)
    IL_0061:  ldarg.0
    IL_0062:  ldfld      bool ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_runParallel
    IL_0067:  ldc.i4.0
    IL_0068:  ceq
    IL_006a:  stloc.s    CS$4$0001
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_006c:  ldloc.s    CS$4$0001
    IL_006e:  brtrue.s   IL_00c3

//000081:             {
    IL_0070:  nop
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
    IL_0071:  ldc.i4.0
    IL_0072:  ldarg.0
    IL_0073:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0078:  callvirt   instance int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_PopulationSize()
    IL_007d:  ldc.i4.2
    IL_007e:  div
    IL_007f:  call       class [System.Core]System.Linq.ParallelQuery`1<int32> [System.Core]System.Linq.ParallelEnumerable::Range(int32,
                                                                                                                                  int32)
    IL_0084:  ldloc.0
    IL_0085:  brtrue.s   IL_0096

    IL_0087:  ldloc.2
    IL_0088:  ldftn      instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<CreateNextGeneration>b__6'(int32)
    IL_008e:  newobj     instance void class [mscorlib]System.Func`2<int32,class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>>::.ctor(object,
                                                                                                                                                                                            native int)
    IL_0093:  stloc.0
    IL_0094:  br.s       IL_0096

    IL_0096:  ldloc.0
    IL_0097:  ldsfld     class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatec'
    IL_009c:  brtrue.s   IL_00b1

    IL_009e:  ldnull
    IL_009f:  ldftn      valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'<CreateNextGeneration>b__7'(int32,
                                                                                                                                                     valuetype ShakespeareanMonkeys.TextMatchGenome)
    IL_00a5:  newobj     instance void class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome>::.ctor(object,
                                                                                                                                                                                 native int)
    IL_00aa:  stsfld     class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatec'
    IL_00af:  br.s       IL_00b1

    IL_00b1:  ldsfld     class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatec'
    IL_00b6:  call       class [System.Core]System.Linq.ParallelQuery`1<!!2> [System.Core]System.Linq.ParallelEnumerable::SelectMany<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                                                                                                          class [mscorlib]System.Func`2<!!0,class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1>>,
                                                                                                                                                                                                                                          class [mscorlib]System.Func`3<!!0,!!1,!!2>)
    IL_00bb:  call       !!0[] [System.Core]System.Linq.ParallelEnumerable::ToArray<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [System.Core]System.Linq.ParallelQuery`1<!!0>)
    IL_00c0:  stloc.3
    IL_00c1:  br.s       IL_0116

//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
    IL_00c3:  nop
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
    IL_00c4:  ldc.i4.0
    IL_00c5:  ldarg.0
    IL_00c6:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_00cb:  callvirt   instance int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_PopulationSize()
    IL_00d0:  ldc.i4.2
    IL_00d1:  div
    IL_00d2:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_00d7:  ldloc.1
    IL_00d8:  brtrue.s   IL_00e9

    IL_00da:  ldloc.2
    IL_00db:  ldftn      instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm/'<>c__DisplayClassf'::'<CreateNextGeneration>b__8'(int32)
    IL_00e1:  newobj     instance void class [mscorlib]System.Func`2<int32,class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>>::.ctor(object,
                                                                                                                                                                                            native int)
    IL_00e6:  stloc.1
    IL_00e7:  br.s       IL_00e9

    IL_00e9:  ldloc.1
    IL_00ea:  ldsfld     class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatee'
    IL_00ef:  brtrue.s   IL_0104

    IL_00f1:  ldnull
    IL_00f2:  ldftn      valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'<CreateNextGeneration>b__9'(int32,
                                                                                                                                                     valuetype ShakespeareanMonkeys.TextMatchGenome)
    IL_00f8:  newobj     instance void class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome>::.ctor(object,
                                                                                                                                                                                 native int)
    IL_00fd:  stsfld     class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatee'
    IL_0102:  br.s       IL_0104

    IL_0104:  ldsfld     class [mscorlib]System.Func`3<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.TextMatchGeneticAlgorithm::'CS$<>9__CachedAnonymousMethodDelegatee'
    IL_0109:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!2> [System.Core]System.Linq.Enumerable::SelectMany<int32,valuetype ShakespeareanMonkeys.TextMatchGenome,valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                                                            class [mscorlib]System.Func`2<!!0,class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1>>,
                                                                                                                                                                                                                                            class [mscorlib]System.Func`3<!!0,!!1,!!2>)
    IL_010e:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<valuetype ShakespeareanMonkeys.TextMatchGenome>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_0113:  stloc.3
    IL_0114:  br.s       IL_0116

//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
    IL_0116:  ldloc.3
    IL_0117:  ret
  } // end of method TextMatchGeneticAlgorithm::CreateNextGeneration

  .method private hidebysig instance valuetype ShakespeareanMonkeys.TextMatchGenome[] 
          CreateChildren(valuetype ShakespeareanMonkeys.TextMatchGenome parent1,
                         valuetype ShakespeareanMonkeys.TextMatchGenome parent2) cil managed
  {
    // Code size       190 (0xbe)
    .maxstack  6
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome child1,
             [1] valuetype ShakespeareanMonkeys.TextMatchGenome child2,
             [2] valuetype ShakespeareanMonkeys.TextMatchGenome[] CS$1$0000,
             [3] bool CS$4$0001,
             [4] valuetype ShakespeareanMonkeys.TextMatchGenome[] CS$0$0002)
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
    IL_0000:  nop
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
    IL_0001:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0006:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
    IL_000b:  ldarg.0
    IL_000c:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0011:  callvirt   instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_CrossoverProbability()
    IL_0016:  clt
    IL_0018:  ldc.i4.0
    IL_0019:  ceq
    IL_001b:  stloc.3
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_001c:  ldloc.3
    IL_001d:  brtrue.s   IL_0035

//000106:             {
    IL_001f:  nop
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
    IL_0020:  ldarg.0
    IL_0021:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0026:  ldarg.1
    IL_0027:  ldarg.2
    IL_0028:  ldloca.s   child1
    IL_002a:  ldloca.s   child2
    IL_002c:  call       instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::Crossover(class [mscorlib]System.Random,
                                                                                                 valuetype ShakespeareanMonkeys.TextMatchGenome,
                                                                                                 valuetype ShakespeareanMonkeys.TextMatchGenome,
                                                                                                 valuetype ShakespeareanMonkeys.TextMatchGenome&,
                                                                                                 valuetype ShakespeareanMonkeys.TextMatchGenome&)
    IL_0031:  nop
//000108:             }
    IL_0032:  nop
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0033:  br.s       IL_003b

//000110:             {
    IL_0035:  nop
//000111:                 child1 = parent1;
    IL_0036:  ldarg.1
    IL_0037:  stloc.0
//000112:                 child2 = parent2;
    IL_0038:  ldarg.2
    IL_0039:  stloc.1
//000113:             }
    IL_003a:  nop
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
    IL_003b:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0040:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
    IL_0045:  ldarg.0
    IL_0046:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_004b:  callvirt   instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_MutationProbability()
    IL_0050:  clt
    IL_0052:  ldc.i4.0
    IL_0053:  ceq
    IL_0055:  stloc.3
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0056:  ldloc.3
    IL_0057:  brtrue.s   IL_0067

//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
    IL_0059:  ldarg.0
    IL_005a:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_005f:  ldloca.s   child1
    IL_0061:  call       instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::Mutate(class [mscorlib]System.Random,
                                                                                              valuetype ShakespeareanMonkeys.TextMatchGenome&)
    IL_0066:  nop
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
    IL_0067:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_006c:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
    IL_0071:  ldarg.0
    IL_0072:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_settings
    IL_0077:  callvirt   instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_MutationProbability()
    IL_007c:  clt
    IL_007e:  ldc.i4.0
    IL_007f:  ceq
    IL_0081:  stloc.3
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0082:  ldloc.3
    IL_0083:  brtrue.s   IL_0093

//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
    IL_0085:  ldarg.0
    IL_0086:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_008b:  ldloca.s   child2
    IL_008d:  call       instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::Mutate(class [mscorlib]System.Random,
                                                                                              valuetype ShakespeareanMonkeys.TextMatchGenome&)
    IL_0092:  nop
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
    IL_0093:  ldc.i4.2
    IL_0094:  newarr     ShakespeareanMonkeys.TextMatchGenome
    IL_0099:  stloc.s    CS$0$0002
    IL_009b:  ldloc.s    CS$0$0002
    IL_009d:  ldc.i4.0
    IL_009e:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_00a3:  ldloc.0
    IL_00a4:  stobj      ShakespeareanMonkeys.TextMatchGenome
    IL_00a9:  ldloc.s    CS$0$0002
    IL_00ab:  ldc.i4.1
    IL_00ac:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_00b1:  ldloc.1
    IL_00b2:  stobj      ShakespeareanMonkeys.TextMatchGenome
    IL_00b7:  ldloc.s    CS$0$0002
    IL_00b9:  stloc.2
    IL_00ba:  br.s       IL_00bc

//000121:         }
    IL_00bc:  ldloc.2
    IL_00bd:  ret
  } // end of method TextMatchGeneticAlgorithm::CreateChildren

  .method private hidebysig instance valuetype ShakespeareanMonkeys.TextMatchGenome 
          FindRandomHighQualityParent(int64 sumOfMaxMinusFitness,
                                      int32 max) cil managed
  {
    // Code size       115 (0x73)
    .maxstack  3
    .locals init ([0] int64 val,
             [1] int32 i,
             [2] int32 maxMinusFitness,
             [3] valuetype ShakespeareanMonkeys.TextMatchGenome CS$1$0000,
             [4] bool CS$4$0001)
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
    IL_0000:  nop
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
    IL_0001:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0006:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
    IL_000b:  ldarg.1
    IL_000c:  conv.r8
    IL_000d:  mul
    IL_000e:  conv.i8
    IL_000f:  stloc.0
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
    IL_0010:  ldc.i4.0
    IL_0011:  stloc.1
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0012:  br.s       IL_0055

//000127:             {
    IL_0014:  nop
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
    IL_0015:  ldarg.2
    IL_0016:  ldarg.0
    IL_0017:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_001c:  ldloc.1
    IL_001d:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_0022:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
    IL_0027:  sub
    IL_0028:  stloc.2
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
    IL_0029:  ldloc.0
    IL_002a:  ldloc.2
    IL_002b:  conv.i8
    IL_002c:  clt
    IL_002e:  ldc.i4.0
    IL_002f:  ceq
    IL_0031:  stloc.s    CS$4$0001
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0033:  ldloc.s    CS$4$0001
    IL_0035:  brtrue.s   IL_004b

//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
    IL_0037:  ldarg.0
    IL_0038:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_003d:  ldloc.1
    IL_003e:  ldelema    ShakespeareanMonkeys.TextMatchGenome
    IL_0043:  ldobj      ShakespeareanMonkeys.TextMatchGenome
    IL_0048:  stloc.3
    IL_0049:  br.s       IL_0071

//000130:                 val -= maxMinusFitness;
    IL_004b:  ldloc.0
    IL_004c:  ldloc.2
    IL_004d:  conv.i8
    IL_004e:  sub
    IL_004f:  stloc.0
//000131:             }
    IL_0050:  nop
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
    IL_0051:  ldloc.1
    IL_0052:  ldc.i4.1
    IL_0053:  add
    IL_0054:  stloc.1
    IL_0055:  ldloc.1
    IL_0056:  ldarg.0
    IL_0057:  ldfld      valuetype ShakespeareanMonkeys.TextMatchGenome[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_currentPopulation
    IL_005c:  ldlen
    IL_005d:  conv.i4
    IL_005e:  clt
    IL_0060:  stloc.s    CS$4$0001
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0062:  ldloc.s    CS$4$0001
    IL_0064:  brtrue.s   IL_0014

//000132:             throw new InvalidOperationException("Not to be, apparently.");
    IL_0066:  ldstr      "Not to be, apparently."
    IL_006b:  newobj     instance void [mscorlib]System.InvalidOperationException::.ctor(string)
    IL_0070:  throw

//000133:         }
    IL_0071:  ldloc.3
    IL_0072:  ret
  } // end of method TextMatchGeneticAlgorithm::FindRandomHighQualityParent

  .method private hidebysig instance void 
          Crossover(class [mscorlib]System.Random rand,
                    valuetype ShakespeareanMonkeys.TextMatchGenome p1,
                    valuetype ShakespeareanMonkeys.TextMatchGenome p2,
                    [out] valuetype ShakespeareanMonkeys.TextMatchGenome& child1,
                    [out] valuetype ShakespeareanMonkeys.TextMatchGenome& child2) cil managed
  {
    // Code size       162 (0xa2)
    .maxstack  5
    .locals init ([0] int32 crossoverPoint,
             [1] valuetype ShakespeareanMonkeys.TextMatchGenome '<>g__initLocal11',
             [2] valuetype ShakespeareanMonkeys.TextMatchGenome '<>g__initLocal12')
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
    IL_0000:  nop
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
    IL_0001:  ldarg.1
    IL_0002:  ldc.i4.1
    IL_0003:  ldarga.s   p1
    IL_0005:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_000a:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_000f:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0014:  stloc.0
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
    IL_0015:  ldarg.s    child1
    IL_0017:  ldloca.s   '<>g__initLocal11'
    IL_0019:  initobj    ShakespeareanMonkeys.TextMatchGenome
    IL_001f:  ldloca.s   '<>g__initLocal11'
    IL_0021:  ldarga.s   p1
    IL_0023:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0028:  ldc.i4.0
    IL_0029:  ldloc.0
    IL_002a:  callvirt   instance string [mscorlib]System.String::Substring(int32,
                                                                            int32)
    IL_002f:  ldarga.s   p2
    IL_0031:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0036:  ldloc.0
    IL_0037:  callvirt   instance string [mscorlib]System.String::Substring(int32)
    IL_003c:  call       string [mscorlib]System.String::Concat(string,
                                                                string)
    IL_0041:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    IL_0046:  nop
    IL_0047:  ldloca.s   '<>g__initLocal11'
    IL_0049:  ldarg.0
    IL_004a:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_004f:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_TargetText(string)
    IL_0054:  nop
    IL_0055:  ldloc.1
    IL_0056:  stobj      ShakespeareanMonkeys.TextMatchGenome
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
    IL_005b:  ldarg.s    child2
    IL_005d:  ldloca.s   '<>g__initLocal12'
    IL_005f:  initobj    ShakespeareanMonkeys.TextMatchGenome
    IL_0065:  ldloca.s   '<>g__initLocal12'
    IL_0067:  ldarga.s   p2
    IL_0069:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_006e:  ldc.i4.0
    IL_006f:  ldloc.0
    IL_0070:  callvirt   instance string [mscorlib]System.String::Substring(int32,
                                                                            int32)
    IL_0075:  ldarga.s   p1
    IL_0077:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_007c:  ldloc.0
    IL_007d:  callvirt   instance string [mscorlib]System.String::Substring(int32)
    IL_0082:  call       string [mscorlib]System.String::Concat(string,
                                                                string)
    IL_0087:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    IL_008c:  nop
    IL_008d:  ldloca.s   '<>g__initLocal12'
    IL_008f:  ldarg.0
    IL_0090:  ldfld      string ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_targetText
    IL_0095:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_TargetText(string)
    IL_009a:  nop
    IL_009b:  ldloc.2
    IL_009c:  stobj      ShakespeareanMonkeys.TextMatchGenome
//000140:         }
    IL_00a1:  ret
  } // end of method TextMatchGeneticAlgorithm::Crossover

  .method private hidebysig instance void 
          Mutate(class [mscorlib]System.Random rand,
                 valuetype ShakespeareanMonkeys.TextMatchGenome& genome) cil managed
  {
    // Code size       72 (0x48)
    .maxstack  6
    .locals init ([0] class [mscorlib]System.Text.StringBuilder sb)
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
    IL_0000:  nop
//000144:             var sb = new StringBuilder(genome.Text);
    IL_0001:  ldarg.2
    IL_0002:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0007:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor(string)
    IL_000c:  stloc.0
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
    IL_000d:  ldloc.0
    IL_000e:  ldarg.1
    IL_000f:  ldc.i4.0
    IL_0010:  ldarg.2
    IL_0011:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
    IL_0016:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_001b:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0020:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_0025:  ldarg.1
    IL_0026:  ldc.i4.0
    IL_0027:  ldsfld     char[] ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_validChars
    IL_002c:  ldlen
    IL_002d:  conv.i4
    IL_002e:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0033:  ldelem.u2
    IL_0034:  callvirt   instance void [mscorlib]System.Text.StringBuilder::set_Chars(int32,
                                                                                      char)
    IL_0039:  nop
//000146:             genome.Text = sb.ToString();
    IL_003a:  ldarg.2
    IL_003b:  ldloc.0
    IL_003c:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0041:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    IL_0046:  nop
//000147:         }
    IL_0047:  ret
  } // end of method TextMatchGeneticAlgorithm::Mutate

  .method private hidebysig instance valuetype ShakespeareanMonkeys.TextMatchGenome 
          '<CreateRandomPopulation>b__0'(int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  2
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome CS$1$0000)
//000062:                     select CreateRandomGenome(_random)).ToArray();
    IL_0000:  ldarg.0
    IL_0001:  ldsfld     class [ParallelExtensionsExtras]System.Threading.ThreadSafeRandom ShakespeareanMonkeys.TextMatchGeneticAlgorithm::_random
    IL_0006:  call       instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::CreateRandomGenome(class [mscorlib]System.Random)
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

//000063:         }
//000064: 
//000065:         private TextMatchGenome CreateRandomGenome(Random rand)
//000066:         {
//000067:             var sb = new StringBuilder(_targetText.Length);
//000068:             for (int i = 0; i < _targetText.Length; i++)
//000069:             {
//000070:                 sb.Append(_validChars[rand.Next(0, _validChars.Length)]);
//000071:             }
//000072:             return new TextMatchGenome { Text = sb.ToString(), TargetText = _targetText };
//000073:         }
//000074: 
//000075:         private TextMatchGenome[] CreateNextGeneration()
//000076:         {
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method TextMatchGeneticAlgorithm::'<CreateRandomPopulation>b__0'

  .method private hidebysig static int32 
          '<CreateNextGeneration>b__4'(valuetype ShakespeareanMonkeys.TextMatchGenome g) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 CS$1$0000)
//000077:             var maxFitness = _currentPopulation.Max(g => g.Fitness) + 1;
    IL_0000:  ldarga.s   g
    IL_0002:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000078:             var sumOfMaxMinusFitness = _currentPopulation.Sum(g => (long)(maxFitness - g.Fitness));
//000079: 
//000080:             if (_runParallel)
//000081:             {
//000082:                 return (from i in ParallelEnumerable.Range(0, _settings.PopulationSize / 2)
//000083:                         from child in CreateChildren(
//000084:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000085:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000086:                         select child).
//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method TextMatchGeneticAlgorithm::'<CreateNextGeneration>b__4'

  .method private hidebysig static valuetype ShakespeareanMonkeys.TextMatchGenome 
          '<CreateNextGeneration>b__7'(int32 i,
                                       valuetype ShakespeareanMonkeys.TextMatchGenome child) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       6 (0x6)
    .maxstack  1
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome CS$1$0000)
//000086:                         select child).
    IL_0000:  ldarg.1
    IL_0001:  stloc.0
    IL_0002:  br.s       IL_0004

//000087:                         ToArray();
//000088:             }
//000089:             else
//000090:             {
//000091:                 return (from i in Enumerable.Range(0, _settings.PopulationSize / 2)
//000092:                         from child in CreateChildren(
//000093:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
//000094:                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
//000095:                         select child).
//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0004:  ldloc.0
    IL_0005:  ret
  } // end of method TextMatchGeneticAlgorithm::'<CreateNextGeneration>b__7'

  .method private hidebysig static valuetype ShakespeareanMonkeys.TextMatchGenome 
          '<CreateNextGeneration>b__9'(int32 i,
                                       valuetype ShakespeareanMonkeys.TextMatchGenome child) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       6 (0x6)
    .maxstack  1
    .locals init ([0] valuetype ShakespeareanMonkeys.TextMatchGenome CS$1$0000)
//000095:                         select child).
    IL_0000:  ldarg.1
    IL_0001:  stloc.0
    IL_0002:  br.s       IL_0004

//000096:                         ToArray();
//000097:             }
//000098:         }
//000099: 
//000100:         private TextMatchGenome[] CreateChildren(
//000101:             TextMatchGenome parent1, TextMatchGenome parent2)
//000102:         {
//000103:             // Crossover parents to create two children
//000104:             TextMatchGenome child1, child2;
//000105:             if (_random.NextDouble() < _settings.CrossoverProbability)
//000106:             {
//000107:                 Crossover(_random, parent1, parent2, out child1, out child2);
//000108:             }
//000109:             else
//000110:             {
//000111:                 child1 = parent1;
//000112:                 child2 = parent2;
//000113:             }
//000114: 
//000115:             // Potentially mutate one or both children
//000116:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child1);
//000117:             if (_random.NextDouble() < _settings.MutationProbability) Mutate(_random, ref child2);
//000118: 
//000119:             // Return the young'ens
//000120:             return new[] { child1, child2 };
//000121:         }
//000122: 
//000123:         private TextMatchGenome FindRandomHighQualityParent(long sumOfMaxMinusFitness, int max)
//000124:         {
//000125:             long val = (long)(_random.NextDouble() * sumOfMaxMinusFitness);
//000126:             for (int i = 0; i < _currentPopulation.Length; i++)
//000127:             {
//000128:                 int maxMinusFitness = max - _currentPopulation[i].Fitness;
//000129:                 if (val < maxMinusFitness) return _currentPopulation[i];
//000130:                 val -= maxMinusFitness;
//000131:             }
//000132:             throw new InvalidOperationException("Not to be, apparently.");
//000133:         }
//000134: 
//000135:         private void Crossover(Random rand, TextMatchGenome p1, TextMatchGenome p2, out TextMatchGenome child1, out TextMatchGenome child2)
//000136:         {
//000137:             int crossoverPoint = rand.Next(1, p1.Text.Length);
//000138:             child1 = new TextMatchGenome { Text = p1.Text.Substring(0, crossoverPoint) + p2.Text.Substring(crossoverPoint), TargetText = _targetText };
//000139:             child2 = new TextMatchGenome { Text = p2.Text.Substring(0, crossoverPoint) + p1.Text.Substring(crossoverPoint), TargetText = _targetText };
//000140:         }
//000141: 
//000142:         private void Mutate(Random rand, ref TextMatchGenome genome)
//000143:         {
//000144:             var sb = new StringBuilder(genome.Text);
//000145:             sb[rand.Next(0, genome.Text.Length)] = _validChars[rand.Next(0, _validChars.Length)];
//000146:             genome.Text = sb.ToString();
//000147:         }
//000148:     }
//000149: 
//000150:     public struct TextMatchGenome
//000151:     {
//000152:         private string _targetText;
//000153:         private string _text;
//000154: 
//000155:         public string Text
//000156:         {
//000157:             get { return _text; }
//000158:             set
//000159:             {
//000160:                 _text = value;
//000161:                 RecomputeFitness();
//000162:             }
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
//000168:             set
//000169:             {
//000170:                 _targetText = value;
//000171:                 RecomputeFitness();
//000172:             }
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
//000177:             if (_text != null && _targetText != null)
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0004:  ldloc.0
    IL_0005:  ret
  } // end of method TextMatchGeneticAlgorithm::'<CreateNextGeneration>b__9'

  .property instance valuetype ShakespeareanMonkeys.TextMatchGenome
          CurrentBest()
  {
    .get instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::get_CurrentBest()
  } // end of property TextMatchGeneticAlgorithm::CurrentBest
} // end of class ShakespeareanMonkeys.TextMatchGeneticAlgorithm

.class public sequential ansi sealed beforefieldinit ShakespeareanMonkeys.TextMatchGenome
       extends [mscorlib]System.ValueType
{
  .field private string _targetText
  .field private string _text
  .field private int32 '<Fitness>k__BackingField'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public hidebysig specialname instance string 
          get_Text() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] string CS$1$0000)
//000157:             get { return _text; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_text
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method TextMatchGenome::get_Text

  .method public hidebysig specialname instance void 
          set_Text(string 'value') cil managed
  {
    // Code size       16 (0x10)
    .maxstack  8
//000158:             set
//000159:             {
    IL_0000:  nop
//000160:                 _text = value;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      string ShakespeareanMonkeys.TextMatchGenome::_text
//000161:                 RecomputeFitness();
    IL_0008:  ldarg.0
    IL_0009:  call       instance void ShakespeareanMonkeys.TextMatchGenome::RecomputeFitness()
    IL_000e:  nop
//000162:             }
    IL_000f:  ret
  } // end of method TextMatchGenome::set_Text

  .method public hidebysig specialname instance string 
          get_TargetText() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] string CS$1$0000)
//000163:         }
//000164: 
//000165:         public string TargetText
//000166:         {
//000167:             get { return _targetText; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method TextMatchGenome::get_TargetText

  .method public hidebysig specialname instance void 
          set_TargetText(string 'value') cil managed
  {
    // Code size       16 (0x10)
    .maxstack  8
//000168:             set
//000169:             {
    IL_0000:  nop
//000170:                 _targetText = value;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
//000171:                 RecomputeFitness();
    IL_0008:  ldarg.0
    IL_0009:  call       instance void ShakespeareanMonkeys.TextMatchGenome::RecomputeFitness()
    IL_000e:  nop
//000172:             }
    IL_000f:  ret
  } // end of method TextMatchGenome::set_TargetText

  .method private hidebysig instance void 
          RecomputeFitness() cil managed
  {
    // Code size       114 (0x72)
    .maxstack  3
    .locals init ([0] int32 diffs,
             [1] int32 i,
             [2] bool CS$4$0000)
//000173:         }
//000174: 
//000175:         private void RecomputeFitness()
//000176:         {
    IL_0000:  nop
//000177:             if (_text != null && _targetText != null)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_text
    IL_0007:  brfalse.s  IL_0014

    IL_0009:  ldarg.0
    IL_000a:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
    IL_000f:  ldnull
    IL_0010:  ceq
    IL_0012:  br.s       IL_0015

    IL_0014:  ldc.i4.1
    IL_0015:  stloc.2
//000178:             {
//000179:                 int diffs = 0;
//000180:                 for (int i = 0; i < _targetText.Length; i++)
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0016:  ldloc.2
    IL_0017:  brtrue.s   IL_0065

//000178:             {
    IL_0019:  nop
//000179:                 int diffs = 0;
    IL_001a:  ldc.i4.0
    IL_001b:  stloc.0
//000180:                 for (int i = 0; i < _targetText.Length; i++)
    IL_001c:  ldc.i4.0
    IL_001d:  stloc.1
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_001e:  br.s       IL_0048

//000181:                 {
    IL_0020:  nop
//000182:                     if (_targetText[i] != _text[i]) diffs++;
    IL_0021:  ldarg.0
    IL_0022:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
    IL_0027:  ldloc.1
    IL_0028:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_002d:  ldarg.0
    IL_002e:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_text
    IL_0033:  ldloc.1
    IL_0034:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_0039:  ceq
    IL_003b:  stloc.2
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_003c:  ldloc.2
    IL_003d:  brtrue.s   IL_0043

//000182:                     if (_targetText[i] != _text[i]) diffs++;
    IL_003f:  ldloc.0
    IL_0040:  ldc.i4.1
    IL_0041:  add
    IL_0042:  stloc.0
//000183:                 }
    IL_0043:  nop
//000180:                 for (int i = 0; i < _targetText.Length; i++)
    IL_0044:  ldloc.1
    IL_0045:  ldc.i4.1
    IL_0046:  add
    IL_0047:  stloc.1
    IL_0048:  ldloc.1
    IL_0049:  ldarg.0
    IL_004a:  ldfld      string ShakespeareanMonkeys.TextMatchGenome::_targetText
    IL_004f:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0054:  clt
    IL_0056:  stloc.2
//000181:                 {
//000182:                     if (_targetText[i] != _text[i]) diffs++;
//000183:                 }
//000184:                 Fitness = diffs;
//000185:             }
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0057:  ldloc.2
    IL_0058:  brtrue.s   IL_0020

//000184:                 Fitness = diffs;
    IL_005a:  ldarg.0
    IL_005b:  ldloc.0
    IL_005c:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Fitness(int32)
    IL_0061:  nop
//000185:             }
    IL_0062:  nop
//000186:             else Fitness = Int32.MaxValue;
//000187:         }
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
//000197:             set
//000198:             {
//000199:                 if (value < 1 ||
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0063:  br.s       IL_0071

//000186:             else Fitness = Int32.MaxValue;
    IL_0065:  ldarg.0
    IL_0066:  ldc.i4     0x7fffffff
    IL_006b:  call       instance void ShakespeareanMonkeys.TextMatchGenome::set_Fitness(int32)
    IL_0070:  nop
//000187:         }
    IL_0071:  ret
  } // end of method TextMatchGenome::RecomputeFitness

  .method public hidebysig specialname instance int32 
          get_Fitness() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (int32 V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      int32 ShakespeareanMonkeys.TextMatchGenome::'<Fitness>k__BackingField'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method TextMatchGenome::get_Fitness

  .method private hidebysig specialname instance void 
          set_Fitness(int32 'value') cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      int32 ShakespeareanMonkeys.TextMatchGenome::'<Fitness>k__BackingField'
    IL_0007:  ret
  } // end of method TextMatchGenome::set_Fitness

  .property instance string Text()
  {
    .set instance void ShakespeareanMonkeys.TextMatchGenome::set_Text(string)
    .get instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
  } // end of property TextMatchGenome::Text
  .property instance string TargetText()
  {
    .set instance void ShakespeareanMonkeys.TextMatchGenome::set_TargetText(string)
    .get instance string ShakespeareanMonkeys.TextMatchGenome::get_TargetText()
  } // end of property TextMatchGenome::TargetText
  .property instance int32 Fitness()
  {
    .get instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
    .set instance void ShakespeareanMonkeys.TextMatchGenome::set_Fitness(int32)
  } // end of property TextMatchGenome::Fitness
} // end of class ShakespeareanMonkeys.TextMatchGenome

.class public auto ansi beforefieldinit ShakespeareanMonkeys.GeneticAlgorithmSettings
       extends [mscorlib]System.Object
{
  .field private int32 _populationSize
  .field private float64 _mutationProbability
  .field private float64 _crossoverProbability
  .method public hidebysig specialname instance int32 
          get_PopulationSize() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 CS$1$0000)
//000188: 
//000189:         public int Fitness { get; private set; }
//000190:     }
//000191: 
//000192:     public class GeneticAlgorithmSettings
//000193:     {
//000194:         public int PopulationSize
//000195:         {
//000196:             get { return _populationSize; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::_populationSize
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method GeneticAlgorithmSettings::get_PopulationSize

  .method public hidebysig specialname instance void 
          set_PopulationSize(int32 'value') cil managed
  {
    // Code size       37 (0x25)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
//000197:             set
//000198:             {
    IL_0000:  nop
//000199:                 if (value < 1 ||
    IL_0001:  ldarg.1
    IL_0002:  ldc.i4.1
    IL_0003:  blt.s      IL_000d

    IL_0005:  ldarg.1
    IL_0006:  ldc.i4.2
    IL_0007:  rem
    IL_0008:  ldc.i4.0
    IL_0009:  ceq
    IL_000b:  br.s       IL_000e

    IL_000d:  ldc.i4.0
    IL_000e:  stloc.0
//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
//000201:                 _populationSize = value;
//000202:             }
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
//000208:             set
//000209:             {
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_000f:  ldloc.0
    IL_0010:  brtrue.s   IL_001d

//000200:                     value % 2 != 0) throw new ArgumentOutOfRangeException("PopulationSize");
    IL_0012:  ldstr      "PopulationSize"
    IL_0017:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_001c:  throw

//000201:                 _populationSize = value;
    IL_001d:  ldarg.0
    IL_001e:  ldarg.1
    IL_001f:  stfld      int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::_populationSize
//000202:             }
    IL_0024:  ret
  } // end of method GeneticAlgorithmSettings::set_PopulationSize

  .method public hidebysig specialname instance float64 
          get_MutationProbability() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000203:         }
//000204: 
//000205:         public double MutationProbability
//000206:         {
//000207:             get { return _mutationProbability; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_mutationProbability
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method GeneticAlgorithmSettings::get_MutationProbability

  .method public hidebysig specialname instance void 
          set_MutationProbability(float64 'value') cil managed
  {
    // Code size       54 (0x36)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
//000208:             set
//000209:             {
    IL_0000:  nop
//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
    IL_0001:  ldarg.1
    IL_0002:  ldc.r8     0.0
    IL_000b:  blt.s      IL_001e

    IL_000d:  ldarg.1
    IL_000e:  ldc.r8     1.
    IL_0017:  cgt
    IL_0019:  ldc.i4.0
    IL_001a:  ceq
    IL_001c:  br.s       IL_001f

    IL_001e:  ldc.i4.0
    IL_001f:  stloc.0
//000211:                 _mutationProbability = value;
//000212:             }
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
//000218:             set
//000219:             {
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0020:  ldloc.0
    IL_0021:  brtrue.s   IL_002e

//000210:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("MutationProbability");
    IL_0023:  ldstr      "MutationProbability"
    IL_0028:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_002d:  throw

//000211:                 _mutationProbability = value;
    IL_002e:  ldarg.0
    IL_002f:  ldarg.1
    IL_0030:  stfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_mutationProbability
//000212:             }
    IL_0035:  ret
  } // end of method GeneticAlgorithmSettings::set_MutationProbability

  .method public hidebysig specialname instance float64 
          get_CrossoverProbability() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000213:         }
//000214: 
//000215:         public double CrossoverProbability
//000216:         {
//000217:             get { return _crossoverProbability; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_crossoverProbability
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method GeneticAlgorithmSettings::get_CrossoverProbability

  .method public hidebysig specialname instance void 
          set_CrossoverProbability(float64 'value') cil managed
  {
    // Code size       54 (0x36)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
//000218:             set
//000219:             {
    IL_0000:  nop
//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
    IL_0001:  ldarg.1
    IL_0002:  ldc.r8     0.0
    IL_000b:  blt.s      IL_001e

    IL_000d:  ldarg.1
    IL_000e:  ldc.r8     1.
    IL_0017:  cgt
    IL_0019:  ldc.i4.0
    IL_001a:  ceq
    IL_001c:  br.s       IL_001f

    IL_001e:  ldc.i4.0
    IL_001f:  stloc.0
//000221:                 _crossoverProbability = value;
//000222:             }
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
//000226:         private double _mutationProbability = .01;
//000227:         private double _crossoverProbability = .87;
//000228:     }
//000229: }
    IL_0020:  ldloc.0
    IL_0021:  brtrue.s   IL_002e

//000220:                 if (value < 0 || value > 1) throw new ArgumentOutOfRangeException("CrossoverProbability");
    IL_0023:  ldstr      "CrossoverProbability"
    IL_0028:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_002d:  throw

//000221:                 _crossoverProbability = value;
    IL_002e:  ldarg.0
    IL_002f:  ldarg.1
    IL_0030:  stfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_crossoverProbability
//000222:             }
    IL_0035:  ret
  } // end of method GeneticAlgorithmSettings::set_CrossoverProbability

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       46 (0x2e)
    .maxstack  8
//000223:         }
//000224: 
//000225:         private int _populationSize = 30;
    IL_0000:  ldarg.0
    IL_0001:  ldc.i4.s   30
    IL_0003:  stfld      int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::_populationSize
//000226:         private double _mutationProbability = .01;
    IL_0008:  ldarg.0
    IL_0009:  ldc.r8     1.e-002
    IL_0012:  stfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_mutationProbability
//000227:         private double _crossoverProbability = .87;
    IL_0017:  ldarg.0
    IL_0018:  ldc.r8     0.87
    IL_0021:  stfld      float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::_crossoverProbability
//000228:     }
//000229: }
    IL_0026:  ldarg.0
    IL_0027:  call       instance void [mscorlib]System.Object::.ctor()
    IL_002c:  nop
    IL_002d:  ret
  } // end of method GeneticAlgorithmSettings::.ctor

  .property instance int32 PopulationSize()
  {
    .get instance int32 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_PopulationSize()
    .set instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::set_PopulationSize(int32)
  } // end of property GeneticAlgorithmSettings::PopulationSize
  .property instance float64 MutationProbability()
  {
    .get instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_MutationProbability()
    .set instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::set_MutationProbability(float64)
  } // end of property GeneticAlgorithmSettings::MutationProbability
  .property instance float64 CrossoverProbability()
  {
    .set instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::set_CrossoverProbability(float64)
    .get instance float64 ShakespeareanMonkeys.GeneticAlgorithmSettings::get_CrossoverProbability()
  } // end of property GeneticAlgorithmSettings::CrossoverProbability
} // end of class ShakespeareanMonkeys.GeneticAlgorithmSettings

.class private auto ansi beforefieldinit ShakespeareanMonkeys.Properties.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_CSharp\Properties\Resources.Designer.cs' 
//000031:         [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000032:         internal Resources() {
    IL_0007:  nop
//000033:         }
    IL_0008:  nop
    IL_0009:  ret
  } // end of method Resources::.ctor

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       63 (0x3f)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager temp,
             [1] class [mscorlib]System.Resources.ResourceManager CS$1$0000,
             [2] bool CS$4$0001)
//000034:         
//000035:         /// <summary>
//000036:         ///   Returns the cached ResourceManager instance used by this class.
//000037:         /// </summary>
//000038:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000039:         internal static global::System.Resources.ResourceManager ResourceManager {
//000040:             get {
    IL_0000:  nop
//000041:                 if (object.ReferenceEquals(resourceMan, null)) {
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager ShakespeareanMonkeys.Properties.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  call       bool [mscorlib]System.Object::ReferenceEquals(object,
                                                                       object)
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.2
//000042:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ShakespeareanMonkeys.Properties.Resources", typeof(Resources).Assembly);
//000043:                     resourceMan = temp;
//000044:                 }
//000045:                 return resourceMan;
//000046:             }
//000047:         }
//000048:         
//000049:         /// <summary>
//000050:         ///   Overrides the current thread's CurrentUICulture property for all
//000051:         ///   resource lookups using this strongly typed resource class.
//000052:         /// </summary>
//000053:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000054:         internal static global::System.Globalization.CultureInfo Culture {
//000055:             get {
//000056:                 return resourceCulture;
//000057:             }
//000058:             set {
//000059:                 resourceCulture = value;
//000060:             }
//000061:         }
//000062:         
//000063:         internal static System.Drawing.Bitmap HamletMonkey {
//000064:             get {
//000065:                 object obj = ResourceManager.GetObject("HamletMonkey", resourceCulture);
//000066:                 return ((System.Drawing.Bitmap)(obj));
//000067:             }
//000068:         }
//000069:     }
//000070: }
    IL_0010:  ldloc.2
    IL_0011:  brtrue.s   IL_0035

//000041:                 if (object.ReferenceEquals(resourceMan, null)) {
    IL_0013:  nop
//000042:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ShakespeareanMonkeys.Properties.Resources", typeof(Resources).Assembly);
    IL_0014:  ldstr      "ShakespeareanMonkeys.Properties.Resources"
    IL_0019:  ldtoken    ShakespeareanMonkeys.Properties.Resources
    IL_001e:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_0023:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0028:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_002d:  stloc.0
//000043:                     resourceMan = temp;
    IL_002e:  ldloc.0
    IL_002f:  stsfld     class [mscorlib]System.Resources.ResourceManager ShakespeareanMonkeys.Properties.Resources::resourceMan
//000044:                 }
    IL_0034:  nop
//000045:                 return resourceMan;
    IL_0035:  ldsfld     class [mscorlib]System.Resources.ResourceManager ShakespeareanMonkeys.Properties.Resources::resourceMan
    IL_003a:  stloc.1
    IL_003b:  br.s       IL_003d

//000046:             }
    IL_003d:  ldloc.1
    IL_003e:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo CS$1$0000)
//000047:         }
//000048:         
//000049:         /// <summary>
//000050:         ///   Overrides the current thread's CurrentUICulture property for all
//000051:         ///   resource lookups using this strongly typed resource class.
//000052:         /// </summary>
//000053:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000054:         internal static global::System.Globalization.CultureInfo Culture {
//000055:             get {
    IL_0000:  nop
//000056:                 return resourceCulture;
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo ShakespeareanMonkeys.Properties.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000057:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly hidebysig specialname static 
          void  set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
//000058:             set {
    IL_0000:  nop
//000059:                 resourceCulture = value;
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo ShakespeareanMonkeys.Properties.Resources::resourceCulture
//000060:             }
    IL_0007:  ret
  } // end of method Resources::set_Culture

  .method assembly hidebysig specialname static 
          class [System.Drawing]System.Drawing.Bitmap 
          get_HamletMonkey() cil managed
  {
    // Code size       33 (0x21)
    .maxstack  3
    .locals init ([0] object obj,
             [1] class [System.Drawing]System.Drawing.Bitmap CS$1$0000)
//000061:         }
//000062:         
//000063:         internal static System.Drawing.Bitmap HamletMonkey {
//000064:             get {
    IL_0000:  nop
//000065:                 object obj = ResourceManager.GetObject("HamletMonkey", resourceCulture);
    IL_0001:  call       class [mscorlib]System.Resources.ResourceManager ShakespeareanMonkeys.Properties.Resources::get_ResourceManager()
    IL_0006:  ldstr      "HamletMonkey"
    IL_000b:  ldsfld     class [mscorlib]System.Globalization.CultureInfo ShakespeareanMonkeys.Properties.Resources::resourceCulture
    IL_0010:  callvirt   instance object [mscorlib]System.Resources.ResourceManager::GetObject(string,
                                                                                               class [mscorlib]System.Globalization.CultureInfo)
    IL_0015:  stloc.0
//000066:                 return ((System.Drawing.Bitmap)(obj));
    IL_0016:  ldloc.0
    IL_0017:  castclass  [System.Drawing]System.Drawing.Bitmap
    IL_001c:  stloc.1
    IL_001d:  br.s       IL_001f

//000067:             }
    IL_001f:  ldloc.1
    IL_0020:  ret
  } // end of method Resources::get_HamletMonkey

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager ShakespeareanMonkeys.Properties.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo ShakespeareanMonkeys.Properties.Resources::get_Culture()
    .set void ShakespeareanMonkeys.Properties.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
  .property class [System.Drawing]System.Drawing.Bitmap
          HamletMonkey()
  {
    .get class [System.Drawing]System.Drawing.Bitmap ShakespeareanMonkeys.Properties.Resources::get_HamletMonkey()
  } // end of property Resources::HamletMonkey
} // end of class ShakespeareanMonkeys.Properties.Resources

.class public auto ansi beforefieldinit ShakespeareanMonkeys.MainForm
       extends [System.Windows.Forms]System.Windows.Forms.Form
{
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass5'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass8'
           extends [mscorlib]System.Object
    {
      .field public class ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5' 'CS$<>8__locals6'
      .field public valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> bestGenome
      .method public hidebysig specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        // Code size       7 (0x7)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ret
      } // end of method '<>c__DisplayClass8'::.ctor

      .method public hidebysig instance string 
              '<btnRun_Click>b__3'() cil managed
      {
        // Code size       49 (0x31)
        .maxstack  3
        .locals init ([0] string CS$1$0000,
                 [1] valuetype ShakespeareanMonkeys.TextMatchGenome CS$0$0001,
                 [2] string CS$0$0002)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_CSharp\MainForm.cs' 
//000078:                             _uiTasks.StartNew(() => txtBestMatch.Text = bestGenome.Value.Text);
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5' ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::'CS$<>8__locals6'
        IL_0006:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::'<>4__this'
        IL_000b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
        IL_0010:  ldarg.0
        IL_0011:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::bestGenome
        IL_0016:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::get_Value()
        IL_001b:  stloc.1
        IL_001c:  ldloca.s   CS$0$0001
        IL_001e:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
        IL_0023:  dup
        IL_0024:  stloc.2
        IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
        IL_002a:  nop
        IL_002b:  ldloc.2
        IL_002c:  stloc.0
        IL_002d:  br.s       IL_002f

//000079: 
//000080:                             // If we've found the solution, bail.
//000081:                             if (bestGenome.Value.Text == _targetText) break;
//000082:                         }
//000083:                     }
//000084: 
//000085:                     // When the task completes, update the UI
//000086:                 }, token).ContinueWith(t =>
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
        IL_002f:  ldloc.0
        IL_0030:  ret
      } // end of method '<>c__DisplayClass8'::'<btnRun_Click>b__3'

    } // end of class '<>c__DisplayClass8'

    .field public class ShakespeareanMonkeys.GeneticAlgorithmSettings settings
    .field public valuetype [mscorlib]System.Threading.CancellationToken token
    .field public bool runParallel
    .field public class ShakespeareanMonkeys.MainForm '<>4__this'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass5'::.ctor

    .method public hidebysig instance void 
            '<btnRun_Click>b__2'() cil managed
    {
      // Code size       278 (0x116)
      .maxstack  4
      .locals init ([0] class ShakespeareanMonkeys.TextMatchGeneticAlgorithm ga,
               [1] class [mscorlib]System.Func`1<string> 'CS$<>9__CachedAnonymousMethodDelegate7',
               [2] class ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8' 'CS$<>8__locals9',
               [3] valuetype ShakespeareanMonkeys.TextMatchGenome CS$0$0000,
               [4] bool CS$4$0001)
      IL_0000:  ldnull
      IL_0001:  stloc.1
      IL_0002:  newobj     instance void ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::.ctor()
      IL_0007:  stloc.2
      IL_0008:  ldloc.2
      IL_0009:  ldarg.0
      IL_000a:  stfld      class ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5' ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::'CS$<>8__locals6'
//000060:                 {
      IL_000f:  nop
//000061:                     // Create the new genetic algorithm
//000062:                     var ga = new TextMatchGeneticAlgorithm(runParallel, _targetText, settings);
      IL_0010:  ldarg.0
      IL_0011:  ldfld      bool ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::runParallel
      IL_0016:  ldsfld     string ShakespeareanMonkeys.MainForm::_targetText
      IL_001b:  ldarg.0
      IL_001c:  ldfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::settings
      IL_0021:  newobj     instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::.ctor(bool,
                                                                                               string,
                                                                                               class ShakespeareanMonkeys.GeneticAlgorithmSettings)
      IL_0026:  stloc.0
//000063:                     TextMatchGenome? bestGenome = null;
      IL_0027:  ldloc.2
      IL_0028:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::bestGenome
      IL_002d:  initobj    valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>
//000064: 
//000065:                     // Iterate until a solution is found or until cancellation is requested
//000066:                     for (_currentIteration = 1; ; _currentIteration++)
      IL_0033:  ldarg.0
      IL_0034:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::'<>4__this'
      IL_0039:  ldc.i4.1
      IL_003a:  stfld      int32 ShakespeareanMonkeys.MainForm::_currentIteration
//000067:                     {
//000068:                         token.ThrowIfCancellationRequested();
//000069: 
//000070:                         // Move to the next generation
//000071:                         ga.MoveNext();
//000072: 
//000073:                         // If we've found the best solution thus far, update the UI
//000074:                         if (bestGenome == null ||
//000075:                             ga.CurrentBest.Fitness < bestGenome.Value.Fitness)
//000076:                         {
//000077:                             bestGenome = ga.CurrentBest;
//000078:                             _uiTasks.StartNew(() => txtBestMatch.Text = bestGenome.Value.Text);
//000079: 
//000080:                             // If we've found the solution, bail.
//000081:                             if (bestGenome.Value.Text == _targetText) break;
//000082:                         }
//000083:                     }
//000084: 
//000085:                     // When the task completes, update the UI
//000086:                 }, token).ContinueWith(t =>
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
      IL_003f:  br         IL_010c

//000067:                     {
      IL_0044:  nop
//000068:                         token.ThrowIfCancellationRequested();
      IL_0045:  ldarg.0
      IL_0046:  ldflda     valuetype [mscorlib]System.Threading.CancellationToken ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::token
      IL_004b:  call       instance void [mscorlib]System.Threading.CancellationToken::ThrowIfCancellationRequested()
      IL_0050:  nop
//000069: 
//000070:                         // Move to the next generation
//000071:                         ga.MoveNext();
      IL_0051:  ldloc.0
      IL_0052:  callvirt   instance void ShakespeareanMonkeys.TextMatchGeneticAlgorithm::MoveNext()
      IL_0057:  nop
//000072: 
//000073:                         // If we've found the best solution thus far, update the UI
//000074:                         if (bestGenome == null ||
      IL_0058:  ldloc.2
      IL_0059:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::bestGenome
      IL_005e:  call       instance bool valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::get_HasValue()
      IL_0063:  brfalse.s  IL_008d

      IL_0065:  ldloc.0
      IL_0066:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::get_CurrentBest()
      IL_006b:  stloc.3
      IL_006c:  ldloca.s   CS$0$0000
      IL_006e:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
      IL_0073:  ldloc.2
      IL_0074:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::bestGenome
      IL_0079:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::get_Value()
      IL_007e:  stloc.3
      IL_007f:  ldloca.s   CS$0$0000
      IL_0081:  call       instance int32 ShakespeareanMonkeys.TextMatchGenome::get_Fitness()
      IL_0086:  clt
      IL_0088:  ldc.i4.0
      IL_0089:  ceq
      IL_008b:  br.s       IL_008e

      IL_008d:  ldc.i4.0
      IL_008e:  stloc.s    CS$4$0001
//000075:                             ga.CurrentBest.Fitness < bestGenome.Value.Fitness)
//000076:                         {
//000077:                             bestGenome = ga.CurrentBest;
//000078:                             _uiTasks.StartNew(() => txtBestMatch.Text = bestGenome.Value.Text);
//000079: 
//000080:                             // If we've found the solution, bail.
//000081:                             if (bestGenome.Value.Text == _targetText) break;
//000082:                         }
//000083:                     }
//000084: 
//000085:                     // When the task completes, update the UI
//000086:                 }, token).ContinueWith(t =>
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
      IL_0090:  ldloc.s    CS$4$0001
      IL_0092:  brtrue.s   IL_00f8

//000076:                         {
      IL_0094:  nop
//000077:                             bestGenome = ga.CurrentBest;
      IL_0095:  ldloc.2
      IL_0096:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::bestGenome
      IL_009b:  ldloc.0
      IL_009c:  callvirt   instance valuetype ShakespeareanMonkeys.TextMatchGenome ShakespeareanMonkeys.TextMatchGeneticAlgorithm::get_CurrentBest()
      IL_00a1:  newobj     instance void valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::.ctor(!0)
      IL_00a6:  stobj      valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>
//000078:                             _uiTasks.StartNew(() => txtBestMatch.Text = bestGenome.Value.Text);
      IL_00ab:  ldarg.0
      IL_00ac:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::'<>4__this'
      IL_00b1:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory ShakespeareanMonkeys.MainForm::_uiTasks
      IL_00b6:  ldloc.1
      IL_00b7:  brtrue.s   IL_00c8

      IL_00b9:  ldloc.2
      IL_00ba:  ldftn      instance string ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::'<btnRun_Click>b__3'()
      IL_00c0:  newobj     instance void class [mscorlib]System.Func`1<string>::.ctor(object,
                                                                                      native int)
      IL_00c5:  stloc.1
      IL_00c6:  br.s       IL_00c8

      IL_00c8:  ldloc.1
      IL_00c9:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task`1<!!0> [mscorlib]System.Threading.Tasks.TaskFactory::StartNew<string>(class [mscorlib]System.Func`1<!!0>)
      IL_00ce:  pop
//000079: 
//000080:                             // If we've found the solution, bail.
//000081:                             if (bestGenome.Value.Text == _targetText) break;
      IL_00cf:  ldloc.2
      IL_00d0:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome> ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'/'<>c__DisplayClass8'::bestGenome
      IL_00d5:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype ShakespeareanMonkeys.TextMatchGenome>::get_Value()
      IL_00da:  stloc.3
      IL_00db:  ldloca.s   CS$0$0000
      IL_00dd:  call       instance string ShakespeareanMonkeys.TextMatchGenome::get_Text()
      IL_00e2:  ldsfld     string ShakespeareanMonkeys.MainForm::_targetText
      IL_00e7:  call       bool [mscorlib]System.String::op_Equality(string,
                                                                     string)
      IL_00ec:  ldc.i4.0
      IL_00ed:  ceq
      IL_00ef:  stloc.s    CS$4$0001
//000082:                         }
//000083:                     }
//000084: 
//000085:                     // When the task completes, update the UI
//000086:                 }, token).ContinueWith(t =>
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
      IL_00f1:  ldloc.s    CS$4$0001
      IL_00f3:  brtrue.s   IL_00f7

//000081:                             if (bestGenome.Value.Text == _targetText) break;
      IL_00f5:  br.s       IL_0114

//000082:                         }
      IL_00f7:  nop
//000083:                     }
      IL_00f8:  nop
//000066:                     for (_currentIteration = 1; ; _currentIteration++)
      IL_00f9:  ldarg.0
      IL_00fa:  ldfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::'<>4__this'
      IL_00ff:  dup
      IL_0100:  ldfld      int32 ShakespeareanMonkeys.MainForm::_currentIteration
      IL_0105:  ldc.i4.1
      IL_0106:  add
      IL_0107:  stfld      int32 ShakespeareanMonkeys.MainForm::_currentIteration
//000067:                     {
//000068:                         token.ThrowIfCancellationRequested();
//000069: 
//000070:                         // Move to the next generation
//000071:                         ga.MoveNext();
//000072: 
//000073:                         // If we've found the best solution thus far, update the UI
//000074:                         if (bestGenome == null ||
//000075:                             ga.CurrentBest.Fitness < bestGenome.Value.Fitness)
//000076:                         {
//000077:                             bestGenome = ga.CurrentBest;
//000078:                             _uiTasks.StartNew(() => txtBestMatch.Text = bestGenome.Value.Text);
//000079: 
//000080:                             // If we've found the solution, bail.
//000081:                             if (bestGenome.Value.Text == _targetText) break;
//000082:                         }
//000083:                     }
//000084: 
//000085:                     // When the task completes, update the UI
//000086:                 }, token).ContinueWith(t =>
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
      IL_010c:  ldc.i4.1
      IL_010d:  stloc.s    CS$4$0001
      IL_010f:  br         IL_0044

//000086:                 }, token).ContinueWith(t =>
      IL_0114:  nop
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
      IL_0115:  ret
    } // end of method '<>c__DisplayClass5'::'<btnRun_Click>b__2'

  } // end of class '<>c__DisplayClass5'

  .field private class [System]System.ComponentModel.IContainer components
  .field private class [System.Windows.Forms]System.Windows.Forms.PictureBox pictureBox1
  .field private class [System.Windows.Forms]System.Windows.Forms.SplitContainer splitContainer1
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label1
  .field private class [System.Windows.Forms]System.Windows.Forms.TextBox txtMonkeysPerGeneration
  .field private class [System.Windows.Forms]System.Windows.Forms.Button btnRun
  .field private class [System.Windows.Forms]System.Windows.Forms.SplitContainer splitContainer2
  .field private class [System.Windows.Forms]System.Windows.Forms.TextBox txtBestMatch
  .field private class [System.Windows.Forms]System.Windows.Forms.TextBox txtTarget
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblElapsedTime
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label4
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblGenerations
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label2
  .field private class [System.Windows.Forms]System.Windows.Forms.Timer timerElapsedTime
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblGenPerSec
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label5
  .field private class [System.Windows.Forms]System.Windows.Forms.CheckBox chkParallel
  .field private static string _targetText
  .field private class [mscorlib]System.Threading.Tasks.TaskFactory _uiTasks
  .field private int32 _currentIteration
  .field private class [mscorlib]System.Threading.CancellationTokenSource _cancellation
  .field private valuetype [mscorlib]System.DateTimeOffset _startTime
  .field private valuetype [mscorlib]System.DateTimeOffset _lastTime
  .method family hidebysig virtual instance void 
          Dispose(bool disposing) cil managed
  {
    // Code size       43 (0x2b)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_CSharp\MainForm.Designer.cs' 
//000015:         {
    IL_0000:  nop
//000016:             if (disposing && (components != null))
    IL_0001:  ldarg.1
    IL_0002:  brfalse.s  IL_000f

    IL_0004:  ldarg.0
    IL_0005:  ldfld      class [System]System.ComponentModel.IContainer ShakespeareanMonkeys.MainForm::components
    IL_000a:  ldnull
    IL_000b:  ceq
    IL_000d:  br.s       IL_0010

    IL_000f:  ldc.i4.1
    IL_0010:  stloc.0
//000017:             {
//000018:                 components.Dispose();
//000019:             }
//000020:             base.Dispose(disposing);
//000021:         }
//000022: 
//000023:         #region Windows Form Designer generated code
//000024: 
//000025:         /// <summary>
//000026:         /// Required method for Designer support - do not modify
//000027:         /// the contents of this method with the code editor.
//000028:         /// </summary>
//000029:         private void InitializeComponent()
//000030:         {
//000031:             this.splitContainer1 = new System.Windows.Forms.SplitContainer();
//000032:             this.lblGenPerSec = new System.Windows.Forms.Label();
//000033:             this.label5 = new System.Windows.Forms.Label();
//000034:             this.lblElapsedTime = new System.Windows.Forms.Label();
//000035:             this.label4 = new System.Windows.Forms.Label();
//000036:             this.lblGenerations = new System.Windows.Forms.Label();
//000037:             this.label2 = new System.Windows.Forms.Label();
//000038:             this.splitContainer2 = new System.Windows.Forms.SplitContainer();
//000039:             this.txtBestMatch = new System.Windows.Forms.TextBox();
//000040:             this.txtTarget = new System.Windows.Forms.TextBox();
//000041:             this.btnRun = new System.Windows.Forms.Button();
//000042:             this.txtMonkeysPerGeneration = new System.Windows.Forms.TextBox();
//000043:             this.label1 = new System.Windows.Forms.Label();
//000044:             this.timerElapsedTime = new System.Windows.Forms.Timer();
//000045:             this.chkParallel = new System.Windows.Forms.CheckBox();
//000046:             this.pictureBox1 = new System.Windows.Forms.PictureBox();
//000047:             ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).BeginInit();
//000048:             this.splitContainer1.Panel1.SuspendLayout();
//000049:             this.splitContainer1.Panel2.SuspendLayout();
//000050:             this.splitContainer1.SuspendLayout();
//000051:             ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).BeginInit();
//000052:             this.splitContainer2.Panel1.SuspendLayout();
//000053:             this.splitContainer2.Panel2.SuspendLayout();
//000054:             this.splitContainer2.SuspendLayout();
//000055:             ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
//000056:             this.SuspendLayout();
//000057:             // 
//000058:             // splitContainer1
//000059:             // 
//000060:             this.splitContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
//000061:             this.splitContainer1.Location = new System.Drawing.Point(0, 0);
//000062:             this.splitContainer1.Name = "splitContainer1";
//000063:             // 
//000064:             // splitContainer1.Panel1
//000065:             // 
//000066:             this.splitContainer1.Panel1.Controls.Add(this.pictureBox1);
//000067:             // 
//000068:             // splitContainer1.Panel2
//000069:             // 
//000070:             this.splitContainer1.Panel2.Controls.Add(this.chkParallel);
//000071:             this.splitContainer1.Panel2.Controls.Add(this.lblGenPerSec);
//000072:             this.splitContainer1.Panel2.Controls.Add(this.label5);
//000073:             this.splitContainer1.Panel2.Controls.Add(this.lblElapsedTime);
//000074:             this.splitContainer1.Panel2.Controls.Add(this.label4);
//000075:             this.splitContainer1.Panel2.Controls.Add(this.lblGenerations);
//000076:             this.splitContainer1.Panel2.Controls.Add(this.label2);
//000077:             this.splitContainer1.Panel2.Controls.Add(this.splitContainer2);
//000078:             this.splitContainer1.Panel2.Controls.Add(this.btnRun);
//000079:             this.splitContainer1.Panel2.Controls.Add(this.txtMonkeysPerGeneration);
//000080:             this.splitContainer1.Panel2.Controls.Add(this.label1);
//000081:             this.splitContainer1.Size = new System.Drawing.Size(973, 389);
//000082:             this.splitContainer1.SplitterDistance = 301;
//000083:             this.splitContainer1.TabIndex = 1;
//000084:             // 
//000085:             // lblGenPerSec
//000086:             // 
//000087:             this.lblGenPerSec.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
//000088:             this.lblGenPerSec.AutoSize = true;
//000089:             this.lblGenPerSec.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000090:             this.lblGenPerSec.Location = new System.Drawing.Point(601, 48);
//000091:             this.lblGenPerSec.Name = "lblGenPerSec";
//000092:             this.lblGenPerSec.Size = new System.Drawing.Size(13, 17);
//000093:             this.lblGenPerSec.TabIndex = 9;
//000094:             this.lblGenPerSec.Text = "-";
//000095:             // 
//000096:             // label5
//000097:             // 
//000098:             this.label5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
//000099:             this.label5.AutoSize = true;
//000100:             this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000101:             this.label5.Location = new System.Drawing.Point(454, 48);
//000102:             this.label5.Name = "label5";
//000103:             this.label5.Size = new System.Drawing.Size(144, 17);
//000104:             this.label5.TabIndex = 8;
//000105:             this.label5.Text = "Generations / Sec:";
//000106:             // 
//000107:             // lblElapsedTime
//000108:             // 
//000109:             this.lblElapsedTime.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
//000110:             this.lblElapsedTime.AutoSize = true;
//000111:             this.lblElapsedTime.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000112:             this.lblElapsedTime.Location = new System.Drawing.Point(601, 9);
//000113:             this.lblElapsedTime.Name = "lblElapsedTime";
//000114:             this.lblElapsedTime.Size = new System.Drawing.Size(13, 17);
//000115:             this.lblElapsedTime.TabIndex = 7;
//000116:             this.lblElapsedTime.Text = "-";
//000117:             // 
//000118:             // label4
//000119:             // 
//000120:             this.label4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
//000121:             this.label4.AutoSize = true;
//000122:             this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000123:             this.label4.Location = new System.Drawing.Point(454, 9);
//000124:             this.label4.Name = "label4";
//000125:             this.label4.Size = new System.Drawing.Size(48, 17);
//000126:             this.label4.TabIndex = 6;
//000127:             this.label4.Text = "Time:";
//000128:             // 
//000129:             // lblGenerations
//000130:             // 
//000131:             this.lblGenerations.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
//000132:             this.lblGenerations.AutoSize = true;
//000133:             this.lblGenerations.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000134:             this.lblGenerations.Location = new System.Drawing.Point(601, 29);
//000135:             this.lblGenerations.Name = "lblGenerations";
//000136:             this.lblGenerations.Size = new System.Drawing.Size(13, 17);
//000137:             this.lblGenerations.TabIndex = 5;
//000138:             this.lblGenerations.Text = "-";
//000139:             // 
//000140:             // label2
//000141:             // 
//000142:             this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
//000143:             this.label2.AutoSize = true;
//000144:             this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000145:             this.label2.Location = new System.Drawing.Point(454, 29);
//000146:             this.label2.Name = "label2";
//000147:             this.label2.Size = new System.Drawing.Size(102, 17);
//000148:             this.label2.TabIndex = 4;
//000149:             this.label2.Text = "Generations:";
//000150:             // 
//000151:             // splitContainer2
//000152:             // 
//000153:             this.splitContainer2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
//000154:                         | System.Windows.Forms.AnchorStyles.Left)
//000155:                         | System.Windows.Forms.AnchorStyles.Right)));
//000156:             this.splitContainer2.Location = new System.Drawing.Point(2, 68);
//000157:             this.splitContainer2.Name = "splitContainer2";
//000158:             // 
//000159:             // splitContainer2.Panel1
//000160:             // 
//000161:             this.splitContainer2.Panel1.Controls.Add(this.txtBestMatch);
//000162:             // 
//000163:             // splitContainer2.Panel2
//000164:             // 
//000165:             this.splitContainer2.Panel2.Controls.Add(this.txtTarget);
//000166:             this.splitContainer2.Size = new System.Drawing.Size(666, 321);
//000167:             this.splitContainer2.SplitterDistance = 325;
//000168:             this.splitContainer2.TabIndex = 3;
//000169:             // 
//000170:             // txtBestMatch
//000171:             // 
//000172:             this.txtBestMatch.Dock = System.Windows.Forms.DockStyle.Fill;
//000173:             this.txtBestMatch.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000174:             this.txtBestMatch.Location = new System.Drawing.Point(0, 0);
//000175:             this.txtBestMatch.Multiline = true;
//000176:             this.txtBestMatch.Name = "txtBestMatch";
//000177:             this.txtBestMatch.Size = new System.Drawing.Size(325, 321);
//000178:             this.txtBestMatch.TabIndex = 3;
//000179:             // 
//000180:             // txtTarget
//000181:             // 
//000182:             this.txtTarget.Dock = System.Windows.Forms.DockStyle.Fill;
//000183:             this.txtTarget.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000184:             this.txtTarget.Location = new System.Drawing.Point(0, 0);
//000185:             this.txtTarget.Multiline = true;
//000186:             this.txtTarget.Name = "txtTarget";
//000187:             this.txtTarget.Size = new System.Drawing.Size(337, 321);
//000188:             this.txtTarget.TabIndex = 0;
//000189:             // 
//000190:             // btnRun
//000191:             // 
//000192:             this.btnRun.Font = new System.Drawing.Font("Microsoft Sans Serif", 11F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000193:             this.btnRun.Location = new System.Drawing.Point(17, 39);
//000194:             this.btnRun.Name = "btnRun";
//000195:             this.btnRun.Size = new System.Drawing.Size(83, 26);
//000196:             this.btnRun.TabIndex = 2;
//000197:             this.btnRun.Text = "Start";
//000198:             this.btnRun.UseVisualStyleBackColor = true;
//000199:             this.btnRun.Click += new System.EventHandler(this.btnRun_Click);
//000200:             // 
//000201:             // txtMonkeysPerGeneration
//000202:             // 
//000203:             this.txtMonkeysPerGeneration.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000204:             this.txtMonkeysPerGeneration.Location = new System.Drawing.Point(225, 12);
//000205:             this.txtMonkeysPerGeneration.Name = "txtMonkeysPerGeneration";
//000206:             this.txtMonkeysPerGeneration.Size = new System.Drawing.Size(50, 26);
//000207:             this.txtMonkeysPerGeneration.TabIndex = 1;
//000208:             this.txtMonkeysPerGeneration.Text = "2000";
//000209:             // 
//000210:             // label1
//000211:             // 
//000212:             this.label1.AutoSize = true;
//000213:             this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000214:             this.label1.Location = new System.Drawing.Point(13, 13);
//000215:             this.label1.Name = "label1";
//000216:             this.label1.Size = new System.Drawing.Size(206, 20);
//000217:             this.label1.TabIndex = 0;
//000218:             this.label1.Text = "Monkeys Per Generation";
//000219:             // 
//000220:             // timerElapsedTime
//000221:             // 
//000222:             this.timerElapsedTime.Interval = 1000;
//000223:             this.timerElapsedTime.Tick += new System.EventHandler(this.timerElapsedTime_Tick);
//000224:             // 
//000225:             // chkParallel
//000226:             // 
//000227:             this.chkParallel.AutoSize = true;
//000228:             this.chkParallel.Location = new System.Drawing.Point(106, 45);
//000229:             this.chkParallel.Name = "chkParallel";
//000230:             this.chkParallel.Size = new System.Drawing.Size(60, 17);
//000231:             this.chkParallel.TabIndex = 10;
//000232:             this.chkParallel.Text = "Parallel";
//000233:             this.chkParallel.UseVisualStyleBackColor = true;
//000234:             // 
//000235:             // pictureBox1
//000236:             // 
//000237:             this.pictureBox1.BackColor = System.Drawing.Color.Transparent;
//000238:             this.pictureBox1.Dock = System.Windows.Forms.DockStyle.Fill;
//000239:             this.pictureBox1.Image = global::ShakespeareanMonkeys.Properties.Resources.HamletMonkey;
//000240:             this.pictureBox1.Location = new System.Drawing.Point(0, 0);
//000241:             this.pictureBox1.Name = "pictureBox1";
//000242:             this.pictureBox1.Size = new System.Drawing.Size(301, 389);
//000243:             this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
//000244:             this.pictureBox1.TabIndex = 0;
//000245:             this.pictureBox1.TabStop = false;
//000246:             // 
//000247:             // MainForm
//000248:             // 
//000249:             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
//000250:             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
//000251:             this.BackColor = System.Drawing.Color.White;
//000252:             this.ClientSize = new System.Drawing.Size(973, 389);
//000253:             this.Controls.Add(this.splitContainer1);
//000254:             this.Name = "MainForm";
//000255:             this.Text = "Shakespearean Monkeys";
//000256:             this.splitContainer1.Panel1.ResumeLayout(false);
//000257:             this.splitContainer1.Panel2.ResumeLayout(false);
//000258:             this.splitContainer1.Panel2.PerformLayout();
//000259:             ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).EndInit();
//000260:             this.splitContainer1.ResumeLayout(false);
//000261:             this.splitContainer2.Panel1.ResumeLayout(false);
//000262:             this.splitContainer2.Panel1.PerformLayout();
//000263:             this.splitContainer2.Panel2.ResumeLayout(false);
//000264:             this.splitContainer2.Panel2.PerformLayout();
//000265:             ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).EndInit();
//000266:             this.splitContainer2.ResumeLayout(false);
//000267:             ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
//000268:             this.ResumeLayout(false);
//000269: 
//000270:         }
//000271: 
//000272:         #endregion
//000273: 
//000274:         private System.Windows.Forms.PictureBox pictureBox1;
//000275:         private System.Windows.Forms.SplitContainer splitContainer1;
//000276:         private System.Windows.Forms.Label label1;
//000277:         private System.Windows.Forms.TextBox txtMonkeysPerGeneration;
//000278:         private System.Windows.Forms.Button btnRun;
//000279:         private System.Windows.Forms.SplitContainer splitContainer2;
//000280:         private System.Windows.Forms.TextBox txtBestMatch;
//000281:         private System.Windows.Forms.TextBox txtTarget;
//000282:         private System.Windows.Forms.Label lblElapsedTime;
//000283:         private System.Windows.Forms.Label label4;
//000284:         private System.Windows.Forms.Label lblGenerations;
//000285:         private System.Windows.Forms.Label label2;
//000286:         private System.Windows.Forms.Timer timerElapsedTime;
//000287:         private System.Windows.Forms.Label lblGenPerSec;
//000288:         private System.Windows.Forms.Label label5;
//000289:         private System.Windows.Forms.CheckBox chkParallel;
//000290:     }
//000291: }
//000292: 
    IL_0011:  ldloc.0
    IL_0012:  brtrue.s   IL_0022

//000017:             {
    IL_0014:  nop
//000018:                 components.Dispose();
    IL_0015:  ldarg.0
    IL_0016:  ldfld      class [System]System.ComponentModel.IContainer ShakespeareanMonkeys.MainForm::components
    IL_001b:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
    IL_0020:  nop
//000019:             }
    IL_0021:  nop
//000020:             base.Dispose(disposing);
    IL_0022:  ldarg.0
    IL_0023:  ldarg.1
    IL_0024:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::Dispose(bool)
    IL_0029:  nop
//000021:         }
    IL_002a:  ret
  } // end of method MainForm::Dispose

  .method private hidebysig instance void 
          InitializeComponent() cil managed
  {
    // Code size       3099 (0xc1b)
    .maxstack  7
//000022: 
//000023:         #region Windows Form Designer generated code
//000024: 
//000025:         /// <summary>
//000026:         /// Required method for Designer support - do not modify
//000027:         /// the contents of this method with the code editor.
//000028:         /// </summary>
//000029:         private void InitializeComponent()
//000030:         {
    IL_0000:  nop
//000031:             this.splitContainer1 = new System.Windows.Forms.SplitContainer();
    IL_0001:  ldarg.0
    IL_0002:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::.ctor()
    IL_0007:  stfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
//000032:             this.lblGenPerSec = new System.Windows.Forms.Label();
    IL_000c:  ldarg.0
    IL_000d:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0012:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
//000033:             this.label5 = new System.Windows.Forms.Label();
    IL_0017:  ldarg.0
    IL_0018:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_001d:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
//000034:             this.lblElapsedTime = new System.Windows.Forms.Label();
    IL_0022:  ldarg.0
    IL_0023:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0028:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
//000035:             this.label4 = new System.Windows.Forms.Label();
    IL_002d:  ldarg.0
    IL_002e:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0033:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
//000036:             this.lblGenerations = new System.Windows.Forms.Label();
    IL_0038:  ldarg.0
    IL_0039:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_003e:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
//000037:             this.label2 = new System.Windows.Forms.Label();
    IL_0043:  ldarg.0
    IL_0044:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0049:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
//000038:             this.splitContainer2 = new System.Windows.Forms.SplitContainer();
    IL_004e:  ldarg.0
    IL_004f:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::.ctor()
    IL_0054:  stfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
//000039:             this.txtBestMatch = new System.Windows.Forms.TextBox();
    IL_0059:  ldarg.0
    IL_005a:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TextBox::.ctor()
    IL_005f:  stfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
//000040:             this.txtTarget = new System.Windows.Forms.TextBox();
    IL_0064:  ldarg.0
    IL_0065:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TextBox::.ctor()
    IL_006a:  stfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
//000041:             this.btnRun = new System.Windows.Forms.Button();
    IL_006f:  ldarg.0
    IL_0070:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Button::.ctor()
    IL_0075:  stfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
//000042:             this.txtMonkeysPerGeneration = new System.Windows.Forms.TextBox();
    IL_007a:  ldarg.0
    IL_007b:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TextBox::.ctor()
    IL_0080:  stfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
//000043:             this.label1 = new System.Windows.Forms.Label();
    IL_0085:  ldarg.0
    IL_0086:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_008b:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
//000044:             this.timerElapsedTime = new System.Windows.Forms.Timer();
    IL_0090:  ldarg.0
    IL_0091:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Timer::.ctor()
    IL_0096:  stfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::timerElapsedTime
//000045:             this.chkParallel = new System.Windows.Forms.CheckBox();
    IL_009b:  ldarg.0
    IL_009c:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::.ctor()
    IL_00a1:  stfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
//000046:             this.pictureBox1 = new System.Windows.Forms.PictureBox();
    IL_00a6:  ldarg.0
    IL_00a7:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::.ctor()
    IL_00ac:  stfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
//000047:             ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).BeginInit();
    IL_00b1:  ldarg.0
    IL_00b2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_00b7:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00bc:  nop
//000048:             this.splitContainer1.Panel1.SuspendLayout();
    IL_00bd:  ldarg.0
    IL_00be:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_00c3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_00c8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00cd:  nop
//000049:             this.splitContainer1.Panel2.SuspendLayout();
    IL_00ce:  ldarg.0
    IL_00cf:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_00d4:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_00d9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00de:  nop
//000050:             this.splitContainer1.SuspendLayout();
    IL_00df:  ldarg.0
    IL_00e0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_00e5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00ea:  nop
//000051:             ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).BeginInit();
    IL_00eb:  ldarg.0
    IL_00ec:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_00f1:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00f6:  nop
//000052:             this.splitContainer2.Panel1.SuspendLayout();
    IL_00f7:  ldarg.0
    IL_00f8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_00fd:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0102:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0107:  nop
//000053:             this.splitContainer2.Panel2.SuspendLayout();
    IL_0108:  ldarg.0
    IL_0109:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_010e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0113:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0118:  nop
//000054:             this.splitContainer2.SuspendLayout();
    IL_0119:  ldarg.0
    IL_011a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_011f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0124:  nop
//000055:             ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
    IL_0125:  ldarg.0
    IL_0126:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_012b:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_0130:  nop
//000056:             this.SuspendLayout();
    IL_0131:  ldarg.0
    IL_0132:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0137:  nop
//000057:             // 
//000058:             // splitContainer1
//000059:             // 
//000060:             this.splitContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
    IL_0138:  ldarg.0
    IL_0139:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_013e:  ldc.i4.5
    IL_013f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_0144:  nop
//000061:             this.splitContainer1.Location = new System.Drawing.Point(0, 0);
    IL_0145:  ldarg.0
    IL_0146:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_014b:  ldc.i4.0
    IL_014c:  ldc.i4.0
    IL_014d:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0152:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0157:  nop
//000062:             this.splitContainer1.Name = "splitContainer1";
    IL_0158:  ldarg.0
    IL_0159:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_015e:  ldstr      "splitContainer1"
    IL_0163:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0168:  nop
//000063:             // 
//000064:             // splitContainer1.Panel1
//000065:             // 
//000066:             this.splitContainer1.Panel1.Controls.Add(this.pictureBox1);
    IL_0169:  ldarg.0
    IL_016a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_016f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0174:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0179:  ldarg.0
    IL_017a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_017f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0184:  nop
//000067:             // 
//000068:             // splitContainer1.Panel2
//000069:             // 
//000070:             this.splitContainer1.Panel2.Controls.Add(this.chkParallel);
    IL_0185:  ldarg.0
    IL_0186:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_018b:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0190:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0195:  ldarg.0
    IL_0196:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_019b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_01a0:  nop
//000071:             this.splitContainer1.Panel2.Controls.Add(this.lblGenPerSec);
    IL_01a1:  ldarg.0
    IL_01a2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_01a7:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_01ac:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_01b1:  ldarg.0
    IL_01b2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_01b7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_01bc:  nop
//000072:             this.splitContainer1.Panel2.Controls.Add(this.label5);
    IL_01bd:  ldarg.0
    IL_01be:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_01c3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_01c8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_01cd:  ldarg.0
    IL_01ce:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_01d3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_01d8:  nop
//000073:             this.splitContainer1.Panel2.Controls.Add(this.lblElapsedTime);
    IL_01d9:  ldarg.0
    IL_01da:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_01df:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_01e4:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_01e9:  ldarg.0
    IL_01ea:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_01ef:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_01f4:  nop
//000074:             this.splitContainer1.Panel2.Controls.Add(this.label4);
    IL_01f5:  ldarg.0
    IL_01f6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_01fb:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0200:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0205:  ldarg.0
    IL_0206:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_020b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0210:  nop
//000075:             this.splitContainer1.Panel2.Controls.Add(this.lblGenerations);
    IL_0211:  ldarg.0
    IL_0212:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0217:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_021c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0221:  ldarg.0
    IL_0222:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0227:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_022c:  nop
//000076:             this.splitContainer1.Panel2.Controls.Add(this.label2);
    IL_022d:  ldarg.0
    IL_022e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0233:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0238:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_023d:  ldarg.0
    IL_023e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0243:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0248:  nop
//000077:             this.splitContainer1.Panel2.Controls.Add(this.splitContainer2);
    IL_0249:  ldarg.0
    IL_024a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_024f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0254:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0259:  ldarg.0
    IL_025a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_025f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0264:  nop
//000078:             this.splitContainer1.Panel2.Controls.Add(this.btnRun);
    IL_0265:  ldarg.0
    IL_0266:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_026b:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0270:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0275:  ldarg.0
    IL_0276:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_027b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0280:  nop
//000079:             this.splitContainer1.Panel2.Controls.Add(this.txtMonkeysPerGeneration);
    IL_0281:  ldarg.0
    IL_0282:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0287:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_028c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0291:  ldarg.0
    IL_0292:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_0297:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_029c:  nop
//000080:             this.splitContainer1.Panel2.Controls.Add(this.label1);
    IL_029d:  ldarg.0
    IL_029e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_02a3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_02a8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_02ad:  ldarg.0
    IL_02ae:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_02b3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_02b8:  nop
//000081:             this.splitContainer1.Size = new System.Drawing.Size(973, 389);
    IL_02b9:  ldarg.0
    IL_02ba:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_02bf:  ldc.i4     0x3cd
    IL_02c4:  ldc.i4     0x185
    IL_02c9:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_02ce:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_02d3:  nop
//000082:             this.splitContainer1.SplitterDistance = 301;
    IL_02d4:  ldarg.0
    IL_02d5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_02da:  ldc.i4     0x12d
    IL_02df:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_SplitterDistance(int32)
    IL_02e4:  nop
//000083:             this.splitContainer1.TabIndex = 1;
    IL_02e5:  ldarg.0
    IL_02e6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_02eb:  ldc.i4.1
    IL_02ec:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_02f1:  nop
//000084:             // 
//000085:             // lblGenPerSec
//000086:             // 
//000087:             this.lblGenPerSec.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
    IL_02f2:  ldarg.0
    IL_02f3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_02f8:  ldc.i4.s   9
    IL_02fa:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_02ff:  nop
//000088:             this.lblGenPerSec.AutoSize = true;
    IL_0300:  ldarg.0
    IL_0301:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0306:  ldc.i4.1
    IL_0307:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_030c:  nop
//000089:             this.lblGenPerSec.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_030d:  ldarg.0
    IL_030e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0313:  ldstr      "Microsoft Sans Serif"
    IL_0318:  ldc.r4     10.
    IL_031d:  ldc.i4.0
    IL_031e:  ldc.i4.3
    IL_031f:  ldc.i4.0
    IL_0320:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_0325:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_032a:  nop
//000090:             this.lblGenPerSec.Location = new System.Drawing.Point(601, 48);
    IL_032b:  ldarg.0
    IL_032c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0331:  ldc.i4     0x259
    IL_0336:  ldc.i4.s   48
    IL_0338:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_033d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0342:  nop
//000091:             this.lblGenPerSec.Name = "lblGenPerSec";
    IL_0343:  ldarg.0
    IL_0344:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0349:  ldstr      "lblGenPerSec"
    IL_034e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0353:  nop
//000092:             this.lblGenPerSec.Size = new System.Drawing.Size(13, 17);
    IL_0354:  ldarg.0
    IL_0355:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_035a:  ldc.i4.s   13
    IL_035c:  ldc.i4.s   17
    IL_035e:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0363:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0368:  nop
//000093:             this.lblGenPerSec.TabIndex = 9;
    IL_0369:  ldarg.0
    IL_036a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_036f:  ldc.i4.s   9
    IL_0371:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0376:  nop
//000094:             this.lblGenPerSec.Text = "-";
    IL_0377:  ldarg.0
    IL_0378:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_037d:  ldstr      "-"
    IL_0382:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0387:  nop
//000095:             // 
//000096:             // label5
//000097:             // 
//000098:             this.label5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
    IL_0388:  ldarg.0
    IL_0389:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_038e:  ldc.i4.s   9
    IL_0390:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0395:  nop
//000099:             this.label5.AutoSize = true;
    IL_0396:  ldarg.0
    IL_0397:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_039c:  ldc.i4.1
    IL_039d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_03a2:  nop
//000100:             this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_03a3:  ldarg.0
    IL_03a4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03a9:  ldstr      "Microsoft Sans Serif"
    IL_03ae:  ldc.r4     10.
    IL_03b3:  ldc.i4.1
    IL_03b4:  ldc.i4.3
    IL_03b5:  ldc.i4.0
    IL_03b6:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_03bb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_03c0:  nop
//000101:             this.label5.Location = new System.Drawing.Point(454, 48);
    IL_03c1:  ldarg.0
    IL_03c2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03c7:  ldc.i4     0x1c6
    IL_03cc:  ldc.i4.s   48
    IL_03ce:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_03d3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_03d8:  nop
//000102:             this.label5.Name = "label5";
    IL_03d9:  ldarg.0
    IL_03da:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03df:  ldstr      "label5"
    IL_03e4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_03e9:  nop
//000103:             this.label5.Size = new System.Drawing.Size(144, 17);
    IL_03ea:  ldarg.0
    IL_03eb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_03f0:  ldc.i4     0x90
    IL_03f5:  ldc.i4.s   17
    IL_03f7:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_03fc:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0401:  nop
//000104:             this.label5.TabIndex = 8;
    IL_0402:  ldarg.0
    IL_0403:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_0408:  ldc.i4.8
    IL_0409:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_040e:  nop
//000105:             this.label5.Text = "Generations / Sec:";
    IL_040f:  ldarg.0
    IL_0410:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label5
    IL_0415:  ldstr      "Generations / Sec:"
    IL_041a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_041f:  nop
//000106:             // 
//000107:             // lblElapsedTime
//000108:             // 
//000109:             this.lblElapsedTime.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
    IL_0420:  ldarg.0
    IL_0421:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0426:  ldc.i4.s   9
    IL_0428:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_042d:  nop
//000110:             this.lblElapsedTime.AutoSize = true;
    IL_042e:  ldarg.0
    IL_042f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0434:  ldc.i4.1
    IL_0435:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_043a:  nop
//000111:             this.lblElapsedTime.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_043b:  ldarg.0
    IL_043c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0441:  ldstr      "Microsoft Sans Serif"
    IL_0446:  ldc.r4     10.
    IL_044b:  ldc.i4.0
    IL_044c:  ldc.i4.3
    IL_044d:  ldc.i4.0
    IL_044e:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_0453:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0458:  nop
//000112:             this.lblElapsedTime.Location = new System.Drawing.Point(601, 9);
    IL_0459:  ldarg.0
    IL_045a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_045f:  ldc.i4     0x259
    IL_0464:  ldc.i4.s   9
    IL_0466:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_046b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0470:  nop
//000113:             this.lblElapsedTime.Name = "lblElapsedTime";
    IL_0471:  ldarg.0
    IL_0472:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0477:  ldstr      "lblElapsedTime"
    IL_047c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0481:  nop
//000114:             this.lblElapsedTime.Size = new System.Drawing.Size(13, 17);
    IL_0482:  ldarg.0
    IL_0483:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0488:  ldc.i4.s   13
    IL_048a:  ldc.i4.s   17
    IL_048c:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0491:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0496:  nop
//000115:             this.lblElapsedTime.TabIndex = 7;
    IL_0497:  ldarg.0
    IL_0498:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_049d:  ldc.i4.7
    IL_049e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_04a3:  nop
//000116:             this.lblElapsedTime.Text = "-";
    IL_04a4:  ldarg.0
    IL_04a5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_04aa:  ldstr      "-"
    IL_04af:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_04b4:  nop
//000117:             // 
//000118:             // label4
//000119:             // 
//000120:             this.label4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
    IL_04b5:  ldarg.0
    IL_04b6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_04bb:  ldc.i4.s   9
    IL_04bd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_04c2:  nop
//000121:             this.label4.AutoSize = true;
    IL_04c3:  ldarg.0
    IL_04c4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_04c9:  ldc.i4.1
    IL_04ca:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_04cf:  nop
//000122:             this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_04d0:  ldarg.0
    IL_04d1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_04d6:  ldstr      "Microsoft Sans Serif"
    IL_04db:  ldc.r4     10.
    IL_04e0:  ldc.i4.1
    IL_04e1:  ldc.i4.3
    IL_04e2:  ldc.i4.0
    IL_04e3:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_04e8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_04ed:  nop
//000123:             this.label4.Location = new System.Drawing.Point(454, 9);
    IL_04ee:  ldarg.0
    IL_04ef:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_04f4:  ldc.i4     0x1c6
    IL_04f9:  ldc.i4.s   9
    IL_04fb:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0500:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0505:  nop
//000124:             this.label4.Name = "label4";
    IL_0506:  ldarg.0
    IL_0507:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_050c:  ldstr      "label4"
    IL_0511:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0516:  nop
//000125:             this.label4.Size = new System.Drawing.Size(48, 17);
    IL_0517:  ldarg.0
    IL_0518:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_051d:  ldc.i4.s   48
    IL_051f:  ldc.i4.s   17
    IL_0521:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0526:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_052b:  nop
//000126:             this.label4.TabIndex = 6;
    IL_052c:  ldarg.0
    IL_052d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_0532:  ldc.i4.6
    IL_0533:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0538:  nop
//000127:             this.label4.Text = "Time:";
    IL_0539:  ldarg.0
    IL_053a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label4
    IL_053f:  ldstr      "Time:"
    IL_0544:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0549:  nop
//000128:             // 
//000129:             // lblGenerations
//000130:             // 
//000131:             this.lblGenerations.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
    IL_054a:  ldarg.0
    IL_054b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0550:  ldc.i4.s   9
    IL_0552:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0557:  nop
//000132:             this.lblGenerations.AutoSize = true;
    IL_0558:  ldarg.0
    IL_0559:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_055e:  ldc.i4.1
    IL_055f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_0564:  nop
//000133:             this.lblGenerations.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_0565:  ldarg.0
    IL_0566:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_056b:  ldstr      "Microsoft Sans Serif"
    IL_0570:  ldc.r4     10.
    IL_0575:  ldc.i4.0
    IL_0576:  ldc.i4.3
    IL_0577:  ldc.i4.0
    IL_0578:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_057d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0582:  nop
//000134:             this.lblGenerations.Location = new System.Drawing.Point(601, 29);
    IL_0583:  ldarg.0
    IL_0584:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0589:  ldc.i4     0x259
    IL_058e:  ldc.i4.s   29
    IL_0590:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0595:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_059a:  nop
//000135:             this.lblGenerations.Name = "lblGenerations";
    IL_059b:  ldarg.0
    IL_059c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_05a1:  ldstr      "lblGenerations"
    IL_05a6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_05ab:  nop
//000136:             this.lblGenerations.Size = new System.Drawing.Size(13, 17);
    IL_05ac:  ldarg.0
    IL_05ad:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_05b2:  ldc.i4.s   13
    IL_05b4:  ldc.i4.s   17
    IL_05b6:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_05bb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_05c0:  nop
//000137:             this.lblGenerations.TabIndex = 5;
    IL_05c1:  ldarg.0
    IL_05c2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_05c7:  ldc.i4.5
    IL_05c8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_05cd:  nop
//000138:             this.lblGenerations.Text = "-";
    IL_05ce:  ldarg.0
    IL_05cf:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_05d4:  ldstr      "-"
    IL_05d9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_05de:  nop
//000139:             // 
//000140:             // label2
//000141:             // 
//000142:             this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
    IL_05df:  ldarg.0
    IL_05e0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_05e5:  ldc.i4.s   9
    IL_05e7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_05ec:  nop
//000143:             this.label2.AutoSize = true;
    IL_05ed:  ldarg.0
    IL_05ee:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_05f3:  ldc.i4.1
    IL_05f4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_05f9:  nop
//000144:             this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_05fa:  ldarg.0
    IL_05fb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0600:  ldstr      "Microsoft Sans Serif"
    IL_0605:  ldc.r4     10.
    IL_060a:  ldc.i4.1
    IL_060b:  ldc.i4.3
    IL_060c:  ldc.i4.0
    IL_060d:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_0612:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0617:  nop
//000145:             this.label2.Location = new System.Drawing.Point(454, 29);
    IL_0618:  ldarg.0
    IL_0619:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_061e:  ldc.i4     0x1c6
    IL_0623:  ldc.i4.s   29
    IL_0625:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_062a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_062f:  nop
//000146:             this.label2.Name = "label2";
    IL_0630:  ldarg.0
    IL_0631:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0636:  ldstr      "label2"
    IL_063b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0640:  nop
//000147:             this.label2.Size = new System.Drawing.Size(102, 17);
    IL_0641:  ldarg.0
    IL_0642:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0647:  ldc.i4.s   102
    IL_0649:  ldc.i4.s   17
    IL_064b:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0650:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0655:  nop
//000148:             this.label2.TabIndex = 4;
    IL_0656:  ldarg.0
    IL_0657:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_065c:  ldc.i4.4
    IL_065d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0662:  nop
//000149:             this.label2.Text = "Generations:";
    IL_0663:  ldarg.0
    IL_0664:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label2
    IL_0669:  ldstr      "Generations:"
    IL_066e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0673:  nop
//000150:             // 
//000151:             // splitContainer2
//000152:             // 
//000153:             this.splitContainer2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
    IL_0674:  ldarg.0
    IL_0675:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_067a:  ldc.i4.s   15
    IL_067c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0681:  nop
//000154:                         | System.Windows.Forms.AnchorStyles.Left)
//000155:                         | System.Windows.Forms.AnchorStyles.Right)));
//000156:             this.splitContainer2.Location = new System.Drawing.Point(2, 68);
    IL_0682:  ldarg.0
    IL_0683:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0688:  ldc.i4.2
    IL_0689:  ldc.i4.s   68
    IL_068b:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0690:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0695:  nop
//000157:             this.splitContainer2.Name = "splitContainer2";
    IL_0696:  ldarg.0
    IL_0697:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_069c:  ldstr      "splitContainer2"
    IL_06a1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_06a6:  nop
//000158:             // 
//000159:             // splitContainer2.Panel1
//000160:             // 
//000161:             this.splitContainer2.Panel1.Controls.Add(this.txtBestMatch);
    IL_06a7:  ldarg.0
    IL_06a8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_06ad:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_06b2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_06b7:  ldarg.0
    IL_06b8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_06bd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_06c2:  nop
//000162:             // 
//000163:             // splitContainer2.Panel2
//000164:             // 
//000165:             this.splitContainer2.Panel2.Controls.Add(this.txtTarget);
    IL_06c3:  ldarg.0
    IL_06c4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_06c9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_06ce:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_06d3:  ldarg.0
    IL_06d4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_06d9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_06de:  nop
//000166:             this.splitContainer2.Size = new System.Drawing.Size(666, 321);
    IL_06df:  ldarg.0
    IL_06e0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_06e5:  ldc.i4     0x29a
    IL_06ea:  ldc.i4     0x141
    IL_06ef:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_06f4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_06f9:  nop
//000167:             this.splitContainer2.SplitterDistance = 325;
    IL_06fa:  ldarg.0
    IL_06fb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0700:  ldc.i4     0x145
    IL_0705:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_SplitterDistance(int32)
    IL_070a:  nop
//000168:             this.splitContainer2.TabIndex = 3;
    IL_070b:  ldarg.0
    IL_070c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0711:  ldc.i4.3
    IL_0712:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0717:  nop
//000169:             // 
//000170:             // txtBestMatch
//000171:             // 
//000172:             this.txtBestMatch.Dock = System.Windows.Forms.DockStyle.Fill;
    IL_0718:  ldarg.0
    IL_0719:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_071e:  ldc.i4.5
    IL_071f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_0724:  nop
//000173:             this.txtBestMatch.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_0725:  ldarg.0
    IL_0726:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_072b:  ldstr      "Microsoft Sans Serif"
    IL_0730:  ldc.r4     12.
    IL_0735:  ldc.i4.0
    IL_0736:  ldc.i4.3
    IL_0737:  ldc.i4.0
    IL_0738:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_073d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0742:  nop
//000174:             this.txtBestMatch.Location = new System.Drawing.Point(0, 0);
    IL_0743:  ldarg.0
    IL_0744:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_0749:  ldc.i4.0
    IL_074a:  ldc.i4.0
    IL_074b:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0750:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0755:  nop
//000175:             this.txtBestMatch.Multiline = true;
    IL_0756:  ldarg.0
    IL_0757:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_075c:  ldc.i4.1
    IL_075d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBoxBase::set_Multiline(bool)
    IL_0762:  nop
//000176:             this.txtBestMatch.Name = "txtBestMatch";
    IL_0763:  ldarg.0
    IL_0764:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_0769:  ldstr      "txtBestMatch"
    IL_076e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0773:  nop
//000177:             this.txtBestMatch.Size = new System.Drawing.Size(325, 321);
    IL_0774:  ldarg.0
    IL_0775:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_077a:  ldc.i4     0x145
    IL_077f:  ldc.i4     0x141
    IL_0784:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0789:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_078e:  nop
//000178:             this.txtBestMatch.TabIndex = 3;
    IL_078f:  ldarg.0
    IL_0790:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_0795:  ldc.i4.3
    IL_0796:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_079b:  nop
//000179:             // 
//000180:             // txtTarget
//000181:             // 
//000182:             this.txtTarget.Dock = System.Windows.Forms.DockStyle.Fill;
    IL_079c:  ldarg.0
    IL_079d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_07a2:  ldc.i4.5
    IL_07a3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_07a8:  nop
//000183:             this.txtTarget.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_07a9:  ldarg.0
    IL_07aa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_07af:  ldstr      "Microsoft Sans Serif"
    IL_07b4:  ldc.r4     12.
    IL_07b9:  ldc.i4.0
    IL_07ba:  ldc.i4.3
    IL_07bb:  ldc.i4.0
    IL_07bc:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_07c1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_07c6:  nop
//000184:             this.txtTarget.Location = new System.Drawing.Point(0, 0);
    IL_07c7:  ldarg.0
    IL_07c8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_07cd:  ldc.i4.0
    IL_07ce:  ldc.i4.0
    IL_07cf:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_07d4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_07d9:  nop
//000185:             this.txtTarget.Multiline = true;
    IL_07da:  ldarg.0
    IL_07db:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_07e0:  ldc.i4.1
    IL_07e1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TextBoxBase::set_Multiline(bool)
    IL_07e6:  nop
//000186:             this.txtTarget.Name = "txtTarget";
    IL_07e7:  ldarg.0
    IL_07e8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_07ed:  ldstr      "txtTarget"
    IL_07f2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_07f7:  nop
//000187:             this.txtTarget.Size = new System.Drawing.Size(337, 321);
    IL_07f8:  ldarg.0
    IL_07f9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_07fe:  ldc.i4     0x151
    IL_0803:  ldc.i4     0x141
    IL_0808:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_080d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0812:  nop
//000188:             this.txtTarget.TabIndex = 0;
    IL_0813:  ldarg.0
    IL_0814:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_0819:  ldc.i4.0
    IL_081a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_081f:  nop
//000189:             // 
//000190:             // btnRun
//000191:             // 
//000192:             this.btnRun.Font = new System.Drawing.Font("Microsoft Sans Serif", 11F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_0820:  ldarg.0
    IL_0821:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_0826:  ldstr      "Microsoft Sans Serif"
    IL_082b:  ldc.r4     11.
    IL_0830:  ldc.i4.1
    IL_0831:  ldc.i4.3
    IL_0832:  ldc.i4.0
    IL_0833:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_0838:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_083d:  nop
//000193:             this.btnRun.Location = new System.Drawing.Point(17, 39);
    IL_083e:  ldarg.0
    IL_083f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_0844:  ldc.i4.s   17
    IL_0846:  ldc.i4.s   39
    IL_0848:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_084d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0852:  nop
//000194:             this.btnRun.Name = "btnRun";
    IL_0853:  ldarg.0
    IL_0854:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_0859:  ldstr      "btnRun"
    IL_085e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0863:  nop
//000195:             this.btnRun.Size = new System.Drawing.Size(83, 26);
    IL_0864:  ldarg.0
    IL_0865:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_086a:  ldc.i4.s   83
    IL_086c:  ldc.i4.s   26
    IL_086e:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0873:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0878:  nop
//000196:             this.btnRun.TabIndex = 2;
    IL_0879:  ldarg.0
    IL_087a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_087f:  ldc.i4.2
    IL_0880:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0885:  nop
//000197:             this.btnRun.Text = "Start";
    IL_0886:  ldarg.0
    IL_0887:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_088c:  ldstr      "Start"
    IL_0891:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0896:  nop
//000198:             this.btnRun.UseVisualStyleBackColor = true;
    IL_0897:  ldarg.0
    IL_0898:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_089d:  ldc.i4.1
    IL_089e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_08a3:  nop
//000199:             this.btnRun.Click += new System.EventHandler(this.btnRun_Click);
    IL_08a4:  ldarg.0
    IL_08a5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_08aa:  ldarg.0
    IL_08ab:  ldftn      instance void ShakespeareanMonkeys.MainForm::btnRun_Click(object,
                                                                                   class [mscorlib]System.EventArgs)
    IL_08b1:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_08b6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_Click(class [mscorlib]System.EventHandler)
    IL_08bb:  nop
//000200:             // 
//000201:             // txtMonkeysPerGeneration
//000202:             // 
//000203:             this.txtMonkeysPerGeneration.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_08bc:  ldarg.0
    IL_08bd:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_08c2:  ldstr      "Microsoft Sans Serif"
    IL_08c7:  ldc.r4     12.
    IL_08cc:  ldc.i4.1
    IL_08cd:  ldc.i4.3
    IL_08ce:  ldc.i4.0
    IL_08cf:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_08d4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_08d9:  nop
//000204:             this.txtMonkeysPerGeneration.Location = new System.Drawing.Point(225, 12);
    IL_08da:  ldarg.0
    IL_08db:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_08e0:  ldc.i4     0xe1
    IL_08e5:  ldc.i4.s   12
    IL_08e7:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_08ec:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_08f1:  nop
//000205:             this.txtMonkeysPerGeneration.Name = "txtMonkeysPerGeneration";
    IL_08f2:  ldarg.0
    IL_08f3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_08f8:  ldstr      "txtMonkeysPerGeneration"
    IL_08fd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0902:  nop
//000206:             this.txtMonkeysPerGeneration.Size = new System.Drawing.Size(50, 26);
    IL_0903:  ldarg.0
    IL_0904:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_0909:  ldc.i4.s   50
    IL_090b:  ldc.i4.s   26
    IL_090d:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0912:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0917:  nop
//000207:             this.txtMonkeysPerGeneration.TabIndex = 1;
    IL_0918:  ldarg.0
    IL_0919:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_091e:  ldc.i4.1
    IL_091f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0924:  nop
//000208:             this.txtMonkeysPerGeneration.Text = "2000";
    IL_0925:  ldarg.0
    IL_0926:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_092b:  ldstr      "2000"
    IL_0930:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0935:  nop
//000209:             // 
//000210:             // label1
//000211:             // 
//000212:             this.label1.AutoSize = true;
    IL_0936:  ldarg.0
    IL_0937:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_093c:  ldc.i4.1
    IL_093d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_0942:  nop
//000213:             this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_0943:  ldarg.0
    IL_0944:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_0949:  ldstr      "Microsoft Sans Serif"
    IL_094e:  ldc.r4     12.
    IL_0953:  ldc.i4.1
    IL_0954:  ldc.i4.3
    IL_0955:  ldc.i4.0
    IL_0956:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_095b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_0960:  nop
//000214:             this.label1.Location = new System.Drawing.Point(13, 13);
    IL_0961:  ldarg.0
    IL_0962:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_0967:  ldc.i4.s   13
    IL_0969:  ldc.i4.s   13
    IL_096b:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0970:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0975:  nop
//000215:             this.label1.Name = "label1";
    IL_0976:  ldarg.0
    IL_0977:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_097c:  ldstr      "label1"
    IL_0981:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0986:  nop
//000216:             this.label1.Size = new System.Drawing.Size(206, 20);
    IL_0987:  ldarg.0
    IL_0988:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_098d:  ldc.i4     0xce
    IL_0992:  ldc.i4.s   20
    IL_0994:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0999:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_099e:  nop
//000217:             this.label1.TabIndex = 0;
    IL_099f:  ldarg.0
    IL_09a0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_09a5:  ldc.i4.0
    IL_09a6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_09ab:  nop
//000218:             this.label1.Text = "Monkeys Per Generation";
    IL_09ac:  ldarg.0
    IL_09ad:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::label1
    IL_09b2:  ldstr      "Monkeys Per Generation"
    IL_09b7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_09bc:  nop
//000219:             // 
//000220:             // timerElapsedTime
//000221:             // 
//000222:             this.timerElapsedTime.Interval = 1000;
    IL_09bd:  ldarg.0
    IL_09be:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::timerElapsedTime
    IL_09c3:  ldc.i4     0x3e8
    IL_09c8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::set_Interval(int32)
    IL_09cd:  nop
//000223:             this.timerElapsedTime.Tick += new System.EventHandler(this.timerElapsedTime_Tick);
    IL_09ce:  ldarg.0
    IL_09cf:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::timerElapsedTime
    IL_09d4:  ldarg.0
    IL_09d5:  ldftn      instance void ShakespeareanMonkeys.MainForm::timerElapsedTime_Tick(object,
                                                                                            class [mscorlib]System.EventArgs)
    IL_09db:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_09e0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::add_Tick(class [mscorlib]System.EventHandler)
    IL_09e5:  nop
//000224:             // 
//000225:             // chkParallel
//000226:             // 
//000227:             this.chkParallel.AutoSize = true;
    IL_09e6:  ldarg.0
    IL_09e7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_09ec:  ldc.i4.1
    IL_09ed:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_09f2:  nop
//000228:             this.chkParallel.Location = new System.Drawing.Point(106, 45);
    IL_09f3:  ldarg.0
    IL_09f4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_09f9:  ldc.i4.s   106
    IL_09fb:  ldc.i4.s   45
    IL_09fd:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0a02:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0a07:  nop
//000229:             this.chkParallel.Name = "chkParallel";
    IL_0a08:  ldarg.0
    IL_0a09:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a0e:  ldstr      "chkParallel"
    IL_0a13:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0a18:  nop
//000230:             this.chkParallel.Size = new System.Drawing.Size(60, 17);
    IL_0a19:  ldarg.0
    IL_0a1a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a1f:  ldc.i4.s   60
    IL_0a21:  ldc.i4.s   17
    IL_0a23:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0a28:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0a2d:  nop
//000231:             this.chkParallel.TabIndex = 10;
    IL_0a2e:  ldarg.0
    IL_0a2f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a34:  ldc.i4.s   10
    IL_0a36:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0a3b:  nop
//000232:             this.chkParallel.Text = "Parallel";
    IL_0a3c:  ldarg.0
    IL_0a3d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a42:  ldstr      "Parallel"
    IL_0a47:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0a4c:  nop
//000233:             this.chkParallel.UseVisualStyleBackColor = true;
    IL_0a4d:  ldarg.0
    IL_0a4e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0a53:  ldc.i4.1
    IL_0a54:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_0a59:  nop
//000234:             // 
//000235:             // pictureBox1
//000236:             // 
//000237:             this.pictureBox1.BackColor = System.Drawing.Color.Transparent;
    IL_0a5a:  ldarg.0
    IL_0a5b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0a60:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_Transparent()
    IL_0a65:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0a6a:  nop
//000238:             this.pictureBox1.Dock = System.Windows.Forms.DockStyle.Fill;
    IL_0a6b:  ldarg.0
    IL_0a6c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0a71:  ldc.i4.5
    IL_0a72:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_0a77:  nop
//000239:             this.pictureBox1.Image = global::ShakespeareanMonkeys.Properties.Resources.HamletMonkey;
    IL_0a78:  ldarg.0
    IL_0a79:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0a7e:  call       class [System.Drawing]System.Drawing.Bitmap ShakespeareanMonkeys.Properties.Resources::get_HamletMonkey()
    IL_0a83:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
    IL_0a88:  nop
//000240:             this.pictureBox1.Location = new System.Drawing.Point(0, 0);
    IL_0a89:  ldarg.0
    IL_0a8a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0a8f:  ldc.i4.0
    IL_0a90:  ldc.i4.0
    IL_0a91:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0a96:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0a9b:  nop
//000241:             this.pictureBox1.Name = "pictureBox1";
    IL_0a9c:  ldarg.0
    IL_0a9d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0aa2:  ldstr      "pictureBox1"
    IL_0aa7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0aac:  nop
//000242:             this.pictureBox1.Size = new System.Drawing.Size(301, 389);
    IL_0aad:  ldarg.0
    IL_0aae:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0ab3:  ldc.i4     0x12d
    IL_0ab8:  ldc.i4     0x185
    IL_0abd:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0ac2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0ac7:  nop
//000243:             this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
    IL_0ac8:  ldarg.0
    IL_0ac9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0ace:  ldc.i4.4
    IL_0acf:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_SizeMode(valuetype [System.Windows.Forms]System.Windows.Forms.PictureBoxSizeMode)
    IL_0ad4:  nop
//000244:             this.pictureBox1.TabIndex = 0;
    IL_0ad5:  ldarg.0
    IL_0ad6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0adb:  ldc.i4.0
    IL_0adc:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabIndex(int32)
    IL_0ae1:  nop
//000245:             this.pictureBox1.TabStop = false;
    IL_0ae2:  ldarg.0
    IL_0ae3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0ae8:  ldc.i4.0
    IL_0ae9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabStop(bool)
    IL_0aee:  nop
//000246:             // 
//000247:             // MainForm
//000248:             // 
//000249:             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
    IL_0aef:  ldarg.0
    IL_0af0:  ldc.r4     6.
    IL_0af5:  ldc.r4     13.
    IL_0afa:  newobj     instance void [System.Drawing]System.Drawing.SizeF::.ctor(float32,
                                                                                   float32)
    IL_0aff:  call       instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleDimensions(valuetype [System.Drawing]System.Drawing.SizeF)
    IL_0b04:  nop
//000250:             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    IL_0b05:  ldarg.0
    IL_0b06:  ldc.i4.1
    IL_0b07:  call       instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleMode(valuetype [System.Windows.Forms]System.Windows.Forms.AutoScaleMode)
    IL_0b0c:  nop
//000251:             this.BackColor = System.Drawing.Color.White;
    IL_0b0d:  ldarg.0
    IL_0b0e:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_White()
    IL_0b13:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0b18:  nop
//000252:             this.ClientSize = new System.Drawing.Size(973, 389);
    IL_0b19:  ldarg.0
    IL_0b1a:  ldc.i4     0x3cd
    IL_0b1f:  ldc.i4     0x185
    IL_0b24:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0b29:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::set_ClientSize(valuetype [System.Drawing]System.Drawing.Size)
    IL_0b2e:  nop
//000253:             this.Controls.Add(this.splitContainer1);
    IL_0b2f:  ldarg.0
    IL_0b30:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b35:  ldarg.0
    IL_0b36:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0b3b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b40:  nop
//000254:             this.Name = "MainForm";
    IL_0b41:  ldarg.0
    IL_0b42:  ldstr      "MainForm"
    IL_0b47:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0b4c:  nop
//000255:             this.Text = "Shakespearean Monkeys";
    IL_0b4d:  ldarg.0
    IL_0b4e:  ldstr      "Shakespearean Monkeys"
    IL_0b53:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0b58:  nop
//000256:             this.splitContainer1.Panel1.ResumeLayout(false);
    IL_0b59:  ldarg.0
    IL_0b5a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0b5f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0b64:  ldc.i4.0
    IL_0b65:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0b6a:  nop
//000257:             this.splitContainer1.Panel2.ResumeLayout(false);
    IL_0b6b:  ldarg.0
    IL_0b6c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0b71:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0b76:  ldc.i4.0
    IL_0b77:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0b7c:  nop
//000258:             this.splitContainer1.Panel2.PerformLayout();
    IL_0b7d:  ldarg.0
    IL_0b7e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0b83:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0b88:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0b8d:  nop
//000259:             ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).EndInit();
    IL_0b8e:  ldarg.0
    IL_0b8f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0b94:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0b99:  nop
//000260:             this.splitContainer1.ResumeLayout(false);
    IL_0b9a:  ldarg.0
    IL_0b9b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer1
    IL_0ba0:  ldc.i4.0
    IL_0ba1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0ba6:  nop
//000261:             this.splitContainer2.Panel1.ResumeLayout(false);
    IL_0ba7:  ldarg.0
    IL_0ba8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0bad:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0bb2:  ldc.i4.0
    IL_0bb3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0bb8:  nop
//000262:             this.splitContainer2.Panel1.PerformLayout();
    IL_0bb9:  ldarg.0
    IL_0bba:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0bbf:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0bc4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0bc9:  nop
//000263:             this.splitContainer2.Panel2.ResumeLayout(false);
    IL_0bca:  ldarg.0
    IL_0bcb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0bd0:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0bd5:  ldc.i4.0
    IL_0bd6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0bdb:  nop
//000264:             this.splitContainer2.Panel2.PerformLayout();
    IL_0bdc:  ldarg.0
    IL_0bdd:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0be2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0be7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0bec:  nop
//000265:             ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).EndInit();
    IL_0bed:  ldarg.0
    IL_0bee:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0bf3:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0bf8:  nop
//000266:             this.splitContainer2.ResumeLayout(false);
    IL_0bf9:  ldarg.0
    IL_0bfa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer ShakespeareanMonkeys.MainForm::splitContainer2
    IL_0bff:  ldc.i4.0
    IL_0c00:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0c05:  nop
//000267:             ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
    IL_0c06:  ldarg.0
    IL_0c07:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox ShakespeareanMonkeys.MainForm::pictureBox1
    IL_0c0c:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0c11:  nop
//000268:             this.ResumeLayout(false);
    IL_0c12:  ldarg.0
    IL_0c13:  ldc.i4.0
    IL_0c14:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0c19:  nop
//000269: 
//000270:         }
    IL_0c1a:  ret
  } // end of method MainForm::InitializeComponent

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       79 (0x4f)
    .maxstack  3
//000008:         private System.ComponentModel.IContainer components = null;
    IL_0000:  ldarg.0
    IL_0001:  ldnull
    IL_0002:  stfld      class [System]System.ComponentModel.IContainer ShakespeareanMonkeys.MainForm::components
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_CSharp\MainForm.cs' 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
    IL_0007:  ldarg.0
    IL_0008:  ldsfld     valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::MinValue
    IL_000d:  stfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_startTime
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
    IL_0012:  ldarg.0
    IL_0013:  ldsfld     valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::MinValue
    IL_0018:  stfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_lastTime
//000027:         public MainForm()
    IL_001d:  ldarg.0
    IL_001e:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::.ctor()
    IL_0023:  nop
//000028:         {
    IL_0024:  nop
//000029:             InitializeComponent();
    IL_0025:  ldarg.0
    IL_0026:  call       instance void ShakespeareanMonkeys.MainForm::InitializeComponent()
    IL_002b:  nop
//000030: 
//000031:             txtTarget.Text = _targetText;
    IL_002c:  ldarg.0
    IL_002d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtTarget
    IL_0032:  ldsfld     string ShakespeareanMonkeys.MainForm::_targetText
    IL_0037:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_003c:  nop
//000032:             _uiTasks = new TaskFactory(TaskScheduler.FromCurrentSynchronizationContext());
    IL_003d:  ldarg.0
    IL_003e:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_0043:  newobj     instance void [mscorlib]System.Threading.Tasks.TaskFactory::.ctor(class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_0048:  stfld      class [mscorlib]System.Threading.Tasks.TaskFactory ShakespeareanMonkeys.MainForm::_uiTasks
//000033:         }
    IL_004d:  nop
    IL_004e:  ret
  } // end of method MainForm::.ctor

  .method private hidebysig instance void 
          btnRun_Click(object sender,
                       class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       358 (0x166)
    .maxstack  4
    .locals init ([0] class ShakespeareanMonkeys.GeneticAlgorithmSettings '<>g__initLocal0',
             [1] class ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5' 'CS$<>8__locals6',
             [2] class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task> 'CS$<>9__CachedAnonymousMethodDelegate4',
             [3] bool CS$4$0000,
             [4] string CS$0$0001,
             [5] valuetype [mscorlib]System.DateTimeOffset CS$0$0002)
//000034: 
//000035:         private int _currentIteration;
//000036:         private CancellationTokenSource _cancellation;
//000037: 
//000038:         private void btnRun_Click(object sender, EventArgs e)
//000039:         {
//000040:             if (_cancellation == null)
//000041:             {
//000042:                 _cancellation = new CancellationTokenSource();
//000043:                 GeneticAlgorithmSettings settings = new GeneticAlgorithmSettings { PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text) };
//000044: 
//000045:                 txtBestMatch.BackColor = SystemColors.Window;
//000046:                 lblGenerations.BackColor = SystemColors.Control;
//000047:                 lblGenPerSec.Text = lblGenerations.Text = "-";
//000048:                 lblElapsedTime.Text = "0";
//000049:                 btnRun.Text = "Cancel";
//000050:                 chkParallel.Visible = false;
//000051: 
//000052:                 _startTime = _lastTime = DateTimeOffset.Now;
//000053:                 timerElapsedTime.Start();
//000054: 
//000055:                 // Run the work in the background
//000056:                 _cancellation = new CancellationTokenSource();
//000057:                 var token = _cancellation.Token;
//000058:                 bool runParallel = chkParallel.Checked;
//000059:                 Task.Factory.StartNew(() =>
//000060:                 {
//000061:                     // Create the new genetic algorithm
//000062:                     var ga = new TextMatchGeneticAlgorithm(runParallel, _targetText, settings);
//000063:                     TextMatchGenome? bestGenome = null;
//000064: 
//000065:                     // Iterate until a solution is found or until cancellation is requested
//000066:                     for (_currentIteration = 1; ; _currentIteration++)
//000067:                     {
//000068:                         token.ThrowIfCancellationRequested();
//000069: 
//000070:                         // Move to the next generation
//000071:                         ga.MoveNext();
//000072: 
//000073:                         // If we've found the best solution thus far, update the UI
//000074:                         if (bestGenome == null ||
//000075:                             ga.CurrentBest.Fitness < bestGenome.Value.Fitness)
//000076:                         {
//000077:                             bestGenome = ga.CurrentBest;
//000078:                             _uiTasks.StartNew(() => txtBestMatch.Text = bestGenome.Value.Text);
//000079: 
//000080:                             // If we've found the solution, bail.
//000081:                             if (bestGenome.Value.Text == _targetText) break;
//000082:                         }
//000083:                     }
//000084: 
//000085:                     // When the task completes, update the UI
//000086:                 }, token).ContinueWith(t =>
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
    IL_0000:  ldnull
    IL_0001:  stloc.2
//000039:         {
    IL_0002:  nop
//000040:             if (_cancellation == null)
    IL_0003:  ldarg.0
    IL_0004:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
    IL_0009:  ldnull
    IL_000a:  ceq
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.3
//000041:             {
//000042:                 _cancellation = new CancellationTokenSource();
//000043:                 GeneticAlgorithmSettings settings = new GeneticAlgorithmSettings { PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text) };
//000044: 
//000045:                 txtBestMatch.BackColor = SystemColors.Window;
//000046:                 lblGenerations.BackColor = SystemColors.Control;
//000047:                 lblGenPerSec.Text = lblGenerations.Text = "-";
//000048:                 lblElapsedTime.Text = "0";
//000049:                 btnRun.Text = "Cancel";
//000050:                 chkParallel.Visible = false;
//000051: 
//000052:                 _startTime = _lastTime = DateTimeOffset.Now;
//000053:                 timerElapsedTime.Start();
//000054: 
//000055:                 // Run the work in the background
//000056:                 _cancellation = new CancellationTokenSource();
//000057:                 var token = _cancellation.Token;
//000058:                 bool runParallel = chkParallel.Checked;
//000059:                 Task.Factory.StartNew(() =>
//000060:                 {
//000061:                     // Create the new genetic algorithm
//000062:                     var ga = new TextMatchGeneticAlgorithm(runParallel, _targetText, settings);
//000063:                     TextMatchGenome? bestGenome = null;
//000064: 
//000065:                     // Iterate until a solution is found or until cancellation is requested
//000066:                     for (_currentIteration = 1; ; _currentIteration++)
//000067:                     {
//000068:                         token.ThrowIfCancellationRequested();
//000069: 
//000070:                         // Move to the next generation
//000071:                         ga.MoveNext();
//000072: 
//000073:                         // If we've found the best solution thus far, update the UI
//000074:                         if (bestGenome == null ||
//000075:                             ga.CurrentBest.Fitness < bestGenome.Value.Fitness)
//000076:                         {
//000077:                             bestGenome = ga.CurrentBest;
//000078:                             _uiTasks.StartNew(() => txtBestMatch.Text = bestGenome.Value.Text);
//000079: 
//000080:                             // If we've found the solution, bail.
//000081:                             if (bestGenome.Value.Text == _targetText) break;
//000082:                         }
//000083:                     }
//000084: 
//000085:                     // When the task completes, update the UI
//000086:                 }, token).ContinueWith(t =>
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
    IL_0010:  ldloc.3
    IL_0011:  brtrue     IL_0158

    IL_0016:  newobj     instance void ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::.ctor()
    IL_001b:  stloc.1
    IL_001c:  ldloc.1
    IL_001d:  ldarg.0
    IL_001e:  stfld      class ShakespeareanMonkeys.MainForm ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::'<>4__this'
//000041:             {
    IL_0023:  nop
//000042:                 _cancellation = new CancellationTokenSource();
    IL_0024:  ldarg.0
    IL_0025:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_002a:  stfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
//000043:                 GeneticAlgorithmSettings settings = new GeneticAlgorithmSettings { PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text) };
    IL_002f:  ldloc.1
    IL_0030:  newobj     instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::.ctor()
    IL_0035:  stloc.0
    IL_0036:  ldloc.0
    IL_0037:  ldarg.0
    IL_0038:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtMonkeysPerGeneration
    IL_003d:  callvirt   instance string [System.Windows.Forms]System.Windows.Forms.Control::get_Text()
    IL_0042:  call       int32 [mscorlib]System.Int32::Parse(string)
    IL_0047:  callvirt   instance void ShakespeareanMonkeys.GeneticAlgorithmSettings::set_PopulationSize(int32)
    IL_004c:  nop
    IL_004d:  ldloc.0
    IL_004e:  stfld      class ShakespeareanMonkeys.GeneticAlgorithmSettings ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::settings
//000044: 
//000045:                 txtBestMatch.BackColor = SystemColors.Window;
    IL_0053:  ldarg.0
    IL_0054:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_0059:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.SystemColors::get_Window()
    IL_005e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0063:  nop
//000046:                 lblGenerations.BackColor = SystemColors.Control;
    IL_0064:  ldarg.0
    IL_0065:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_006a:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.SystemColors::get_Control()
    IL_006f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0074:  nop
//000047:                 lblGenPerSec.Text = lblGenerations.Text = "-";
    IL_0075:  ldarg.0
    IL_0076:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_007b:  ldarg.0
    IL_007c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0081:  ldstr      "-"
    IL_0086:  dup
    IL_0087:  stloc.s    CS$0$0001
    IL_0089:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_008e:  nop
    IL_008f:  ldloc.s    CS$0$0001
    IL_0091:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0096:  nop
//000048:                 lblElapsedTime.Text = "0";
    IL_0097:  ldarg.0
    IL_0098:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_009d:  ldstr      "0"
    IL_00a2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_00a7:  nop
//000049:                 btnRun.Text = "Cancel";
    IL_00a8:  ldarg.0
    IL_00a9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_00ae:  ldstr      "Cancel"
    IL_00b3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_00b8:  nop
//000050:                 chkParallel.Visible = false;
    IL_00b9:  ldarg.0
    IL_00ba:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_00bf:  ldc.i4.0
    IL_00c0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_00c5:  nop
//000051: 
//000052:                 _startTime = _lastTime = DateTimeOffset.Now;
    IL_00c6:  ldarg.0
    IL_00c7:  ldarg.0
    IL_00c8:  call       valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::get_Now()
    IL_00cd:  dup
    IL_00ce:  stloc.s    CS$0$0002
    IL_00d0:  stfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_lastTime
    IL_00d5:  ldloc.s    CS$0$0002
    IL_00d7:  stfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_startTime
//000053:                 timerElapsedTime.Start();
    IL_00dc:  ldarg.0
    IL_00dd:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::timerElapsedTime
    IL_00e2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::Start()
    IL_00e7:  nop
//000054: 
//000055:                 // Run the work in the background
//000056:                 _cancellation = new CancellationTokenSource();
    IL_00e8:  ldarg.0
    IL_00e9:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_00ee:  stfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
//000057:                 var token = _cancellation.Token;
    IL_00f3:  ldloc.1
    IL_00f4:  ldarg.0
    IL_00f5:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
    IL_00fa:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_00ff:  stfld      valuetype [mscorlib]System.Threading.CancellationToken ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::token
//000058:                 bool runParallel = chkParallel.Checked;
    IL_0104:  ldloc.1
    IL_0105:  ldarg.0
    IL_0106:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_010b:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_0110:  stfld      bool ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::runParallel
//000059:                 Task.Factory.StartNew(() =>
    IL_0115:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_011a:  ldloc.1
    IL_011b:  ldftn      instance void ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::'<btnRun_Click>b__2'()
    IL_0121:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0126:  ldloc.1
    IL_0127:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken ShakespeareanMonkeys.MainForm/'<>c__DisplayClass5'::token
    IL_012c:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_0131:  ldloc.2
    IL_0132:  brtrue.s   IL_0143

    IL_0134:  ldarg.0
    IL_0135:  ldftn      instance void ShakespeareanMonkeys.MainForm::'<btnRun_Click>b__1'(class [mscorlib]System.Threading.Tasks.Task)
    IL_013b:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>::.ctor(object,
                                                                                                                           native int)
    IL_0140:  stloc.2
    IL_0141:  br.s       IL_0143

    IL_0143:  ldloc.2
    IL_0144:  ldarg.0
    IL_0145:  ldfld      class [mscorlib]System.Threading.Tasks.TaskFactory ShakespeareanMonkeys.MainForm::_uiTasks
    IL_014a:  callvirt   instance class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskFactory::get_Scheduler()
    IL_014f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>,
                                                                                                                                  class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_0154:  pop
//000060:                 {
//000061:                     // Create the new genetic algorithm
//000062:                     var ga = new TextMatchGeneticAlgorithm(runParallel, _targetText, settings);
//000063:                     TextMatchGenome? bestGenome = null;
//000064: 
//000065:                     // Iterate until a solution is found or until cancellation is requested
//000066:                     for (_currentIteration = 1; ; _currentIteration++)
//000067:                     {
//000068:                         token.ThrowIfCancellationRequested();
//000069: 
//000070:                         // Move to the next generation
//000071:                         ga.MoveNext();
//000072: 
//000073:                         // If we've found the best solution thus far, update the UI
//000074:                         if (bestGenome == null ||
//000075:                             ga.CurrentBest.Fitness < bestGenome.Value.Fitness)
//000076:                         {
//000077:                             bestGenome = ga.CurrentBest;
//000078:                             _uiTasks.StartNew(() => txtBestMatch.Text = bestGenome.Value.Text);
//000079: 
//000080:                             // If we've found the solution, bail.
//000081:                             if (bestGenome.Value.Text == _targetText) break;
//000082:                         }
//000083:                     }
//000084: 
//000085:                     // When the task completes, update the UI
//000086:                 }, token).ContinueWith(t =>
//000087:                 {
//000088:                     timerElapsedTime.Stop();
//000089:                     chkParallel.Visible = true;
//000090:                     btnRun.Text = "Start";
//000091:                     _cancellation = null;
//000092: 
//000093:                     switch (t.Status)
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
    IL_0155:  nop
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
    IL_0156:  br.s       IL_0164

//000105:             else _cancellation.Cancel();
    IL_0158:  ldarg.0
    IL_0159:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
    IL_015e:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_0163:  nop
//000106:         }
    IL_0164:  nop
    IL_0165:  ret
  } // end of method MainForm::btnRun_Click

  .method private hidebysig instance void 
          timerElapsedTime_Tick(object sender,
                                class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       162 (0xa2)
    .maxstack  3
    .locals init ([0] valuetype [mscorlib]System.DateTimeOffset now,
             [1] int32 elapsed,
             [2] float64 diffSeconds,
             [3] valuetype [mscorlib]System.TimeSpan CS$0$0000,
             [4] bool CS$4$0001,
             [5] int32 CS$0$0002)
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
    IL_0000:  nop
//000113:             var now = DateTimeOffset.Now;
    IL_0001:  call       valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::get_Now()
    IL_0006:  stloc.0
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
    IL_0007:  ldloc.0
    IL_0008:  ldarg.0
    IL_0009:  ldfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_startTime
    IL_000e:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.DateTimeOffset::op_Subtraction(valuetype [mscorlib]System.DateTimeOffset,
                                                                                                             valuetype [mscorlib]System.DateTimeOffset)
    IL_0013:  stloc.3
    IL_0014:  ldloca.s   CS$0$0000
    IL_0016:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
    IL_001b:  conv.i4
    IL_001c:  stloc.1
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
    IL_001d:  ldarg.0
    IL_001e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblElapsedTime
    IL_0023:  ldloca.s   elapsed
    IL_0025:  call       instance string [mscorlib]System.Int32::ToString()
    IL_002a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_002f:  nop
//000117:             lblGenerations.Text = _currentIteration.ToString();
    IL_0030:  ldarg.0
    IL_0031:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_0036:  ldarg.0
    IL_0037:  ldflda     int32 ShakespeareanMonkeys.MainForm::_currentIteration
    IL_003c:  call       instance string [mscorlib]System.Int32::ToString()
    IL_0041:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0046:  nop
//000118: 
//000119:             if (elapsed > 2)
    IL_0047:  ldloc.1
    IL_0048:  ldc.i4.2
    IL_0049:  cgt
    IL_004b:  ldc.i4.0
    IL_004c:  ceq
    IL_004e:  stloc.s    CS$4$0001
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
    IL_0050:  ldloc.s    CS$4$0001
    IL_0052:  brtrue.s   IL_00a1

//000120:             {
    IL_0054:  nop
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
    IL_0055:  ldloc.0
    IL_0056:  ldarg.0
    IL_0057:  ldfld      valuetype [mscorlib]System.DateTimeOffset ShakespeareanMonkeys.MainForm::_lastTime
    IL_005c:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.DateTimeOffset::op_Subtraction(valuetype [mscorlib]System.DateTimeOffset,
                                                                                                             valuetype [mscorlib]System.DateTimeOffset)
    IL_0061:  stloc.3
    IL_0062:  ldloca.s   CS$0$0000
    IL_0064:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
    IL_0069:  stloc.2
//000122:                 if (diffSeconds > 0)
    IL_006a:  ldloc.2
    IL_006b:  ldc.r8     0.0
    IL_0074:  cgt
    IL_0076:  ldc.i4.0
    IL_0077:  ceq
    IL_0079:  stloc.s    CS$4$0001
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
    IL_007b:  ldloc.s    CS$4$0001
    IL_007d:  brtrue.s   IL_00a0

//000123:                 {
    IL_007f:  nop
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
    IL_0080:  ldarg.0
    IL_0081:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenPerSec
    IL_0086:  ldarg.0
    IL_0087:  ldfld      int32 ShakespeareanMonkeys.MainForm::_currentIteration
    IL_008c:  conv.r8
    IL_008d:  ldloc.2
    IL_008e:  div
    IL_008f:  conv.i4
    IL_0090:  stloc.s    CS$0$0002
    IL_0092:  ldloca.s   CS$0$0002
    IL_0094:  call       instance string [mscorlib]System.Int32::ToString()
    IL_0099:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_009e:  nop
//000125:                 }
    IL_009f:  nop
//000126:             }
    IL_00a0:  nop
//000127:         }
    IL_00a1:  ret
  } // end of method MainForm::timerElapsedTime_Tick

  .method private hidebysig instance void 
          '<btnRun_Click>b__1'(class [mscorlib]System.Threading.Tasks.Task t) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       141 (0x8d)
    .maxstack  3
    .locals init ([0] valuetype [mscorlib]System.Threading.Tasks.TaskStatus CS$4$0000)
//000087:                 {
    IL_0000:  nop
//000088:                     timerElapsedTime.Stop();
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Timer ShakespeareanMonkeys.MainForm::timerElapsedTime
    IL_0007:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Timer::Stop()
    IL_000c:  nop
//000089:                     chkParallel.Visible = true;
    IL_000d:  ldarg.0
    IL_000e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox ShakespeareanMonkeys.MainForm::chkParallel
    IL_0013:  ldc.i4.1
    IL_0014:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_0019:  nop
//000090:                     btnRun.Text = "Start";
    IL_001a:  ldarg.0
    IL_001b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button ShakespeareanMonkeys.MainForm::btnRun
    IL_0020:  ldstr      "Start"
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_002a:  nop
//000091:                     _cancellation = null;
    IL_002b:  ldarg.0
    IL_002c:  ldnull
    IL_002d:  stfld      class [mscorlib]System.Threading.CancellationTokenSource ShakespeareanMonkeys.MainForm::_cancellation
//000092: 
//000093:                     switch (t.Status)
    IL_0032:  ldarg.1
    IL_0033:  callvirt   instance valuetype [mscorlib]System.Threading.Tasks.TaskStatus [mscorlib]System.Threading.Tasks.Task::get_Status()
    IL_0038:  stloc.0
//000094:                     {
//000095:                         case TaskStatus.Faulted:
//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
//000097:                             break;
//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
//000101:                             break;
//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
    IL_0039:  ldloc.0
    IL_003a:  ldc.i4.5
    IL_003b:  sub
    IL_003c:  switch     ( 
                          IL_0068,
                          IL_008c,
                          IL_004f)
    IL_004d:  br.s       IL_008c

//000096:                             MessageBox.Show(this, t.Exception.ToString(), "Error");
    IL_004f:  ldarg.0
    IL_0050:  ldarg.1
    IL_0051:  callvirt   instance class [mscorlib]System.AggregateException [mscorlib]System.Threading.Tasks.Task::get_Exception()
    IL_0056:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_005b:  ldstr      "Error"
    IL_0060:  call       valuetype [System.Windows.Forms]System.Windows.Forms.DialogResult [System.Windows.Forms]System.Windows.Forms.MessageBox::Show(class [System.Windows.Forms]System.Windows.Forms.IWin32Window,
                                                                                                                                                       string,
                                                                                                                                                       string)
    IL_0065:  pop
//000097:                             break;
    IL_0066:  br.s       IL_008c

//000098:                         case TaskStatus.RanToCompletion:
//000099:                             txtBestMatch.BackColor = Color.LightGreen;
    IL_0068:  ldarg.0
    IL_0069:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TextBox ShakespeareanMonkeys.MainForm::txtBestMatch
    IL_006e:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_LightGreen()
    IL_0073:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0078:  nop
//000100:                             lblGenerations.BackColor = Color.LemonChiffon;
    IL_0079:  ldarg.0
    IL_007a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label ShakespeareanMonkeys.MainForm::lblGenerations
    IL_007f:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_LemonChiffon()
    IL_0084:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0089:  nop
//000101:                             break;
    IL_008a:  br.s       IL_008c

//000102:                     }
//000103:                 }, _uiTasks.Scheduler);
//000104:             }
//000105:             else _cancellation.Cancel();
//000106:         }
//000107: 
//000108:         private DateTimeOffset _startTime = DateTimeOffset.MinValue;
//000109:         private DateTimeOffset _lastTime = DateTimeOffset.MinValue;
//000110: 
//000111:         private void timerElapsedTime_Tick(object sender, EventArgs e)
//000112:         {
//000113:             var now = DateTimeOffset.Now;
//000114:             var elapsed = (int)(now - _startTime).TotalSeconds;
//000115:             
//000116:             lblElapsedTime.Text = elapsed.ToString();
//000117:             lblGenerations.Text = _currentIteration.ToString();
//000118: 
//000119:             if (elapsed > 2)
//000120:             {
//000121:                 var diffSeconds = (now - _lastTime).TotalSeconds;
//000122:                 if (diffSeconds > 0)
//000123:                 {
//000124:                     lblGenPerSec.Text = ((int)(_currentIteration / diffSeconds)).ToString();
//000125:                 }
//000126:             }
//000127:         }
//000128:     }
//000129: }
    IL_008c:  ret
  } // end of method MainForm::'<btnRun_Click>b__1'

  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       92 (0x5c)
    .maxstack  3
    .locals init ([0] string[] CS$0$0000)
//000019:         private static string _targetText =
    IL_0000:  ldc.i4.s   9
    IL_0002:  newarr     [mscorlib]System.String
    IL_0007:  stloc.0
    IL_0008:  ldloc.0
    IL_0009:  ldc.i4.0
    IL_000a:  ldstr      "To be or not to be, that is the question;"
    IL_000f:  stelem.ref
    IL_0010:  ldloc.0
    IL_0011:  ldc.i4.1
    IL_0012:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0017:  stelem.ref
    IL_0018:  ldloc.0
    IL_0019:  ldc.i4.2
    IL_001a:  ldstr      "Whether 'tis nobler in the mind to suffer"
    IL_001f:  stelem.ref
    IL_0020:  ldloc.0
    IL_0021:  ldc.i4.3
    IL_0022:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0027:  stelem.ref
    IL_0028:  ldloc.0
    IL_0029:  ldc.i4.4
    IL_002a:  ldstr      "The slings and arrows of outrageous fortune,"
    IL_002f:  stelem.ref
    IL_0030:  ldloc.0
    IL_0031:  ldc.i4.5
    IL_0032:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0037:  stelem.ref
    IL_0038:  ldloc.0
    IL_0039:  ldc.i4.6
    IL_003a:  ldstr      "Or to take arms against a sea of troubles,"
    IL_003f:  stelem.ref
    IL_0040:  ldloc.0
    IL_0041:  ldc.i4.7
    IL_0042:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0047:  stelem.ref
    IL_0048:  ldloc.0
    IL_0049:  ldc.i4.8
    IL_004a:  ldstr      "And by opposing, end them."
    IL_004f:  stelem.ref
    IL_0050:  ldloc.0
    IL_0051:  call       string [mscorlib]System.String::Concat(string[])
    IL_0056:  stsfld     string ShakespeareanMonkeys.MainForm::_targetText
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_CSharp\MainForm.Designer.cs' 
    IL_005b:  ret
  } // end of method MainForm::.cctor

} // end of class ShakespeareanMonkeys.MainForm

.class private abstract auto ansi sealed beforefieldinit ShakespeareanMonkeys.Program
       extends [mscorlib]System.Object
{
  .method private hidebysig static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       26 (0x1a)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_CSharp\Program.cs' 
//000019:         {
    IL_0000:  nop
//000020:             Application.EnableVisualStyles();
    IL_0001:  call       void [System.Windows.Forms]System.Windows.Forms.Application::EnableVisualStyles()
    IL_0006:  nop
//000021:             Application.SetCompatibleTextRenderingDefault(false);
    IL_0007:  ldc.i4.0
    IL_0008:  call       void [System.Windows.Forms]System.Windows.Forms.Application::SetCompatibleTextRenderingDefault(bool)
    IL_000d:  nop
//000022:             Application.Run(new MainForm());
    IL_000e:  newobj     instance void ShakespeareanMonkeys.MainForm::.ctor()
    IL_0013:  call       void [System.Windows.Forms]System.Windows.Forms.Application::Run(class [System.Windows.Forms]System.Windows.Forms.Form)
    IL_0018:  nop
//000023:         }
    IL_0019:  ret
  } // end of method Program::Main

} // end of class ShakespeareanMonkeys.Program


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
