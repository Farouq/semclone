
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern Microsoft.VisualBasic
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 10:0:0:0
}
.assembly extern System.Drawing
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:0:0:0
}
.assembly extern ParallelExtensionsExtras
{
  .ver 1:2:0:0
}
.assembly extern System.Windows.Forms
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly GameOfLife
{
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 0A 47 61 6D 65 4F 66 4C 69 66 65 00 00 )    // ...GameOfLife..
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 0A 47 61 6D 65 4F 66 4C 69 66 65 00 00 )    // ...GameOfLife..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = ( 01 00 24 61 38 36 32 65 32 37 31 2D 33 33 31 62   // ..$a862e271-331b
                                                                                                  2D 34 61 33 63 2D 39 39 38 63 2D 39 65 34 32 38   // -4a3c-998c-9e428
                                                                                                  39 65 61 33 65 35 38 00 00 )                      // 9ea3e58..
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public GameOfLife.MainForm.resources
{
  // Offset: 0x00000000 Length: 0x000000B4
}
.mresource public Resources.resources
{
  // Offset: 0x000000B8 Length: 0x000000B4
}
.module GameOfLife.exe
// MVID: {814D5894-B52A-4B6F-8AB6-103B9165728E}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x003E0000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi My.MyApplication
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase
{
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method MyApplication::.ctor

} // end of class My.MyApplication

.class private auto ansi My.MyComputer
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  8
    .language '{3A12D0B8-C26C-11D0-B442-00A0244A1DD2}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File '17d14f5c-a337-4978-8281-53493378c1071.vb' not found
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer::.ctor()
    IL_0007:  nop
    IL_0008:  nop
    IL_0009:  ret
  } // end of method MyComputer::.ctor

} // end of class My.MyComputer

.class private auto ansi sealed beforefieldinit My.MyProject
       extends [mscorlib]System.Object
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi sealed nested assembly MyWebServices
         extends [mscorlib]System.Object
  {
    .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.MyGroupCollectionAttribute::.ctor(string,
                                                                                                         string,
                                                                                                         string,
                                                                                                         string) = ( 01 00 34 53 79 73 74 65 6D 2E 57 65 62 2E 53 65   // ..4System.Web.Se
                                                                                                                     72 76 69 63 65 73 2E 50 72 6F 74 6F 63 6F 6C 73   // rvices.Protocols
                                                                                                                     2E 53 6F 61 70 48 74 74 70 43 6C 69 65 6E 74 50   // .SoapHttpClientP
                                                                                                                     72 6F 74 6F 63 6F 6C 12 43 72 65 61 74 65 5F 5F   // rotocol.Create__
                                                                                                                     49 6E 73 74 61 6E 63 65 5F 5F 13 44 69 73 70 6F   // Instance__.Dispo
                                                                                                                     73 65 5F 5F 49 6E 73 74 61 6E 63 65 5F 5F 00 00   // se__Instance__..
                                                                                                                     00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .method public strict virtual instance bool 
            Equals(object o) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] bool Equals)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_0008:  call       instance bool [mscorlib]System.Object::Equals(object)
      IL_000d:  stloc.0
      IL_000e:  br.s       IL_0010

      IL_0010:  ldloc.0
      IL_0011:  ret
    } // end of method MyWebServices::Equals

    .method public strict virtual instance int32 
            GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] int32 GetHashCode)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 [mscorlib]System.Object::GetHashCode()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::GetHashCode

    .method assembly hidebysig instance class [mscorlib]System.Type 
            GetType() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       16 (0x10)
      .maxstack  1
      .locals init ([0] class [mscorlib]System.Type GetType)
      IL_0000:  nop
      IL_0001:  ldtoken    My.MyProject/MyWebServices
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  stloc.0
      IL_000c:  br.s       IL_000e

      IL_000e:  ldloc.0
      IL_000f:  ret
    } // end of method MyWebServices::GetType

    .method public strict virtual instance string 
            ToString() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] string ToString)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string [mscorlib]System.Object::ToString()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::ToString

    .method private static !!T  Create__Instance__<.ctor T>(!!T 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       32 (0x20)
      .maxstack  2
      .locals init ([0] !!T Create__Instance__,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  box        !!T
      IL_0007:  ldnull
      IL_0008:  ceq
      IL_000a:  stloc.1
      IL_000b:  ldloc.1
      IL_000c:  brfalse.s  IL_0018

      IL_000e:  call       !!0 [mscorlib]System.Activator::CreateInstance<!!0>()
      IL_0013:  stloc.0
      IL_0014:  br.s       IL_001e

      IL_0016:  br.s       IL_001d

      IL_0018:  nop
      IL_0019:  ldarg.0
      IL_001a:  stloc.0
      IL_001b:  br.s       IL_001e

      IL_001d:  nop
      IL_001e:  ldloc.0
      IL_001f:  ret
    } // end of method MyWebServices::Create__Instance__

    .method private instance void  Dispose__Instance__<T>(!!T& 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] !!T VB$t_generic$S0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldloca.s   VB$t_generic$S0
      IL_0004:  initobj    !!T
      IL_000a:  ldloc.0
      IL_000b:  stobj      !!T
      IL_0010:  nop
      IL_0011:  ret
    } // end of method MyWebServices::Dispose__Instance__

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MyWebServices::.ctor

  } // end of class MyWebServices

  .class auto ansi sealed nested assembly ThreadSafeObjectProvider`1<.ctor T>
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .field private static !T m_ThreadStaticValue
    .custom instance void [mscorlib]System.ThreadStaticAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname instance !T 
            get_GetInstance() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       38 (0x26)
      .maxstack  2
      .locals init ([0] !T GetInstance,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0006:  box        !T
      IL_000b:  ldnull
      IL_000c:  ceq
      IL_000e:  stloc.1
      IL_000f:  ldloc.1
      IL_0010:  brfalse.s  IL_001c

      IL_0012:  call       !!0 [mscorlib]System.Activator::CreateInstance<!T>()
      IL_0017:  stsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_001c:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0021:  stloc.0
      IL_0022:  br.s       IL_0024

      IL_0024:  ldloc.0
      IL_0025:  ret
    } // end of method ThreadSafeObjectProvider`1::get_GetInstance

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method ThreadSafeObjectProvider`1::.ctor

    .property instance !T GetInstance()
    {
      .get instance !T My.MyProject/ThreadSafeObjectProvider`1::get_GetInstance()
    } // end of property ThreadSafeObjectProvider`1::GetInstance
  } // end of class ThreadSafeObjectProvider`1

  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> m_ComputerObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> m_AppObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> m_UserObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> m_MyWebServicesObjectProvider
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       42 (0x2a)
    .maxstack  8
    IL_0000:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::.ctor()
    IL_0005:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_000a:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::.ctor()
    IL_000f:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0014:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::.ctor()
    IL_0019:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_001e:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::.ctor()
    IL_0023:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0028:  nop
    IL_0029:  ret
  } // end of method MyProject::.cctor

  .method assembly specialname static class My.MyComputer 
          get_Computer() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyComputer Computer)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Computer

  .method assembly specialname static class My.MyApplication 
          get_Application() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyApplication Application)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Application

  .method assembly specialname static class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User 
          get_User() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User User)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_User

  .method assembly specialname static class My.MyProject/MyWebServices 
          get_WebServices() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyProject/MyWebServices WebServices)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_WebServices

  .property class My.MyComputer Computer()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0B 4D 79 2E 43 6F 6D 70 75 74 65 72 00 00 ) // ...My.Computer..
    .get class My.MyComputer My.MyProject::get_Computer()
  } // end of property MyProject::Computer
  .property class My.MyApplication Application()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 41 70 70 6C 69 63 61 74 69 6F   // ...My.Applicatio
                                                                                                       6E 00 00 )                                        // n..
    .get class My.MyApplication My.MyProject::get_Application()
  } // end of property MyProject::Application
  .property class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User
          User()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 07 4D 79 2E 55 73 65 72 00 00 )             // ...My.User..
    .get class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User My.MyProject::get_User()
  } // end of property MyProject::User
  .property class My.MyProject/MyWebServices
          WebServices()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 57 65 62 53 65 72 76 69 63 65   // ...My.WebService
                                                                                                       73 00 00 )                                        // s..
    .get class My.MyProject/MyWebServices My.MyProject::get_WebServices()
  } // end of property MyProject::WebServices
} // end of class My.MyProject

.class private auto ansi GameOfLife.GameBoard
       extends [mscorlib]System.Object
{
  .class auto ansi nested assembly _Closure$__1
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi nested assembly _Closure$__2
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap $VB$Local_fastBmp
      .field public class GameOfLife.GameBoard/_Closure$__1 $VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__2::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor(class GameOfLife.GameBoard/_Closure$__1/_Closure$__2 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       33 (0x21)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_001e

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$Local_fastBmp
        IL_0019:  stfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$Local_fastBmp
        IL_001e:  nop
        IL_001f:  nop
        IL_0020:  ret
      } // end of method _Closure$__2::.ctor

      .method public specialname instance void 
              _Lambda$__1(int32 i) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       608 (0x260)
        .maxstack  7
        .locals init ([0] int32 b,
                 [1] int32 count,
                 [2] int32 g,
                 [3] int32 j,
                 [4] int32 r,
                 [5] int32 x,
                 [6] valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color> c,
                 [7] int32 y,
                 [8] int32 VB$t_i4$L0,
                 [9] int32 VB$t_i4$L1,
                 [10] int32 VB$t_i4$L2,
                 [11] valuetype [System.Drawing]System.Drawing.Color VB$t_struct$S0,
                 [12] bool VB$CG$t_bool$S0,
                 [13] int32 VB$CG$t_i4$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\GameOfLifeLogic.vb' 
//000074:                 Dim body As Action(Of Integer) = Sub(i)
        IL_0000:  nop
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
        IL_0001:  ldc.i4.0
        IL_0002:  ldarg.0
        IL_0003:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_0008:  ldfld      class GameOfLife.GameBoard GameOfLife.GameBoard/_Closure$__1::$VB$Me
        IL_000d:  callvirt   instance int32 GameOfLife.GameBoard::get_Height()
        IL_0012:  ldc.i4.1
        IL_0013:  sub.ovf
        IL_0014:  stloc.s    VB$t_i4$L0
        IL_0016:  stloc.3
        IL_0017:  br         IL_0252

//000077:                                                          Dim count = 0
        IL_001c:  ldc.i4.0
        IL_001d:  stloc.1
//000078:                                                          Dim r = 0, g = 0, b = 0
        IL_001e:  ldc.i4.0
        IL_001f:  stloc.s    r
        IL_0021:  ldc.i4.0
        IL_0022:  stloc.2
        IL_0023:  ldc.i4.0
        IL_0024:  stloc.0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
        IL_0025:  ldarg.1
        IL_0026:  ldc.i4.1
        IL_0027:  sub.ovf
        IL_0028:  ldarg.1
        IL_0029:  ldc.i4.1
        IL_002a:  add.ovf
        IL_002b:  stloc.s    VB$t_i4$L1
        IL_002d:  stloc.s    x
        IL_002f:  br         IL_0112

//000082:                                                              For y = j - 1 To j + 1
        IL_0034:  ldloc.3
        IL_0035:  ldc.i4.1
        IL_0036:  sub.ovf
        IL_0037:  ldloc.3
        IL_0038:  ldc.i4.1
        IL_0039:  add.ovf
        IL_003a:  stloc.s    VB$t_i4$L2
        IL_003c:  stloc.s    y
        IL_003e:  br         IL_00fe

//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
        IL_0043:  ldloc.s    x
        IL_0045:  ldarg.1
        IL_0046:  bne.un.s   IL_004f

        IL_0048:  ldloc.3
        IL_0049:  ldloc.s    y
        IL_004b:  bne.un.s   IL_004f

        IL_004d:  br.s       IL_0054

        IL_004f:  ldloc.s    x
        IL_0051:  ldc.i4.0
        IL_0052:  bge.s      IL_0056

        IL_0054:  br.s       IL_006a

        IL_0056:  ldloc.s    x
        IL_0058:  ldarg.0
        IL_0059:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_005e:  ldfld      class GameOfLife.GameBoard GameOfLife.GameBoard/_Closure$__1::$VB$Me
        IL_0063:  callvirt   instance int32 GameOfLife.GameBoard::get_Width()
        IL_0068:  blt.s      IL_006c

        IL_006a:  br.s       IL_0071

        IL_006c:  ldloc.s    y
        IL_006e:  ldc.i4.0
        IL_006f:  bge.s      IL_0073

        IL_0071:  br.s       IL_008a

        IL_0073:  ldloc.s    y
        IL_0075:  ldarg.0
        IL_0076:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_007b:  ldfld      class GameOfLife.GameBoard GameOfLife.GameBoard/_Closure$__1::$VB$Me
        IL_0080:  callvirt   instance int32 GameOfLife.GameBoard::get_Height()
        IL_0085:  bge.s      IL_008a

        IL_0087:  ldc.i4.0
        IL_0088:  br.s       IL_008b

        IL_008a:  ldc.i4.1
        IL_008b:  stloc.s    VB$CG$t_bool$S0
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
        IL_008d:  ldloc.s    VB$CG$t_bool$S0
        IL_008f:  brfalse.s  IL_0093

//000084:                                                                      Continue For
        IL_0091:  br.s       IL_00f7

//000085:                                                                  End If
        IL_0093:  nop
//000086:                                                                  Dim c? = current(x, y)
        IL_0094:  ldarg.0
        IL_0095:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_009a:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
        IL_009f:  ldloc.s    x
        IL_00a1:  ldloc.s    y
        IL_00a3:  callvirt   instance valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color> valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Get(int32,
                                                                                                                                                                                                                                  int32)
        IL_00a8:  stloc.s    c
//000087:                                                                  If c.HasValue Then
        IL_00aa:  ldloca.s   c
        IL_00ac:  call       instance bool valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::get_HasValue()
        IL_00b1:  stloc.s    VB$CG$t_bool$S0
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
        IL_00b3:  ldloc.s    VB$CG$t_bool$S0
        IL_00b5:  brfalse.s  IL_00f6

//000088:                                                                      count += 1
        IL_00b7:  ldloc.1
        IL_00b8:  ldc.i4.1
        IL_00b9:  add.ovf
        IL_00ba:  stloc.1
//000089:                                                                      r += c.Value.R
        IL_00bb:  ldloc.s    r
        IL_00bd:  ldloca.s   c
        IL_00bf:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::get_Value()
        IL_00c4:  stloc.s    VB$t_struct$S0
        IL_00c6:  ldloca.s   VB$t_struct$S0
        IL_00c8:  call       instance uint8 [System.Drawing]System.Drawing.Color::get_R()
        IL_00cd:  add.ovf
        IL_00ce:  stloc.s    r
//000090:                                                                      g += c.Value.G
        IL_00d0:  ldloc.2
        IL_00d1:  ldloca.s   c
        IL_00d3:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::get_Value()
        IL_00d8:  stloc.s    VB$t_struct$S0
        IL_00da:  ldloca.s   VB$t_struct$S0
        IL_00dc:  call       instance uint8 [System.Drawing]System.Drawing.Color::get_G()
        IL_00e1:  add.ovf
        IL_00e2:  stloc.2
//000091:                                                                      b += c.Value.B
        IL_00e3:  ldloc.0
        IL_00e4:  ldloca.s   c
        IL_00e6:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::get_Value()
        IL_00eb:  stloc.s    VB$t_struct$S0
        IL_00ed:  ldloca.s   VB$t_struct$S0
        IL_00ef:  call       instance uint8 [System.Drawing]System.Drawing.Color::get_B()
        IL_00f4:  add.ovf
        IL_00f5:  stloc.0
//000092:                                                                  End If
        IL_00f6:  nop
//000093:                                                              Next y
        IL_00f7:  nop
        IL_00f8:  ldloc.s    y
        IL_00fa:  ldc.i4.1
        IL_00fb:  add.ovf
        IL_00fc:  stloc.s    y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
        IL_00fe:  ldloc.s    y
        IL_0100:  ldloc.s    VB$t_i4$L2
        IL_0102:  stloc.s    VB$CG$t_i4$S0
        IL_0104:  ldloc.s    VB$CG$t_i4$S0
        IL_0106:  ble        IL_0043

//000094:                                                          Next x
        IL_010b:  nop
        IL_010c:  ldloc.s    x
        IL_010e:  ldc.i4.1
        IL_010f:  add.ovf
        IL_0110:  stloc.s    x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
        IL_0112:  ldloc.s    x
        IL_0114:  ldloc.s    VB$t_i4$L1
        IL_0116:  stloc.s    VB$CG$t_i4$S0
        IL_0118:  ldloc.s    VB$CG$t_i4$S0
        IL_011a:  ble        IL_0034

//000097:                                                          If count < 1 OrElse count >= 4 Then
        IL_011f:  ldloc.1
        IL_0120:  ldc.i4.1
        IL_0121:  blt.s      IL_012a

        IL_0123:  ldloc.1
        IL_0124:  ldc.i4.4
        IL_0125:  bge.s      IL_012a

        IL_0127:  ldc.i4.0
        IL_0128:  br.s       IL_012b

        IL_012a:  ldc.i4.1
        IL_012b:  stloc.s    VB$CG$t_bool$S0
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
        IL_012d:  ldloc.s    VB$CG$t_bool$S0
        IL_012f:  brfalse.s  IL_014e

//000098:                                                              [next](i, j) = Nothing
        IL_0131:  ldarg.0
        IL_0132:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_0137:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_next
        IL_013c:  ldarg.1
        IL_013d:  ldloc.3
        IL_013e:  callvirt   instance valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>& valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Address(int32,
                                                                                                                                                                                                                                       int32)
        IL_0143:  initobj    valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>
        IL_0149:  br         IL_0207

//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
        IL_014e:  ldarg.0
        IL_014f:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_0154:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
        IL_0159:  ldarg.1
        IL_015a:  ldloc.3
        IL_015b:  callvirt   instance valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>& valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Address(int32,
                                                                                                                                                                                                                                       int32)
        IL_0160:  call       instance bool valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::get_HasValue()
        IL_0165:  brfalse.s  IL_016f

        IL_0167:  ldloc.1
        IL_0168:  ldc.i4.2
        IL_0169:  beq.s      IL_0172

        IL_016b:  ldloc.1
        IL_016c:  ldc.i4.3
        IL_016d:  beq.s      IL_0172

        IL_016f:  ldc.i4.0
        IL_0170:  br.s       IL_0173

        IL_0172:  ldc.i4.1
        IL_0173:  stloc.s    VB$CG$t_bool$S0
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
        IL_0175:  ldloc.s    VB$CG$t_bool$S0
        IL_0177:  brfalse.s  IL_019f

//000100:                                                              [next](i, j) = current(i, j)
        IL_0179:  ldarg.0
        IL_017a:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_017f:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_next
        IL_0184:  ldarg.1
        IL_0185:  ldloc.3
        IL_0186:  ldarg.0
        IL_0187:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_018c:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
        IL_0191:  ldarg.1
        IL_0192:  ldloc.3
        IL_0193:  callvirt   instance valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color> valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Get(int32,
                                                                                                                                                                                                                                  int32)
        IL_0198:  callvirt   instance void valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Set(int32,
                                                                                                                                                 int32,
                                                                                                                                                 valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>)
        IL_019d:  br.s       IL_0207

//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
        IL_019f:  ldarg.0
        IL_01a0:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_01a5:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
        IL_01aa:  ldarg.1
        IL_01ab:  ldloc.3
        IL_01ac:  callvirt   instance valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>& valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Address(int32,
                                                                                                                                                                                                                                       int32)
        IL_01b1:  call       instance bool valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::get_HasValue()
        IL_01b6:  brtrue.s   IL_01bc

        IL_01b8:  ldloc.1
        IL_01b9:  ldc.i4.3
        IL_01ba:  beq.s      IL_01bf

        IL_01bc:  ldc.i4.0
        IL_01bd:  br.s       IL_01c0

        IL_01bf:  ldc.i4.1
        IL_01c0:  stloc.s    VB$CG$t_bool$S0
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
        IL_01c2:  ldloc.s    VB$CG$t_bool$S0
        IL_01c4:  brfalse.s  IL_01ee

//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
        IL_01c6:  ldarg.0
        IL_01c7:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_01cc:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_next
        IL_01d1:  ldarg.1
        IL_01d2:  ldloc.3
        IL_01d3:  ldloc.s    r
        IL_01d5:  ldloc.1
        IL_01d6:  div
        IL_01d7:  ldloc.2
        IL_01d8:  ldloc.1
        IL_01d9:  div
        IL_01da:  ldloc.0
        IL_01db:  ldloc.1
        IL_01dc:  div
        IL_01dd:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::FromArgb(int32,
                                                                                                                           int32,
                                                                                                                           int32)
        IL_01e2:  call       valuetype [mscorlib]System.Nullable`1<!0> valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::op_Implicit(!0)
        IL_01e7:  callvirt   instance void valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Set(int32,
                                                                                                                                                 int32,
                                                                                                                                                 valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>)
        IL_01ec:  br.s       IL_0207

//000103:                                                          Else
        IL_01ee:  nop
//000104:                                                              [next](i, j) = Nothing
        IL_01ef:  ldarg.0
        IL_01f0:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_01f5:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_next
        IL_01fa:  ldarg.1
        IL_01fb:  ldloc.3
        IL_01fc:  callvirt   instance valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>& valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Address(int32,
                                                                                                                                                                                                                                       int32)
        IL_0201:  initobj    valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>
//000105:                                                          End If
        IL_0207:  nop
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
        IL_0208:  ldarg.0
        IL_0209:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$Local_fastBmp
        IL_020e:  ldarg.1
        IL_020f:  ldloc.3
        IL_0210:  ldarg.0
        IL_0211:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_0216:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
        IL_021b:  ldarg.1
        IL_021c:  ldloc.3
        IL_021d:  callvirt   instance valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>& valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Address(int32,
                                                                                                                                                                                                                                       int32)
        IL_0222:  call       instance bool valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::get_HasValue()
        IL_0227:  brtrue.s   IL_0230

        IL_0229:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_White()
        IL_022e:  br.s       IL_0247

        IL_0230:  ldarg.0
        IL_0231:  ldfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
        IL_0236:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
        IL_023b:  ldarg.1
        IL_023c:  ldloc.3
        IL_023d:  callvirt   instance valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>& valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Address(int32,
                                                                                                                                                                                                                                       int32)
        IL_0242:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::GetValueOrDefault()
        IL_0247:  callvirt   instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::SetColor(int32,
                                                                                                            int32,
                                                                                                            valuetype [System.Drawing]System.Drawing.Color)
        IL_024c:  nop
//000109:                                                      Next j
        IL_024d:  nop
        IL_024e:  ldloc.3
        IL_024f:  ldc.i4.1
        IL_0250:  add.ovf
        IL_0251:  stloc.3
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
        IL_0252:  ldloc.3
        IL_0253:  ldloc.s    VB$t_i4$L0
        IL_0255:  stloc.s    VB$CG$t_i4$S0
        IL_0257:  ldloc.s    VB$CG$t_i4$S0
        IL_0259:  ble        IL_001c

//000110:                                                  End Sub
        IL_025e:  nop
        IL_025f:  ret
      } // end of method _Closure$__2::_Lambda$__1

    } // end of class _Closure$__2

    .field public valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] $VB$Local_current
    .field public valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] $VB$Local_next
    .field public class GameOfLife.GameBoard $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class GameOfLife.GameBoard/_Closure$__1 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       57 (0x39)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_0036

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      class GameOfLife.GameBoard GameOfLife.GameBoard/_Closure$__1::$VB$Me
      IL_0019:  stfld      class GameOfLife.GameBoard GameOfLife.GameBoard/_Closure$__1::$VB$Me
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
      IL_0025:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_next
      IL_0031:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_next
      IL_0036:  nop
      IL_0037:  nop
      IL_0038:  ret
    } // end of method _Closure$__1::.ctor

  } // end of class _Closure$__1

  .field private valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...][] _scratch
  .field private int32 _currentIndex
  .field private class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> _pool
  .field private int32 privateWidth
  .field private int32 privateHeight
  .field private bool _RunParallel
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .method public specialname rtspecialname 
          instance void  .ctor(int32 width,
                               int32 height,
                               float64 initialDensity,
                               class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> pool) cil managed
  {
    // Code size       300 (0x12c)
    .maxstack  6
    .locals init ([0] class [mscorlib]System.Random rand,
             [1] int32 i,
             [2] int32 j,
             [3] valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...][] VB$t_array$S0,
             [4] int32 VB$t_i4$L0,
             [5] int32 VB$t_i4$L1,
             [6] valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color> VB$t_struct$N0,
             [7] bool VB$CG$t_bool$S0,
             [8] int32 VB$CG$t_i4$S0)
//000028: 		Public Sub New(ByVal width As Integer, ByVal height As Integer, ByVal initialDensity As Double, ByVal pool As ObjectPool(Of Bitmap))
    IL_0000:  nop
//000029:             ' Validate parameters.
//000030: 			If width < 1 Then
//000031: 				Throw New ArgumentOutOfRangeException("width")
//000032: 			End If
//000033: 			If height < 1 Then
//000034: 				Throw New ArgumentOutOfRangeException("height")
//000035: 			End If
//000036: 			If pool Is Nothing Then
//000037: 				Throw New ArgumentNullException("pool")
//000038: 			End If
//000039: 			If initialDensity < 0 OrElse initialDensity > 1 Then
//000040: 				Throw New ArgumentOutOfRangeException("initialDensity")
//000041: 			End If
//000042: 
//000043:             ' Store parameters.
//000044: 			_pool = pool
//000045: 			Me.Width = width
//000046: 			Me.Height = height
//000047: 
//000048:             ' Create the storage arrays.
//000049: 			_scratch = New Color?(1)(,) { New Color?(width - 1, height - 1){}, New Color?(width - 1, height - 1){} }
//000050: 
//000051:             ' Populate the board randomly based on the provided initial density.
//000052: 			Dim rand As New Random()
//000053:             For i = 0 To width - 1
//000054:                 For j = 0 To height - 1
//000055:                     _scratch(_currentIndex)(i, j) = If((rand.NextDouble() < initialDensity), Color.FromArgb(rand.Next()), CType(Nothing, Color?))
//000056:                 Next j
//000057:             Next i
//000058: 		End Sub
//000059: 
//000060: 		''' <summary>Moves to the next stage of the game, returning a Bitmap that represents the state of the board.</summary>
//000061: 		''' <returns>A bitmap that represents the state of the board.</returns>
//000062: 		''' <remarks>The returned Bitmap should be added back to the pool supplied to the constructor when usage of it is complete.</remarks>
//000063: 		Public Function MoveNext() As Bitmap
//000064:             ' Get the current and next stage board arrays.
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
//000066:             Dim current?(,) = _scratch(_currentIndex)
//000067:             Dim [next]?(,) = _scratch(nextIndex)
//000068: 			Dim rand As New Random()
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
//000072: 			Using fastBmp As New FastBitmap(bmp)
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000030: 			If width < 1 Then
    IL_0008:  ldarg.1
    IL_0009:  ldc.i4.1
    IL_000a:  clt
    IL_000c:  stloc.s    VB$CG$t_bool$S0
//000031: 				Throw New ArgumentOutOfRangeException("width")
//000032: 			End If
//000033: 			If height < 1 Then
//000034: 				Throw New ArgumentOutOfRangeException("height")
//000035: 			End If
//000036: 			If pool Is Nothing Then
//000037: 				Throw New ArgumentNullException("pool")
//000038: 			End If
//000039: 			If initialDensity < 0 OrElse initialDensity > 1 Then
//000040: 				Throw New ArgumentOutOfRangeException("initialDensity")
//000041: 			End If
//000042: 
//000043:             ' Store parameters.
//000044: 			_pool = pool
//000045: 			Me.Width = width
//000046: 			Me.Height = height
//000047: 
//000048:             ' Create the storage arrays.
//000049: 			_scratch = New Color?(1)(,) { New Color?(width - 1, height - 1){}, New Color?(width - 1, height - 1){} }
//000050: 
//000051:             ' Populate the board randomly based on the provided initial density.
//000052: 			Dim rand As New Random()
//000053:             For i = 0 To width - 1
//000054:                 For j = 0 To height - 1
//000055:                     _scratch(_currentIndex)(i, j) = If((rand.NextDouble() < initialDensity), Color.FromArgb(rand.Next()), CType(Nothing, Color?))
//000056:                 Next j
//000057:             Next i
//000058: 		End Sub
//000059: 
//000060: 		''' <summary>Moves to the next stage of the game, returning a Bitmap that represents the state of the board.</summary>
//000061: 		''' <returns>A bitmap that represents the state of the board.</returns>
//000062: 		''' <remarks>The returned Bitmap should be added back to the pool supplied to the constructor when usage of it is complete.</remarks>
//000063: 		Public Function MoveNext() As Bitmap
//000064:             ' Get the current and next stage board arrays.
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
//000066:             Dim current?(,) = _scratch(_currentIndex)
//000067:             Dim [next]?(,) = _scratch(nextIndex)
//000068: 			Dim rand As New Random()
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
//000072: 			Using fastBmp As New FastBitmap(bmp)
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_000e:  ldloc.s    VB$CG$t_bool$S0
    IL_0010:  brfalse.s  IL_001d

//000031: 				Throw New ArgumentOutOfRangeException("width")
    IL_0012:  ldstr      "width"
    IL_0017:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_001c:  throw

//000032: 			End If
    IL_001d:  nop
//000033: 			If height < 1 Then
    IL_001e:  ldarg.2
    IL_001f:  ldc.i4.1
    IL_0020:  clt
    IL_0022:  stloc.s    VB$CG$t_bool$S0
//000034: 				Throw New ArgumentOutOfRangeException("height")
//000035: 			End If
//000036: 			If pool Is Nothing Then
//000037: 				Throw New ArgumentNullException("pool")
//000038: 			End If
//000039: 			If initialDensity < 0 OrElse initialDensity > 1 Then
//000040: 				Throw New ArgumentOutOfRangeException("initialDensity")
//000041: 			End If
//000042: 
//000043:             ' Store parameters.
//000044: 			_pool = pool
//000045: 			Me.Width = width
//000046: 			Me.Height = height
//000047: 
//000048:             ' Create the storage arrays.
//000049: 			_scratch = New Color?(1)(,) { New Color?(width - 1, height - 1){}, New Color?(width - 1, height - 1){} }
//000050: 
//000051:             ' Populate the board randomly based on the provided initial density.
//000052: 			Dim rand As New Random()
//000053:             For i = 0 To width - 1
//000054:                 For j = 0 To height - 1
//000055:                     _scratch(_currentIndex)(i, j) = If((rand.NextDouble() < initialDensity), Color.FromArgb(rand.Next()), CType(Nothing, Color?))
//000056:                 Next j
//000057:             Next i
//000058: 		End Sub
//000059: 
//000060: 		''' <summary>Moves to the next stage of the game, returning a Bitmap that represents the state of the board.</summary>
//000061: 		''' <returns>A bitmap that represents the state of the board.</returns>
//000062: 		''' <remarks>The returned Bitmap should be added back to the pool supplied to the constructor when usage of it is complete.</remarks>
//000063: 		Public Function MoveNext() As Bitmap
//000064:             ' Get the current and next stage board arrays.
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
//000066:             Dim current?(,) = _scratch(_currentIndex)
//000067:             Dim [next]?(,) = _scratch(nextIndex)
//000068: 			Dim rand As New Random()
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
//000072: 			Using fastBmp As New FastBitmap(bmp)
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_0024:  ldloc.s    VB$CG$t_bool$S0
    IL_0026:  brfalse.s  IL_0033

//000034: 				Throw New ArgumentOutOfRangeException("height")
    IL_0028:  ldstr      "height"
    IL_002d:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_0032:  throw

//000035: 			End If
    IL_0033:  nop
//000036: 			If pool Is Nothing Then
    IL_0034:  ldarg.s    pool
    IL_0036:  ldnull
    IL_0037:  ceq
    IL_0039:  stloc.s    VB$CG$t_bool$S0
//000037: 				Throw New ArgumentNullException("pool")
//000038: 			End If
//000039: 			If initialDensity < 0 OrElse initialDensity > 1 Then
//000040: 				Throw New ArgumentOutOfRangeException("initialDensity")
//000041: 			End If
//000042: 
//000043:             ' Store parameters.
//000044: 			_pool = pool
//000045: 			Me.Width = width
//000046: 			Me.Height = height
//000047: 
//000048:             ' Create the storage arrays.
//000049: 			_scratch = New Color?(1)(,) { New Color?(width - 1, height - 1){}, New Color?(width - 1, height - 1){} }
//000050: 
//000051:             ' Populate the board randomly based on the provided initial density.
//000052: 			Dim rand As New Random()
//000053:             For i = 0 To width - 1
//000054:                 For j = 0 To height - 1
//000055:                     _scratch(_currentIndex)(i, j) = If((rand.NextDouble() < initialDensity), Color.FromArgb(rand.Next()), CType(Nothing, Color?))
//000056:                 Next j
//000057:             Next i
//000058: 		End Sub
//000059: 
//000060: 		''' <summary>Moves to the next stage of the game, returning a Bitmap that represents the state of the board.</summary>
//000061: 		''' <returns>A bitmap that represents the state of the board.</returns>
//000062: 		''' <remarks>The returned Bitmap should be added back to the pool supplied to the constructor when usage of it is complete.</remarks>
//000063: 		Public Function MoveNext() As Bitmap
//000064:             ' Get the current and next stage board arrays.
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
//000066:             Dim current?(,) = _scratch(_currentIndex)
//000067:             Dim [next]?(,) = _scratch(nextIndex)
//000068: 			Dim rand As New Random()
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
//000072: 			Using fastBmp As New FastBitmap(bmp)
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_003b:  ldloc.s    VB$CG$t_bool$S0
    IL_003d:  brfalse.s  IL_004a

//000037: 				Throw New ArgumentNullException("pool")
    IL_003f:  ldstr      "pool"
    IL_0044:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
    IL_0049:  throw

//000038: 			End If
    IL_004a:  nop
//000039: 			If initialDensity < 0 OrElse initialDensity > 1 Then
    IL_004b:  ldarg.3
    IL_004c:  ldc.r8     0.0
    IL_0055:  blt.s      IL_0066

    IL_0057:  ldarg.3
    IL_0058:  ldc.r8     1.
    IL_0061:  bgt.s      IL_0066

    IL_0063:  ldc.i4.0
    IL_0064:  br.s       IL_0067

    IL_0066:  ldc.i4.1
    IL_0067:  stloc.s    VB$CG$t_bool$S0
//000040: 				Throw New ArgumentOutOfRangeException("initialDensity")
//000041: 			End If
//000042: 
//000043:             ' Store parameters.
//000044: 			_pool = pool
//000045: 			Me.Width = width
//000046: 			Me.Height = height
//000047: 
//000048:             ' Create the storage arrays.
//000049: 			_scratch = New Color?(1)(,) { New Color?(width - 1, height - 1){}, New Color?(width - 1, height - 1){} }
//000050: 
//000051:             ' Populate the board randomly based on the provided initial density.
//000052: 			Dim rand As New Random()
//000053:             For i = 0 To width - 1
//000054:                 For j = 0 To height - 1
//000055:                     _scratch(_currentIndex)(i, j) = If((rand.NextDouble() < initialDensity), Color.FromArgb(rand.Next()), CType(Nothing, Color?))
//000056:                 Next j
//000057:             Next i
//000058: 		End Sub
//000059: 
//000060: 		''' <summary>Moves to the next stage of the game, returning a Bitmap that represents the state of the board.</summary>
//000061: 		''' <returns>A bitmap that represents the state of the board.</returns>
//000062: 		''' <remarks>The returned Bitmap should be added back to the pool supplied to the constructor when usage of it is complete.</remarks>
//000063: 		Public Function MoveNext() As Bitmap
//000064:             ' Get the current and next stage board arrays.
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
//000066:             Dim current?(,) = _scratch(_currentIndex)
//000067:             Dim [next]?(,) = _scratch(nextIndex)
//000068: 			Dim rand As New Random()
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
//000072: 			Using fastBmp As New FastBitmap(bmp)
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_0069:  ldloc.s    VB$CG$t_bool$S0
    IL_006b:  brfalse.s  IL_0078

//000040: 				Throw New ArgumentOutOfRangeException("initialDensity")
    IL_006d:  ldstr      "initialDensity"
    IL_0072:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_0077:  throw

//000041: 			End If
    IL_0078:  nop
//000042: 
//000043:             ' Store parameters.
//000044: 			_pool = pool
    IL_0079:  ldarg.0
    IL_007a:  ldarg.s    pool
    IL_007c:  stfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> GameOfLife.GameBoard::_pool
//000045: 			Me.Width = width
    IL_0081:  ldarg.0
    IL_0082:  ldarg.1
    IL_0083:  callvirt   instance void GameOfLife.GameBoard::set_Width(int32)
    IL_0088:  nop
//000046: 			Me.Height = height
    IL_0089:  ldarg.0
    IL_008a:  ldarg.2
    IL_008b:  callvirt   instance void GameOfLife.GameBoard::set_Height(int32)
    IL_0090:  nop
//000047: 
//000048:             ' Create the storage arrays.
//000049: 			_scratch = New Color?(1)(,) { New Color?(width - 1, height - 1){}, New Color?(width - 1, height - 1){} }
    IL_0091:  ldarg.0
    IL_0092:  ldc.i4.2
    IL_0093:  newarr     valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]
    IL_0098:  stloc.3
    IL_0099:  ldloc.3
    IL_009a:  ldc.i4.0
    IL_009b:  ldarg.1
    IL_009c:  ldc.i4.1
    IL_009d:  sub.ovf
    IL_009e:  ldc.i4.1
    IL_009f:  add.ovf
    IL_00a0:  ldarg.2
    IL_00a1:  ldc.i4.1
    IL_00a2:  sub.ovf
    IL_00a3:  ldc.i4.1
    IL_00a4:  add.ovf
    IL_00a5:  newobj     instance void valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::.ctor(int32,
                                                                                                                                               int32)
    IL_00aa:  stelem.ref
    IL_00ab:  nop
    IL_00ac:  ldloc.3
    IL_00ad:  ldc.i4.1
    IL_00ae:  ldarg.1
    IL_00af:  ldc.i4.1
    IL_00b0:  sub.ovf
    IL_00b1:  ldc.i4.1
    IL_00b2:  add.ovf
    IL_00b3:  ldarg.2
    IL_00b4:  ldc.i4.1
    IL_00b5:  sub.ovf
    IL_00b6:  ldc.i4.1
    IL_00b7:  add.ovf
    IL_00b8:  newobj     instance void valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::.ctor(int32,
                                                                                                                                               int32)
    IL_00bd:  stelem.ref
    IL_00be:  nop
    IL_00bf:  ldloc.3
    IL_00c0:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...][] GameOfLife.GameBoard::_scratch
//000050: 
//000051:             ' Populate the board randomly based on the provided initial density.
//000052: 			Dim rand As New Random()
    IL_00c5:  newobj     instance void [mscorlib]System.Random::.ctor()
    IL_00ca:  stloc.0
//000053:             For i = 0 To width - 1
    IL_00cb:  ldc.i4.0
    IL_00cc:  ldarg.1
    IL_00cd:  ldc.i4.1
    IL_00ce:  sub.ovf
    IL_00cf:  stloc.s    VB$t_i4$L0
    IL_00d1:  stloc.1
    IL_00d2:  br.s       IL_0121

//000054:                 For j = 0 To height - 1
    IL_00d4:  ldc.i4.0
    IL_00d5:  ldarg.2
    IL_00d6:  ldc.i4.1
    IL_00d7:  sub.ovf
    IL_00d8:  stloc.s    VB$t_i4$L1
    IL_00da:  stloc.2
    IL_00db:  br.s       IL_0113

//000055:                     _scratch(_currentIndex)(i, j) = If((rand.NextDouble() < initialDensity), Color.FromArgb(rand.Next()), CType(Nothing, Color?))
    IL_00dd:  ldarg.0
    IL_00de:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...][] GameOfLife.GameBoard::_scratch
    IL_00e3:  ldarg.0
    IL_00e4:  ldfld      int32 GameOfLife.GameBoard::_currentIndex
    IL_00e9:  ldelem.ref
    IL_00ea:  ldloc.1
    IL_00eb:  ldloc.2
    IL_00ec:  ldloc.0
    IL_00ed:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
    IL_00f2:  ldarg.3
    IL_00f3:  blt.s      IL_00f9

    IL_00f5:  ldloc.s    VB$t_struct$N0
    IL_00f7:  br.s       IL_0109

    IL_00f9:  ldloc.0
    IL_00fa:  callvirt   instance int32 [mscorlib]System.Random::Next()
    IL_00ff:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::FromArgb(int32)
    IL_0104:  call       valuetype [mscorlib]System.Nullable`1<!0> valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>::op_Implicit(!0)
    IL_0109:  callvirt   instance void valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...]::Set(int32,
                                                                                                                                             int32,
                                                                                                                                             valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>)
//000056:                 Next j
    IL_010e:  nop
    IL_010f:  ldloc.2
    IL_0110:  ldc.i4.1
    IL_0111:  add.ovf
    IL_0112:  stloc.2
//000057:             Next i
//000058: 		End Sub
//000059: 
//000060: 		''' <summary>Moves to the next stage of the game, returning a Bitmap that represents the state of the board.</summary>
//000061: 		''' <returns>A bitmap that represents the state of the board.</returns>
//000062: 		''' <remarks>The returned Bitmap should be added back to the pool supplied to the constructor when usage of it is complete.</remarks>
//000063: 		Public Function MoveNext() As Bitmap
//000064:             ' Get the current and next stage board arrays.
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
//000066:             Dim current?(,) = _scratch(_currentIndex)
//000067:             Dim [next]?(,) = _scratch(nextIndex)
//000068: 			Dim rand As New Random()
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
//000072: 			Using fastBmp As New FastBitmap(bmp)
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_0113:  ldloc.2
    IL_0114:  ldloc.s    VB$t_i4$L1
    IL_0116:  stloc.s    VB$CG$t_i4$S0
    IL_0118:  ldloc.s    VB$CG$t_i4$S0
    IL_011a:  ble.s      IL_00dd

//000057:             Next i
    IL_011c:  nop
    IL_011d:  ldloc.1
    IL_011e:  ldc.i4.1
    IL_011f:  add.ovf
    IL_0120:  stloc.1
//000058: 		End Sub
//000059: 
//000060: 		''' <summary>Moves to the next stage of the game, returning a Bitmap that represents the state of the board.</summary>
//000061: 		''' <returns>A bitmap that represents the state of the board.</returns>
//000062: 		''' <remarks>The returned Bitmap should be added back to the pool supplied to the constructor when usage of it is complete.</remarks>
//000063: 		Public Function MoveNext() As Bitmap
//000064:             ' Get the current and next stage board arrays.
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
//000066:             Dim current?(,) = _scratch(_currentIndex)
//000067:             Dim [next]?(,) = _scratch(nextIndex)
//000068: 			Dim rand As New Random()
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
//000072: 			Using fastBmp As New FastBitmap(bmp)
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_0121:  ldloc.1
    IL_0122:  ldloc.s    VB$t_i4$L0
    IL_0124:  stloc.s    VB$CG$t_i4$S0
    IL_0126:  ldloc.s    VB$CG$t_i4$S0
    IL_0128:  ble.s      IL_00d4

//000058: 		End Sub
    IL_012a:  nop
    IL_012b:  ret
  } // end of method GameBoard::.ctor

  .method public instance class [System.Drawing]System.Drawing.Bitmap 
          MoveNext() cil managed
  {
    // Code size       246 (0xf6)
    .maxstack  3
    .locals init ([0] class GameOfLife.GameBoard/_Closure$__1 $VB$Closure_ClosureVariable_3E_26,
             [1] class [System.Drawing]System.Drawing.Bitmap bmp,
             [2] class [System.Drawing]System.Drawing.Bitmap MoveNext,
             [3] int32 nextIndex,
             [4] class [mscorlib]System.Random rand,
             [5] class GameOfLife.GameBoard/_Closure$__1/_Closure$__2 $VB$Closure_ClosureVariable_47_3,
             [6] class [mscorlib]System.Action`1<int32> body,
             [7] int32 i,
             [8] int32 VB$t_i4$L0,
             [9] bool VB$CG$t_bool$S0,
             [10] int32 VB$CG$t_i4$S0)
//000059: 
//000060: 		''' <summary>Moves to the next stage of the game, returning a Bitmap that represents the state of the board.</summary>
//000061: 		''' <returns>A bitmap that represents the state of the board.</returns>
//000062: 		''' <remarks>The returned Bitmap should be added back to the pool supplied to the constructor when usage of it is complete.</remarks>
//000063: 		Public Function MoveNext() As Bitmap
    IL_0000:  nop
//000064:             ' Get the current and next stage board arrays.
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
//000066:             Dim current?(,) = _scratch(_currentIndex)
//000067:             Dim [next]?(,) = _scratch(nextIndex)
//000068: 			Dim rand As New Random()
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
//000072: 			Using fastBmp As New FastBitmap(bmp)
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_0001:  newobj     instance void GameOfLife.GameBoard/_Closure$__1::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.0
    IL_0009:  stfld      class GameOfLife.GameBoard GameOfLife.GameBoard/_Closure$__1::$VB$Me
//000065:             Dim nextIndex = (_currentIndex + 1) Mod 2
    IL_000e:  ldarg.0
    IL_000f:  ldfld      int32 GameOfLife.GameBoard::_currentIndex
    IL_0014:  ldc.i4.1
    IL_0015:  add.ovf
    IL_0016:  ldc.i4.2
    IL_0017:  rem
    IL_0018:  stloc.3
//000066:             Dim current?(,) = _scratch(_currentIndex)
    IL_0019:  ldloc.0
    IL_001a:  ldarg.0
    IL_001b:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...][] GameOfLife.GameBoard::_scratch
    IL_0020:  ldarg.0
    IL_0021:  ldfld      int32 GameOfLife.GameBoard::_currentIndex
    IL_0026:  ldelem.ref
    IL_0027:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_current
//000067:             Dim [next]?(,) = _scratch(nextIndex)
    IL_002c:  ldloc.0
    IL_002d:  ldarg.0
    IL_002e:  ldfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...][] GameOfLife.GameBoard::_scratch
    IL_0033:  ldloc.3
    IL_0034:  ldelem.ref
    IL_0035:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [System.Drawing]System.Drawing.Color>[0...,0...] GameOfLife.GameBoard/_Closure$__1::$VB$Local_next
//000068: 			Dim rand As New Random()
    IL_003a:  newobj     instance void [mscorlib]System.Random::.ctor()
    IL_003f:  stloc.s    rand
//000069: 
//000070:             ' Get a Bitmap from the pool to use.
//000071: 			Dim bmp = _pool.GetObject()
    IL_0041:  ldarg.0
    IL_0042:  ldfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> GameOfLife.GameBoard::_pool
    IL_0047:  callvirt   instance !0 class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap>::GetObject()
    IL_004c:  stloc.1
//000072: 			Using fastBmp As New FastBitmap(bmp)
    IL_004d:  nop
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_004e:  newobj     instance void GameOfLife.GameBoard/_Closure$__1/_Closure$__2::.ctor()
    IL_0053:  stloc.s    $VB$Closure_ClosureVariable_47_3
    IL_0055:  ldloc.s    $VB$Closure_ClosureVariable_47_3
    IL_0057:  ldloc.0
    IL_0058:  stfld      class GameOfLife.GameBoard/_Closure$__1 GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$NonLocal_$VB$Closure_ClosureVariable_3E_26
//000072: 			Using fastBmp As New FastBitmap(bmp)
    IL_005d:  ldloc.s    $VB$Closure_ClosureVariable_47_3
    IL_005f:  ldloc.1
    IL_0060:  newobj     instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::.ctor(class [System.Drawing]System.Drawing.Bitmap)
    IL_0065:  stfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$Local_fastBmp
//000073:                 ' For every row.
//000074:                 Dim body As Action(Of Integer) = Sub(i)
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
    IL_006a:  nop
//000074:                 Dim body As Action(Of Integer) = Sub(i)
    .try
    {
      IL_006b:  ldloc.s    $VB$Closure_ClosureVariable_47_3
      IL_006d:  dup
      IL_006e:  ldvirtftn  instance void GameOfLife.GameBoard/_Closure$__1/_Closure$__2::_Lambda$__1(int32)
      IL_0074:  newobj     instance void class [mscorlib]System.Action`1<int32>::.ctor(object,
                                                                                       native int)
      IL_0079:  stloc.s    body
//000075:                                                      ' For every column.
//000076:                                                      For j = 0 To Height - 1
//000077:                                                          Dim count = 0
//000078:                                                          Dim r = 0, g = 0, b = 0
//000079: 
//000080:                                                          ' Count neighbors.
//000081:                                                          For x = i - 1 To i + 1
//000082:                                                              For y = j - 1 To j + 1
//000083:                                                                  If (x = i AndAlso j = y) OrElse x < 0 OrElse x >= Width OrElse y < 0 OrElse y >= Height Then
//000084:                                                                      Continue For
//000085:                                                                  End If
//000086:                                                                  Dim c? = current(x, y)
//000087:                                                                  If c.HasValue Then
//000088:                                                                      count += 1
//000089:                                                                      r += c.Value.R
//000090:                                                                      g += c.Value.G
//000091:                                                                      b += c.Value.B
//000092:                                                                  End If
//000093:                                                              Next y
//000094:                                                          Next x
//000095: 
//000096:                                                          ' Heuristic for alive or dead based on neighbor count and current state.
//000097:                                                          If count < 1 OrElse count >= 4 Then
//000098:                                                              [next](i, j) = Nothing
//000099:                                                          ElseIf current(i, j).HasValue AndAlso (count = 2 OrElse count = 3) Then
//000100:                                                              [next](i, j) = current(i, j)
//000101:                                                          ElseIf (Not current(i, j).HasValue) AndAlso count = 3 Then
//000102:                                                              [next](i, j) = Color.FromArgb(r \ count, g \ count, b \ count)
//000103:                                                          Else
//000104:                                                              [next](i, j) = Nothing
//000105:                                                          End If
//000106: 
//000107:                                                          ' Render the cell.
//000108:                                                          fastBmp.SetColor(i, j, If(current(i, j), Color.White))
//000109:                                                      Next j
//000110:                                                  End Sub
//000111: 
//000112:                 ' Process the rows serially or in parallel based on the RunParallel property setting.
//000113: 				If RunParallel Then
      IL_007b:  ldarg.0
      IL_007c:  callvirt   instance bool GameOfLife.GameBoard::get_RunParallel()
      IL_0081:  stloc.s    VB$CG$t_bool$S0
//000114: 					Parallel.For(0, Width, body)
//000115: 				Else
//000116:                     For i = 0 To Width - 1
//000117:                         body(i)
//000118:                     Next i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
      IL_0083:  ldloc.s    VB$CG$t_bool$S0
      IL_0085:  brfalse.s  IL_0098

//000114: 					Parallel.For(0, Width, body)
      IL_0087:  ldc.i4.0
      IL_0088:  ldarg.0
      IL_0089:  callvirt   instance int32 GameOfLife.GameBoard::get_Width()
      IL_008e:  ldloc.s    body
      IL_0090:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::For(int32,
                                                                                                                                        int32,
                                                                                                                                        class [mscorlib]System.Action`1<int32>)
      IL_0095:  pop
      IL_0096:  br.s       IL_00c3

//000115: 				Else
      IL_0098:  nop
//000116:                     For i = 0 To Width - 1
      IL_0099:  ldc.i4.0
      IL_009a:  ldarg.0
      IL_009b:  callvirt   instance int32 GameOfLife.GameBoard::get_Width()
      IL_00a0:  ldc.i4.1
      IL_00a1:  sub.ovf
      IL_00a2:  stloc.s    VB$t_i4$L0
      IL_00a4:  stloc.s    i
      IL_00a6:  br.s       IL_00b9

//000117:                         body(i)
      IL_00a8:  ldloc.s    body
      IL_00aa:  ldloc.s    i
      IL_00ac:  callvirt   instance void class [mscorlib]System.Action`1<int32>::Invoke(!0)
      IL_00b1:  nop
//000118:                     Next i
      IL_00b2:  nop
      IL_00b3:  ldloc.s    i
      IL_00b5:  ldc.i4.1
      IL_00b6:  add.ovf
      IL_00b7:  stloc.s    i
//000119: 				End If
//000120: 			End Using
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
      IL_00b9:  ldloc.s    i
      IL_00bb:  ldloc.s    VB$t_i4$L0
      IL_00bd:  stloc.s    VB$CG$t_i4$S0
      IL_00bf:  ldloc.s    VB$CG$t_i4$S0
      IL_00c1:  ble.s      IL_00a8

//000119: 				End If
      IL_00c3:  nop
//000120: 			End Using
      IL_00c4:  nop
//000121: 
//000122: 			' Update and return
//000123: 			_currentIndex = nextIndex
//000124: 			Return bmp
//000125: 		End Function
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
//000131: 				Return privateWidth
//000132: 			End Get
//000133: 			Private Set(ByVal value As Integer)
//000134: 				privateWidth = value
//000135: 			End Set
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
//000141: 				Return privateHeight
//000142: 			End Get
//000143: 			Private Set(ByVal value As Integer)
//000144: 				privateHeight = value
//000145: 			End Set
//000146: 		End Property
//000147: 		''' <summary>Gets or sets whether to run in parallel.</summary>
//000148: 		Public Property RunParallel() As Boolean
//000149: 	End Class
//000150: End Namespace
      IL_00c5:  leave.s    IL_00e9

    }  // end .try
    finally
    {
      IL_00c7:  ldloc.s    $VB$Closure_ClosureVariable_47_3
      IL_00c9:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$Local_fastBmp
      IL_00ce:  ldnull
      IL_00cf:  ceq
      IL_00d1:  ldc.i4.0
      IL_00d2:  ceq
      IL_00d4:  stloc.s    VB$CG$t_bool$S0
      IL_00d6:  ldloc.s    VB$CG$t_bool$S0
      IL_00d8:  brfalse.s  IL_00e7

      IL_00da:  ldloc.s    $VB$Closure_ClosureVariable_47_3
      IL_00dc:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap GameOfLife.GameBoard/_Closure$__1/_Closure$__2::$VB$Local_fastBmp
      IL_00e1:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_00e6:  nop
      IL_00e7:  nop
      IL_00e8:  endfinally
//000123: 			_currentIndex = nextIndex
    }  // end handler
    IL_00e9:  ldarg.0
    IL_00ea:  ldloc.3
    IL_00eb:  stfld      int32 GameOfLife.GameBoard::_currentIndex
//000124: 			Return bmp
    IL_00f0:  ldloc.1
    IL_00f1:  stloc.2
    IL_00f2:  br.s       IL_00f4

//000125: 		End Function
    IL_00f4:  ldloc.2
    IL_00f5:  ret
  } // end of method GameBoard::MoveNext

  .method public specialname instance int32 
          get_Width() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 Width)
//000126: 
//000127: 		''' <summary>Gets the width of the board.</summary>
//000128: 		Private privateWidth As Integer
//000129: 		Public Property Width() As Integer
//000130: 			Get
    IL_0000:  nop
//000131: 				Return privateWidth
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 GameOfLife.GameBoard::privateWidth
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000132: 			End Get
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method GameBoard::get_Width

  .method private specialname instance void 
          set_Width(int32 'value') cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
//000133: 			Private Set(ByVal value As Integer)
    IL_0000:  nop
//000134: 				privateWidth = value
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      int32 GameOfLife.GameBoard::privateWidth
//000135: 			End Set
    IL_0008:  nop
    IL_0009:  ret
  } // end of method GameBoard::set_Width

  .method public specialname instance int32 
          get_Height() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 Height)
//000136: 		End Property
//000137: 		''' <summary>Gets the height of the board.</summary>
//000138: 		Private privateHeight As Integer
//000139: 		Public Property Height() As Integer
//000140: 			Get
    IL_0000:  nop
//000141: 				Return privateHeight
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 GameOfLife.GameBoard::privateHeight
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000142: 			End Get
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method GameBoard::get_Height

  .method private specialname instance void 
          set_Height(int32 'value') cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
//000143: 			Private Set(ByVal value As Integer)
    IL_0000:  nop
//000144: 				privateHeight = value
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      int32 GameOfLife.GameBoard::privateHeight
//000145: 			End Set
    IL_0008:  nop
    IL_0009:  ret
  } // end of method GameBoard::set_Height

  .method public specialname instance bool 
          get_RunParallel() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (bool V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      bool GameOfLife.GameBoard::_RunParallel
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method GameBoard::get_RunParallel

  .method public specialname instance void 
          set_RunParallel(bool AutoPropertyValue) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      bool GameOfLife.GameBoard::_RunParallel
    IL_0007:  nop
    IL_0008:  ret
  } // end of method GameBoard::set_RunParallel

  .property instance int32 Width()
  {
    .get instance int32 GameOfLife.GameBoard::get_Width()
    .set instance void GameOfLife.GameBoard::set_Width(int32)
  } // end of property GameBoard::Width
  .property instance int32 Height()
  {
    .get instance int32 GameOfLife.GameBoard::get_Height()
    .set instance void GameOfLife.GameBoard::set_Height(int32)
  } // end of property GameBoard::Height
  .property instance bool RunParallel()
  {
    .get instance bool GameOfLife.GameBoard::get_RunParallel()
    .set instance void GameOfLife.GameBoard::set_RunParallel(bool)
  } // end of property GameBoard::RunParallel
} // end of class GameOfLife.GameBoard

.class public auto ansi beforefieldinit GameOfLife.MainForm
       extends [System.Windows.Forms]System.Windows.Forms.Form
{
  .class auto ansi nested assembly _Closure$__3
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi nested assembly _Closure$__4
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public class [System.Drawing]System.Drawing.Bitmap $VB$Local_bmp
      .field public float64 $VB$Local_framesPerSecond
      .field public class GameOfLife.MainForm/_Closure$__3 $VB$NonLocal__Closure$__3
      .method public specialname rtspecialname 
              instance void  .ctor(class GameOfLife.MainForm/_Closure$__3/_Closure$__4 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       57 (0x39)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_0036

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      class [System.Drawing]System.Drawing.Bitmap GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$Local_bmp
        IL_0019:  stfld      class [System.Drawing]System.Drawing.Bitmap GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$Local_bmp
        IL_001e:  ldarg.0
        IL_001f:  ldarg.1
        IL_0020:  ldfld      float64 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$Local_framesPerSecond
        IL_0025:  stfld      float64 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$Local_framesPerSecond
        IL_002a:  ldarg.0
        IL_002b:  ldarg.1
        IL_002c:  ldfld      class GameOfLife.MainForm/_Closure$__3 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$NonLocal__Closure$__3
        IL_0031:  stfld      class GameOfLife.MainForm/_Closure$__3 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$NonLocal__Closure$__3
        IL_0036:  nop
        IL_0037:  nop
        IL_0038:  ret
      } // end of method _Closure$__4::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__4::.ctor

      .method public specialname instance void 
              _Lambda$__6() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       131 (0x83)
        .maxstack  3
        .locals init ([0] class [System.Drawing]System.Drawing.Bitmap old,
                 [1] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\MainForm.vb' 
//000062:                                               BeginInvoke((Sub()
        IL_0000:  nop
//000063:                                                                lblFramesPerSecond.Text = String.Format("Frames / Sec: {0:F2}", framesPerSecond)
        IL_0001:  ldarg.0
        IL_0002:  ldfld      class GameOfLife.MainForm/_Closure$__3 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$NonLocal__Closure$__3
        IL_0007:  ldfld      class GameOfLife.MainForm GameOfLife.MainForm/_Closure$__3::$VB$Me
        IL_000c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
        IL_0011:  ldstr      "Frames / Sec: {0:F2}"
        IL_0016:  ldarg.0
        IL_0017:  ldfld      float64 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$Local_framesPerSecond
        IL_001c:  box        [mscorlib]System.Double
        IL_0021:  call       string [mscorlib]System.String::Format(string,
                                                                    object)
        IL_0026:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
        IL_002b:  nop
//000064:                                                                Dim old = CType(pictureBox1.Image, Bitmap)
        IL_002c:  ldarg.0
        IL_002d:  ldfld      class GameOfLife.MainForm/_Closure$__3 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$NonLocal__Closure$__3
        IL_0032:  ldfld      class GameOfLife.MainForm GameOfLife.MainForm/_Closure$__3::$VB$Me
        IL_0037:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
        IL_003c:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
        IL_0041:  castclass  [System.Drawing]System.Drawing.Bitmap
        IL_0046:  stloc.0
//000065:                                                                pictureBox1.Image = bmp
        IL_0047:  ldarg.0
        IL_0048:  ldfld      class GameOfLife.MainForm/_Closure$__3 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$NonLocal__Closure$__3
        IL_004d:  ldfld      class GameOfLife.MainForm GameOfLife.MainForm/_Closure$__3::$VB$Me
        IL_0052:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
        IL_0057:  ldarg.0
        IL_0058:  ldfld      class [System.Drawing]System.Drawing.Bitmap GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$Local_bmp
        IL_005d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
        IL_0062:  nop
//000066:                                                                If old IsNot Nothing Then
        IL_0063:  ldloc.0
        IL_0064:  ldnull
        IL_0065:  ceq
        IL_0067:  ldc.i4.0
        IL_0068:  ceq
        IL_006a:  stloc.1
//000067:                                                                    pool.PutObject(old)
//000068:                                                                End If
//000069:                                                            End Sub))
//000070:                                           Loop
//000071:                                       End Sub, token).ContinueWith(Sub()
//000072:                                                                        _cancellation = Nothing
//000073:                                                                        btnRun.Text = "Start"
//000074:                                                                        lblDensity.Visible = True
//000075:                                                                        tbDensity.Visible = True
//000076:                                                                    End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000077: 
//000078:                 ' If a game is currently running, cancel it.
//000079:             Else
//000080:                 _cancellation.Cancel()
//000081:             End If
//000082:         End Sub
//000083:     End Class
//000084: End Namespace
        IL_006b:  ldloc.1
        IL_006c:  brfalse.s  IL_0080

//000067:                                                                    pool.PutObject(old)
        IL_006e:  ldarg.0
        IL_006f:  ldfld      class GameOfLife.MainForm/_Closure$__3 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$NonLocal__Closure$__3
        IL_0074:  ldfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> GameOfLife.MainForm/_Closure$__3::$VB$Local_pool
        IL_0079:  ldloc.0
        IL_007a:  callvirt   instance void class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap>::PutObject(!0)
        IL_007f:  nop
//000068:                                                                End If
        IL_0080:  nop
//000069:                                                            End Sub))
        IL_0081:  nop
        IL_0082:  ret
      } // end of method _Closure$__4::_Lambda$__6

    } // end of class _Closure$__4

    .field public int32 $VB$Local_height
    .field public class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> $VB$Local_pool
    .field public valuetype [mscorlib]System.Threading.CancellationToken $VB$Local_token
    .field public int32 $VB$Local_width
    .field public class GameOfLife.MainForm $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__3::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class GameOfLife.MainForm/_Closure$__3 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       81 (0x51)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_004e

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_height
      IL_0019:  stfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_height
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class GameOfLife.MainForm GameOfLife.MainForm/_Closure$__3::$VB$Me
      IL_0025:  stfld      class GameOfLife.MainForm GameOfLife.MainForm/_Closure$__3::$VB$Me
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_width
      IL_0031:  stfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_width
      IL_0036:  ldarg.0
      IL_0037:  ldarg.1
      IL_0038:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken GameOfLife.MainForm/_Closure$__3::$VB$Local_token
      IL_003d:  stfld      valuetype [mscorlib]System.Threading.CancellationToken GameOfLife.MainForm/_Closure$__3::$VB$Local_token
      IL_0042:  ldarg.0
      IL_0043:  ldarg.1
      IL_0044:  ldfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> GameOfLife.MainForm/_Closure$__3::$VB$Local_pool
      IL_0049:  stfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> GameOfLife.MainForm/_Closure$__3::$VB$Local_pool
      IL_004e:  nop
      IL_004f:  nop
      IL_0050:  ret
    } // end of method _Closure$__3::.ctor

    .method public specialname instance class [System.Drawing]System.Drawing.Bitmap 
            _Lambda$__2() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       22 (0x16)
      .maxstack  2
      .locals init ([0] class [System.Drawing]System.Drawing.Bitmap _Lambda$__2)
//000048:                 Dim pool = New ObjectPool(Of Bitmap)(Function() New Bitmap(width, height))
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_width
      IL_0006:  ldarg.0
      IL_0007:  ldfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_height
      IL_000c:  newobj     instance void [System.Drawing]System.Drawing.Bitmap::.ctor(int32,
                                                                                      int32)
      IL_0011:  stloc.0
      IL_0012:  br.s       IL_0014

      IL_0014:  ldloc.0
      IL_0015:  ret
    } // end of method _Closure$__3::_Lambda$__2

    .method public specialname instance void 
            _Lambda$__5() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       128 (0x80)
      .maxstack  3
      .locals init ([0] class [System]System.Diagnostics.Stopwatch sw,
               [1] class GameOfLife.MainForm/_Closure$__3/_Closure$__4 $VB$Closure_ClosureVariable_39_2A,
               [2] valuetype [mscorlib]System.TimeSpan VB$t_struct$S0,
               [3] bool VB$CG$t_bool$S0)
//000049:                 _game = New GameBoard(width, height, initialDensity, pool) With {.RunParallel = chkParallel.Checked}
//000050: 
//000051:                 ' Run the game on a background thread.
//000052:                 ' Run until cancellation is requested.
//000053:                 ' Move to the next board, timing how long it takes.
//000054:                 ' Update the UI with the new board image.
//000055:                 ' When the game is done, reset the board.
//000056:                 Task.Factory.StartNew(Sub()
      IL_0000:  nop
//000057:                                           Dim sw = New Stopwatch()
      IL_0001:  newobj     instance void [System]System.Diagnostics.Stopwatch::.ctor()
      IL_0006:  stloc.0
//000058:                                           Do While Not token.IsCancellationRequested
//000059:                                               sw.Restart()
//000060:                                               Dim bmp = _game.MoveNext()
//000061:                                               Dim framesPerSecond = 1 / sw.Elapsed.TotalSeconds
//000062:                                               BeginInvoke((Sub()
//000063:                                                                lblFramesPerSecond.Text = String.Format("Frames / Sec: {0:F2}", framesPerSecond)
//000064:                                                                Dim old = CType(pictureBox1.Image, Bitmap)
//000065:                                                                pictureBox1.Image = bmp
//000066:                                                                If old IsNot Nothing Then
//000067:                                                                    pool.PutObject(old)
//000068:                                                                End If
//000069:                                                            End Sub))
//000070:                                           Loop
//000071:                                       End Sub, token).ContinueWith(Sub()
//000072:                                                                        _cancellation = Nothing
//000073:                                                                        btnRun.Text = "Start"
//000074:                                                                        lblDensity.Visible = True
//000075:                                                                        tbDensity.Visible = True
//000076:                                                                    End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000077: 
//000078:                 ' If a game is currently running, cancel it.
//000079:             Else
//000080:                 _cancellation.Cancel()
//000081:             End If
//000082:         End Sub
//000083:     End Class
//000084: End Namespace
      IL_0007:  br.s       IL_006c

      IL_0009:  ldloc.1
      IL_000a:  newobj     instance void GameOfLife.MainForm/_Closure$__3/_Closure$__4::.ctor(class GameOfLife.MainForm/_Closure$__3/_Closure$__4)
      IL_000f:  stloc.1
      IL_0010:  ldloc.1
      IL_0011:  ldarg.0
      IL_0012:  stfld      class GameOfLife.MainForm/_Closure$__3 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$NonLocal__Closure$__3
//000059:                                               sw.Restart()
      IL_0017:  ldloc.0
      IL_0018:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Restart()
      IL_001d:  nop
//000060:                                               Dim bmp = _game.MoveNext()
      IL_001e:  ldloc.1
      IL_001f:  ldarg.0
      IL_0020:  ldfld      class GameOfLife.MainForm GameOfLife.MainForm/_Closure$__3::$VB$Me
      IL_0025:  ldfld      class GameOfLife.GameBoard GameOfLife.MainForm::_game
      IL_002a:  callvirt   instance class [System.Drawing]System.Drawing.Bitmap GameOfLife.GameBoard::MoveNext()
      IL_002f:  stfld      class [System.Drawing]System.Drawing.Bitmap GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$Local_bmp
//000061:                                               Dim framesPerSecond = 1 / sw.Elapsed.TotalSeconds
      IL_0034:  ldloc.1
      IL_0035:  ldc.r8     1.
      IL_003e:  ldloc.0
      IL_003f:  callvirt   instance valuetype [mscorlib]System.TimeSpan [System]System.Diagnostics.Stopwatch::get_Elapsed()
      IL_0044:  stloc.2
      IL_0045:  ldloca.s   VB$t_struct$S0
      IL_0047:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
      IL_004c:  div
      IL_004d:  stfld      float64 GameOfLife.MainForm/_Closure$__3/_Closure$__4::$VB$Local_framesPerSecond
//000062:                                               BeginInvoke((Sub()
      IL_0052:  ldarg.0
      IL_0053:  ldfld      class GameOfLife.MainForm GameOfLife.MainForm/_Closure$__3::$VB$Me
      IL_0058:  ldloc.1
      IL_0059:  dup
      IL_005a:  ldvirtftn  instance void GameOfLife.MainForm/_Closure$__3/_Closure$__4::_Lambda$__6()
      IL_0060:  newobj     instance void VB$AnonymousDelegate_2::.ctor(object,
                                                                       native int)
      IL_0065:  callvirt   instance class [mscorlib]System.IAsyncResult [System.Windows.Forms]System.Windows.Forms.Control::BeginInvoke(class [mscorlib]System.Delegate)
      IL_006a:  pop
//000063:                                                                lblFramesPerSecond.Text = String.Format("Frames / Sec: {0:F2}", framesPerSecond)
//000064:                                                                Dim old = CType(pictureBox1.Image, Bitmap)
//000065:                                                                pictureBox1.Image = bmp
//000066:                                                                If old IsNot Nothing Then
//000067:                                                                    pool.PutObject(old)
//000068:                                                                End If
//000069:                                                            End Sub))
//000070:                                           Loop
      IL_006b:  nop
//000058:                                           Do While Not token.IsCancellationRequested
      IL_006c:  ldarg.0
      IL_006d:  ldflda     valuetype [mscorlib]System.Threading.CancellationToken GameOfLife.MainForm/_Closure$__3::$VB$Local_token
      IL_0072:  call       instance bool [mscorlib]System.Threading.CancellationToken::get_IsCancellationRequested()
      IL_0077:  ldc.i4.0
      IL_0078:  ceq
      IL_007a:  stloc.3
//000059:                                               sw.Restart()
//000060:                                               Dim bmp = _game.MoveNext()
//000061:                                               Dim framesPerSecond = 1 / sw.Elapsed.TotalSeconds
//000062:                                               BeginInvoke((Sub()
//000063:                                                                lblFramesPerSecond.Text = String.Format("Frames / Sec: {0:F2}", framesPerSecond)
//000064:                                                                Dim old = CType(pictureBox1.Image, Bitmap)
//000065:                                                                pictureBox1.Image = bmp
//000066:                                                                If old IsNot Nothing Then
//000067:                                                                    pool.PutObject(old)
//000068:                                                                End If
//000069:                                                            End Sub))
//000070:                                           Loop
//000071:                                       End Sub, token).ContinueWith(Sub()
//000072:                                                                        _cancellation = Nothing
//000073:                                                                        btnRun.Text = "Start"
//000074:                                                                        lblDensity.Visible = True
//000075:                                                                        tbDensity.Visible = True
//000076:                                                                    End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000077: 
//000078:                 ' If a game is currently running, cancel it.
//000079:             Else
//000080:                 _cancellation.Cancel()
//000081:             End If
//000082:         End Sub
//000083:     End Class
//000084: End Namespace
      IL_007b:  ldloc.3
      IL_007c:  brtrue.s   IL_0009

//000071:                                       End Sub, token).ContinueWith(Sub()
      IL_007e:  nop
      IL_007f:  ret
    } // end of method _Closure$__3::_Lambda$__5

  } // end of class _Closure$__3

  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .field private class [System]System.ComponentModel.IContainer components
  .field private class [System.Windows.Forms]System.Windows.Forms.PictureBox pictureBox1
  .field private class [System.Windows.Forms]System.Windows.Forms.Button _btnRun
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 06 62 74 6E 52 75 6E 00 00 )                // ...btnRun..
  .field private class [System.Windows.Forms]System.Windows.Forms.CheckBox _chkParallel
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0B 63 68 6B 50 61 72 61 6C 6C 65 6C 00 00 ) // ...chkParallel..
  .field private class [System.Windows.Forms]System.Windows.Forms.TrackBar tbDensity
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblDensity
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblFramesPerSecond
  .field private class [mscorlib]System.Threading.CancellationTokenSource _cancellation
  .field private class GameOfLife.GameBoard _game
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
    IL_000a:  nop
    IL_000b:  ret
  } // end of method MainForm::.cctor

  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> GameOfLife.MainForm::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method MainForm::__ENCAddToList

  .method family strict virtual instance void 
          Dispose(bool disposing) cil managed
  {
    // Code size       43 (0x2b)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\MainForm.Designer.vb' 
//000012: 		Protected Overrides Sub Dispose(ByVal disposing As Boolean)
    IL_0000:  nop
//000013: 			If disposing AndAlso (components IsNot Nothing) Then
    IL_0001:  ldarg.1
    IL_0002:  brfalse.s  IL_000c

    IL_0004:  ldarg.0
    IL_0005:  ldfld      class [System]System.ComponentModel.IContainer GameOfLife.MainForm::components
    IL_000a:  brtrue.s   IL_000f

    IL_000c:  ldc.i4.0
    IL_000d:  br.s       IL_0010

    IL_000f:  ldc.i4.1
    IL_0010:  stloc.0
//000014: 				components.Dispose()
//000015: 			End If
//000016: 			MyBase.Dispose(disposing)
//000017: 		End Sub
//000018: 
//000019: 		#Region "Windows Form Designer generated code"
//000020: 
//000021: 		''' <summary>
//000022: 		''' Required method for Designer support - do not modify
//000023: 		''' the contents of this method with the code editor.
//000024: 		''' </summary>
//000025: 		Private Sub InitializeComponent()
//000026: 			Me.pictureBox1 = New PictureBox()
//000027: 			Me.btnRun = New Button()
//000028: 			Me.chkParallel = New CheckBox()
//000029: 			Me.tbDensity = New TrackBar()
//000030: 			Me.lblDensity = New Label()
//000031: 			Me.lblFramesPerSecond = New Label()
//000032: 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).BeginInit()
//000033: 			CType(Me.tbDensity, System.ComponentModel.ISupportInitialize).BeginInit()
//000034: 			Me.SuspendLayout()
//000035: 			' 
//000036: 			' pictureBox1
//000037: 			' 
//000038: 			Me.pictureBox1.Anchor = (CType((((AnchorStyles.Top Or AnchorStyles.Bottom) Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
//000039: 			Me.pictureBox1.BackColor = Color.White
//000040: 			Me.pictureBox1.BorderStyle = BorderStyle.Fixed3D
//000041: 			Me.pictureBox1.Location = New Point(12, 41)
//000042: 			Me.pictureBox1.Name = "pictureBox1"
//000043: 			Me.pictureBox1.Size = New Size(464, 413)
//000044: 			Me.pictureBox1.TabIndex = 0
//000045: 			Me.pictureBox1.TabStop = False
//000046: 			' 
//000047: 			' btnRun
//000048: 			' 
//000049: 			Me.btnRun.Location = New Point(12, 12)
//000050: 			Me.btnRun.Name = "btnRun"
//000051: 			Me.btnRun.Size = New Size(75, 23)
//000052: 			Me.btnRun.TabIndex = 1
//000053: 			Me.btnRun.Text = "Start"
//000054: 			Me.btnRun.UseVisualStyleBackColor = True
//000055: '			Me.btnRun.Click += New System.EventHandler(Me.btnRun_Click)
//000056: 			' 
//000057: 			' chkParallel
//000058: 			' 
//000059: 			Me.chkParallel.AutoSize = True
//000060: 			Me.chkParallel.Location = New Point(93, 16)
//000061: 			Me.chkParallel.Name = "chkParallel"
//000062: 			Me.chkParallel.Size = New Size(66, 17)
//000063: 			Me.chkParallel.TabIndex = 2
//000064: 			Me.chkParallel.Text = "Parallel?"
//000065: 			Me.chkParallel.UseVisualStyleBackColor = True
//000066: '			Me.chkParallel.CheckedChanged += New System.EventHandler(Me.chkParallel_CheckedChanged)
//000067: 			' 
//000068: 			' tbDensity
//000069: 			' 
//000070: 			Me.tbDensity.Anchor = (CType(((AnchorStyles.Top Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
//000071: 			Me.tbDensity.Location = New Point(325, 12)
//000072: 			Me.tbDensity.Maximum = 1000
//000073: 			Me.tbDensity.Minimum = 1
//000074: 			Me.tbDensity.Name = "tbDensity"
//000075: 			Me.tbDensity.Size = New Size(151, 45)
//000076: 			Me.tbDensity.TabIndex = 3
//000077: 			Me.tbDensity.TickStyle = TickStyle.None
//000078: 			Me.tbDensity.Value = 100
//000079: 			' 
//000080: 			' lblDensity
//000081: 			' 
//000082: 			Me.lblDensity.AutoSize = True
//000083: 			Me.lblDensity.Location = New Point(250, 16)
//000084: 			Me.lblDensity.Name = "lblDensity"
//000085: 			Me.lblDensity.Size = New Size(69, 13)
//000086: 			Me.lblDensity.TabIndex = 4
//000087: 			Me.lblDensity.Text = "Initial Density"
//000088: 			' 
//000089: 			' lblFramesPerSecond
//000090: 			' 
//000091: 			Me.lblFramesPerSecond.Anchor = (CType((AnchorStyles.Bottom Or AnchorStyles.Left), AnchorStyles))
//000092: 			Me.lblFramesPerSecond.AutoSize = True
//000093: 			Me.lblFramesPerSecond.Location = New Point(13, 457)
//000094: 			Me.lblFramesPerSecond.Name = "lblFramesPerSecond"
//000095: 			Me.lblFramesPerSecond.Size = New Size(77, 13)
//000096: 			Me.lblFramesPerSecond.TabIndex = 5
//000097: 			Me.lblFramesPerSecond.Text = "Frames / Sec: "
//000098: 			' 
//000099: 			' MainForm
//000100: 			' 
//000101: 			Me.AutoScaleDimensions = New SizeF(6F, 13F)
//000102: 			Me.AutoScaleMode = AutoScaleMode.Font
//000103: 			Me.ClientSize = New Size(488, 482)
//000104: 			Me.Controls.Add(Me.lblFramesPerSecond)
//000105: 			Me.Controls.Add(Me.lblDensity)
//000106: 			Me.Controls.Add(Me.chkParallel)
//000107: 			Me.Controls.Add(Me.btnRun)
//000108: 			Me.Controls.Add(Me.pictureBox1)
//000109: 			Me.Controls.Add(Me.tbDensity)
//000110: 			Me.Name = "MainForm"
//000111: 			Me.Text = "Conway's Game Of Life"
//000112: 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).EndInit()
//000113: 			CType(Me.tbDensity, System.ComponentModel.ISupportInitialize).EndInit()
//000114: 			Me.ResumeLayout(False)
//000115: 			Me.PerformLayout()
//000116: 
//000117: 		End Sub
//000118: 
//000119: 		#End Region
//000120: 
//000121: 		Private pictureBox1 As PictureBox
//000122: 		Private WithEvents btnRun As Button
//000123: 		Private WithEvents chkParallel As CheckBox
//000124: 		Private tbDensity As TrackBar
//000125: 		Private lblDensity As Label
//000126: 		Private lblFramesPerSecond As Label
//000127: 	End Class
//000128: End Namespace
//000129: 
    IL_0011:  ldloc.0
    IL_0012:  brfalse.s  IL_0020

//000014: 				components.Dispose()
    IL_0014:  ldarg.0
    IL_0015:  ldfld      class [System]System.ComponentModel.IContainer GameOfLife.MainForm::components
    IL_001a:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
    IL_001f:  nop
//000015: 			End If
    IL_0020:  nop
//000016: 			MyBase.Dispose(disposing)
    IL_0021:  ldarg.0
    IL_0022:  ldarg.1
    IL_0023:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::Dispose(bool)
    IL_0028:  nop
//000017: 		End Sub
    IL_0029:  nop
    IL_002a:  ret
  } // end of method MainForm::Dispose

  .method private instance void  InitializeComponent() cil managed
  {
    // Code size       1113 (0x459)
    .maxstack  4
    .locals init ([0] valuetype [System.Drawing]System.Drawing.Color VB$t_struct$N0,
             [1] valuetype [System.Drawing]System.Drawing.Point VB$t_struct$N1,
             [2] valuetype [System.Drawing]System.Drawing.Point VB$t_struct$S2,
             [3] valuetype [System.Drawing]System.Drawing.Size VB$t_struct$N3,
             [4] valuetype [System.Drawing]System.Drawing.Size VB$t_struct$S4,
             [5] valuetype [System.Drawing]System.Drawing.SizeF VB$t_struct$N5,
             [6] valuetype [System.Drawing]System.Drawing.SizeF VB$t_struct$S6)
//000018: 
//000019: 		#Region "Windows Form Designer generated code"
//000020: 
//000021: 		''' <summary>
//000022: 		''' Required method for Designer support - do not modify
//000023: 		''' the contents of this method with the code editor.
//000024: 		''' </summary>
//000025: 		Private Sub InitializeComponent()
    IL_0000:  nop
//000026: 			Me.pictureBox1 = New PictureBox()
    IL_0001:  ldarg.0
    IL_0002:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::.ctor()
    IL_0007:  stfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
//000027: 			Me.btnRun = New Button()
    IL_000c:  ldarg.0
    IL_000d:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Button::.ctor()
    IL_0012:  callvirt   instance void GameOfLife.MainForm::set_btnRun(class [System.Windows.Forms]System.Windows.Forms.Button)
    IL_0017:  nop
//000028: 			Me.chkParallel = New CheckBox()
    IL_0018:  ldarg.0
    IL_0019:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::.ctor()
    IL_001e:  callvirt   instance void GameOfLife.MainForm::set_chkParallel(class [System.Windows.Forms]System.Windows.Forms.CheckBox)
    IL_0023:  nop
//000029: 			Me.tbDensity = New TrackBar()
    IL_0024:  ldarg.0
    IL_0025:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::.ctor()
    IL_002a:  stfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
//000030: 			Me.lblDensity = New Label()
    IL_002f:  ldarg.0
    IL_0030:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0035:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
//000031: 			Me.lblFramesPerSecond = New Label()
    IL_003a:  ldarg.0
    IL_003b:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0040:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
//000032: 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_0045:  ldarg.0
    IL_0046:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_004b:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_0050:  nop
//000033: 			CType(Me.tbDensity, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_0051:  ldarg.0
    IL_0052:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_0057:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_005c:  nop
//000034: 			Me.SuspendLayout()
    IL_005d:  ldarg.0
    IL_005e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0063:  nop
//000035: 			' 
//000036: 			' pictureBox1
//000037: 			' 
//000038: 			Me.pictureBox1.Anchor = (CType((((AnchorStyles.Top Or AnchorStyles.Bottom) Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
    IL_0064:  ldarg.0
    IL_0065:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_006a:  ldc.i4.s   15
    IL_006c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0071:  nop
//000039: 			Me.pictureBox1.BackColor = Color.White
    IL_0072:  ldarg.0
    IL_0073:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_0078:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_White()
    IL_007d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0082:  nop
//000040: 			Me.pictureBox1.BorderStyle = BorderStyle.Fixed3D
    IL_0083:  ldarg.0
    IL_0084:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_0089:  ldc.i4.2
    IL_008a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_BorderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.BorderStyle)
    IL_008f:  nop
//000041: 			Me.pictureBox1.Location = New Point(12, 41)
    IL_0090:  ldarg.0
    IL_0091:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_0096:  ldloca.s   VB$t_struct$S2
    IL_0098:  ldc.i4.s   12
    IL_009a:  ldc.i4.s   41
    IL_009c:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_00a1:  nop
    IL_00a2:  ldloc.2
    IL_00a3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_00a8:  nop
//000042: 			Me.pictureBox1.Name = "pictureBox1"
    IL_00a9:  ldarg.0
    IL_00aa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_00af:  ldstr      "pictureBox1"
    IL_00b4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_00b9:  nop
//000043: 			Me.pictureBox1.Size = New Size(464, 413)
    IL_00ba:  ldarg.0
    IL_00bb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_00c0:  ldloca.s   VB$t_struct$S4
    IL_00c2:  ldc.i4     0x1d0
    IL_00c7:  ldc.i4     0x19d
    IL_00cc:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_00d1:  nop
    IL_00d2:  ldloc.s    VB$t_struct$S4
    IL_00d4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_00d9:  nop
//000044: 			Me.pictureBox1.TabIndex = 0
    IL_00da:  ldarg.0
    IL_00db:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_00e0:  ldc.i4.0
    IL_00e1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabIndex(int32)
    IL_00e6:  nop
//000045: 			Me.pictureBox1.TabStop = False
    IL_00e7:  ldarg.0
    IL_00e8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_00ed:  ldc.i4.0
    IL_00ee:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabStop(bool)
    IL_00f3:  nop
//000046: 			' 
//000047: 			' btnRun
//000048: 			' 
//000049: 			Me.btnRun.Location = New Point(12, 12)
    IL_00f4:  ldarg.0
    IL_00f5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_00fa:  ldloca.s   VB$t_struct$S2
    IL_00fc:  ldc.i4.s   12
    IL_00fe:  ldc.i4.s   12
    IL_0100:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0105:  nop
    IL_0106:  ldloc.2
    IL_0107:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_010c:  nop
//000050: 			Me.btnRun.Name = "btnRun"
    IL_010d:  ldarg.0
    IL_010e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_0113:  ldstr      "btnRun"
    IL_0118:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_011d:  nop
//000051: 			Me.btnRun.Size = New Size(75, 23)
    IL_011e:  ldarg.0
    IL_011f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_0124:  ldloca.s   VB$t_struct$S4
    IL_0126:  ldc.i4.s   75
    IL_0128:  ldc.i4.s   23
    IL_012a:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_012f:  nop
    IL_0130:  ldloc.s    VB$t_struct$S4
    IL_0132:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0137:  nop
//000052: 			Me.btnRun.TabIndex = 1
    IL_0138:  ldarg.0
    IL_0139:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_013e:  ldc.i4.1
    IL_013f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0144:  nop
//000053: 			Me.btnRun.Text = "Start"
    IL_0145:  ldarg.0
    IL_0146:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_014b:  ldstr      "Start"
    IL_0150:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0155:  nop
//000054: 			Me.btnRun.UseVisualStyleBackColor = True
    IL_0156:  ldarg.0
    IL_0157:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_015c:  ldc.i4.1
    IL_015d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_0162:  nop
//000055: '			Me.btnRun.Click += New System.EventHandler(Me.btnRun_Click)
//000056: 			' 
//000057: 			' chkParallel
//000058: 			' 
//000059: 			Me.chkParallel.AutoSize = True
    IL_0163:  ldarg.0
    IL_0164:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_0169:  ldc.i4.1
    IL_016a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_AutoSize(bool)
    IL_016f:  nop
//000060: 			Me.chkParallel.Location = New Point(93, 16)
    IL_0170:  ldarg.0
    IL_0171:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_0176:  ldloca.s   VB$t_struct$S2
    IL_0178:  ldc.i4.s   93
    IL_017a:  ldc.i4.s   16
    IL_017c:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0181:  nop
    IL_0182:  ldloc.2
    IL_0183:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0188:  nop
//000061: 			Me.chkParallel.Name = "chkParallel"
    IL_0189:  ldarg.0
    IL_018a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_018f:  ldstr      "chkParallel"
    IL_0194:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0199:  nop
//000062: 			Me.chkParallel.Size = New Size(66, 17)
    IL_019a:  ldarg.0
    IL_019b:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_01a0:  ldloca.s   VB$t_struct$S4
    IL_01a2:  ldc.i4.s   66
    IL_01a4:  ldc.i4.s   17
    IL_01a6:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_01ab:  nop
    IL_01ac:  ldloc.s    VB$t_struct$S4
    IL_01ae:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_01b3:  nop
//000063: 			Me.chkParallel.TabIndex = 2
    IL_01b4:  ldarg.0
    IL_01b5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_01ba:  ldc.i4.2
    IL_01bb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_01c0:  nop
//000064: 			Me.chkParallel.Text = "Parallel?"
    IL_01c1:  ldarg.0
    IL_01c2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_01c7:  ldstr      "Parallel\?"
    IL_01cc:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_01d1:  nop
//000065: 			Me.chkParallel.UseVisualStyleBackColor = True
    IL_01d2:  ldarg.0
    IL_01d3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_01d8:  ldc.i4.1
    IL_01d9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_01de:  nop
//000066: '			Me.chkParallel.CheckedChanged += New System.EventHandler(Me.chkParallel_CheckedChanged)
//000067: 			' 
//000068: 			' tbDensity
//000069: 			' 
//000070: 			Me.tbDensity.Anchor = (CType(((AnchorStyles.Top Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
    IL_01df:  ldarg.0
    IL_01e0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_01e5:  ldc.i4.s   13
    IL_01e7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_01ec:  nop
//000071: 			Me.tbDensity.Location = New Point(325, 12)
    IL_01ed:  ldarg.0
    IL_01ee:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_01f3:  ldloca.s   VB$t_struct$S2
    IL_01f5:  ldc.i4     0x145
    IL_01fa:  ldc.i4.s   12
    IL_01fc:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0201:  nop
    IL_0202:  ldloc.2
    IL_0203:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0208:  nop
//000072: 			Me.tbDensity.Maximum = 1000
    IL_0209:  ldarg.0
    IL_020a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_020f:  ldc.i4     0x3e8
    IL_0214:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Maximum(int32)
    IL_0219:  nop
//000073: 			Me.tbDensity.Minimum = 1
    IL_021a:  ldarg.0
    IL_021b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_0220:  ldc.i4.1
    IL_0221:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Minimum(int32)
    IL_0226:  nop
//000074: 			Me.tbDensity.Name = "tbDensity"
    IL_0227:  ldarg.0
    IL_0228:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_022d:  ldstr      "tbDensity"
    IL_0232:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0237:  nop
//000075: 			Me.tbDensity.Size = New Size(151, 45)
    IL_0238:  ldarg.0
    IL_0239:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_023e:  ldloca.s   VB$t_struct$S4
    IL_0240:  ldc.i4     0x97
    IL_0245:  ldc.i4.s   45
    IL_0247:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_024c:  nop
    IL_024d:  ldloc.s    VB$t_struct$S4
    IL_024f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0254:  nop
//000076: 			Me.tbDensity.TabIndex = 3
    IL_0255:  ldarg.0
    IL_0256:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_025b:  ldc.i4.3
    IL_025c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0261:  nop
//000077: 			Me.tbDensity.TickStyle = TickStyle.None
    IL_0262:  ldarg.0
    IL_0263:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_0268:  ldc.i4.0
    IL_0269:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_TickStyle(valuetype [System.Windows.Forms]System.Windows.Forms.TickStyle)
    IL_026e:  nop
//000078: 			Me.tbDensity.Value = 100
    IL_026f:  ldarg.0
    IL_0270:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_0275:  ldc.i4.s   100
    IL_0277:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Value(int32)
    IL_027c:  nop
//000079: 			' 
//000080: 			' lblDensity
//000081: 			' 
//000082: 			Me.lblDensity.AutoSize = True
    IL_027d:  ldarg.0
    IL_027e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_0283:  ldc.i4.1
    IL_0284:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_0289:  nop
//000083: 			Me.lblDensity.Location = New Point(250, 16)
    IL_028a:  ldarg.0
    IL_028b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_0290:  ldloca.s   VB$t_struct$S2
    IL_0292:  ldc.i4     0xfa
    IL_0297:  ldc.i4.s   16
    IL_0299:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_029e:  nop
    IL_029f:  ldloc.2
    IL_02a0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_02a5:  nop
//000084: 			Me.lblDensity.Name = "lblDensity"
    IL_02a6:  ldarg.0
    IL_02a7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_02ac:  ldstr      "lblDensity"
    IL_02b1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_02b6:  nop
//000085: 			Me.lblDensity.Size = New Size(69, 13)
    IL_02b7:  ldarg.0
    IL_02b8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_02bd:  ldloca.s   VB$t_struct$S4
    IL_02bf:  ldc.i4.s   69
    IL_02c1:  ldc.i4.s   13
    IL_02c3:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_02c8:  nop
    IL_02c9:  ldloc.s    VB$t_struct$S4
    IL_02cb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_02d0:  nop
//000086: 			Me.lblDensity.TabIndex = 4
    IL_02d1:  ldarg.0
    IL_02d2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_02d7:  ldc.i4.4
    IL_02d8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_02dd:  nop
//000087: 			Me.lblDensity.Text = "Initial Density"
    IL_02de:  ldarg.0
    IL_02df:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_02e4:  ldstr      "Initial Density"
    IL_02e9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_02ee:  nop
//000088: 			' 
//000089: 			' lblFramesPerSecond
//000090: 			' 
//000091: 			Me.lblFramesPerSecond.Anchor = (CType((AnchorStyles.Bottom Or AnchorStyles.Left), AnchorStyles))
    IL_02ef:  ldarg.0
    IL_02f0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
    IL_02f5:  ldc.i4.6
    IL_02f6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_02fb:  nop
//000092: 			Me.lblFramesPerSecond.AutoSize = True
    IL_02fc:  ldarg.0
    IL_02fd:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
    IL_0302:  ldc.i4.1
    IL_0303:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_0308:  nop
//000093: 			Me.lblFramesPerSecond.Location = New Point(13, 457)
    IL_0309:  ldarg.0
    IL_030a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
    IL_030f:  ldloca.s   VB$t_struct$S2
    IL_0311:  ldc.i4.s   13
    IL_0313:  ldc.i4     0x1c9
    IL_0318:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_031d:  nop
    IL_031e:  ldloc.2
    IL_031f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0324:  nop
//000094: 			Me.lblFramesPerSecond.Name = "lblFramesPerSecond"
    IL_0325:  ldarg.0
    IL_0326:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
    IL_032b:  ldstr      "lblFramesPerSecond"
    IL_0330:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0335:  nop
//000095: 			Me.lblFramesPerSecond.Size = New Size(77, 13)
    IL_0336:  ldarg.0
    IL_0337:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
    IL_033c:  ldloca.s   VB$t_struct$S4
    IL_033e:  ldc.i4.s   77
    IL_0340:  ldc.i4.s   13
    IL_0342:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0347:  nop
    IL_0348:  ldloc.s    VB$t_struct$S4
    IL_034a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_034f:  nop
//000096: 			Me.lblFramesPerSecond.TabIndex = 5
    IL_0350:  ldarg.0
    IL_0351:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
    IL_0356:  ldc.i4.5
    IL_0357:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_035c:  nop
//000097: 			Me.lblFramesPerSecond.Text = "Frames / Sec: "
    IL_035d:  ldarg.0
    IL_035e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
    IL_0363:  ldstr      "Frames / Sec: "
    IL_0368:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_036d:  nop
//000098: 			' 
//000099: 			' MainForm
//000100: 			' 
//000101: 			Me.AutoScaleDimensions = New SizeF(6F, 13F)
    IL_036e:  ldarg.0
    IL_036f:  ldloca.s   VB$t_struct$S6
    IL_0371:  ldc.r4     6.
    IL_0376:  ldc.r4     13.
    IL_037b:  call       instance void [System.Drawing]System.Drawing.SizeF::.ctor(float32,
                                                                                   float32)
    IL_0380:  nop
    IL_0381:  ldloc.s    VB$t_struct$S6
    IL_0383:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleDimensions(valuetype [System.Drawing]System.Drawing.SizeF)
    IL_0388:  nop
//000102: 			Me.AutoScaleMode = AutoScaleMode.Font
    IL_0389:  ldarg.0
    IL_038a:  ldc.i4.1
    IL_038b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleMode(valuetype [System.Windows.Forms]System.Windows.Forms.AutoScaleMode)
    IL_0390:  nop
//000103: 			Me.ClientSize = New Size(488, 482)
    IL_0391:  ldarg.0
    IL_0392:  ldloca.s   VB$t_struct$S4
    IL_0394:  ldc.i4     0x1e8
    IL_0399:  ldc.i4     0x1e2
    IL_039e:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_03a3:  nop
    IL_03a4:  ldloc.s    VB$t_struct$S4
    IL_03a6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_ClientSize(valuetype [System.Drawing]System.Drawing.Size)
    IL_03ab:  nop
//000104: 			Me.Controls.Add(Me.lblFramesPerSecond)
    IL_03ac:  ldarg.0
    IL_03ad:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_03b2:  ldarg.0
    IL_03b3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblFramesPerSecond
    IL_03b8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_03bd:  nop
//000105: 			Me.Controls.Add(Me.lblDensity)
    IL_03be:  ldarg.0
    IL_03bf:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_03c4:  ldarg.0
    IL_03c5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_03ca:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_03cf:  nop
//000106: 			Me.Controls.Add(Me.chkParallel)
    IL_03d0:  ldarg.0
    IL_03d1:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_03d6:  ldarg.0
    IL_03d7:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_03dc:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_03e1:  nop
//000107: 			Me.Controls.Add(Me.btnRun)
    IL_03e2:  ldarg.0
    IL_03e3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_03e8:  ldarg.0
    IL_03e9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_03ee:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_03f3:  nop
//000108: 			Me.Controls.Add(Me.pictureBox1)
    IL_03f4:  ldarg.0
    IL_03f5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_03fa:  ldarg.0
    IL_03fb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_0400:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0405:  nop
//000109: 			Me.Controls.Add(Me.tbDensity)
    IL_0406:  ldarg.0
    IL_0407:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_040c:  ldarg.0
    IL_040d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_0412:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0417:  nop
//000110: 			Me.Name = "MainForm"
    IL_0418:  ldarg.0
    IL_0419:  ldstr      "MainForm"
    IL_041e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0423:  nop
//000111: 			Me.Text = "Conway's Game Of Life"
    IL_0424:  ldarg.0
    IL_0425:  ldstr      "Conway's Game Of Life"
    IL_042a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_Text(string)
    IL_042f:  nop
//000112: 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).EndInit()
    IL_0430:  ldarg.0
    IL_0431:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_0436:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_043b:  nop
//000113: 			CType(Me.tbDensity, System.ComponentModel.ISupportInitialize).EndInit()
    IL_043c:  ldarg.0
    IL_043d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_0442:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0447:  nop
//000114: 			Me.ResumeLayout(False)
    IL_0448:  ldarg.0
    IL_0449:  ldc.i4.0
    IL_044a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_044f:  nop
//000115: 			Me.PerformLayout()
    IL_0450:  ldarg.0
    IL_0451:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0456:  nop
//000116: 
//000117: 		End Sub
    IL_0457:  nop
    IL_0458:  ret
  } // end of method MainForm::InitializeComponent

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.Button 
          get_btnRun() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.Button V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::_btnRun
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_btnRun

  .method private newslot specialname strict virtual 
          instance void  set_btnRun(class [System.Windows.Forms]System.Windows.Forms.Button WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void GameOfLife.MainForm::btnRun_Click(object,
                                                                         class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::_btnRun
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::_btnRun
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::remove_Click(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::_btnRun
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::_btnRun
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::_btnRun
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_Click(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_btnRun

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.CheckBox 
          get_chkParallel() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.CheckBox V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::_chkParallel
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_chkParallel

  .method private newslot specialname strict virtual 
          instance void  set_chkParallel(class [System.Windows.Forms]System.Windows.Forms.CheckBox WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void GameOfLife.MainForm::chkParallel_CheckedChanged(object,
                                                                                       class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::_chkParallel
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::_chkParallel
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::remove_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::_chkParallel
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::_chkParallel
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::_chkParallel
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::add_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_chkParallel

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       31 (0x1f)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\MainForm.vb' 
//000016: 		Public Sub New()
    IL_0000:  nop
//000017: 			InitializeComponent()
//000018: 		End Sub
//000019: 
//000020: 		''' <summary>Used to cancel the current game.</summary>
//000021: 		Private _cancellation As CancellationTokenSource
//000022: 		''' <summary>The current game.</summary>
//000023: 		Private _game As GameBoard
//000024: 
//000025: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000026: 			If _game IsNot Nothing Then
//000027: 				_game.RunParallel = chkParallel.Checked
//000028: 			End If
//000029: 		End Sub
//000030: 
//000031: 
//000032:         ''' <summary>Run a game.</summary>
//000033:         Private Sub btnRun_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnRun.Click
//000034:             ' If no game is currently running, run one.
//000035:             If _cancellation Is Nothing Then
//000036:                 ' Clear the current image, get the size of the board to use, initialize cancellation,
//000037:                 ' And prepare the form for game running.
//000038:                 pictureBox1.Image = Nothing
//000039:                 Dim width = pictureBox1.Width, height = pictureBox1.Height
//000040:                 _cancellation = New CancellationTokenSource()
//000041:                 Dim token = _cancellation.Token
//000042:                 lblDensity.Visible = False
//000043:                 tbDensity.Visible = False
//000044:                 btnRun.Text = "Stop"
//000045:                 Dim initialDensity = tbDensity.Value / 1000.0
//000046: 
//000047:                 ' Initialize the object pool and the game board.
//000048:                 Dim pool = New ObjectPool(Of Bitmap)(Function() New Bitmap(width, height))
//000049:                 _game = New GameBoard(width, height, initialDensity, pool) With {.RunParallel = chkParallel.Checked}
//000050: 
//000051:                 ' Run the game on a background thread.
//000052:                 ' Run until cancellation is requested.
//000053:                 ' Move to the next board, timing how long it takes.
//000054:                 ' Update the UI with the new board image.
//000055:                 ' When the game is done, reset the board.
//000056:                 Task.Factory.StartNew(Sub()
//000057:                                           Dim sw = New Stopwatch()
//000058:                                           Do While Not token.IsCancellationRequested
//000059:                                               sw.Restart()
//000060:                                               Dim bmp = _game.MoveNext()
//000061:                                               Dim framesPerSecond = 1 / sw.Elapsed.TotalSeconds
//000062:                                               BeginInvoke((Sub()
//000063:                                                                lblFramesPerSecond.Text = String.Format("Frames / Sec: {0:F2}", framesPerSecond)
//000064:                                                                Dim old = CType(pictureBox1.Image, Bitmap)
//000065:                                                                pictureBox1.Image = bmp
//000066:                                                                If old IsNot Nothing Then
//000067:                                                                    pool.PutObject(old)
//000068:                                                                End If
//000069:                                                            End Sub))
//000070:                                           Loop
//000071:                                       End Sub, token).ContinueWith(Sub()
//000072:                                                                        _cancellation = Nothing
//000073:                                                                        btnRun.Text = "Start"
//000074:                                                                        lblDensity.Visible = True
//000075:                                                                        tbDensity.Visible = True
//000076:                                                                    End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000077: 
//000078:                 ' If a game is currently running, cancel it.
//000079:             Else
//000080:                 _cancellation.Cancel()
//000081:             End If
//000082:         End Sub
//000083:     End Class
//000084: End Namespace
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::.ctor()
    IL_0007:  nop
    IL_0008:  ldarg.0
    IL_0009:  call       void GameOfLife.MainForm::__ENCAddToList(object)
    IL_000e:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\MainForm.Designer.vb' 
//000006: 		Private components As System.ComponentModel.IContainer = Nothing
    IL_000f:  ldarg.0
    IL_0010:  ldnull
    IL_0011:  stfld      class [System]System.ComponentModel.IContainer GameOfLife.MainForm::components
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\MainForm.vb' 
//000017: 			InitializeComponent()
    IL_0016:  ldarg.0
    IL_0017:  callvirt   instance void GameOfLife.MainForm::InitializeComponent()
    IL_001c:  nop
//000018: 		End Sub
    IL_001d:  nop
    IL_001e:  ret
  } // end of method MainForm::.ctor

  .method private instance void  chkParallel_CheckedChanged(object sender,
                                                            class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       43 (0x2b)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
//000019: 
//000020: 		''' <summary>Used to cancel the current game.</summary>
//000021: 		Private _cancellation As CancellationTokenSource
//000022: 		''' <summary>The current game.</summary>
//000023: 		Private _game As GameBoard
//000024: 
//000025: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
    IL_0000:  nop
//000026: 			If _game IsNot Nothing Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class GameOfLife.GameBoard GameOfLife.MainForm::_game
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  ldc.i4.0
    IL_000b:  ceq
    IL_000d:  stloc.0
//000027: 				_game.RunParallel = chkParallel.Checked
//000028: 			End If
//000029: 		End Sub
//000030: 
//000031: 
//000032:         ''' <summary>Run a game.</summary>
//000033:         Private Sub btnRun_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnRun.Click
//000034:             ' If no game is currently running, run one.
//000035:             If _cancellation Is Nothing Then
//000036:                 ' Clear the current image, get the size of the board to use, initialize cancellation,
//000037:                 ' And prepare the form for game running.
//000038:                 pictureBox1.Image = Nothing
//000039:                 Dim width = pictureBox1.Width, height = pictureBox1.Height
//000040:                 _cancellation = New CancellationTokenSource()
//000041:                 Dim token = _cancellation.Token
//000042:                 lblDensity.Visible = False
//000043:                 tbDensity.Visible = False
//000044:                 btnRun.Text = "Stop"
//000045:                 Dim initialDensity = tbDensity.Value / 1000.0
//000046: 
//000047:                 ' Initialize the object pool and the game board.
//000048:                 Dim pool = New ObjectPool(Of Bitmap)(Function() New Bitmap(width, height))
//000049:                 _game = New GameBoard(width, height, initialDensity, pool) With {.RunParallel = chkParallel.Checked}
//000050: 
//000051:                 ' Run the game on a background thread.
//000052:                 ' Run until cancellation is requested.
//000053:                 ' Move to the next board, timing how long it takes.
//000054:                 ' Update the UI with the new board image.
//000055:                 ' When the game is done, reset the board.
//000056:                 Task.Factory.StartNew(Sub()
//000057:                                           Dim sw = New Stopwatch()
//000058:                                           Do While Not token.IsCancellationRequested
//000059:                                               sw.Restart()
//000060:                                               Dim bmp = _game.MoveNext()
//000061:                                               Dim framesPerSecond = 1 / sw.Elapsed.TotalSeconds
//000062:                                               BeginInvoke((Sub()
//000063:                                                                lblFramesPerSecond.Text = String.Format("Frames / Sec: {0:F2}", framesPerSecond)
//000064:                                                                Dim old = CType(pictureBox1.Image, Bitmap)
//000065:                                                                pictureBox1.Image = bmp
//000066:                                                                If old IsNot Nothing Then
//000067:                                                                    pool.PutObject(old)
//000068:                                                                End If
//000069:                                                            End Sub))
//000070:                                           Loop
//000071:                                       End Sub, token).ContinueWith(Sub()
//000072:                                                                        _cancellation = Nothing
//000073:                                                                        btnRun.Text = "Start"
//000074:                                                                        lblDensity.Visible = True
//000075:                                                                        tbDensity.Visible = True
//000076:                                                                    End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000077: 
//000078:                 ' If a game is currently running, cancel it.
//000079:             Else
//000080:                 _cancellation.Cancel()
//000081:             End If
//000082:         End Sub
//000083:     End Class
//000084: End Namespace
    IL_000e:  ldloc.0
    IL_000f:  brfalse.s  IL_0028

//000027: 				_game.RunParallel = chkParallel.Checked
    IL_0011:  ldarg.0
    IL_0012:  ldfld      class GameOfLife.GameBoard GameOfLife.MainForm::_game
    IL_0017:  ldarg.0
    IL_0018:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_001d:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_0022:  callvirt   instance void GameOfLife.GameBoard::set_RunParallel(bool)
    IL_0027:  nop
//000028: 			End If
    IL_0028:  nop
//000029: 		End Sub
    IL_0029:  nop
    IL_002a:  ret
  } // end of method MainForm::chkParallel_CheckedChanged

  .method private instance void  btnRun_Click(object sender,
                                              class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       316 (0x13c)
    .maxstack  5
    .locals init ([0] class GameOfLife.MainForm/_Closure$__3 $VB$Closure_ClosureVariable_22_C,
             [1] float64 initialDensity,
             [2] class GameOfLife.GameBoard VB$t_ref$S0,
             [3] bool VB$CG$t_bool$S0)
//000030: 
//000031: 
//000032:         ''' <summary>Run a game.</summary>
//000033:         Private Sub btnRun_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnRun.Click
    IL_0000:  nop
//000034:             ' If no game is currently running, run one.
//000035:             If _cancellation Is Nothing Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource GameOfLife.MainForm::_cancellation
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  stloc.3
//000036:                 ' Clear the current image, get the size of the board to use, initialize cancellation,
//000037:                 ' And prepare the form for game running.
//000038:                 pictureBox1.Image = Nothing
//000039:                 Dim width = pictureBox1.Width, height = pictureBox1.Height
//000040:                 _cancellation = New CancellationTokenSource()
//000041:                 Dim token = _cancellation.Token
//000042:                 lblDensity.Visible = False
//000043:                 tbDensity.Visible = False
//000044:                 btnRun.Text = "Stop"
//000045:                 Dim initialDensity = tbDensity.Value / 1000.0
//000046: 
//000047:                 ' Initialize the object pool and the game board.
//000048:                 Dim pool = New ObjectPool(Of Bitmap)(Function() New Bitmap(width, height))
//000049:                 _game = New GameBoard(width, height, initialDensity, pool) With {.RunParallel = chkParallel.Checked}
//000050: 
//000051:                 ' Run the game on a background thread.
//000052:                 ' Run until cancellation is requested.
//000053:                 ' Move to the next board, timing how long it takes.
//000054:                 ' Update the UI with the new board image.
//000055:                 ' When the game is done, reset the board.
//000056:                 Task.Factory.StartNew(Sub()
//000057:                                           Dim sw = New Stopwatch()
//000058:                                           Do While Not token.IsCancellationRequested
//000059:                                               sw.Restart()
//000060:                                               Dim bmp = _game.MoveNext()
//000061:                                               Dim framesPerSecond = 1 / sw.Elapsed.TotalSeconds
//000062:                                               BeginInvoke((Sub()
//000063:                                                                lblFramesPerSecond.Text = String.Format("Frames / Sec: {0:F2}", framesPerSecond)
//000064:                                                                Dim old = CType(pictureBox1.Image, Bitmap)
//000065:                                                                pictureBox1.Image = bmp
//000066:                                                                If old IsNot Nothing Then
//000067:                                                                    pool.PutObject(old)
//000068:                                                                End If
//000069:                                                            End Sub))
//000070:                                           Loop
//000071:                                       End Sub, token).ContinueWith(Sub()
//000072:                                                                        _cancellation = Nothing
//000073:                                                                        btnRun.Text = "Start"
//000074:                                                                        lblDensity.Visible = True
//000075:                                                                        tbDensity.Visible = True
//000076:                                                                    End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000077: 
//000078:                 ' If a game is currently running, cancel it.
//000079:             Else
//000080:                 _cancellation.Cancel()
//000081:             End If
//000082:         End Sub
//000083:     End Class
//000084: End Namespace
    IL_000b:  ldloc.3
    IL_000c:  brfalse    IL_012c

    IL_0011:  newobj     instance void GameOfLife.MainForm/_Closure$__3::.ctor()
    IL_0016:  stloc.0
    IL_0017:  ldloc.0
    IL_0018:  ldarg.0
    IL_0019:  stfld      class GameOfLife.MainForm GameOfLife.MainForm/_Closure$__3::$VB$Me
//000038:                 pictureBox1.Image = Nothing
    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_0024:  ldnull
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
    IL_002a:  nop
//000039:                 Dim width = pictureBox1.Width, height = pictureBox1.Height
    IL_002b:  ldloc.0
    IL_002c:  ldarg.0
    IL_002d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_0032:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Width()
    IL_0037:  stfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_width
    IL_003c:  ldloc.0
    IL_003d:  ldarg.0
    IL_003e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox GameOfLife.MainForm::pictureBox1
    IL_0043:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Height()
    IL_0048:  stfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_height
//000040:                 _cancellation = New CancellationTokenSource()
    IL_004d:  ldarg.0
    IL_004e:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_0053:  stfld      class [mscorlib]System.Threading.CancellationTokenSource GameOfLife.MainForm::_cancellation
//000041:                 Dim token = _cancellation.Token
    IL_0058:  ldloc.0
    IL_0059:  ldarg.0
    IL_005a:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource GameOfLife.MainForm::_cancellation
    IL_005f:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_0064:  stfld      valuetype [mscorlib]System.Threading.CancellationToken GameOfLife.MainForm/_Closure$__3::$VB$Local_token
//000042:                 lblDensity.Visible = False
    IL_0069:  ldarg.0
    IL_006a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_006f:  ldc.i4.0
    IL_0070:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_0075:  nop
//000043:                 tbDensity.Visible = False
    IL_0076:  ldarg.0
    IL_0077:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_007c:  ldc.i4.0
    IL_007d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_0082:  nop
//000044:                 btnRun.Text = "Stop"
    IL_0083:  ldarg.0
    IL_0084:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_0089:  ldstr      "Stop"
    IL_008e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0093:  nop
//000045:                 Dim initialDensity = tbDensity.Value / 1000.0
    IL_0094:  ldarg.0
    IL_0095:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_009a:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_009f:  conv.r8
    IL_00a0:  ldc.r8     1000.
    IL_00a9:  div
    IL_00aa:  stloc.1
//000046: 
//000047:                 ' Initialize the object pool and the game board.
//000048:                 Dim pool = New ObjectPool(Of Bitmap)(Function() New Bitmap(width, height))
    IL_00ab:  ldloc.0
    IL_00ac:  ldloc.0
    IL_00ad:  dup
    IL_00ae:  ldvirtftn  instance class [System.Drawing]System.Drawing.Bitmap GameOfLife.MainForm/_Closure$__3::_Lambda$__2()
    IL_00b4:  newobj     instance void class [mscorlib]System.Func`1<class [System.Drawing]System.Drawing.Bitmap>::.ctor(object,
                                                                                                                         native int)
    IL_00b9:  newobj     instance void class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap>::.ctor(class [mscorlib]System.Func`1<!0>)
    IL_00be:  stfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> GameOfLife.MainForm/_Closure$__3::$VB$Local_pool
//000049:                 _game = New GameBoard(width, height, initialDensity, pool) With {.RunParallel = chkParallel.Checked}
    IL_00c3:  ldarg.0
    IL_00c4:  ldloc.0
    IL_00c5:  ldfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_width
    IL_00ca:  ldloc.0
    IL_00cb:  ldfld      int32 GameOfLife.MainForm/_Closure$__3::$VB$Local_height
    IL_00d0:  ldloc.1
    IL_00d1:  ldloc.0
    IL_00d2:  ldfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap> GameOfLife.MainForm/_Closure$__3::$VB$Local_pool
    IL_00d7:  newobj     instance void GameOfLife.GameBoard::.ctor(int32,
                                                                   int32,
                                                                   float64,
                                                                   class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<class [System.Drawing]System.Drawing.Bitmap>)
    IL_00dc:  stloc.2
    IL_00dd:  ldloc.2
    IL_00de:  ldarg.0
    IL_00df:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
    IL_00e4:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_00e9:  callvirt   instance void GameOfLife.GameBoard::set_RunParallel(bool)
    IL_00ee:  nop
    IL_00ef:  ldloc.2
    IL_00f0:  stfld      class GameOfLife.GameBoard GameOfLife.MainForm::_game
//000050: 
//000051:                 ' Run the game on a background thread.
//000052:                 ' Run until cancellation is requested.
//000053:                 ' Move to the next board, timing how long it takes.
//000054:                 ' Update the UI with the new board image.
//000055:                 ' When the game is done, reset the board.
//000056:                 Task.Factory.StartNew(Sub()
    IL_00f5:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_00fa:  ldloc.0
    IL_00fb:  dup
    IL_00fc:  ldvirtftn  instance void GameOfLife.MainForm/_Closure$__3::_Lambda$__5()
    IL_0102:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0107:  ldloc.0
    IL_0108:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken GameOfLife.MainForm/_Closure$__3::$VB$Local_token
    IL_010d:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_0112:  ldarg.0
    IL_0113:  dup
    IL_0114:  ldvirtftn  instance void GameOfLife.MainForm::_Lambda$__3(class [mscorlib]System.Threading.Tasks.Task)
    IL_011a:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>::.ctor(object,
                                                                                                                           native int)
    IL_011f:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_0124:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>,
                                                                                                                                  class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_0129:  pop
    IL_012a:  br.s       IL_0139

//000057:                                           Dim sw = New Stopwatch()
//000058:                                           Do While Not token.IsCancellationRequested
//000059:                                               sw.Restart()
//000060:                                               Dim bmp = _game.MoveNext()
//000061:                                               Dim framesPerSecond = 1 / sw.Elapsed.TotalSeconds
//000062:                                               BeginInvoke((Sub()
//000063:                                                                lblFramesPerSecond.Text = String.Format("Frames / Sec: {0:F2}", framesPerSecond)
//000064:                                                                Dim old = CType(pictureBox1.Image, Bitmap)
//000065:                                                                pictureBox1.Image = bmp
//000066:                                                                If old IsNot Nothing Then
//000067:                                                                    pool.PutObject(old)
//000068:                                                                End If
//000069:                                                            End Sub))
//000070:                                           Loop
//000071:                                       End Sub, token).ContinueWith(Sub()
//000072:                                                                        _cancellation = Nothing
//000073:                                                                        btnRun.Text = "Start"
//000074:                                                                        lblDensity.Visible = True
//000075:                                                                        tbDensity.Visible = True
//000076:                                                                    End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000077: 
//000078:                 ' If a game is currently running, cancel it.
//000079:             Else
    IL_012c:  nop
//000080:                 _cancellation.Cancel()
    IL_012d:  ldarg.0
    IL_012e:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource GameOfLife.MainForm::_cancellation
    IL_0133:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_0138:  nop
//000081:             End If
    IL_0139:  nop
//000082:         End Sub
    IL_013a:  nop
    IL_013b:  ret
  } // end of method MainForm::btnRun_Click

  .method private specialname instance void 
          _Lambda$__3(class [mscorlib]System.Threading.Tasks.Task a0) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerStepThroughAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       24 (0x18)
    .maxstack  8
//000071:                                       End Sub, token).ContinueWith(Sub()
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void GameOfLife.MainForm::_Lambda$__4()
    IL_0008:  newobj     instance void VB$AnonymousDelegate_2::.ctor(object,
                                                                     native int)
    IL_000d:  callvirt   instance void VB$AnonymousDelegate_2::Invoke()
    IL_0012:  nop
    IL_0013:  nop
    IL_0014:  br.s       IL_0016

    IL_0016:  nop
    IL_0017:  ret
  } // end of method MainForm::_Lambda$__3

  .method private specialname instance void 
          _Lambda$__4() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       53 (0x35)
    .maxstack  8
    IL_0000:  nop
//000072:                                                                        _cancellation = Nothing
    IL_0001:  ldarg.0
    IL_0002:  ldnull
    IL_0003:  stfld      class [mscorlib]System.Threading.CancellationTokenSource GameOfLife.MainForm::_cancellation
//000073:                                                                        btnRun.Text = "Start"
    IL_0008:  ldarg.0
    IL_0009:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    IL_000e:  ldstr      "Start"
    IL_0013:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0018:  nop
//000074:                                                                        lblDensity.Visible = True
    IL_0019:  ldarg.0
    IL_001a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label GameOfLife.MainForm::lblDensity
    IL_001f:  ldc.i4.1
    IL_0020:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_0025:  nop
//000075:                                                                        tbDensity.Visible = True
    IL_0026:  ldarg.0
    IL_0027:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar GameOfLife.MainForm::tbDensity
    IL_002c:  ldc.i4.1
    IL_002d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_0032:  nop
//000076:                                                                    End Sub, TaskScheduler.FromCurrentSynchronizationContext())
    IL_0033:  nop
    IL_0034:  ret
  } // end of method MainForm::_Lambda$__4

  .property instance class [System.Windows.Forms]System.Windows.Forms.Button
          btnRun()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.Button GameOfLife.MainForm::get_btnRun()
    .set instance void GameOfLife.MainForm::set_btnRun(class [System.Windows.Forms]System.Windows.Forms.Button)
  } // end of property MainForm::btnRun
  .property instance class [System.Windows.Forms]System.Windows.Forms.CheckBox
          chkParallel()
  {
    .set instance void GameOfLife.MainForm::set_chkParallel(class [System.Windows.Forms]System.Windows.Forms.CheckBox)
    .get instance class [System.Windows.Forms]System.Windows.Forms.CheckBox GameOfLife.MainForm::get_chkParallel()
  } // end of property MainForm::chkParallel
} // end of class GameOfLife.MainForm

.class private auto ansi sealed GameOfLife.Module1
       extends [mscorlib]System.Object
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       27 (0x1b)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\Module1.vb' 
//000015:         Sub Main()
    IL_0000:  nop
//000016:             Application.EnableVisualStyles()
    IL_0001:  call       void [System.Windows.Forms]System.Windows.Forms.Application::EnableVisualStyles()
    IL_0006:  nop
//000017:             Application.SetCompatibleTextRenderingDefault(False)
    IL_0007:  ldc.i4.0
    IL_0008:  call       void [System.Windows.Forms]System.Windows.Forms.Application::SetCompatibleTextRenderingDefault(bool)
    IL_000d:  nop
//000018:             Application.Run(New MainForm())
    IL_000e:  newobj     instance void GameOfLife.MainForm::.ctor()
    IL_0013:  call       void [System.Windows.Forms]System.Windows.Forms.Application::Run(class [System.Windows.Forms]System.Windows.Forms.Form)
    IL_0018:  nop
//000019:         End Sub
    IL_0019:  nop
    IL_001a:  ret
  } // end of method Module1::Main

} // end of class GameOfLife.Module1

.class private auto ansi sealed My.Resources.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly specialname static class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       59 (0x3b)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager ResourceManager,
             [1] class [mscorlib]System.Resources.ResourceManager temp,
             [2] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\My Project\Resources.Designer.vb' 
//000040: 			Get
    IL_0000:  nop
//000041: 				If Object.ReferenceEquals(resourceMan, Nothing) Then
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  call       bool [mscorlib]System.Object::ReferenceEquals(object,
                                                                       object)
    IL_000c:  stloc.2
//000042: 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
//000043: 					resourceMan = temp
//000044: 				End If
//000045: 				Return resourceMan
//000046: 			End Get
//000047: 		End Property
//000048: 
//000049: 		''' <summary>
//000050: 		'''   Overrides the current thread's CurrentUICulture property for all
//000051: 		'''   resource lookups using this strongly typed resource class.
//000052: 		''' </summary>
//000053: 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000054: 		Friend Property Culture() As Global.System.Globalization.CultureInfo
//000055: 			Get
//000056: 				Return resourceCulture
//000057: 			End Get
//000058: 			Set(ByVal value As System.Globalization.CultureInfo)
//000059: 				resourceCulture = value
//000060: 			End Set
//000061: 		End Property
//000062: 	End Module
//000063: End Namespace
    IL_000d:  ldloc.2
    IL_000e:  brfalse.s  IL_0030

//000042: 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
    IL_0010:  ldstr      "Resources"
    IL_0015:  ldtoken    My.Resources.Resources
    IL_001a:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_001f:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0024:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_0029:  stloc.1
//000043: 					resourceMan = temp
    IL_002a:  ldloc.1
    IL_002b:  stsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
//000044: 				End If
    IL_0030:  nop
//000045: 				Return resourceMan
    IL_0031:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0036:  stloc.0
    IL_0037:  br.s       IL_0039

//000046: 			End Get
    IL_0039:  ldloc.0
    IL_003a:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly specialname static class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo Culture)
//000047: 		End Property
//000048: 
//000049: 		''' <summary>
//000050: 		'''   Overrides the current thread's CurrentUICulture property for all
//000051: 		'''   resource lookups using this strongly typed resource class.
//000052: 		''' </summary>
//000053: 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000054: 		Friend Property Culture() As Global.System.Globalization.CultureInfo
//000055: 			Get
    IL_0000:  nop
//000056: 				Return resourceCulture
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000057: 			End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly specialname static void 
          set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       9 (0x9)
    .maxstack  8
//000058: 			Set(ByVal value As System.Globalization.CultureInfo)
    IL_0000:  nop
//000059: 				resourceCulture = value
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
//000060: 			End Set
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::get_Culture()
    .set void My.Resources.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
} // end of class My.Resources.Resources

.class private auto ansi sealed beforefieldinit My.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class My.Settings defaultInstance
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       22 (0x16)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\GameOfLife\GameOfLife_VisualBasic\My Project\Settings.Designer.vb' 
//000018: 		Private Shared defaultInstance As Settings = (CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New Settings()), Settings))
    IL_0000:  newobj     instance void My.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  My.Settings
    IL_000f:  stsfld     class My.Settings My.Settings::defaultInstance
    IL_0014:  nop
    IL_0015:  ret
  } // end of method Settings::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Settings::.ctor

  .method public specialname static class My.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class My.Settings Default)
//000019: 
//000020: 		Public Shared ReadOnly Property [Default]() As Settings
//000021: 			Get
    IL_0000:  nop
//000022: 				Return defaultInstance
    IL_0001:  ldsfld     class My.Settings My.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000023: 			End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .property class My.Settings Default()
  {
    .get class My.Settings My.Settings::get_Default()
  } // end of property Settings::Default
} // end of class My.Settings

.class private auto ansi sealed VB$AnonymousDelegate_2
       extends [mscorlib]System.MulticastDelegate
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 12 3C 67 65 6E 65 72 61 74 65 64 20 6D 65   // ...<generated me
                                                                                                 74 68 6F 64 3E 01 00 54 0E 04 54 79 70 65 12 3C   // thod>..T..Type.<
                                                                                                 67 65 6E 65 72 61 74 65 64 20 6D 65 74 68 6F 64   // generated method
                                                                                                 3E )                                              // >
  .method public specialname rtspecialname 
          instance void  .ctor(object TargetObject,
                               native int TargetMethod) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_2::.ctor

  .method public newslot strict virtual instance class [mscorlib]System.IAsyncResult 
          BeginInvoke(class [mscorlib]System.AsyncCallback DelegateCallback,
                      object DelegateAsyncState) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_2::BeginInvoke

  .method public newslot strict virtual instance void 
          EndInvoke(class [mscorlib]System.IAsyncResult DelegateAsyncResult) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_2::EndInvoke

  .method public newslot strict virtual instance void 
          Invoke() runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_2::Invoke

} // end of class VB$AnonymousDelegate_2


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
