<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\obj\Debug\Application.g.vb" startline="49" endline="55"><![CDATA[
         Public Sub InitializeComponent()
             
             #ExternalSource("..\..\Application.xaml",4)
             Me.StartupUri = New System.Uri("Window1.xaml", System.UriKind.Relative)
             
             #End ExternalSource
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\obj\Debug\Application.g.vb" startline="56" endline="66"><![CDATA[
         
         '''<summary>
         '''Application Entry Point.
         '''</summary>
         <System.STAThreadAttribute(),  _
          System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
         Public Shared Sub Main()
             Dim app As SpellChecker.App = New SpellChecker.App()
             app.InitializeComponent
             app.Run
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\My Project\Resources.Designer.vb" startline="41" endline="47"><![CDATA[
             Get
                 If Object.ReferenceEquals(resourceMan, Nothing) Then
                     Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
                     resourceMan = temp
                 End If
                 Return resourceMan
             End Get
         End Property
 
         ''' <summary>
         '''   Overrides the current thread's CurrentUICulture property for all
         '''   resource lookups using this strongly typed resource class.
         ''' </summary>
         <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
         Friend Property Culture() As Global.System.Globalization.CultureInfo
             Get
                 Return resourceCulture
             End Get
             Set(ByVal value As System.Globalization.CultureInfo)
                 resourceCulture = value
             End Set
         End Property
     End Module
 End Namespace
                     Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
                     resourceMan = temp
                 End If
                 Return resourceMan
             End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\My Project\Resources.Designer.vb" startline="48" endline="58"><![CDATA[
         End Property
 
         ''' <summary>
         '''   Overrides the current thread's CurrentUICulture property for all
         '''   resource lookups using this strongly typed resource class.
         ''' </summary>
         <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
         Friend Property Culture() As Global.System.Globalization.CultureInfo
             Get
                 Return resourceCulture
             End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\My Project\Resources.Designer.vb" startline="59" endline="61"><![CDATA[
             Set(ByVal value As System.Globalization.CultureInfo)
                 resourceCulture = value
             End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\My Project\Settings.Designer.vb" startline="17" endline="17"><![CDATA[
         Private Shared defaultInstance As Settings = (CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New Settings()), Settings))
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\My Project\Settings.Designer.vb" startline="18" endline="22"><![CDATA[
 
 		Public Shared ReadOnly Property [Default]() As Settings
 			Get
 				Return defaultInstance
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="22" endline="24"><![CDATA[
 		Public Sub New()
 			InitializeComponent()
 		End Sub
 
 		Private Sub btnLoad_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			listBox1.ItemsSource = Nothing
 			txtInput.IsEnabled = False
 			chkParallel.IsEnabled = False
 
             ' Ask the user for a file containing a word list, one word per line.
 			Dim ofd As New OpenFileDialog()
 			ofd.Multiselect = False
 			If ofd.ShowDialog(Me) = True Then
                 ' If a file was provided, try to load it.
                 ' Read in all of the words.
                 ' When we're done, enable the UI.
                 Task.Factory.StartNew(Sub()
                                           _words = New List(Of String)(200000)
                                           Using reader As New StreamReader(ofd.FileName)
                                               Dim line As String
                                               line = reader.ReadLine()
                                               Do While line IsNot Nothing
                                                   Dim word = line.Trim().ToLower()
                                                   If Not String.IsNullOrEmpty(word) Then
                                                       _words.Add(word)
                                                       If word.Length > _maxWordLength Then
                                                           _maxWordLength = word.Length
                                                       End If
                                                   End If
                                                   line = reader.ReadLine()
                                               Loop
                                           End Using
                                       End Sub).
                                   ContinueWith(Sub(t)
                                                    txtInput.IsEnabled = True
                                                    chkParallel.IsEnabled = True
                                                    If t.IsFaulted Then
                                                        MsgBox(t.Exception.ToString())
                                                    Else
                                                        MakeSuggestions()
                                                    End If
                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
             
             End If
 
 		End Sub
 
 		''' <summary>Redo the suggestions when the text changes.</summary>
 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
 			MakeSuggestions()
 		End Sub
 
 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			MakeSuggestions()
 		End Sub
 
         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
 
         Private Sub MakeSuggestions()
             ' Limit the number of suggestions.
             Const NUM_SUGGESTIONS = 25
 
             ' Run serially or in parallel.
             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
             Dim text = txtInput.Text
 
             ' If there's no text to evaluate, just bail.
             If String.IsNullOrEmpty(text) Then
                 listBox1.ItemsSource = Nothing
                 Return
             End If
 
             ' Every time the text is changed, we want to cancel the previous operation.
             If _cancellation IsNot Nothing Then
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
                                                                     TaskScheduler.FromCurrentSynchronizationContext)
         End Sub
 
         
         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
         ''' <param name="str1">The first string.</param>
         ''' <param name="str2">The second string.</param>
         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
         ''' <returns>The computed edit distance.</returns>
         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
             ' Distance matrix contains one extra row and column for the seed values.            
             For i = 0 To str1.Length
                 scratchDistanceMatrix(i, 0) = i
             Next i
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
 			InitializeComponent()
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="25" endline="67"><![CDATA[
 
 		Private Sub btnLoad_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			listBox1.ItemsSource = Nothing
 			txtInput.IsEnabled = False
 			chkParallel.IsEnabled = False
 
             ' Ask the user for a file containing a word list, one word per line.
 			Dim ofd As New OpenFileDialog()
 			ofd.Multiselect = False
 			If ofd.ShowDialog(Me) = True Then
                 ' If a file was provided, try to load it.
                 ' Read in all of the words.
                 ' When we're done, enable the UI.
                 Task.Factory.StartNew(Sub()
                                           _words = New List(Of String)(200000)
                                           Using reader As New StreamReader(ofd.FileName)
                                               Dim line As String
                                               line = reader.ReadLine()
                                               Do While line IsNot Nothing
                                                   Dim word = line.Trim().ToLower()
                                                   If Not String.IsNullOrEmpty(word) Then
                                                       _words.Add(word)
                                                       If word.Length > _maxWordLength Then
                                                           _maxWordLength = word.Length
                                                       End If
                                                   End If
                                                   line = reader.ReadLine()
                                               Loop
                                           End Using
                                       End Sub).
                                   ContinueWith(Sub(t)
                                                    txtInput.IsEnabled = True
                                                    chkParallel.IsEnabled = True
                                                    If t.IsFaulted Then
                                                        MsgBox(t.Exception.ToString())
                                                    Else
                                                        MakeSuggestions()
                                                    End If
                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
             
             End If
 
 		End Sub
 
 		''' <summary>Redo the suggestions when the text changes.</summary>
 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
 			MakeSuggestions()
 		End Sub
 
 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			MakeSuggestions()
 		End Sub
 
         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
 
         Private Sub MakeSuggestions()
             ' Limit the number of suggestions.
             Const NUM_SUGGESTIONS = 25
 
             ' Run serially or in parallel.
             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
             Dim text = txtInput.Text
 
             ' If there's no text to evaluate, just bail.
             If String.IsNullOrEmpty(text) Then
                 listBox1.ItemsSource = Nothing
                 Return
             End If
 
             ' Every time the text is changed, we want to cancel the previous operation.
             If _cancellation IsNot Nothing Then
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
                                                                     TaskScheduler.FromCurrentSynchronizationContext)
         End Sub
 
         
         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
         ''' <param name="str1">The first string.</param>
         ''' <param name="str2">The second string.</param>
         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
         ''' <returns>The computed edit distance.</returns>
         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
             ' Distance matrix contains one extra row and column for the seed values.            
             For i = 0 To str1.Length
                 scratchDistanceMatrix(i, 0) = i
             Next i
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
 			listBox1.ItemsSource = Nothing
 			txtInput.IsEnabled = False
 			chkParallel.IsEnabled = False
 
             ' Ask the user for a file containing a word list, one word per line.
 			Dim ofd As New OpenFileDialog()
 			ofd.Multiselect = False
 			If ofd.ShowDialog(Me) = True Then
                 ' If a file was provided, try to load it.
                 ' Read in all of the words.
                 ' When we're done, enable the UI.
                 Task.Factory.StartNew(Sub()
                                           _words = New List(Of String)(200000)
                                           Using reader As New StreamReader(ofd.FileName)
                                               Dim line As String
                                               line = reader.ReadLine()
                                               Do While line IsNot Nothing
                                                   Dim word = line.Trim().ToLower()
                                                   If Not String.IsNullOrEmpty(word) Then
                                                       _words.Add(word)
                                                       If word.Length > _maxWordLength Then
                                                           _maxWordLength = word.Length
                                                       End If
                                                   End If
                                                   line = reader.ReadLine()
                                               Loop
                                           End Using
                                       End Sub).
                                   ContinueWith(Sub(t)
                                                    txtInput.IsEnabled = True
                                                    chkParallel.IsEnabled = True
                                                    If t.IsFaulted Then
                                                        MsgBox(t.Exception.ToString())
                                                    Else
                                                        MakeSuggestions()
                                                    End If
                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
             
             End If
 
 		End Sub
 
 		''' <summary>Redo the suggestions when the text changes.</summary>
 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
 			MakeSuggestions()
 		End Sub
 
 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			MakeSuggestions()
 		End Sub
 
         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
 
         Private Sub MakeSuggestions()
             ' Limit the number of suggestions.
             Const NUM_SUGGESTIONS = 25
 
             ' Run serially or in parallel.
             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
             Dim text = txtInput.Text
 
             ' If there's no text to evaluate, just bail.
             If String.IsNullOrEmpty(text) Then
                 listBox1.ItemsSource = Nothing
                 Return
             End If
 
             ' Every time the text is changed, we want to cancel the previous operation.
             If _cancellation IsNot Nothing Then
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
                                                                     TaskScheduler.FromCurrentSynchronizationContext)
         End Sub
 
         
         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
         ''' <param name="str1">The first string.</param>
         ''' <param name="str2">The second string.</param>
         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
         ''' <returns>The computed edit distance.</returns>
         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
             ' Distance matrix contains one extra row and column for the seed values.            
             For i = 0 To str1.Length
                 scratchDistanceMatrix(i, 0) = i
             Next i
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
                 Task.Factory.StartNew(Sub()
                                           _words = New List(Of String)(200000)
                                           Using reader As New StreamReader(ofd.FileName)
                                               Dim line As String
                                               line = reader.ReadLine()
                                               Do While line IsNot Nothing
                                                   Dim word = line.Trim().ToLower()
                                                   If Not String.IsNullOrEmpty(word) Then
                                                       _words.Add(word)
                                                       If word.Length > _maxWordLength Then
                                                           _maxWordLength = word.Length
                                                       End If
                                                   End If
                                                   line = reader.ReadLine()
                                               Loop
                                           End Using
                                       End Sub).
                                   ContinueWith(Sub(t)
                                                    txtInput.IsEnabled = True
                                                    chkParallel.IsEnabled = True
                                                    If t.IsFaulted Then
                                                        MsgBox(t.Exception.ToString())
                                                    Else
                                                        MakeSuggestions()
                                                    End If
                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
             
             End If
 
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="68" endline="72"><![CDATA[
 
 		''' <summary>Redo the suggestions when the text changes.</summary>
 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
 			MakeSuggestions()
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="73" endline="77"><![CDATA[
 
 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			MakeSuggestions()
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="78" endline="133"><![CDATA[
 
         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
 
         Private Sub MakeSuggestions()
             ' Limit the number of suggestions.
             Const NUM_SUGGESTIONS = 25
 
             ' Run serially or in parallel.
             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
             Dim text = txtInput.Text
 
             ' If there's no text to evaluate, just bail.
             If String.IsNullOrEmpty(text) Then
                 listBox1.ItemsSource = Nothing
                 Return
             End If
 
             ' Every time the text is changed, we want to cancel the previous operation.
             If _cancellation IsNot Nothing Then
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
                                                                     TaskScheduler.FromCurrentSynchronizationContext)
         End Sub
 
         
         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
         ''' <param name="str1">The first string.</param>
         ''' <param name="str2">The second string.</param>
         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
         ''' <returns>The computed edit distance.</returns>
         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
             ' Distance matrix contains one extra row and column for the seed values.            
             For i = 0 To str1.Length
                 scratchDistanceMatrix(i, 0) = i
             Next i
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
             Dim text = txtInput.Text
 
             ' If there's no text to evaluate, just bail.
             If String.IsNullOrEmpty(text) Then
                 listBox1.ItemsSource = Nothing
                 Return
             End If
 
             ' Every time the text is changed, we want to cancel the previous operation.
             If _cancellation IsNot Nothing Then
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
                                                                     TaskScheduler.FromCurrentSynchronizationContext)
         End Sub
 
         
         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
         ''' <param name="str1">The first string.</param>
         ''' <param name="str2">The second string.</param>
         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
         ''' <returns>The computed edit distance.</returns>
         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
             ' Distance matrix contains one extra row and column for the seed values.            
             For i = 0 To str1.Length
                 scratchDistanceMatrix(i, 0) = i
             Next i
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
                 listBox1.ItemsSource = Nothing
                 Return
             End If
 
             ' Every time the text is changed, we want to cancel the previous operation.
             If _cancellation IsNot Nothing Then
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
                                                                     TaskScheduler.FromCurrentSynchronizationContext)
         End Sub
 
         
         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
         ''' <param name="str1">The first string.</param>
         ''' <param name="str2">The second string.</param>
         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
         ''' <returns>The computed edit distance.</returns>
         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
             ' Distance matrix contains one extra row and column for the seed values.            
             For i = 0 To str1.Length
                 scratchDistanceMatrix(i, 0) = i
             Next i
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
                                                                     TaskScheduler.FromCurrentSynchronizationContext)
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="134" endline="171"><![CDATA[
 
         
         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
         ''' <param name="str1">The first string.</param>
         ''' <param name="str2">The second string.</param>
         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
         ''' <returns>The computed edit distance.</returns>
         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
             ' Distance matrix contains one extra row and column for the seed values.            
             For i = 0 To str1.Length
                 scratchDistanceMatrix(i, 0) = i
             Next i
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\obj\Debug\Window1.g.vb" startline="88" endline="99"><![CDATA[
         Public Sub InitializeComponent() Implements System.Windows.Markup.IComponentConnector.InitializeComponent
             If _contentLoaded Then
                 Return
             End If
             _contentLoaded = true
             Dim resourceLocater As System.Uri = New System.Uri("/SpellChecker;component/window1.xaml", System.UriKind.Relative)
             
             #ExternalSource("..\..\Window1.xaml",1)
             System.Windows.Application.LoadComponent(Me, resourceLocater)
             
             #End ExternalSource
         End Sub
         
         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
          System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800
         Sub System_Windows_Markup_IComponentConnector_Connect(ByVal connectionId As Integer, ByVal target As Object) Implements System.Windows.Markup.IComponentConnector.Connect
             If (connectionId = 1) Then
                 Me.listBox1 = CType(target,System.Windows.Controls.ListBox)
                 Return
             End If
             If (connectionId = 2) Then
                 Me.txtInput = CType(target,System.Windows.Controls.TextBox)
                 
                 #ExternalSource("..\..\Window1.xaml",7)
                 AddHandler Me.txtInput.TextChanged, New System.Windows.Controls.TextChangedEventHandler(AddressOf Me.txtInput_TextChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 3) Then
                 Me.lblTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 4) Then
                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\Window1.xaml",10)
                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
                 
                 #End ExternalSource
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Return
             End If
             _contentLoaded = true
             Dim resourceLocater As System.Uri = New System.Uri("/SpellChecker;component/window1.xaml", System.UriKind.Relative)
             
             #ExternalSource("..\..\Window1.xaml",1)
             System.Windows.Application.LoadComponent(Me, resourceLocater)
             
             #End ExternalSource
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\obj\Debug\Window1.g.vb" startline="100" endline="148"><![CDATA[
         
         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
          System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800
         Sub System_Windows_Markup_IComponentConnector_Connect(ByVal connectionId As Integer, ByVal target As Object) Implements System.Windows.Markup.IComponentConnector.Connect
             If (connectionId = 1) Then
                 Me.listBox1 = CType(target,System.Windows.Controls.ListBox)
                 Return
             End If
             If (connectionId = 2) Then
                 Me.txtInput = CType(target,System.Windows.Controls.TextBox)
                 
                 #ExternalSource("..\..\Window1.xaml",7)
                 AddHandler Me.txtInput.TextChanged, New System.Windows.Controls.TextChangedEventHandler(AddressOf Me.txtInput_TextChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 3) Then
                 Me.lblTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 4) Then
                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\Window1.xaml",10)
                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
                 
                 #End ExternalSource
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.listBox1 = CType(target,System.Windows.Controls.ListBox)
                 Return
             End If
             If (connectionId = 2) Then
                 Me.txtInput = CType(target,System.Windows.Controls.TextBox)
                 
                 #ExternalSource("..\..\Window1.xaml",7)
                 AddHandler Me.txtInput.TextChanged, New System.Windows.Controls.TextChangedEventHandler(AddressOf Me.txtInput_TextChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 3) Then
                 Me.lblTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 4) Then
                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\Window1.xaml",10)
                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
                 
                 #End ExternalSource
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.txtInput = CType(target,System.Windows.Controls.TextBox)
                 
                 #ExternalSource("..\..\Window1.xaml",7)
                 AddHandler Me.txtInput.TextChanged, New System.Windows.Controls.TextChangedEventHandler(AddressOf Me.txtInput_TextChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 3) Then
                 Me.lblTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 4) Then
                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\Window1.xaml",10)
                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
                 
                 #End ExternalSource
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.lblTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 4) Then
                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\Window1.xaml",10)
                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
                 
                 #End ExternalSource
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 
                 #ExternalSource("..\..\Window1.xaml",9)
                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\Window1.xaml",10)
                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
                 
                 #End ExternalSource
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\Window1.xaml",10)
                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
                 
                 #End ExternalSource
                 Return
             End If
             Me._contentLoaded = true
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="55" endline="63"><![CDATA[
                                   ContinueWith(Sub(t)
                                                    txtInput.IsEnabled = True
                                                    chkParallel.IsEnabled = True
                                                    If t.IsFaulted Then
                                                        MsgBox(t.Exception.ToString())
                                                    Else
                                                        MakeSuggestions()
                                                    End If
                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
             
             End If
 
 		End Sub
 
 		''' <summary>Redo the suggestions when the text changes.</summary>
 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
 			MakeSuggestions()
 		End Sub
 
 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			MakeSuggestions()
 		End Sub
 
         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
 
         Private Sub MakeSuggestions()
             ' Limit the number of suggestions.
             Const NUM_SUGGESTIONS = 25
 
             ' Run serially or in parallel.
             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
             Dim text = txtInput.Text
 
             ' If there's no text to evaluate, just bail.
             If String.IsNullOrEmpty(text) Then
                 listBox1.ItemsSource = Nothing
                 Return
             End If
 
             ' Every time the text is changed, we want to cancel the previous operation.
             If _cancellation IsNot Nothing Then
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
                                                                     TaskScheduler.FromCurrentSynchronizationContext)
         End Sub
 
         
         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
         ''' <param name="str1">The first string.</param>
         ''' <param name="str2">The second string.</param>
         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
         ''' <returns>The computed edit distance.</returns>
         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
             ' Distance matrix contains one extra row and column for the seed values.            
             For i = 0 To str1.Length
                 scratchDistanceMatrix(i, 0) = i
             Next i
             For j = 0 To str2.Length
                 scratchDistanceMatrix(0, j) = j
             Next j
 
             For i = 1 To str1.Length
                 Dim str1Index = i - 1
                 For j = 1 To str2.Length
                     Dim str2Index = j - 1
                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
 
                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
 
                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
 
                     ' Check for Transposition.
                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
                     End If
                 Next j
             Next i
 
             ' Levenshtein distance is the bottom right element.
             Return scratchDistanceMatrix(str1.Length, str2.Length)
         End Function
     End Class
 End Namespace
                                                        MsgBox(t.Exception.ToString())
                                                    Else
                                                        MakeSuggestions()
                                                    End If
                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="64" endline="131"><![CDATA[
             
             End If
 
 		End Sub
 
 		''' <summary>Redo the suggestions when the text changes.</summary>
 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
 			MakeSuggestions()
 		End Sub
 
 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			MakeSuggestions()
 		End Sub
 
         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
 
         Private Sub MakeSuggestions()
             ' Limit the number of suggestions.
             Const NUM_SUGGESTIONS = 25
 
             ' Run serially or in parallel.
             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
             Dim text = txtInput.Text
 
             ' If there's no text to evaluate, just bail.
             If String.IsNullOrEmpty(text) Then
                 listBox1.ItemsSource = Nothing
                 Return
             End If
 
             ' Every time the text is changed, we want to cancel the previous operation.
             If _cancellation IsNot Nothing Then
                 _cancellation.Cancel()
             End If
             _cancellation = New CancellationTokenSource()
             Dim token = _cancellation.Token
 
             ' Time the operation and kick it off.
             Dim sw = Stopwatch.StartNew()
 
             Task.Factory.StartNew(Function()
                                       ' Return both the spelling suggestions and the elapsed time
                                       Dim results As List(Of String) = Nothing
                                       If sequential Then
                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
                                           results = _words.
                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
                                               OrderBy(Function(p) p.Distance).
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
                                                   Select(Function(p) p.Word).
                                                   ToList()
                                           End Using
                                       End If
                                       sw.Stop()
                                       Return New With {.Results = results, .Time = sw.Elapsed}
                                   End Function, token).ContinueWith(Sub(t)
                                                                         listBox1.ItemsSource =
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
                                                                         lblTime.Content = Convert.ToString("Sec
                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="129" endline="129"><![CDATA[
                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="112" endline="112"><![CDATA[
                                               OrderBy(Function(p) p.Distance).
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="113" endline="114"><![CDATA[
                                               Take(NUM_SUGGESTIONS).
                                               Select(Function(p) p.Word).
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="115" endline="117"><![CDATA[
                                               ToList()
                                       Else
                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="118" endline="120"><![CDATA[
                                               results = _words.AsParallel().WithCancellation(token).
                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="121" endline="121"><![CDATA[
                                                   Select(Function(p) p.Word).
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
</source_elements></project>
