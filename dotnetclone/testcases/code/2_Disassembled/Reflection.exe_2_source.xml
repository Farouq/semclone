<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\F#\Code\Ecosystem\Reflection\Program.fs" startline="30" endline="42"><![CDATA[
     let p = new Person("Katie", "Ellison", 30)
     let pt1 = p.GetType()
     let pt2 = Type.GetType("System.Object")
     let pt3 = typeof<Person>
     pt1.GetMembers() |>
         Array.filter 
             (fun (mi 
                 mi.MemberType = MemberTypes.Property) |>
         Array.iter 
             (fun (pi 
                 Console.WriteLine("Found {0}", pi.Name))
     Console.WriteLine("Done")
     0
 
 // Dynamic programming examples
 
 (* Matt's example
 
 let inline (?) this key =
   ( ^a 
  
 let inline (?<-) this key value =
   ( ^a 
 
 *)
 
 
 //open System.Reflection
 //open Microsoft.FSharp.Reflection
 //
 //
 //type dynamic(value 
 //    let ty = value.GetType()
 //    member d.Type = ty
 //    member d.Val with get() = value
 //    member d.Cast<'a>() = value 
 //
 //    override d.ToString() =
 //        System.String.Format("[dynamic
 //
 //    member d.Exec(str, [<System.ParamArray>] args 
 //        dynamic (ty.InvokeMember(str, , null, value, args))
 // 
 //    member d.Item 
 //        with get str = d.Exec(str)
 //
 //
 //        
 //    
 //let (?) this mem args =
 //    let flags = BindingFlags.GetProperty |||
 //                BindingFlags.InvokeMethod
 //    let args =
 //        if box args = null then
 //            [| |]
 //        elif FSharpType.IsTuple (args.GetType()) then
 //            FSharpValue.GetTupleFields args
 //        else
 //            [| args |]
 //    this.GetType().InvokeMember(mem, flags, null, this, args)
 //
 //let (?<-) this prop newval =
 //    this.GetType().InvokeMember(prop, BindingFlags.SetProperty, null, this, [|newval|])
 //
 //[<Example("dynamic examples")>]
 //let dynamic_examples() =
 //    let p = new Person("Ken", "Sipe", 40)
 //    let p2 = new Pet("Fluffy", 1)
 //    
 ////    let d = dynamic p
 ////    System.Console.WriteLine(d)
 ////    System.Console.WriteLine(d.["FirstName"])
 ////    let d2 = dynamic (Pet("Fluffy", 2))
 ////    System.Console.WriteLine(d2.Val)
 ////    d.Exec("WaxEloquently", "Java", "C#", "F#") |> ignore
 //    
 //    let o = p 
 //    System.Console.WriteLine("Ken is {0}", (o?Age).ToString())
 //    o?WaxEloquently("Java", "C#", "F#")
 //    let o2 = p2 
 //    System.Console.WriteLine("Fluffy is {0}", (o2?Age).ToString())
 //    o2?Age <- 2
 //    System.Console.WriteLine("Fluffy is now {0}", (o2?Age).ToString())
 //    
 //    ()
         Array.iter 
             (fun (pi 
                 Console.WriteLine("Found {0}", pi.Name))
     Console.WriteLine("Done")
     0
]]></source>
</source_elements></project>
