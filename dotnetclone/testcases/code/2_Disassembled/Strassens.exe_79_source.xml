<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs" startline="25" endline="31"><![CDATA[
         private double _max = 0;
         private System.ComponentModel.IContainer components = null;
         public MainForm()
         {
             InitializeComponent();
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs" startline="32" endline="37"><![CDATA[
 
         private void MainForm_Load(object sender, EventArgs e)
         {
             _uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
             SetupPoints();
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs" startline="38" endline="49"><![CDATA[
 
         private void SetupPoints()
         {
             _naive = chart1.Series[0].Points[chart1.Series[0].Points.AddXY("Naive", 0.0)];
             _naiveParallel = chart1.Series[0].Points[chart1.Series[0].Points.AddXY("Naive Parallel", 0.0)];
             _strassens = chart1.Series[0].Points[chart1.Series[0].Points.AddXY("Strassen's", 0.0)];
             _strassensParallel = chart1.Series[0].Points[chart1.Series[0].Points.AddXY("Strassen's Parallel", 0.0)];
             chart1.ChartAreas[0].AxisY.Minimum = 0.0;
             chart1.ChartAreas[0].AxisY.Maximum = 10.0;
             ClearPointValues();
             Invalidate();
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs" startline="50" endline="61"><![CDATA[
 
         private void ClearPointValues()
         {
             foreach (var point in new[] { _naive, _naiveParallel, _strassens, _strassensParallel })
             {
                 point.SetValueY(0);
                 point.ToolTip = "";
                 point.Label = "";
                 point.Font = new System.Drawing.Font(point.Font, System.Drawing.FontStyle.Bold);
             }
             chart1.Invalidate();
         }
 
         private void btnCompute_Click(object sender, EventArgs e)
         {
             if (_cancellation == null)
             {
                 btnCompute.Text = "Cancel";
 
                 int matrixSize = 0;
                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
                 progressBar1.Visible = true;
 
                 ClearPointValues();
                 _max = 0;
 
                 _cancellation = new CancellationTokenSource();
                 var token = _cancellation.Token;
                 Task.Factory.StartNew(() =>
                 {
                     using (Matrix matA = new Matrix(matrixSize))
                     using (Matrix matB = new Matrix(matrixSize))
                     using (Matrix matC = new Matrix(matrixSize))
                     {
                         TimeSpan elapsed;
 
                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
                         SetPoint(_naive, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
                         SetPoint(_strassens, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
                     }
                 }, token).ContinueWith(t =>
                 {
                     _cancellation = null;
                     btnCompute.Text = "Compute";
                     progressBar1.Visible = false;
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
             foreach (var point in new[] { _naive, _naiveParallel, _strassens, _strassensParallel })
             {
                 point.SetValueY(0);
                 point.ToolTip = "";
                 point.Label = "";
                 point.Font = new System.Drawing.Font(point.Font, System.Drawing.FontStyle.Bold);
             }
             chart1.Invalidate();
         }
 
         private void btnCompute_Click(object sender, EventArgs e)
         {
             if (_cancellation == null)
             {
                 btnCompute.Text = "Cancel";
 
                 int matrixSize = 0;
                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
                 progressBar1.Visible = true;
 
                 ClearPointValues();
                 _max = 0;
 
                 _cancellation = new CancellationTokenSource();
                 var token = _cancellation.Token;
                 Task.Factory.StartNew(() =>
                 {
                     using (Matrix matA = new Matrix(matrixSize))
                     using (Matrix matB = new Matrix(matrixSize))
                     using (Matrix matC = new Matrix(matrixSize))
                     {
                         TimeSpan elapsed;
 
                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
                         SetPoint(_naive, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
                         SetPoint(_strassens, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
                     }
                 }, token).ContinueWith(t =>
                 {
                     _cancellation = null;
                     btnCompute.Text = "Compute";
                     progressBar1.Visible = false;
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
             foreach (var point in new[] { _naive, _naiveParallel, _strassens, _strassensParallel })
             {
                 point.SetValueY(0);
                 point.ToolTip = "";
                 point.Label = "";
                 point.Font = new System.Drawing.Font(point.Font, System.Drawing.FontStyle.Bold);
             }
             chart1.Invalidate();
         }
 
         private void btnCompute_Click(object sender, EventArgs e)
         {
             if (_cancellation == null)
             {
                 btnCompute.Text = "Cancel";
 
                 int matrixSize = 0;
                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
                 progressBar1.Visible = true;
 
                 ClearPointValues();
                 _max = 0;
 
                 _cancellation = new CancellationTokenSource();
                 var token = _cancellation.Token;
                 Task.Factory.StartNew(() =>
                 {
                     using (Matrix matA = new Matrix(matrixSize))
                     using (Matrix matB = new Matrix(matrixSize))
                     using (Matrix matC = new Matrix(matrixSize))
                     {
                         TimeSpan elapsed;
 
                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
                         SetPoint(_naive, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
                         SetPoint(_strassens, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
                     }
                 }, token).ContinueWith(t =>
                 {
                     _cancellation = null;
                     btnCompute.Text = "Compute";
                     progressBar1.Visible = false;
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
             chart1.Invalidate();
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs" startline="62" endline="107"><![CDATA[
 
         private void btnCompute_Click(object sender, EventArgs e)
         {
             if (_cancellation == null)
             {
                 btnCompute.Text = "Cancel";
 
                 int matrixSize = 0;
                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
                 progressBar1.Visible = true;
 
                 ClearPointValues();
                 _max = 0;
 
                 _cancellation = new CancellationTokenSource();
                 var token = _cancellation.Token;
                 Task.Factory.StartNew(() =>
                 {
                     using (Matrix matA = new Matrix(matrixSize))
                     using (Matrix matB = new Matrix(matrixSize))
                     using (Matrix matC = new Matrix(matrixSize))
                     {
                         TimeSpan elapsed;
 
                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
                         SetPoint(_naive, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
                         SetPoint(_strassens, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
                     }
                 }, token).ContinueWith(t =>
                 {
                     _cancellation = null;
                     btnCompute.Text = "Compute";
                     progressBar1.Visible = false;
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
         {
             if (_cancellation == null)
             {
                 btnCompute.Text = "Cancel";
 
                 int matrixSize = 0;
                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
                 progressBar1.Visible = true;
 
                 ClearPointValues();
                 _max = 0;
 
                 _cancellation = new CancellationTokenSource();
                 var token = _cancellation.Token;
                 Task.Factory.StartNew(() =>
                 {
                     using (Matrix matA = new Matrix(matrixSize))
                     using (Matrix matB = new Matrix(matrixSize))
                     using (Matrix matC = new Matrix(matrixSize))
                     {
                         TimeSpan elapsed;
 
                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
                         SetPoint(_naive, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
                         SetPoint(_strassens, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
                     }
                 }, token).ContinueWith(t =>
                 {
                     _cancellation = null;
                     btnCompute.Text = "Compute";
                     progressBar1.Visible = false;
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
             {
                 btnCompute.Text = "Cancel";
 
                 int matrixSize = 0;
                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
                 progressBar1.Visible = true;
 
                 ClearPointValues();
                 _max = 0;
 
                 _cancellation = new CancellationTokenSource();
                 var token = _cancellation.Token;
                 Task.Factory.StartNew(() =>
                 {
                     using (Matrix matA = new Matrix(matrixSize))
                     using (Matrix matB = new Matrix(matrixSize))
                     using (Matrix matC = new Matrix(matrixSize))
                     {
                         TimeSpan elapsed;
 
                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
                         SetPoint(_naive, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
                         SetPoint(_strassens, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
                     }
                 }, token).ContinueWith(t =>
                 {
                     _cancellation = null;
                     btnCompute.Text = "Compute";
                     progressBar1.Visible = false;
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
                 progressBar1.Visible = true;
 
                 ClearPointValues();
                 _max = 0;
 
                 _cancellation = new CancellationTokenSource();
                 var token = _cancellation.Token;
                 Task.Factory.StartNew(() =>
                 {
                     using (Matrix matA = new Matrix(matrixSize))
                     using (Matrix matB = new Matrix(matrixSize))
                     using (Matrix matC = new Matrix(matrixSize))
                     {
                         TimeSpan elapsed;
 
                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
                         SetPoint(_naive, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
                         SetPoint(_strassens, elapsed.TotalSeconds);
 
                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
                     }
                 }, token).ContinueWith(t =>
                 {
                     _cancellation = null;
                     btnCompute.Text = "Compute";
                     progressBar1.Visible = false;
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
             else _cancellation.Cancel();
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs" startline="108" endline="123"><![CDATA[
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs" startline="124" endline="130"><![CDATA[
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.Designer.cs" startline="15" endline="21"><![CDATA[
         {
             if (disposing && (components != null))
             {
                 components.Dispose();
             }
             base.Dispose(disposing);
         }
 
         #region Windows Form Designer generated code
 
         /// <summary>
         /// Required method for Designer support - do not modify
         /// the contents of this method with the code editor.
         /// </summary>
         private void InitializeComponent()
         {
             System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea2 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
             System.Windows.Forms.DataVisualization.Charting.Series series2 = new System.Windows.Forms.DataVisualization.Charting.Series();
             this.chart1 = new System.Windows.Forms.DataVisualization.Charting.Chart();
             this.cbMatrixSize = new System.Windows.Forms.ComboBox();
             this.btnCompute = new System.Windows.Forms.Button();
             this.progressBar1 = new System.Windows.Forms.ProgressBar();
             ((System.ComponentModel.ISupportInitialize)(this.chart1)).BeginInit();
             this.SuspendLayout();
             // 
             // chart1
             // 
             this.chart1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                         | System.Windows.Forms.AnchorStyles.Left)
                         | System.Windows.Forms.AnchorStyles.Right)));
             this.chart1.BackColor = System.Drawing.Color.WhiteSmoke;
             this.chart1.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.HorizontalCenter;
             chartArea2.AxisX.IsLabelAutoFit = false;
             chartArea2.AxisX.LabelStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
             chartArea2.AxisY.IsLabelAutoFit = false;
             chartArea2.AxisY.LabelStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
             chartArea2.AxisY.LabelStyle.Format = "F2";
             chartArea2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(192)))));
             chartArea2.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.DiagonalLeft;
             chartArea2.BackSecondaryColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(224)))), ((int)(((byte)(192)))));
             chartArea2.Name = "ChartArea1";
             this.chart1.ChartAreas.Add(chartArea2);
             this.chart1.Location = new System.Drawing.Point(18, 65);
             this.chart1.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.chart1.Name = "chart1";
             this.chart1.Palette = System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.None;
             series2.BackSecondaryColor = System.Drawing.Color.MintCream;
             series2.ChartArea = "ChartArea1";
             series2.CustomProperties = "DrawingStyle=Cylinder, LabelStyle=Top";
             series2.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
             series2.Name = "chartSeries1";
             series2.XValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.String;
             series2.YValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.Double;
             this.chart1.Series.Add(series2);
             this.chart1.Size = new System.Drawing.Size(844, 517);
             this.chart1.TabIndex = 0;
             this.chart1.TextAntiAliasingQuality = System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality.SystemDefault;
             // 
             // cbMatrixSize
             // 
             this.cbMatrixSize.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
             this.cbMatrixSize.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.ListItems;
             this.cbMatrixSize.FormattingEnabled = true;
             this.cbMatrixSize.Items.AddRange(new object[] {
             "16",
             "32",
             "64",
             "128",
             "256",
             "512",
             "1024",
             "2048",
             "4096",
             "8192"});
             this.cbMatrixSize.Location = new System.Drawing.Point(20, 20);
             this.cbMatrixSize.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.cbMatrixSize.Name = "cbMatrixSize";
             this.cbMatrixSize.Size = new System.Drawing.Size(121, 28);
             this.cbMatrixSize.TabIndex = 1;
             this.cbMatrixSize.Text = "512";
             // 
             // btnCompute
             // 
             this.btnCompute.Location = new System.Drawing.Point(152, 20);
             this.btnCompute.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.btnCompute.Name = "btnCompute";
             this.btnCompute.Size = new System.Drawing.Size(112, 35);
             this.btnCompute.TabIndex = 2;
             this.btnCompute.Text = "Compute";
             this.btnCompute.UseVisualStyleBackColor = true;
             this.btnCompute.Click += new System.EventHandler(this.btnCompute_Click);
             // 
             // progressBar1
             // 
             this.progressBar1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                         | System.Windows.Forms.AnchorStyles.Right)));
             this.progressBar1.Location = new System.Drawing.Point(274, 20);
             this.progressBar1.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.progressBar1.Name = "progressBar1";
             this.progressBar1.Size = new System.Drawing.Size(588, 35);
             this.progressBar1.Style = System.Windows.Forms.ProgressBarStyle.Marquee;
             this.progressBar1.TabIndex = 3;
             this.progressBar1.Visible = false;
             // 
             // MainForm
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(9F, 20F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
             this.ClientSize = new System.Drawing.Size(880, 600);
             this.Controls.Add(this.progressBar1);
             this.Controls.Add(this.btnCompute);
             this.Controls.Add(this.cbMatrixSize);
             this.Controls.Add(this.chart1);
             this.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
             this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.SizableToolWindow;
             this.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.Name = "MainForm";
             this.Text = "Matrix Multiplication";
             this.Load += new System.EventHandler(this.MainForm_Load);
             ((System.ComponentModel.ISupportInitialize)(this.chart1)).EndInit();
             this.ResumeLayout(false);
 
         }
 
         #endregion
 
         private System.Windows.Forms.DataVisualization.Charting.Chart chart1;
         private System.Windows.Forms.ComboBox cbMatrixSize;
         private System.Windows.Forms.Button btnCompute;
         private System.Windows.Forms.ProgressBar progressBar1;
     }
 }
 
             {
                 components.Dispose();
             }
             base.Dispose(disposing);
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.Designer.cs" startline="22" endline="137"><![CDATA[
 
         #region Windows Form Designer generated code
 
         /// <summary>
         /// Required method for Designer support - do not modify
         /// the contents of this method with the code editor.
         /// </summary>
         private void InitializeComponent()
         {
             System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea2 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
             System.Windows.Forms.DataVisualization.Charting.Series series2 = new System.Windows.Forms.DataVisualization.Charting.Series();
             this.chart1 = new System.Windows.Forms.DataVisualization.Charting.Chart();
             this.cbMatrixSize = new System.Windows.Forms.ComboBox();
             this.btnCompute = new System.Windows.Forms.Button();
             this.progressBar1 = new System.Windows.Forms.ProgressBar();
             ((System.ComponentModel.ISupportInitialize)(this.chart1)).BeginInit();
             this.SuspendLayout();
             // 
             // chart1
             // 
             this.chart1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                         | System.Windows.Forms.AnchorStyles.Left)
                         | System.Windows.Forms.AnchorStyles.Right)));
             this.chart1.BackColor = System.Drawing.Color.WhiteSmoke;
             this.chart1.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.HorizontalCenter;
             chartArea2.AxisX.IsLabelAutoFit = false;
             chartArea2.AxisX.LabelStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
             chartArea2.AxisY.IsLabelAutoFit = false;
             chartArea2.AxisY.LabelStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
             chartArea2.AxisY.LabelStyle.Format = "F2";
             chartArea2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(192)))));
             chartArea2.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.DiagonalLeft;
             chartArea2.BackSecondaryColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(224)))), ((int)(((byte)(192)))));
             chartArea2.Name = "ChartArea1";
             this.chart1.ChartAreas.Add(chartArea2);
             this.chart1.Location = new System.Drawing.Point(18, 65);
             this.chart1.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.chart1.Name = "chart1";
             this.chart1.Palette = System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.None;
             series2.BackSecondaryColor = System.Drawing.Color.MintCream;
             series2.ChartArea = "ChartArea1";
             series2.CustomProperties = "DrawingStyle=Cylinder, LabelStyle=Top";
             series2.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
             series2.Name = "chartSeries1";
             series2.XValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.String;
             series2.YValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.Double;
             this.chart1.Series.Add(series2);
             this.chart1.Size = new System.Drawing.Size(844, 517);
             this.chart1.TabIndex = 0;
             this.chart1.TextAntiAliasingQuality = System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality.SystemDefault;
             // 
             // cbMatrixSize
             // 
             this.cbMatrixSize.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
             this.cbMatrixSize.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.ListItems;
             this.cbMatrixSize.FormattingEnabled = true;
             this.cbMatrixSize.Items.AddRange(new object[] {
             "16",
             "32",
             "64",
             "128",
             "256",
             "512",
             "1024",
             "2048",
             "4096",
             "8192"});
             this.cbMatrixSize.Location = new System.Drawing.Point(20, 20);
             this.cbMatrixSize.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.cbMatrixSize.Name = "cbMatrixSize";
             this.cbMatrixSize.Size = new System.Drawing.Size(121, 28);
             this.cbMatrixSize.TabIndex = 1;
             this.cbMatrixSize.Text = "512";
             // 
             // btnCompute
             // 
             this.btnCompute.Location = new System.Drawing.Point(152, 20);
             this.btnCompute.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.btnCompute.Name = "btnCompute";
             this.btnCompute.Size = new System.Drawing.Size(112, 35);
             this.btnCompute.TabIndex = 2;
             this.btnCompute.Text = "Compute";
             this.btnCompute.UseVisualStyleBackColor = true;
             this.btnCompute.Click += new System.EventHandler(this.btnCompute_Click);
             // 
             // progressBar1
             // 
             this.progressBar1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                         | System.Windows.Forms.AnchorStyles.Right)));
             this.progressBar1.Location = new System.Drawing.Point(274, 20);
             this.progressBar1.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.progressBar1.Name = "progressBar1";
             this.progressBar1.Size = new System.Drawing.Size(588, 35);
             this.progressBar1.Style = System.Windows.Forms.ProgressBarStyle.Marquee;
             this.progressBar1.TabIndex = 3;
             this.progressBar1.Visible = false;
             // 
             // MainForm
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(9F, 20F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
             this.ClientSize = new System.Drawing.Size(880, 600);
             this.Controls.Add(this.progressBar1);
             this.Controls.Add(this.btnCompute);
             this.Controls.Add(this.cbMatrixSize);
             this.Controls.Add(this.chart1);
             this.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
             this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.SizableToolWindow;
             this.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.Name = "MainForm";
             this.Text = "Matrix Multiplication";
             this.Load += new System.EventHandler(this.MainForm_Load);
             ((System.ComponentModel.ISupportInitialize)(this.chart1)).EndInit();
             this.ResumeLayout(false);
 
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs" startline="99" endline="132"><![CDATA[
                 {
                     _cancellation = null;
                     btnCompute.Text = "Compute";
                     progressBar1.Visible = false;
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
                 }, _uiScheduler);
             }
             else _cancellation.Cancel();
         }
 
         private void SetPoint(DataPoint point, double seconds)
         {
             Task.Factory.StartNew(() =>
             {
                 if (seconds > _max)
                 {
                     _max = seconds;
                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
                 }
                 point.SetValueY(seconds);
                 point.ToolTip = seconds.ToString("F2");
                 point.Label = string.Format("{0
                 chart1.Invalidate();
             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
         }
 
         static TimeSpan Time(Action action)
         {
             var sw = Stopwatch.StartNew();
             action();
             return sw.Elapsed;
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Resources.Designer.cs" startline="31" endline="33"><![CDATA[
         [global
         internal Resources() {
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Resources.Designer.cs" startline="34" endline="46"><![CDATA[
         
         /// <summary>
         ///   Returns the cached ResourceManager instance used by this class.
         /// </summary>
         [global
         internal static global
             get {
                 if (object.ReferenceEquals(resourceMan, null)) {
                     global
                     resourceMan = temp;
                 }
                 return resourceMan;
             }
         }
         
         /// <summary>
         ///   Overrides the current thread's CurrentUICulture property for all
         ///   resource lookups using this strongly typed resource class.
         /// </summary>
         [global
         internal static global
             get {
                 return resourceCulture;
             }
             set {
                 resourceCulture = value;
             }
         }
     }
 }
                 if (object.ReferenceEquals(resourceMan, null)) {
                     global
                     resourceMan = temp;
                 }
                 return resourceMan;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Resources.Designer.cs" startline="47" endline="57"><![CDATA[
         }
         
         /// <summary>
         ///   Overrides the current thread's CurrentUICulture property for all
         ///   resource lookups using this strongly typed resource class.
         /// </summary>
         [global
         internal static global
             get {
                 return resourceCulture;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Resources.Designer.cs" startline="58" endline="60"><![CDATA[
             set {
                 resourceCulture = value;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Program.cs" startline="19" endline="23"><![CDATA[
         {
             Application.EnableVisualStyles();
             Application.SetCompatibleTextRenderingDefault(false);
             Application.Run(new MainForm());
         }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Settings.Designer.cs" startline="21" endline="23"><![CDATA[
             get {
                 return defaultInstance;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Settings.Designer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Settings.Designer.cs" startline="18" endline="26"><![CDATA[
         private static Settings defaultInstance = ((Settings)(global
         
         public static Settings Default {
             get {
                 return defaultInstance;
             }
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="23" endline="31"><![CDATA[
     public Matrix(int size)
     {
         if (!_validSizes.Contains(size)) throw new ArgumentOutOfRangeException("size");
         _size = size;
         _data = new int[size * size];
 
         _dataPtrHandle = GCHandle.Alloc(_data, GCHandleType.Pinned);
         _dataPtr = (int*)_dataPtrHandle.AddrOfPinnedObject().ToPointer();
     }
 
     ~Matrix() { Dispose(); }
     public void Dispose()
     {
         if (_data != null)
         {
             _dataPtrHandle.Free();
             _data = null;
         }
     }
 
     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
 
     public void FillWithRandomValues()
     {
         Random rand = new Random();
         for (int i = 0; i < _data.Length; i++)
         {
             _data[i] = rand.Next() % 127;
         }
     }
 
     public bool Equals(Matrix other)
     {
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         if (!_validSizes.Contains(size)) throw new ArgumentOutOfRangeException("size");
         _size = size;
         _data = new int[size * size];
 
         _dataPtrHandle = GCHandle.Alloc(_data, GCHandleType.Pinned);
         _dataPtr = (int*)_dataPtrHandle.AddrOfPinnedObject().ToPointer();
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="32" endline="33"><![CDATA[
 
     ~Matrix() { Dispose(); }
     public void Dispose()
     {
         if (_data != null)
         {
             _dataPtrHandle.Free();
             _data = null;
         }
     }
 
     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
 
     public void FillWithRandomValues()
     {
         Random rand = new Random();
         for (int i = 0; i < _data.Length; i++)
         {
             _data[i] = rand.Next() % 127;
         }
     }
 
     public bool Equals(Matrix other)
     {
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
     ~Matrix() { Dispose(); }
     public void Dispose()
     {
         if (_data != null)
         {
             _dataPtrHandle.Free();
             _data = null;
         }
     }
 
     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
 
     public void FillWithRandomValues()
     {
         Random rand = new Random();
         for (int i = 0; i < _data.Length; i++)
         {
             _data[i] = rand.Next() % 127;
         }
     }
 
     public bool Equals(Matrix other)
     {
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
     ~Matrix() { Dispose(); }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="34" endline="41"><![CDATA[
     public void Dispose()
     {
         if (_data != null)
         {
             _dataPtrHandle.Free();
             _data = null;
         }
     }
 
     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
 
     public void FillWithRandomValues()
     {
         Random rand = new Random();
         for (int i = 0; i < _data.Length; i++)
         {
             _data[i] = rand.Next() % 127;
         }
     }
 
     public bool Equals(Matrix other)
     {
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         {
             _dataPtrHandle.Free();
             _data = null;
         }
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="42" endline="43"><![CDATA[
 
     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="44" endline="52"><![CDATA[
 
     public void FillWithRandomValues()
     {
         Random rand = new Random();
         for (int i = 0; i < _data.Length; i++)
         {
             _data[i] = rand.Next() % 127;
         }
     }
 
     public bool Equals(Matrix other)
     {
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         {
             _data[i] = rand.Next() % 127;
         }
         for (int i = 0; i < _data.Length; i++)
         {
             _data[i] = rand.Next() % 127;
         }
     }
 
     public bool Equals(Matrix other)
     {
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="53" endline="59"><![CDATA[
 
     public bool Equals(Matrix other)
     {
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         return true;
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="60" endline="71"><![CDATA[
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="72" endline="83"><![CDATA[
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="84" endline="96"><![CDATA[
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="97" endline="109"><![CDATA[
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="110" endline="124"><![CDATA[
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="125" endline="143"><![CDATA[
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         }
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="144" endline="169"><![CDATA[
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         }
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="170" endline="195"><![CDATA[
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="196" endline="379"><![CDATA[
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         }
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="380" endline="614"><![CDATA[
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
         }
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="555" endline="615"><![CDATA[
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs" startline="18" endline="615"><![CDATA[
     private static int[] _validSizes = new[] { 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536 };
     private int[] _data;
     private int* _dataPtr;
     private GCHandle _dataPtrHandle;
 
     public Matrix(int size)
     {
         if (!_validSizes.Contains(size)) throw new ArgumentOutOfRangeException("size");
         _size = size;
         _data = new int[size * size];
 
         _dataPtrHandle = GCHandle.Alloc(_data, GCHandleType.Pinned);
         _dataPtr = (int*)_dataPtrHandle.AddrOfPinnedObject().ToPointer();
     }
 
     ~Matrix() { Dispose(); }
     public void Dispose()
     {
         if (_data != null)
         {
             _dataPtrHandle.Free();
             _data = null;
         }
     }
 
     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
 
     public void FillWithRandomValues()
     {
         Random rand = new Random();
         for (int i = 0; i < _data.Length; i++)
         {
             _data[i] = rand.Next() % 127;
         }
     }
 
     public bool Equals(Matrix other)
     {
         if (_size != other._size) return false;
         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
         return true;
     }
 
     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_serial(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         matrix_mult_parallel(
             cancellationToken,
             N, N, N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N);
     }
 
     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_serial(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
     {
         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
         int N = src1._size;
         strassen_mult_parallel(
             cancellationToken,
             N,
             src1._dataPtr, 0, 0, N,
             src2._dataPtr, 0, 0, N,
             dst._dataPtr, 0, 0, N,
             64);
     }
 
     private static void matrix_add( 
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
             for (int j = 0; j < m; j += 1)
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
     }
 
     private static void matrix_sub(
         // dimensions of A, B, and C submatrices 
         int n, int m,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < n; i += 1)
         {
             for (int j = 0; j < m; j += 1)
             {
                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
             }
         }
     }
 
     private static void matrix_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         for (int i = 0; i < l; ++i)
         {
             cancellationToken.ThrowIfCancellationRequested();
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         }
     }
 
     private static void matrix_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
         int l, int m, int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs)
     {
         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
         Parallel.For(0, l, options, i =>
         {
             for (int j = 0; j < n; j++)
             {
                 int temp = 0;
                 for (int k = 0; k < m; k++)
                 {
                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
                 }
                 C[(i + cx) * cs + j + cy] = temp;
             }
         });
     }
 
     private static void strassen_mult_serial(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int[] workArr = new int[n_2 * n_2 * 9];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + n_2 * n_2;
                 int* p1 = b_cum + n_2 * n_2;
                 int* p2 = p1 + n_2 * n_2;
                 int* p3 = p2 + n_2 * n_2;
                 int* p4 = p3 + n_2 * n_2;
                 int* p5 = p4 + n_2 * n_2;
                 int* p6 = p5 + n_2 * n_2;
                 int* p7 = p6 + n_2 * n_2;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p1, 0, 0, n_2,
                     s);
 
                 // p2 = (a21 + a22) * b11 
                 matrix_add(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx, by, bs,
                     p2, 0, 0, n_2,
                     s);
 
                 // p3 = a11 x (b12 - b22) 
                 matrix_sub(n_2, n_2,
                     B, bx, by + n_2, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax, ay, a_s,
                     b_cum, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     s);
 
                 // p4 = a22 x (b21 - b11) 
                 matrix_sub(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx, by, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     A, ax + n_2, ay + n_2, a_s,
                     b_cum, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     s);
 
                 // p5 = (a11 + a12) x b22 
                 matrix_add(n_2, n_2,
                     A, ax, ay, a_s,
                     A, ax, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     B, bx + n_2, by + n_2, bs,
                     p5, 0, 0, n_2,
                     s);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 matrix_sub(n_2, n_2,
                     A, ax + n_2, ay, a_s,
                     A, ax, ay, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx, by, bs,
                     B, bx, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p6, 0, 0, n_2,
                     s);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 matrix_sub(n_2, n_2,
                     A, ax, ay + n_2, a_s,
                     A, ax + n_2, ay + n_2, a_s,
                     a_cum, 0, 0, n_2);
                 matrix_add(n_2, n_2,
                     B, bx + n_2, by, bs,
                     B, bx + n_2, by + n_2, bs,
                     b_cum, 0, 0, n_2);
                 strassen_mult_serial(
                     cancellationToken,
                     n_2,
                     a_cum, 0, 0, n_2,
                     b_cum, 0, 0, n_2,
                     p7, 0, 0, n_2,
                     s);
 
                 // c11 = p1 + p4 - p5 + p7 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_sub(n_2, n_2,
                     C, cx, cy, cs,
                     p5, 0, 0, n_2,
                     C, cx, cy, cs);
                 matrix_add(n_2, n_2,
                     C, cx, cy, cs,
                     p7, 0, 0, n_2,
                     C, cx, cy, cs);
 
                 // c12 = p3 + p5 
                 matrix_add(n_2, n_2,
                     p3, 0, 0, n_2,
                     p5, 0, 0, n_2,
                     C, cx, cy + n_2, cs);
 
                 // c21 = p2 + p4 
                 matrix_add(n_2, n_2,
                     p2, 0, 0, n_2,
                     p4, 0, 0, n_2,
                     C, cx + n_2, cy, cs);
 
                 // c22 = p1 + p3 - p2 + p6 
                 matrix_add(n_2, n_2,
                     p1, 0, 0, n_2,
                     p3, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_sub(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p2, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
                 matrix_add(n_2, n_2,
                     C, cx + n_2, cy + n_2, cs,
                     p6, 0, 0, n_2,
                     C, cx + n_2, cy + n_2, cs);
             }
         }
     }
 
     private static void strassen_mult_parallel(
         CancellationToken cancellationToken, 
         // dimensions of A, B, and C submatrices 
         int n,
         // (ax,ay) = origin of A submatrix for multiplicand 
         int* A, int ax, int ay, int a_s,
         // (bx,by) = origin of B submatrix for multiplicand 
         int* B, int bx, int by, int bs,
         // (cx,cy) = origin of C submatrix for result 
         int* C, int cx, int cy, int cs,
         // Strassen's recursion limit for array dimensions 
         int s)
     {
         if (n <= s)
         {
             matrix_mult_serial(
                 cancellationToken,
                 n, n, n,
                 A, ax, ay, a_s,
                 B, bx, by, bs,
                 C, cx, cy, cs);
         }
         else
         {
             int n_2 = n >> 1;
             int areaSize = n_2 * n_2;
             int[] workArr = new int[areaSize * 17];
             fixed (int* work = workArr)
             {
                 int* a_cum = work;
                 int* b_cum = a_cum + areaSize;
                 int* c_cum = b_cum + areaSize;
                 int* d_cum = c_cum + areaSize;
                 int* e_cum = d_cum + areaSize;
                 int* f_cum = e_cum + areaSize;
                 int* g_cum = f_cum + areaSize;
                 int* h_cum = g_cum + areaSize;
                 int* i_cum = h_cum + areaSize;
                 int* j_cum = i_cum + areaSize;
                 int* p1 = j_cum + areaSize;
                 int* p2 = p1 + areaSize;
                 int* p3 = p2 + areaSize;
                 int* p4 = p3 + areaSize;
                 int* p5 = p4 + areaSize;
                 int* p6 = p5 + areaSize;
                 int* p7 = p6 + areaSize;
 
                 // p1 = (a11 + a22) * (b11 + b22) 
                 Task t_p1 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         a_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         b_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         a_cum, 0, 0, n_2,
                         b_cum, 0, 0, n_2,
                         p1, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p2 = (a21 + a22) * b11 
                 Task t_p2 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         c_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         c_cum, 0, 0, n_2,
                         B, bx, by, bs,
                         p2, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p3 = a11 x (b12 - b22) 
                 Task t_p3 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx, by + n_2, bs,
                         B, bx + n_2, by + n_2, bs,
                         d_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax, ay, a_s,
                         d_cum, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p4 = a22 x (b21 - b11) 
                 Task t_p4 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx, by, bs,
                         e_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         A, ax + n_2, ay + n_2, a_s,
                         e_cum, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p5 = (a11 + a12) x b22 
                 Task t_p5 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         A, ax, ay, a_s,
                         A, ax, ay + n_2, a_s,
                         f_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         f_cum, 0, 0, n_2,
                         B, bx + n_2, by + n_2, bs,
                         p5, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p6 = (a21 - a11) x (b11 + b12) 
                 Task t_p6 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax + n_2, ay, a_s,
                         A, ax, ay, a_s,
                         g_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx, by, bs,
                         B, bx, by + n_2, bs,
                         h_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         g_cum, 0, 0, n_2,
                         h_cum, 0, 0, n_2,
                         p6, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 // p7 = (a12 - a22) x (b21 + b22) 
                 Task t_p7 = Task.Factory.StartNew(() =>
                 {
                     matrix_sub(n_2, n_2,
                         A, ax, ay + n_2, a_s,
                         A, ax + n_2, ay + n_2, a_s,
                         i_cum, 0, 0, n_2);
                     matrix_add(n_2, n_2,
                         B, bx + n_2, by, bs,
                         B, bx + n_2, by + n_2, bs,
                         j_cum, 0, 0, n_2);
                     strassen_mult_parallel(
                         cancellationToken,
                         n_2,
                         i_cum, 0, 0, n_2,
                         j_cum, 0, 0, n_2,
                         p7, 0, 0, n_2,
                         s);
                 }, cancellationToken);
 
                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
                 catch (AggregateException ae)
                 {
                     ae.Flatten().Handle(e => e is TaskCanceledException);
                     cancellationToken.ThrowIfCancellationRequested();
                 }
 
                 // c11 = p1 + p4 - p5 + p7 
                 Task t_c11 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_sub(n_2, n_2,
                         C, cx, cy, cs,
                         p5, 0, 0, n_2,
                         C, cx, cy, cs);
                     matrix_add(n_2, n_2,
                         C, cx, cy, cs,
                         p7, 0, 0, n_2,
                         C, cx, cy, cs);
                 });
 
                 // c12 = p3 + p5 
                 Task t_c12 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p3, 0, 0, n_2,
                         p5, 0, 0, n_2,
                         C, cx, cy + n_2, cs);
                 });
 
                 // c21 = p2 + p4 
                 Task t_c21 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p2, 0, 0, n_2,
                         p4, 0, 0, n_2,
                         C, cx + n_2, cy, cs);
                 });
 
                 // c22 = p1 + p3 - p2 + p6 
                 Task t_c22 = Task.Factory.StartNew(() =>
                 {
                     matrix_add(n_2, n_2,
                         p1, 0, 0, n_2,
                         p3, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_sub(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p2, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                     matrix_add(n_2, n_2,
                         C, cx + n_2, cy + n_2, cs,
                         p6, 0, 0, n_2,
                         C, cx + n_2, cy + n_2, cs);
                 });
 
                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
             }
         }
     }
 }
]]></source>
</source_elements></project>
