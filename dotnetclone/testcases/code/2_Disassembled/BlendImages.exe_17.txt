
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern System.Windows.Forms
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Drawing
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:0:0:0
}
.assembly extern ParallelExtensionsExtras
{
  .ver 1:2:0:0
}
.assembly BlendImages
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 0B 42 6C 65 6E 64 49 6D 61 67 65 73 00 00 ) // ...BlendImages..
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 29 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ..).NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 2C 50 72   // ,Version=v4.0,Pr
                                                                                                        6F 66 69 6C 65 3D 43 6C 69 65 6E 74 01 00 54 0E   // ofile=Client..T.
                                                                                                        14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C 61   // .FrameworkDispla
                                                                                                        79 4E 61 6D 65 1F 2E 4E 45 54 20 46 72 61 6D 65   // yName..NET Frame
                                                                                                        77 6F 72 6B 20 34 20 43 6C 69 65 6E 74 20 50 72   // work 4 Client Pr
                                                                                                        6F 66 69 6C 65 )                                  // ofile
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 0B 42 6C 65 6E 64 49 6D 61 67 65 73 00 00 ) // ...BlendImages..
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 1B 42 6C 65 6E 64 73 20 74 6F 67 65 74 68   // ...Blends togeth
                                                                                                    65 72 20 74 77 6F 20 69 6D 61 67 65 73 2E 00 00 ) // er two images...
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = ( 01 00 24 37 44 30 43 41 35 38 46 2D 44 30 41 41   // ..$7D0CA58F-D0AA
                                                                                                  2D 34 38 37 30 2D 41 45 34 37 2D 33 41 46 46 46   // -4870-AE47-3AFFF
                                                                                                  43 34 44 32 37 35 39 00 00 )                      // C4D2759..

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .permissionset reqmin
             = {[mscorlib]System.Security.Permissions.SecurityPermissionAttribute = {property bool 'SkipVerification' = bool(true)}}
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources.resources
{
  // Offset: 0x00000000 Length: 0x000000B4
}
.mresource public Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm.resources
{
  // Offset: 0x000000B8 Length: 0x000000B4
}
.module BlendImages.exe
// MVID: {298A2D11-52A1-47A5-B7EA-90833E30C8BB}
.custom instance void [mscorlib]System.Security.UnverifiableCodeAttribute::.ctor() = ( 01 00 00 00 ) 
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x003A0000


// =============== CLASS MEMBERS DECLARATION ===================

.class public auto ansi beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm
       extends [System.Windows.Forms]System.Windows.Forms.Form
{
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass2'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public bool isParallel
    .field public class [System.Drawing]System.Drawing.Bitmap bmp1
    .field public class [System.Drawing]System.Drawing.Bitmap bmp2
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm '<>4__this'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass2'::.ctor

    .method public hidebysig instance class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string> 
            '<btnBlendImages_Click>b__1'() cil managed
    {
      // Code size       220 (0xdc)
      .maxstack  5
      .locals init ([0] valuetype [mscorlib]System.TimeSpan time,
               [1] class [System.Drawing]System.Drawing.Bitmap output,
               [2] string speedup,
               [3] class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string> CS$1$0000,
               [4] bool CS$4$0001,
               [5] valuetype [mscorlib]System.TimeSpan CS$0$0002)
      .language '{3F5162F8-07C6-11D3-9053-00C04FA302A1}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BlendImages\BlendImages_CSharp\MainForm.cs' 
//000101:             {
      IL_0000:  nop
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp1
      IL_0007:  ldarg.0
      IL_0008:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp2
      IL_000d:  ldc.r8     0.5
      IL_0016:  ldarg.0
      IL_0017:  ldfld      bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::isParallel
      IL_001c:  ldloca.s   time
      IL_001e:  call       class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::BlendImages(class [System.Drawing]System.Drawing.Bitmap,
                                                                                                                                                            class [System.Drawing]System.Drawing.Bitmap,
                                                                                                                                                            float64,
                                                                                                                                                            bool,
                                                                                                                                                            valuetype [mscorlib]System.TimeSpan&)
      IL_0023:  stloc.1
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
      IL_0024:  ldarg.0
      IL_0025:  ldfld      bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::isParallel
      IL_002a:  ldc.i4.0
      IL_002b:  ceq
      IL_002d:  stloc.s    CS$4$0001
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_002f:  ldloc.s    CS$4$0001
      IL_0031:  brtrue.s   IL_0046

//000107:                 if (isParallel) _lastParallelTime = time;
      IL_0033:  ldarg.0
      IL_0034:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::'<>4__this'
      IL_0039:  ldloc.0
      IL_003a:  newobj     instance void valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan>::.ctor(!0)
      IL_003f:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastParallelTime
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_0044:  br.s       IL_0057

//000108:                 else _lastSequentialTime = time;
      IL_0046:  ldarg.0
      IL_0047:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::'<>4__this'
      IL_004c:  ldloc.0
      IL_004d:  newobj     instance void valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan>::.ctor(!0)
      IL_0052:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastSequentialTime
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
      IL_0057:  ldarg.0
      IL_0058:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::'<>4__this'
      IL_005d:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastSequentialTime
      IL_0062:  call       instance bool valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan>::get_HasValue()
      IL_0067:  brfalse.s  IL_007b

      IL_0069:  ldarg.0
      IL_006a:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::'<>4__this'
      IL_006f:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastParallelTime
      IL_0074:  call       instance bool valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan>::get_HasValue()
      IL_0079:  brtrue.s   IL_0082

      IL_007b:  ldsfld     string [mscorlib]System.String::Empty
      IL_0080:  br.s       IL_00ce

      IL_0082:  ldstr      "Speedup: {0:F2}"
      IL_0087:  ldarg.0
      IL_0088:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::'<>4__this'
      IL_008d:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastSequentialTime
      IL_0092:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan>::get_Value()
      IL_0097:  stloc.s    CS$0$0002
      IL_0099:  ldloca.s   CS$0$0002
      IL_009b:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
      IL_00a0:  ldarg.0
      IL_00a1:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::'<>4__this'
      IL_00a6:  ldflda     valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastParallelTime
      IL_00ab:  call       instance !0 valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan>::get_Value()
      IL_00b0:  stloc.s    CS$0$0002
      IL_00b2:  ldloca.s   CS$0$0002
      IL_00b4:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
      IL_00b9:  div
      IL_00ba:  box        [mscorlib]System.Double
      IL_00bf:  call       string [mscorlib]System.String::Format(string,
                                                                  object)
      IL_00c4:  ldstr      "x"
      IL_00c9:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_00ce:  stloc.2
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
      IL_00cf:  ldloc.1
      IL_00d0:  ldloc.0
      IL_00d1:  ldloc.2
      IL_00d2:  newobj     instance void class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>::.ctor(!0,
                                                                                                                                                                      !1,
                                                                                                                                                                      !2)
      IL_00d7:  stloc.3
      IL_00d8:  br.s       IL_00da

//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_00da:  ldloc.3
      IL_00db:  ret
    } // end of method '<>c__DisplayClass2'::'<btnBlendImages_Click>b__1'

  } // end of class '<>c__DisplayClass2'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass5'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32 width
    .field public float64 blend
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass5'::.ctor

  } // end of class '<>c__DisplayClass5'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass7'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap fastOut
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass7'::.ctor

  } // end of class '<>c__DisplayClass7'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass9'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap fastStart
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass9'::.ctor

  } // end of class '<>c__DisplayClass9'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClassc'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9' 'CS$<>8__localsa'
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7' 'CS$<>8__locals8'
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' 'CS$<>8__locals6'
    .field public class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap fastEnd
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClassc'::.ctor

    .method public hidebysig instance void 
            '<BlendImages>b__4'(int32 j) cil managed
    {
      // Code size       312 (0x138)
      .maxstack  5
      .locals init ([0] valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* outPixel,
               [1] valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* startPixel,
               [2] valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* endPixel,
               [3] int32 i,
               [4] bool CS$4$0000)
//000148:                     {
      IL_0000:  nop
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals8'
      IL_0007:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7'::fastOut
      IL_000c:  ldarg.1
      IL_000d:  callvirt   instance valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::GetInitialPixelForRow(int32)
      IL_0012:  stloc.0
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
      IL_0013:  ldarg.0
      IL_0014:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__localsa'
      IL_0019:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9'::fastStart
      IL_001e:  ldarg.1
      IL_001f:  callvirt   instance valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::GetInitialPixelForRow(int32)
      IL_0024:  stloc.1
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
      IL_0025:  ldarg.0
      IL_0026:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::fastEnd
      IL_002b:  ldarg.1
      IL_002c:  callvirt   instance valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::GetInitialPixelForRow(int32)
      IL_0031:  stloc.2
//000152: 
//000153:                         for (int i = 0; i < width; i++)
      IL_0032:  ldc.i4.0
      IL_0033:  stloc.3
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_0034:  br         IL_0120

//000154:                         {
      IL_0039:  nop
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
      IL_003a:  ldloc.0
      IL_003b:  ldloc.1
      IL_003c:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::R
      IL_0041:  conv.r8
      IL_0042:  ldarg.0
      IL_0043:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals6'
      IL_0048:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
      IL_004d:  mul
      IL_004e:  ldc.r8     0.5
      IL_0057:  add
      IL_0058:  ldloc.2
      IL_0059:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::R
      IL_005e:  conv.r8
      IL_005f:  ldc.r8     1.
      IL_0068:  ldarg.0
      IL_0069:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals6'
      IL_006e:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
      IL_0073:  sub
      IL_0074:  mul
      IL_0075:  add
      IL_0076:  conv.u1
      IL_0077:  stfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::R
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
      IL_007c:  ldloc.0
      IL_007d:  ldloc.1
      IL_007e:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::G
      IL_0083:  conv.r8
      IL_0084:  ldarg.0
      IL_0085:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals6'
      IL_008a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
      IL_008f:  mul
      IL_0090:  ldc.r8     0.5
      IL_0099:  add
      IL_009a:  ldloc.2
      IL_009b:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::G
      IL_00a0:  conv.r8
      IL_00a1:  ldc.r8     1.
      IL_00aa:  ldarg.0
      IL_00ab:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals6'
      IL_00b0:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
      IL_00b5:  sub
      IL_00b6:  mul
      IL_00b7:  add
      IL_00b8:  conv.u1
      IL_00b9:  stfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::G
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
      IL_00be:  ldloc.0
      IL_00bf:  ldloc.1
      IL_00c0:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::B
      IL_00c5:  conv.r8
      IL_00c6:  ldarg.0
      IL_00c7:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals6'
      IL_00cc:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
      IL_00d1:  mul
      IL_00d2:  ldc.r8     0.5
      IL_00db:  add
      IL_00dc:  ldloc.2
      IL_00dd:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::B
      IL_00e2:  conv.r8
      IL_00e3:  ldc.r8     1.
      IL_00ec:  ldarg.0
      IL_00ed:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals6'
      IL_00f2:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
      IL_00f7:  sub
      IL_00f8:  mul
      IL_00f9:  add
      IL_00fa:  conv.u1
      IL_00fb:  stfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::B
//000159: 
//000160:                             outPixel++;
      IL_0100:  ldloc.0
      IL_0101:  sizeof     [ParallelExtensionsExtras]Microsoft.Drawing.PixelData
      IL_0107:  add
      IL_0108:  stloc.0
//000161:                             startPixel++;
      IL_0109:  ldloc.1
      IL_010a:  sizeof     [ParallelExtensionsExtras]Microsoft.Drawing.PixelData
      IL_0110:  add
      IL_0111:  stloc.1
//000162:                             endPixel++;
      IL_0112:  ldloc.2
      IL_0113:  sizeof     [ParallelExtensionsExtras]Microsoft.Drawing.PixelData
      IL_0119:  add
      IL_011a:  stloc.2
//000163:                         }
      IL_011b:  nop
//000153:                         for (int i = 0; i < width; i++)
      IL_011c:  ldloc.3
      IL_011d:  ldc.i4.1
      IL_011e:  add
      IL_011f:  stloc.3
      IL_0120:  ldloc.3
      IL_0121:  ldarg.0
      IL_0122:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals6'
      IL_0127:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::width
      IL_012c:  clt
      IL_012e:  stloc.s    CS$4$0000
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_0130:  ldloc.s    CS$4$0000
      IL_0132:  brtrue     IL_0039

      IL_0137:  ret
    } // end of method '<>c__DisplayClassc'::'<BlendImages>b__4'

  } // end of class '<>c__DisplayClassc'

  .field private class [System]System.ComponentModel.IContainer components
  .field private class [System.Windows.Forms]System.Windows.Forms.Button btnSequential
  .field private class [System.Windows.Forms]System.Windows.Forms.Button btnParallel
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblTime
  .field private class [System.Windows.Forms]System.Windows.Forms.SplitContainer splitContainer1
  .field private class [System.Windows.Forms]System.Windows.Forms.PictureBox pbInput1
  .field private class [System.Windows.Forms]System.Windows.Forms.SplitContainer splitContainer2
  .field private class [System.Windows.Forms]System.Windows.Forms.PictureBox pbInput2
  .field private class [System.Windows.Forms]System.Windows.Forms.PictureBox pbOutput
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblSpeedup
  .field private class [System.Windows.Forms]System.Windows.Forms.ToolTip toolTip1
  .field private valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> _lastSequentialTime
  .field private valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> _lastParallelTime
  .method family hidebysig virtual instance void 
          Dispose(bool disposing) cil managed
  {
    // Code size       43 (0x2b)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BlendImages\BlendImages_CSharp\MainForm.Designer.cs' 
//000015:         {
    IL_0000:  nop
//000016:             if (disposing && (components != null))
    IL_0001:  ldarg.1
    IL_0002:  brfalse.s  IL_000f

    IL_0004:  ldarg.0
    IL_0005:  ldfld      class [System]System.ComponentModel.IContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::components
    IL_000a:  ldnull
    IL_000b:  ceq
    IL_000d:  br.s       IL_0010

    IL_000f:  ldc.i4.1
    IL_0010:  stloc.0
//000017:             {
//000018:                 components.Dispose();
//000019:             }
//000020:             base.Dispose(disposing);
//000021:         }
//000022: 
//000023:         #region Windows Form Designer generated code
//000024: 
//000025:         /// <summary>
//000026:         /// Required method for Designer support - do not modify
//000027:         /// the contents of this method with the code editor.
//000028:         /// </summary>
//000029:         private void InitializeComponent()
//000030:         {
//000031:             this.components = new System.ComponentModel.Container();
//000032:             this.btnSequential = new System.Windows.Forms.Button();
//000033:             this.btnParallel = new System.Windows.Forms.Button();
//000034:             this.lblTime = new System.Windows.Forms.Label();
//000035:             this.splitContainer1 = new System.Windows.Forms.SplitContainer();
//000036:             this.pbInput1 = new System.Windows.Forms.PictureBox();
//000037:             this.splitContainer2 = new System.Windows.Forms.SplitContainer();
//000038:             this.pbInput2 = new System.Windows.Forms.PictureBox();
//000039:             this.pbOutput = new System.Windows.Forms.PictureBox();
//000040:             this.lblSpeedup = new System.Windows.Forms.Label();
//000041:             this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
//000042:             this.splitContainer1.Panel1.SuspendLayout();
//000043:             this.splitContainer1.Panel2.SuspendLayout();
//000044:             this.splitContainer1.SuspendLayout();
//000045:             ((System.ComponentModel.ISupportInitialize)(this.pbInput1)).BeginInit();
//000046:             this.splitContainer2.Panel1.SuspendLayout();
//000047:             this.splitContainer2.Panel2.SuspendLayout();
//000048:             this.splitContainer2.SuspendLayout();
//000049:             ((System.ComponentModel.ISupportInitialize)(this.pbInput2)).BeginInit();
//000050:             ((System.ComponentModel.ISupportInitialize)(this.pbOutput)).BeginInit();
//000051:             this.SuspendLayout();
//000052:             // 
//000053:             // btnSequential
//000054:             // 
//000055:             this.btnSequential.Enabled = false;
//000056:             this.btnSequential.Location = new System.Drawing.Point(12, 12);
//000057:             this.btnSequential.Name = "btnSequential";
//000058:             this.btnSequential.Size = new System.Drawing.Size(75, 23);
//000059:             this.btnSequential.TabIndex = 0;
//000060:             this.btnSequential.Text = "Sequential";
//000061:             this.btnSequential.UseVisualStyleBackColor = true;
//000062:             this.btnSequential.Click += new System.EventHandler(this.btnBlendImages_Click);
//000063:             // 
//000064:             // btnParallel
//000065:             // 
//000066:             this.btnParallel.Enabled = false;
//000067:             this.btnParallel.Location = new System.Drawing.Point(93, 12);
//000068:             this.btnParallel.Name = "btnParallel";
//000069:             this.btnParallel.Size = new System.Drawing.Size(75, 23);
//000070:             this.btnParallel.TabIndex = 1;
//000071:             this.btnParallel.Text = "Parallel";
//000072:             this.btnParallel.UseVisualStyleBackColor = true;
//000073:             this.btnParallel.Click += new System.EventHandler(this.btnBlendImages_Click);
//000074:             // 
//000075:             // lblTime
//000076:             // 
//000077:             this.lblTime.AutoSize = true;
//000078:             this.lblTime.Location = new System.Drawing.Point(174, 17);
//000079:             this.lblTime.Name = "lblTime";
//000080:             this.lblTime.Size = new System.Drawing.Size(0, 13);
//000081:             this.lblTime.TabIndex = 2;
//000082:             // 
//000083:             // splitContainer1
//000084:             // 
//000085:             this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
//000086:                         | System.Windows.Forms.AnchorStyles.Left)
//000087:                         | System.Windows.Forms.AnchorStyles.Right)));
//000088:             this.splitContainer1.Location = new System.Drawing.Point(12, 41);
//000089:             this.splitContainer1.Name = "splitContainer1";
//000090:             // 
//000091:             // splitContainer1.Panel1
//000092:             // 
//000093:             this.splitContainer1.Panel1.Controls.Add(this.pbInput1);
//000094:             // 
//000095:             // splitContainer1.Panel2
//000096:             // 
//000097:             this.splitContainer1.Panel2.Controls.Add(this.splitContainer2);
//000098:             this.splitContainer1.Size = new System.Drawing.Size(860, 269);
//000099:             this.splitContainer1.SplitterDistance = 286;
//000100:             this.splitContainer1.TabIndex = 3;
//000101:             // 
//000102:             // pbInput1
//000103:             // 
//000104:             this.pbInput1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
//000105:             this.pbInput1.Cursor = System.Windows.Forms.Cursors.Hand;
//000106:             this.pbInput1.Dock = System.Windows.Forms.DockStyle.Fill;
//000107:             this.pbInput1.Location = new System.Drawing.Point(0, 0);
//000108:             this.pbInput1.Name = "pbInput1";
//000109:             this.pbInput1.Size = new System.Drawing.Size(286, 269);
//000110:             this.pbInput1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
//000111:             this.pbInput1.TabIndex = 0;
//000112:             this.pbInput1.TabStop = false;
//000113:             this.toolTip1.SetToolTip(this.pbInput1, "Double-click to load new image");
//000114:             this.pbInput1.DoubleClick += new System.EventHandler(this.pbInput_DoubleClick);
//000115:             // 
//000116:             // splitContainer2
//000117:             // 
//000118:             this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
//000119:             this.splitContainer2.Location = new System.Drawing.Point(0, 0);
//000120:             this.splitContainer2.Name = "splitContainer2";
//000121:             // 
//000122:             // splitContainer2.Panel1
//000123:             // 
//000124:             this.splitContainer2.Panel1.Controls.Add(this.pbInput2);
//000125:             // 
//000126:             // splitContainer2.Panel2
//000127:             // 
//000128:             this.splitContainer2.Panel2.Controls.Add(this.pbOutput);
//000129:             this.splitContainer2.Size = new System.Drawing.Size(570, 269);
//000130:             this.splitContainer2.SplitterDistance = 285;
//000131:             this.splitContainer2.TabIndex = 0;
//000132:             // 
//000133:             // pbInput2
//000134:             // 
//000135:             this.pbInput2.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
//000136:             this.pbInput2.Cursor = System.Windows.Forms.Cursors.Hand;
//000137:             this.pbInput2.Dock = System.Windows.Forms.DockStyle.Fill;
//000138:             this.pbInput2.Location = new System.Drawing.Point(0, 0);
//000139:             this.pbInput2.Name = "pbInput2";
//000140:             this.pbInput2.Size = new System.Drawing.Size(285, 269);
//000141:             this.pbInput2.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
//000142:             this.pbInput2.TabIndex = 1;
//000143:             this.pbInput2.TabStop = false;
//000144:             this.toolTip1.SetToolTip(this.pbInput2, "Double-click to load new image");
//000145:             this.pbInput2.DoubleClick += new System.EventHandler(this.pbInput_DoubleClick);
//000146:             // 
//000147:             // pbOutput
//000148:             // 
//000149:             this.pbOutput.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
//000150:             this.pbOutput.Dock = System.Windows.Forms.DockStyle.Fill;
//000151:             this.pbOutput.Location = new System.Drawing.Point(0, 0);
//000152:             this.pbOutput.Name = "pbOutput";
//000153:             this.pbOutput.Size = new System.Drawing.Size(281, 269);
//000154:             this.pbOutput.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
//000155:             this.pbOutput.TabIndex = 1;
//000156:             this.pbOutput.TabStop = false;
//000157:             this.pbOutput.DoubleClick += new System.EventHandler(this.pbOutput_DoubleClick);
//000158:             // 
//000159:             // lblSpeedup
//000160:             // 
//000161:             this.lblSpeedup.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
//000162:             this.lblSpeedup.AutoSize = true;
//000163:             this.lblSpeedup.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000164:             this.lblSpeedup.ForeColor = System.Drawing.Color.Green;
//000165:             this.lblSpeedup.Location = new System.Drawing.Point(869, 17);
//000166:             this.lblSpeedup.Name = "lblSpeedup";
//000167:             this.lblSpeedup.Size = new System.Drawing.Size(0, 13);
//000168:             this.lblSpeedup.TabIndex = 4;
//000169:             // 
//000170:             // MainForm
//000171:             // 
//000172:             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
//000173:             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
//000174:             this.ClientSize = new System.Drawing.Size(884, 322);
//000175:             this.Controls.Add(this.lblSpeedup);
//000176:             this.Controls.Add(this.splitContainer1);
//000177:             this.Controls.Add(this.lblTime);
//000178:             this.Controls.Add(this.btnParallel);
//000179:             this.Controls.Add(this.btnSequential);
//000180:             this.Name = "MainForm";
//000181:             this.Text = "Blend Images";
//000182:             this.splitContainer1.Panel1.ResumeLayout(false);
//000183:             this.splitContainer1.Panel2.ResumeLayout(false);
//000184:             this.splitContainer1.ResumeLayout(false);
//000185:             ((System.ComponentModel.ISupportInitialize)(this.pbInput1)).EndInit();
//000186:             this.splitContainer2.Panel1.ResumeLayout(false);
//000187:             this.splitContainer2.Panel2.ResumeLayout(false);
//000188:             this.splitContainer2.ResumeLayout(false);
//000189:             ((System.ComponentModel.ISupportInitialize)(this.pbInput2)).EndInit();
//000190:             ((System.ComponentModel.ISupportInitialize)(this.pbOutput)).EndInit();
//000191:             this.ResumeLayout(false);
//000192:             this.PerformLayout();
//000193: 
//000194:         }
//000195: 
//000196:         #endregion
//000197: 
//000198:         private System.Windows.Forms.Button btnSequential;
//000199:         private System.Windows.Forms.Button btnParallel;
//000200:         private System.Windows.Forms.Label lblTime;
//000201:         private System.Windows.Forms.SplitContainer splitContainer1;
//000202:         private System.Windows.Forms.PictureBox pbInput1;
//000203:         private System.Windows.Forms.SplitContainer splitContainer2;
//000204:         private System.Windows.Forms.PictureBox pbInput2;
//000205:         private System.Windows.Forms.PictureBox pbOutput;
//000206:         private System.Windows.Forms.Label lblSpeedup;
//000207:         private System.Windows.Forms.ToolTip toolTip1;
//000208:     }
//000209: }
//000210: 
    IL_0011:  ldloc.0
    IL_0012:  brtrue.s   IL_0022

//000017:             {
    IL_0014:  nop
//000018:                 components.Dispose();
    IL_0015:  ldarg.0
    IL_0016:  ldfld      class [System]System.ComponentModel.IContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::components
    IL_001b:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
    IL_0020:  nop
//000019:             }
    IL_0021:  nop
//000020:             base.Dispose(disposing);
    IL_0022:  ldarg.0
    IL_0023:  ldarg.1
    IL_0024:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::Dispose(bool)
    IL_0029:  nop
//000021:         }
    IL_002a:  ret
  } // end of method MainForm::Dispose

  .method private hidebysig instance void 
          InitializeComponent() cil managed
  {
    // Code size       1955 (0x7a3)
    .maxstack  7
//000022: 
//000023:         #region Windows Form Designer generated code
//000024: 
//000025:         /// <summary>
//000026:         /// Required method for Designer support - do not modify
//000027:         /// the contents of this method with the code editor.
//000028:         /// </summary>
//000029:         private void InitializeComponent()
//000030:         {
    IL_0000:  nop
//000031:             this.components = new System.ComponentModel.Container();
    IL_0001:  ldarg.0
    IL_0002:  newobj     instance void [System]System.ComponentModel.Container::.ctor()
    IL_0007:  stfld      class [System]System.ComponentModel.IContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::components
//000032:             this.btnSequential = new System.Windows.Forms.Button();
    IL_000c:  ldarg.0
    IL_000d:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Button::.ctor()
    IL_0012:  stfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
//000033:             this.btnParallel = new System.Windows.Forms.Button();
    IL_0017:  ldarg.0
    IL_0018:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Button::.ctor()
    IL_001d:  stfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
//000034:             this.lblTime = new System.Windows.Forms.Label();
    IL_0022:  ldarg.0
    IL_0023:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0028:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
//000035:             this.splitContainer1 = new System.Windows.Forms.SplitContainer();
    IL_002d:  ldarg.0
    IL_002e:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::.ctor()
    IL_0033:  stfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
//000036:             this.pbInput1 = new System.Windows.Forms.PictureBox();
    IL_0038:  ldarg.0
    IL_0039:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::.ctor()
    IL_003e:  stfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
//000037:             this.splitContainer2 = new System.Windows.Forms.SplitContainer();
    IL_0043:  ldarg.0
    IL_0044:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::.ctor()
    IL_0049:  stfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
//000038:             this.pbInput2 = new System.Windows.Forms.PictureBox();
    IL_004e:  ldarg.0
    IL_004f:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::.ctor()
    IL_0054:  stfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
//000039:             this.pbOutput = new System.Windows.Forms.PictureBox();
    IL_0059:  ldarg.0
    IL_005a:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::.ctor()
    IL_005f:  stfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
//000040:             this.lblSpeedup = new System.Windows.Forms.Label();
    IL_0064:  ldarg.0
    IL_0065:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_006a:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
//000041:             this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
    IL_006f:  ldarg.0
    IL_0070:  ldarg.0
    IL_0071:  ldfld      class [System]System.ComponentModel.IContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::components
    IL_0076:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.ToolTip::.ctor(class [System]System.ComponentModel.IContainer)
    IL_007b:  stfld      class [System.Windows.Forms]System.Windows.Forms.ToolTip Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::toolTip1
//000042:             this.splitContainer1.Panel1.SuspendLayout();
    IL_0080:  ldarg.0
    IL_0081:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0086:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_008b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0090:  nop
//000043:             this.splitContainer1.Panel2.SuspendLayout();
    IL_0091:  ldarg.0
    IL_0092:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0097:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_009c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00a1:  nop
//000044:             this.splitContainer1.SuspendLayout();
    IL_00a2:  ldarg.0
    IL_00a3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_00a8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00ad:  nop
//000045:             ((System.ComponentModel.ISupportInitialize)(this.pbInput1)).BeginInit();
    IL_00ae:  ldarg.0
    IL_00af:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_00b4:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00b9:  nop
//000046:             this.splitContainer2.Panel1.SuspendLayout();
    IL_00ba:  ldarg.0
    IL_00bb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_00c0:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_00c5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00ca:  nop
//000047:             this.splitContainer2.Panel2.SuspendLayout();
    IL_00cb:  ldarg.0
    IL_00cc:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_00d1:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_00d6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00db:  nop
//000048:             this.splitContainer2.SuspendLayout();
    IL_00dc:  ldarg.0
    IL_00dd:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_00e2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00e7:  nop
//000049:             ((System.ComponentModel.ISupportInitialize)(this.pbInput2)).BeginInit();
    IL_00e8:  ldarg.0
    IL_00e9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_00ee:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00f3:  nop
//000050:             ((System.ComponentModel.ISupportInitialize)(this.pbOutput)).BeginInit();
    IL_00f4:  ldarg.0
    IL_00f5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_00fa:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00ff:  nop
//000051:             this.SuspendLayout();
    IL_0100:  ldarg.0
    IL_0101:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0106:  nop
//000052:             // 
//000053:             // btnSequential
//000054:             // 
//000055:             this.btnSequential.Enabled = false;
    IL_0107:  ldarg.0
    IL_0108:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_010d:  ldc.i4.0
    IL_010e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_0113:  nop
//000056:             this.btnSequential.Location = new System.Drawing.Point(12, 12);
    IL_0114:  ldarg.0
    IL_0115:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_011a:  ldc.i4.s   12
    IL_011c:  ldc.i4.s   12
    IL_011e:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0123:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0128:  nop
//000057:             this.btnSequential.Name = "btnSequential";
    IL_0129:  ldarg.0
    IL_012a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_012f:  ldstr      "btnSequential"
    IL_0134:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0139:  nop
//000058:             this.btnSequential.Size = new System.Drawing.Size(75, 23);
    IL_013a:  ldarg.0
    IL_013b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_0140:  ldc.i4.s   75
    IL_0142:  ldc.i4.s   23
    IL_0144:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0149:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_014e:  nop
//000059:             this.btnSequential.TabIndex = 0;
    IL_014f:  ldarg.0
    IL_0150:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_0155:  ldc.i4.0
    IL_0156:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_015b:  nop
//000060:             this.btnSequential.Text = "Sequential";
    IL_015c:  ldarg.0
    IL_015d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_0162:  ldstr      "Sequential"
    IL_0167:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_016c:  nop
//000061:             this.btnSequential.UseVisualStyleBackColor = true;
    IL_016d:  ldarg.0
    IL_016e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_0173:  ldc.i4.1
    IL_0174:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_0179:  nop
//000062:             this.btnSequential.Click += new System.EventHandler(this.btnBlendImages_Click);
    IL_017a:  ldarg.0
    IL_017b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_0180:  ldarg.0
    IL_0181:  ldftn      instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnBlendImages_Click(object,
                                                                                                                                     class [mscorlib]System.EventArgs)
    IL_0187:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_018c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_Click(class [mscorlib]System.EventHandler)
    IL_0191:  nop
//000063:             // 
//000064:             // btnParallel
//000065:             // 
//000066:             this.btnParallel.Enabled = false;
    IL_0192:  ldarg.0
    IL_0193:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_0198:  ldc.i4.0
    IL_0199:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_019e:  nop
//000067:             this.btnParallel.Location = new System.Drawing.Point(93, 12);
    IL_019f:  ldarg.0
    IL_01a0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_01a5:  ldc.i4.s   93
    IL_01a7:  ldc.i4.s   12
    IL_01a9:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_01ae:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_01b3:  nop
//000068:             this.btnParallel.Name = "btnParallel";
    IL_01b4:  ldarg.0
    IL_01b5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_01ba:  ldstr      "btnParallel"
    IL_01bf:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_01c4:  nop
//000069:             this.btnParallel.Size = new System.Drawing.Size(75, 23);
    IL_01c5:  ldarg.0
    IL_01c6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_01cb:  ldc.i4.s   75
    IL_01cd:  ldc.i4.s   23
    IL_01cf:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_01d4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_01d9:  nop
//000070:             this.btnParallel.TabIndex = 1;
    IL_01da:  ldarg.0
    IL_01db:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_01e0:  ldc.i4.1
    IL_01e1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_01e6:  nop
//000071:             this.btnParallel.Text = "Parallel";
    IL_01e7:  ldarg.0
    IL_01e8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_01ed:  ldstr      "Parallel"
    IL_01f2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_01f7:  nop
//000072:             this.btnParallel.UseVisualStyleBackColor = true;
    IL_01f8:  ldarg.0
    IL_01f9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_01fe:  ldc.i4.1
    IL_01ff:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_0204:  nop
//000073:             this.btnParallel.Click += new System.EventHandler(this.btnBlendImages_Click);
    IL_0205:  ldarg.0
    IL_0206:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_020b:  ldarg.0
    IL_020c:  ldftn      instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnBlendImages_Click(object,
                                                                                                                                     class [mscorlib]System.EventArgs)
    IL_0212:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_0217:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_Click(class [mscorlib]System.EventHandler)
    IL_021c:  nop
//000074:             // 
//000075:             // lblTime
//000076:             // 
//000077:             this.lblTime.AutoSize = true;
    IL_021d:  ldarg.0
    IL_021e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
    IL_0223:  ldc.i4.1
    IL_0224:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_0229:  nop
//000078:             this.lblTime.Location = new System.Drawing.Point(174, 17);
    IL_022a:  ldarg.0
    IL_022b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
    IL_0230:  ldc.i4     0xae
    IL_0235:  ldc.i4.s   17
    IL_0237:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_023c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0241:  nop
//000079:             this.lblTime.Name = "lblTime";
    IL_0242:  ldarg.0
    IL_0243:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
    IL_0248:  ldstr      "lblTime"
    IL_024d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0252:  nop
//000080:             this.lblTime.Size = new System.Drawing.Size(0, 13);
    IL_0253:  ldarg.0
    IL_0254:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
    IL_0259:  ldc.i4.0
    IL_025a:  ldc.i4.s   13
    IL_025c:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0261:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0266:  nop
//000081:             this.lblTime.TabIndex = 2;
    IL_0267:  ldarg.0
    IL_0268:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
    IL_026d:  ldc.i4.2
    IL_026e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0273:  nop
//000082:             // 
//000083:             // splitContainer1
//000084:             // 
//000085:             this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
    IL_0274:  ldarg.0
    IL_0275:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_027a:  ldc.i4.s   15
    IL_027c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0281:  nop
//000086:                         | System.Windows.Forms.AnchorStyles.Left)
//000087:                         | System.Windows.Forms.AnchorStyles.Right)));
//000088:             this.splitContainer1.Location = new System.Drawing.Point(12, 41);
    IL_0282:  ldarg.0
    IL_0283:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0288:  ldc.i4.s   12
    IL_028a:  ldc.i4.s   41
    IL_028c:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0291:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0296:  nop
//000089:             this.splitContainer1.Name = "splitContainer1";
    IL_0297:  ldarg.0
    IL_0298:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_029d:  ldstr      "splitContainer1"
    IL_02a2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_02a7:  nop
//000090:             // 
//000091:             // splitContainer1.Panel1
//000092:             // 
//000093:             this.splitContainer1.Panel1.Controls.Add(this.pbInput1);
    IL_02a8:  ldarg.0
    IL_02a9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_02ae:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_02b3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_02b8:  ldarg.0
    IL_02b9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_02be:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_02c3:  nop
//000094:             // 
//000095:             // splitContainer1.Panel2
//000096:             // 
//000097:             this.splitContainer1.Panel2.Controls.Add(this.splitContainer2);
    IL_02c4:  ldarg.0
    IL_02c5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_02ca:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_02cf:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_02d4:  ldarg.0
    IL_02d5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_02da:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_02df:  nop
//000098:             this.splitContainer1.Size = new System.Drawing.Size(860, 269);
    IL_02e0:  ldarg.0
    IL_02e1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_02e6:  ldc.i4     0x35c
    IL_02eb:  ldc.i4     0x10d
    IL_02f0:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_02f5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_02fa:  nop
//000099:             this.splitContainer1.SplitterDistance = 286;
    IL_02fb:  ldarg.0
    IL_02fc:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0301:  ldc.i4     0x11e
    IL_0306:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_SplitterDistance(int32)
    IL_030b:  nop
//000100:             this.splitContainer1.TabIndex = 3;
    IL_030c:  ldarg.0
    IL_030d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0312:  ldc.i4.3
    IL_0313:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0318:  nop
//000101:             // 
//000102:             // pbInput1
//000103:             // 
//000104:             this.pbInput1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
    IL_0319:  ldarg.0
    IL_031a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_031f:  ldc.i4.1
    IL_0320:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_BorderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.BorderStyle)
    IL_0325:  nop
//000105:             this.pbInput1.Cursor = System.Windows.Forms.Cursors.Hand;
    IL_0326:  ldarg.0
    IL_0327:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_032c:  call       class [System.Windows.Forms]System.Windows.Forms.Cursor [System.Windows.Forms]System.Windows.Forms.Cursors::get_Hand()
    IL_0331:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Cursor(class [System.Windows.Forms]System.Windows.Forms.Cursor)
    IL_0336:  nop
//000106:             this.pbInput1.Dock = System.Windows.Forms.DockStyle.Fill;
    IL_0337:  ldarg.0
    IL_0338:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_033d:  ldc.i4.5
    IL_033e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_0343:  nop
//000107:             this.pbInput1.Location = new System.Drawing.Point(0, 0);
    IL_0344:  ldarg.0
    IL_0345:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_034a:  ldc.i4.0
    IL_034b:  ldc.i4.0
    IL_034c:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0351:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0356:  nop
//000108:             this.pbInput1.Name = "pbInput1";
    IL_0357:  ldarg.0
    IL_0358:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_035d:  ldstr      "pbInput1"
    IL_0362:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0367:  nop
//000109:             this.pbInput1.Size = new System.Drawing.Size(286, 269);
    IL_0368:  ldarg.0
    IL_0369:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_036e:  ldc.i4     0x11e
    IL_0373:  ldc.i4     0x10d
    IL_0378:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_037d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0382:  nop
//000110:             this.pbInput1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
    IL_0383:  ldarg.0
    IL_0384:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_0389:  ldc.i4.4
    IL_038a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_SizeMode(valuetype [System.Windows.Forms]System.Windows.Forms.PictureBoxSizeMode)
    IL_038f:  nop
//000111:             this.pbInput1.TabIndex = 0;
    IL_0390:  ldarg.0
    IL_0391:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_0396:  ldc.i4.0
    IL_0397:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabIndex(int32)
    IL_039c:  nop
//000112:             this.pbInput1.TabStop = false;
    IL_039d:  ldarg.0
    IL_039e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_03a3:  ldc.i4.0
    IL_03a4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabStop(bool)
    IL_03a9:  nop
//000113:             this.toolTip1.SetToolTip(this.pbInput1, "Double-click to load new image");
    IL_03aa:  ldarg.0
    IL_03ab:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ToolTip Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::toolTip1
    IL_03b0:  ldarg.0
    IL_03b1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_03b6:  ldstr      "Double-click to load new image"
    IL_03bb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ToolTip::SetToolTip(class [System.Windows.Forms]System.Windows.Forms.Control,
                                                                                                      string)
    IL_03c0:  nop
//000114:             this.pbInput1.DoubleClick += new System.EventHandler(this.pbInput_DoubleClick);
    IL_03c1:  ldarg.0
    IL_03c2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_03c7:  ldarg.0
    IL_03c8:  ldftn      instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput_DoubleClick(object,
                                                                                                                                    class [mscorlib]System.EventArgs)
    IL_03ce:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_03d3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_DoubleClick(class [mscorlib]System.EventHandler)
    IL_03d8:  nop
//000115:             // 
//000116:             // splitContainer2
//000117:             // 
//000118:             this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
    IL_03d9:  ldarg.0
    IL_03da:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_03df:  ldc.i4.5
    IL_03e0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_03e5:  nop
//000119:             this.splitContainer2.Location = new System.Drawing.Point(0, 0);
    IL_03e6:  ldarg.0
    IL_03e7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_03ec:  ldc.i4.0
    IL_03ed:  ldc.i4.0
    IL_03ee:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_03f3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_03f8:  nop
//000120:             this.splitContainer2.Name = "splitContainer2";
    IL_03f9:  ldarg.0
    IL_03fa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_03ff:  ldstr      "splitContainer2"
    IL_0404:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0409:  nop
//000121:             // 
//000122:             // splitContainer2.Panel1
//000123:             // 
//000124:             this.splitContainer2.Panel1.Controls.Add(this.pbInput2);
    IL_040a:  ldarg.0
    IL_040b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_0410:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0415:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_041a:  ldarg.0
    IL_041b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_0420:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0425:  nop
//000125:             // 
//000126:             // splitContainer2.Panel2
//000127:             // 
//000128:             this.splitContainer2.Panel2.Controls.Add(this.pbOutput);
    IL_0426:  ldarg.0
    IL_0427:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_042c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0431:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0436:  ldarg.0
    IL_0437:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_043c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0441:  nop
//000129:             this.splitContainer2.Size = new System.Drawing.Size(570, 269);
    IL_0442:  ldarg.0
    IL_0443:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_0448:  ldc.i4     0x23a
    IL_044d:  ldc.i4     0x10d
    IL_0452:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0457:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_045c:  nop
//000130:             this.splitContainer2.SplitterDistance = 285;
    IL_045d:  ldarg.0
    IL_045e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_0463:  ldc.i4     0x11d
    IL_0468:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.SplitContainer::set_SplitterDistance(int32)
    IL_046d:  nop
//000131:             this.splitContainer2.TabIndex = 0;
    IL_046e:  ldarg.0
    IL_046f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_0474:  ldc.i4.0
    IL_0475:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_047a:  nop
//000132:             // 
//000133:             // pbInput2
//000134:             // 
//000135:             this.pbInput2.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
    IL_047b:  ldarg.0
    IL_047c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_0481:  ldc.i4.1
    IL_0482:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_BorderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.BorderStyle)
    IL_0487:  nop
//000136:             this.pbInput2.Cursor = System.Windows.Forms.Cursors.Hand;
    IL_0488:  ldarg.0
    IL_0489:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_048e:  call       class [System.Windows.Forms]System.Windows.Forms.Cursor [System.Windows.Forms]System.Windows.Forms.Cursors::get_Hand()
    IL_0493:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Cursor(class [System.Windows.Forms]System.Windows.Forms.Cursor)
    IL_0498:  nop
//000137:             this.pbInput2.Dock = System.Windows.Forms.DockStyle.Fill;
    IL_0499:  ldarg.0
    IL_049a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_049f:  ldc.i4.5
    IL_04a0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_04a5:  nop
//000138:             this.pbInput2.Location = new System.Drawing.Point(0, 0);
    IL_04a6:  ldarg.0
    IL_04a7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_04ac:  ldc.i4.0
    IL_04ad:  ldc.i4.0
    IL_04ae:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_04b3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_04b8:  nop
//000139:             this.pbInput2.Name = "pbInput2";
    IL_04b9:  ldarg.0
    IL_04ba:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_04bf:  ldstr      "pbInput2"
    IL_04c4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_04c9:  nop
//000140:             this.pbInput2.Size = new System.Drawing.Size(285, 269);
    IL_04ca:  ldarg.0
    IL_04cb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_04d0:  ldc.i4     0x11d
    IL_04d5:  ldc.i4     0x10d
    IL_04da:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_04df:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_04e4:  nop
//000141:             this.pbInput2.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
    IL_04e5:  ldarg.0
    IL_04e6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_04eb:  ldc.i4.4
    IL_04ec:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_SizeMode(valuetype [System.Windows.Forms]System.Windows.Forms.PictureBoxSizeMode)
    IL_04f1:  nop
//000142:             this.pbInput2.TabIndex = 1;
    IL_04f2:  ldarg.0
    IL_04f3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_04f8:  ldc.i4.1
    IL_04f9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabIndex(int32)
    IL_04fe:  nop
//000143:             this.pbInput2.TabStop = false;
    IL_04ff:  ldarg.0
    IL_0500:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_0505:  ldc.i4.0
    IL_0506:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabStop(bool)
    IL_050b:  nop
//000144:             this.toolTip1.SetToolTip(this.pbInput2, "Double-click to load new image");
    IL_050c:  ldarg.0
    IL_050d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ToolTip Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::toolTip1
    IL_0512:  ldarg.0
    IL_0513:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_0518:  ldstr      "Double-click to load new image"
    IL_051d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ToolTip::SetToolTip(class [System.Windows.Forms]System.Windows.Forms.Control,
                                                                                                      string)
    IL_0522:  nop
//000145:             this.pbInput2.DoubleClick += new System.EventHandler(this.pbInput_DoubleClick);
    IL_0523:  ldarg.0
    IL_0524:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_0529:  ldarg.0
    IL_052a:  ldftn      instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput_DoubleClick(object,
                                                                                                                                    class [mscorlib]System.EventArgs)
    IL_0530:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_0535:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_DoubleClick(class [mscorlib]System.EventHandler)
    IL_053a:  nop
//000146:             // 
//000147:             // pbOutput
//000148:             // 
//000149:             this.pbOutput.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
    IL_053b:  ldarg.0
    IL_053c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_0541:  ldc.i4.1
    IL_0542:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_BorderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.BorderStyle)
    IL_0547:  nop
//000150:             this.pbOutput.Dock = System.Windows.Forms.DockStyle.Fill;
    IL_0548:  ldarg.0
    IL_0549:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_054e:  ldc.i4.5
    IL_054f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Dock(valuetype [System.Windows.Forms]System.Windows.Forms.DockStyle)
    IL_0554:  nop
//000151:             this.pbOutput.Location = new System.Drawing.Point(0, 0);
    IL_0555:  ldarg.0
    IL_0556:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_055b:  ldc.i4.0
    IL_055c:  ldc.i4.0
    IL_055d:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0562:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0567:  nop
//000152:             this.pbOutput.Name = "pbOutput";
    IL_0568:  ldarg.0
    IL_0569:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_056e:  ldstr      "pbOutput"
    IL_0573:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0578:  nop
//000153:             this.pbOutput.Size = new System.Drawing.Size(281, 269);
    IL_0579:  ldarg.0
    IL_057a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_057f:  ldc.i4     0x119
    IL_0584:  ldc.i4     0x10d
    IL_0589:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_058e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0593:  nop
//000154:             this.pbOutput.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
    IL_0594:  ldarg.0
    IL_0595:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_059a:  ldc.i4.4
    IL_059b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_SizeMode(valuetype [System.Windows.Forms]System.Windows.Forms.PictureBoxSizeMode)
    IL_05a0:  nop
//000155:             this.pbOutput.TabIndex = 1;
    IL_05a1:  ldarg.0
    IL_05a2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_05a7:  ldc.i4.1
    IL_05a8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabIndex(int32)
    IL_05ad:  nop
//000156:             this.pbOutput.TabStop = false;
    IL_05ae:  ldarg.0
    IL_05af:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_05b4:  ldc.i4.0
    IL_05b5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabStop(bool)
    IL_05ba:  nop
//000157:             this.pbOutput.DoubleClick += new System.EventHandler(this.pbOutput_DoubleClick);
    IL_05bb:  ldarg.0
    IL_05bc:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_05c1:  ldarg.0
    IL_05c2:  ldftn      instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput_DoubleClick(object,
                                                                                                                                     class [mscorlib]System.EventArgs)
    IL_05c8:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_05cd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_DoubleClick(class [mscorlib]System.EventHandler)
    IL_05d2:  nop
//000158:             // 
//000159:             // lblSpeedup
//000160:             // 
//000161:             this.lblSpeedup.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
    IL_05d3:  ldarg.0
    IL_05d4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_05d9:  ldc.i4.s   9
    IL_05db:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_05e0:  nop
//000162:             this.lblSpeedup.AutoSize = true;
    IL_05e1:  ldarg.0
    IL_05e2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_05e7:  ldc.i4.1
    IL_05e8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_AutoSize(bool)
    IL_05ed:  nop
//000163:             this.lblSpeedup.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_05ee:  ldarg.0
    IL_05ef:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_05f4:  ldstr      "Microsoft Sans Serif"
    IL_05f9:  ldc.r4     8.25
    IL_05fe:  ldc.i4.1
    IL_05ff:  ldc.i4.3
    IL_0600:  ldc.i4.0
    IL_0601:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_0606:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_060b:  nop
//000164:             this.lblSpeedup.ForeColor = System.Drawing.Color.Green;
    IL_060c:  ldarg.0
    IL_060d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_0612:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_Green()
    IL_0617:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_ForeColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_061c:  nop
//000165:             this.lblSpeedup.Location = new System.Drawing.Point(869, 17);
    IL_061d:  ldarg.0
    IL_061e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_0623:  ldc.i4     0x365
    IL_0628:  ldc.i4.s   17
    IL_062a:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_062f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0634:  nop
//000166:             this.lblSpeedup.Name = "lblSpeedup";
    IL_0635:  ldarg.0
    IL_0636:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_063b:  ldstr      "lblSpeedup"
    IL_0640:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0645:  nop
//000167:             this.lblSpeedup.Size = new System.Drawing.Size(0, 13);
    IL_0646:  ldarg.0
    IL_0647:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_064c:  ldc.i4.0
    IL_064d:  ldc.i4.s   13
    IL_064f:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0654:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0659:  nop
//000168:             this.lblSpeedup.TabIndex = 4;
    IL_065a:  ldarg.0
    IL_065b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_0660:  ldc.i4.4
    IL_0661:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0666:  nop
//000169:             // 
//000170:             // MainForm
//000171:             // 
//000172:             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
    IL_0667:  ldarg.0
    IL_0668:  ldc.r4     6.
    IL_066d:  ldc.r4     13.
    IL_0672:  newobj     instance void [System.Drawing]System.Drawing.SizeF::.ctor(float32,
                                                                                   float32)
    IL_0677:  call       instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleDimensions(valuetype [System.Drawing]System.Drawing.SizeF)
    IL_067c:  nop
//000173:             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    IL_067d:  ldarg.0
    IL_067e:  ldc.i4.1
    IL_067f:  call       instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleMode(valuetype [System.Windows.Forms]System.Windows.Forms.AutoScaleMode)
    IL_0684:  nop
//000174:             this.ClientSize = new System.Drawing.Size(884, 322);
    IL_0685:  ldarg.0
    IL_0686:  ldc.i4     0x374
    IL_068b:  ldc.i4     0x142
    IL_0690:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0695:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::set_ClientSize(valuetype [System.Drawing]System.Drawing.Size)
    IL_069a:  nop
//000175:             this.Controls.Add(this.lblSpeedup);
    IL_069b:  ldarg.0
    IL_069c:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_06a1:  ldarg.0
    IL_06a2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_06a7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_06ac:  nop
//000176:             this.Controls.Add(this.splitContainer1);
    IL_06ad:  ldarg.0
    IL_06ae:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_06b3:  ldarg.0
    IL_06b4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_06b9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_06be:  nop
//000177:             this.Controls.Add(this.lblTime);
    IL_06bf:  ldarg.0
    IL_06c0:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_06c5:  ldarg.0
    IL_06c6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
    IL_06cb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_06d0:  nop
//000178:             this.Controls.Add(this.btnParallel);
    IL_06d1:  ldarg.0
    IL_06d2:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_06d7:  ldarg.0
    IL_06d8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_06dd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_06e2:  nop
//000179:             this.Controls.Add(this.btnSequential);
    IL_06e3:  ldarg.0
    IL_06e4:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_06e9:  ldarg.0
    IL_06ea:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_06ef:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_06f4:  nop
//000180:             this.Name = "MainForm";
    IL_06f5:  ldarg.0
    IL_06f6:  ldstr      "MainForm"
    IL_06fb:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0700:  nop
//000181:             this.Text = "Blend Images";
    IL_0701:  ldarg.0
    IL_0702:  ldstr      "Blend Images"
    IL_0707:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_070c:  nop
//000182:             this.splitContainer1.Panel1.ResumeLayout(false);
    IL_070d:  ldarg.0
    IL_070e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0713:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0718:  ldc.i4.0
    IL_0719:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_071e:  nop
//000183:             this.splitContainer1.Panel2.ResumeLayout(false);
    IL_071f:  ldarg.0
    IL_0720:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0725:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_072a:  ldc.i4.0
    IL_072b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0730:  nop
//000184:             this.splitContainer1.ResumeLayout(false);
    IL_0731:  ldarg.0
    IL_0732:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0737:  ldc.i4.0
    IL_0738:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_073d:  nop
//000185:             ((System.ComponentModel.ISupportInitialize)(this.pbInput1)).EndInit();
    IL_073e:  ldarg.0
    IL_073f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_0744:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0749:  nop
//000186:             this.splitContainer2.Panel1.ResumeLayout(false);
    IL_074a:  ldarg.0
    IL_074b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_0750:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel1()
    IL_0755:  ldc.i4.0
    IL_0756:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_075b:  nop
//000187:             this.splitContainer2.Panel2.ResumeLayout(false);
    IL_075c:  ldarg.0
    IL_075d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_0762:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.SplitterPanel [System.Windows.Forms]System.Windows.Forms.SplitContainer::get_Panel2()
    IL_0767:  ldc.i4.0
    IL_0768:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_076d:  nop
//000188:             this.splitContainer2.ResumeLayout(false);
    IL_076e:  ldarg.0
    IL_076f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer2
    IL_0774:  ldc.i4.0
    IL_0775:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_077a:  nop
//000189:             ((System.ComponentModel.ISupportInitialize)(this.pbInput2)).EndInit();
    IL_077b:  ldarg.0
    IL_077c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_0781:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0786:  nop
//000190:             ((System.ComponentModel.ISupportInitialize)(this.pbOutput)).EndInit();
    IL_0787:  ldarg.0
    IL_0788:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_078d:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0792:  nop
//000191:             this.ResumeLayout(false);
    IL_0793:  ldarg.0
    IL_0794:  ldc.i4.0
    IL_0795:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_079a:  nop
//000192:             this.PerformLayout();
    IL_079b:  ldarg.0
    IL_079c:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_07a1:  nop
//000193: 
//000194:         }
    IL_07a2:  ret
  } // end of method MainForm::InitializeComponent

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       24 (0x18)
    .maxstack  8
//000008:         private System.ComponentModel.IContainer components = null;
    IL_0000:  ldarg.0
    IL_0001:  ldnull
    IL_0002:  stfld      class [System]System.ComponentModel.IContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::components
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BlendImages\BlendImages_CSharp\MainForm.cs' 
//000024:         public MainForm() { InitializeComponent(); }
    IL_0007:  ldarg.0
    IL_0008:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::.ctor()
    IL_000d:  nop
    IL_000e:  nop
    IL_000f:  ldarg.0
    IL_0010:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::InitializeComponent()
    IL_0015:  nop
    IL_0016:  nop
    IL_0017:  ret
  } // end of method MainForm::.ctor

  .method private hidebysig instance void 
          pbInput_DoubleClick(object sender,
                              class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       217 (0xd9)
    .maxstack  4
    .locals init ([0] class [System.Windows.Forms]System.Windows.Forms.PictureBox pb,
             [1] class [System.Windows.Forms]System.Windows.Forms.OpenFileDialog ofd,
             [2] class [System.Drawing]System.Drawing.Image newImage,
             [3] class [System.Drawing]System.Drawing.Image oldImage,
             [4] bool CS$4$0000,
             [5] valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> CS$0$0001,
             [6] bool CS$0$0002)
//000025: 
//000026:         private void pbInput_DoubleClick(object sender, EventArgs e)
//000027:         {
    IL_0000:  nop
//000028:             // Get the PictureBox that caused this event
//000029:             PictureBox pb = sender as PictureBox;
    IL_0001:  ldarg.1
    IL_0002:  isinst     [System.Windows.Forms]System.Windows.Forms.PictureBox
    IL_0007:  stloc.0
//000030:             if (pb == null) return;
    IL_0008:  ldloc.0
    IL_0009:  ldnull
    IL_000a:  ceq
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.s    CS$4$0000
//000031: 
//000032:             // Open a dialog to let the user select an image
//000033:             using (var ofd = new OpenFileDialog())
//000034:             {
//000035:                 if (ofd.ShowDialog() == DialogResult.OK)
//000036:                 {
//000037:                     // Store the new image into the PictureBox
//000038:                     Image newImage = new Bitmap(ofd.FileName);
//000039:                     Image oldImage = pb.Image;
//000040:                     pb.Image = newImage;
//000041:                     if (oldImage != null) oldImage.Dispose();
//000042:                 }
//000043:             }
//000044: 
//000045:             // Make sure the btns are enabled if they should be
//000046:             _lastSequentialTime = _lastParallelTime = null;
//000047:             btnSequential.Enabled = btnParallel.Enabled = (pbInput1.Image != null && pbInput2.Image != null);
//000048:         }
//000049: 
//000050:         private void pbOutput_DoubleClick(object sender, EventArgs e)
//000051:         {
//000052:             if (pbOutput.Image != null)
//000053:             {
//000054:                 // Open a dialog to let the user select an output path
//000055:                 using (var sfd = new SaveFileDialog())
//000056:                 {
//000057:                     sfd.Filter = "Bitmap Images|*.bmp";
//000058:                     if (sfd.ShowDialog(this) == DialogResult.OK)
//000059:                     {
//000060:                         // Save the image as a bitmap to the selected location
//000061:                         pbOutput.Image.Save(sfd.FileName, ImageFormat.Bmp);
//000062:                     }
//000063:                 }
//000064:             }
//000065:         }
//000066: 
//000067:         private void btnBlendImages_Click(object sender, EventArgs e)
//000068:         {
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
//000076:             if (bmp1 == null || bmp2 == null) return;
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_0011:  ldloc.s    CS$4$0000
    IL_0013:  brtrue.s   IL_001a

//000030:             if (pb == null) return;
    IL_0015:  br         IL_00d8

//000031: 
//000032:             // Open a dialog to let the user select an image
//000033:             using (var ofd = new OpenFileDialog())
    IL_001a:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.OpenFileDialog::.ctor()
    IL_001f:  stloc.1
//000034:             {
    .try
    {
      IL_0020:  nop
//000035:                 if (ofd.ShowDialog() == DialogResult.OK)
      IL_0021:  ldloc.1
      IL_0022:  callvirt   instance valuetype [System.Windows.Forms]System.Windows.Forms.DialogResult [System.Windows.Forms]System.Windows.Forms.CommonDialog::ShowDialog()
      IL_0027:  ldc.i4.1
      IL_0028:  ceq
      IL_002a:  ldc.i4.0
      IL_002b:  ceq
      IL_002d:  stloc.s    CS$4$0000
//000036:                 {
//000037:                     // Store the new image into the PictureBox
//000038:                     Image newImage = new Bitmap(ofd.FileName);
//000039:                     Image oldImage = pb.Image;
//000040:                     pb.Image = newImage;
//000041:                     if (oldImage != null) oldImage.Dispose();
//000042:                 }
//000043:             }
//000044: 
//000045:             // Make sure the btns are enabled if they should be
//000046:             _lastSequentialTime = _lastParallelTime = null;
//000047:             btnSequential.Enabled = btnParallel.Enabled = (pbInput1.Image != null && pbInput2.Image != null);
//000048:         }
//000049: 
//000050:         private void pbOutput_DoubleClick(object sender, EventArgs e)
//000051:         {
//000052:             if (pbOutput.Image != null)
//000053:             {
//000054:                 // Open a dialog to let the user select an output path
//000055:                 using (var sfd = new SaveFileDialog())
//000056:                 {
//000057:                     sfd.Filter = "Bitmap Images|*.bmp";
//000058:                     if (sfd.ShowDialog(this) == DialogResult.OK)
//000059:                     {
//000060:                         // Save the image as a bitmap to the selected location
//000061:                         pbOutput.Image.Save(sfd.FileName, ImageFormat.Bmp);
//000062:                     }
//000063:                 }
//000064:             }
//000065:         }
//000066: 
//000067:         private void btnBlendImages_Click(object sender, EventArgs e)
//000068:         {
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
//000076:             if (bmp1 == null || bmp2 == null) return;
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_002f:  ldloc.s    CS$4$0000
      IL_0031:  brtrue.s   IL_0061

//000036:                 {
      IL_0033:  nop
//000037:                     // Store the new image into the PictureBox
//000038:                     Image newImage = new Bitmap(ofd.FileName);
      IL_0034:  ldloc.1
      IL_0035:  callvirt   instance string [System.Windows.Forms]System.Windows.Forms.FileDialog::get_FileName()
      IL_003a:  newobj     instance void [System.Drawing]System.Drawing.Bitmap::.ctor(string)
      IL_003f:  stloc.2
//000039:                     Image oldImage = pb.Image;
      IL_0040:  ldloc.0
      IL_0041:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
      IL_0046:  stloc.3
//000040:                     pb.Image = newImage;
      IL_0047:  ldloc.0
      IL_0048:  ldloc.2
      IL_0049:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
      IL_004e:  nop
//000041:                     if (oldImage != null) oldImage.Dispose();
      IL_004f:  ldloc.3
      IL_0050:  ldnull
      IL_0051:  ceq
      IL_0053:  stloc.s    CS$4$0000
//000042:                 }
//000043:             }
//000044: 
//000045:             // Make sure the btns are enabled if they should be
//000046:             _lastSequentialTime = _lastParallelTime = null;
//000047:             btnSequential.Enabled = btnParallel.Enabled = (pbInput1.Image != null && pbInput2.Image != null);
//000048:         }
//000049: 
//000050:         private void pbOutput_DoubleClick(object sender, EventArgs e)
//000051:         {
//000052:             if (pbOutput.Image != null)
//000053:             {
//000054:                 // Open a dialog to let the user select an output path
//000055:                 using (var sfd = new SaveFileDialog())
//000056:                 {
//000057:                     sfd.Filter = "Bitmap Images|*.bmp";
//000058:                     if (sfd.ShowDialog(this) == DialogResult.OK)
//000059:                     {
//000060:                         // Save the image as a bitmap to the selected location
//000061:                         pbOutput.Image.Save(sfd.FileName, ImageFormat.Bmp);
//000062:                     }
//000063:                 }
//000064:             }
//000065:         }
//000066: 
//000067:         private void btnBlendImages_Click(object sender, EventArgs e)
//000068:         {
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
//000076:             if (bmp1 == null || bmp2 == null) return;
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_0055:  ldloc.s    CS$4$0000
      IL_0057:  brtrue.s   IL_0060

//000041:                     if (oldImage != null) oldImage.Dispose();
      IL_0059:  ldloc.3
      IL_005a:  callvirt   instance void [System.Drawing]System.Drawing.Image::Dispose()
      IL_005f:  nop
//000042:                 }
      IL_0060:  nop
//000043:             }
      IL_0061:  nop
//000044: 
//000045:             // Make sure the btns are enabled if they should be
//000046:             _lastSequentialTime = _lastParallelTime = null;
//000047:             btnSequential.Enabled = btnParallel.Enabled = (pbInput1.Image != null && pbInput2.Image != null);
//000048:         }
//000049: 
//000050:         private void pbOutput_DoubleClick(object sender, EventArgs e)
//000051:         {
//000052:             if (pbOutput.Image != null)
//000053:             {
//000054:                 // Open a dialog to let the user select an output path
//000055:                 using (var sfd = new SaveFileDialog())
//000056:                 {
//000057:                     sfd.Filter = "Bitmap Images|*.bmp";
//000058:                     if (sfd.ShowDialog(this) == DialogResult.OK)
//000059:                     {
//000060:                         // Save the image as a bitmap to the selected location
//000061:                         pbOutput.Image.Save(sfd.FileName, ImageFormat.Bmp);
//000062:                     }
//000063:                 }
//000064:             }
//000065:         }
//000066: 
//000067:         private void btnBlendImages_Click(object sender, EventArgs e)
//000068:         {
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
//000076:             if (bmp1 == null || bmp2 == null) return;
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_0062:  leave.s    IL_0076

    }  // end .try
    finally
    {
      IL_0064:  ldloc.1
      IL_0065:  ldnull
      IL_0066:  ceq
      IL_0068:  stloc.s    CS$4$0000
      IL_006a:  ldloc.s    CS$4$0000
      IL_006c:  brtrue.s   IL_0075

      IL_006e:  ldloc.1
      IL_006f:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0074:  nop
      IL_0075:  endfinally
    }  // end handler
    IL_0076:  nop
//000046:             _lastSequentialTime = _lastParallelTime = null;
    IL_0077:  ldarg.0
    IL_0078:  ldarg.0
    IL_0079:  ldarg.0
    IL_007a:  ldloca.s   CS$0$0001
    IL_007c:  initobj    valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan>
    IL_0082:  ldloc.s    CS$0$0001
    IL_0084:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastParallelTime
    IL_0089:  ldloc.s    CS$0$0001
    IL_008b:  dup
    IL_008c:  stloc.s    CS$0$0001
    IL_008e:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastParallelTime
    IL_0093:  ldloc.s    CS$0$0001
    IL_0095:  stfld      valuetype [mscorlib]System.Nullable`1<valuetype [mscorlib]System.TimeSpan> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::_lastSequentialTime
//000047:             btnSequential.Enabled = btnParallel.Enabled = (pbInput1.Image != null && pbInput2.Image != null);
    IL_009a:  ldarg.0
    IL_009b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_00a0:  ldarg.0
    IL_00a1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_00a6:  ldarg.0
    IL_00a7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_00ac:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
    IL_00b1:  brfalse.s  IL_00c6

    IL_00b3:  ldarg.0
    IL_00b4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_00b9:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
    IL_00be:  ldnull
    IL_00bf:  ceq
    IL_00c1:  ldc.i4.0
    IL_00c2:  ceq
    IL_00c4:  br.s       IL_00c7

    IL_00c6:  ldc.i4.0
    IL_00c7:  dup
    IL_00c8:  stloc.s    CS$0$0002
    IL_00ca:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_00cf:  nop
    IL_00d0:  ldloc.s    CS$0$0002
    IL_00d2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_00d7:  nop
//000048:         }
    IL_00d8:  ret
  } // end of method MainForm::pbInput_DoubleClick

  .method private hidebysig instance void 
          pbOutput_DoubleClick(object sender,
                               class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       108 (0x6c)
    .maxstack  3
    .locals init ([0] class [System.Windows.Forms]System.Windows.Forms.SaveFileDialog sfd,
             [1] bool CS$4$0000)
//000049: 
//000050:         private void pbOutput_DoubleClick(object sender, EventArgs e)
//000051:         {
    IL_0000:  nop
//000052:             if (pbOutput.Image != null)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_0007:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
    IL_000c:  ldnull
    IL_000d:  ceq
    IL_000f:  stloc.1
//000053:             {
//000054:                 // Open a dialog to let the user select an output path
//000055:                 using (var sfd = new SaveFileDialog())
//000056:                 {
//000057:                     sfd.Filter = "Bitmap Images|*.bmp";
//000058:                     if (sfd.ShowDialog(this) == DialogResult.OK)
//000059:                     {
//000060:                         // Save the image as a bitmap to the selected location
//000061:                         pbOutput.Image.Save(sfd.FileName, ImageFormat.Bmp);
//000062:                     }
//000063:                 }
//000064:             }
//000065:         }
//000066: 
//000067:         private void btnBlendImages_Click(object sender, EventArgs e)
//000068:         {
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
//000076:             if (bmp1 == null || bmp2 == null) return;
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_0010:  ldloc.1
    IL_0011:  brtrue.s   IL_006b

//000053:             {
    IL_0013:  nop
//000054:                 // Open a dialog to let the user select an output path
//000055:                 using (var sfd = new SaveFileDialog())
    IL_0014:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.SaveFileDialog::.ctor()
    IL_0019:  stloc.0
//000056:                 {
    .try
    {
      IL_001a:  nop
//000057:                     sfd.Filter = "Bitmap Images|*.bmp";
      IL_001b:  ldloc.0
      IL_001c:  ldstr      "Bitmap Images|*.bmp"
      IL_0021:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.FileDialog::set_Filter(string)
      IL_0026:  nop
//000058:                     if (sfd.ShowDialog(this) == DialogResult.OK)
      IL_0027:  ldloc.0
      IL_0028:  ldarg.0
      IL_0029:  callvirt   instance valuetype [System.Windows.Forms]System.Windows.Forms.DialogResult [System.Windows.Forms]System.Windows.Forms.CommonDialog::ShowDialog(class [System.Windows.Forms]System.Windows.Forms.IWin32Window)
      IL_002e:  ldc.i4.1
      IL_002f:  ceq
      IL_0031:  ldc.i4.0
      IL_0032:  ceq
      IL_0034:  stloc.1
//000059:                     {
//000060:                         // Save the image as a bitmap to the selected location
//000061:                         pbOutput.Image.Save(sfd.FileName, ImageFormat.Bmp);
//000062:                     }
//000063:                 }
//000064:             }
//000065:         }
//000066: 
//000067:         private void btnBlendImages_Click(object sender, EventArgs e)
//000068:         {
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
//000076:             if (bmp1 == null || bmp2 == null) return;
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_0035:  ldloc.1
      IL_0036:  brtrue.s   IL_0056

//000059:                     {
      IL_0038:  nop
//000060:                         // Save the image as a bitmap to the selected location
//000061:                         pbOutput.Image.Save(sfd.FileName, ImageFormat.Bmp);
      IL_0039:  ldarg.0
      IL_003a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
      IL_003f:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
      IL_0044:  ldloc.0
      IL_0045:  callvirt   instance string [System.Windows.Forms]System.Windows.Forms.FileDialog::get_FileName()
      IL_004a:  call       class [System.Drawing]System.Drawing.Imaging.ImageFormat [System.Drawing]System.Drawing.Imaging.ImageFormat::get_Bmp()
      IL_004f:  callvirt   instance void [System.Drawing]System.Drawing.Image::Save(string,
                                                                                    class [System.Drawing]System.Drawing.Imaging.ImageFormat)
      IL_0054:  nop
//000062:                     }
      IL_0055:  nop
//000063:                 }
      IL_0056:  nop
//000064:             }
//000065:         }
//000066: 
//000067:         private void btnBlendImages_Click(object sender, EventArgs e)
//000068:         {
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
//000076:             if (bmp1 == null || bmp2 == null) return;
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_0057:  leave.s    IL_0069

    }  // end .try
    finally
    {
      IL_0059:  ldloc.0
      IL_005a:  ldnull
      IL_005b:  ceq
      IL_005d:  stloc.1
      IL_005e:  ldloc.1
      IL_005f:  brtrue.s   IL_0068

      IL_0061:  ldloc.0
      IL_0062:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0067:  nop
      IL_0068:  endfinally
    }  // end handler
    IL_0069:  nop
//000064:             }
    IL_006a:  nop
//000065:         }
    IL_006b:  ret
  } // end of method MainForm::pbOutput_DoubleClick

  .method private hidebysig instance void 
          btnBlendImages_Click(object sender,
                               class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       408 (0x198)
    .maxstack  6
    .locals init ([0] class [System.Drawing]System.Drawing.Image oldOutput,
             [1] class [System.Drawing]System.Drawing.Bitmap newBmp2,
             [2] class [System.Drawing]System.Drawing.Graphics g,
             [3] class [mscorlib]System.Threading.Tasks.TaskScheduler uiScheduler,
             [4] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2' 'CS$<>8__locals3',
             [5] bool CS$4$0000)
//000066: 
//000067:         private void btnBlendImages_Click(object sender, EventArgs e)
//000068:         {
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
//000076:             if (bmp1 == null || bmp2 == null) return;
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_0000:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::.ctor()
    IL_0005:  stloc.s    'CS$<>8__locals3'
    IL_0007:  ldloc.s    'CS$<>8__locals3'
    IL_0009:  ldarg.0
    IL_000a:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::'<>4__this'
//000068:         {
    IL_000f:  nop
//000069:             // Determine whether to run sequentially or in parallel based on the
//000070:             // button click that got us here
//000071:             bool isParallel = sender == btnParallel;
    IL_0010:  ldloc.s    'CS$<>8__locals3'
    IL_0012:  ldarg.1
    IL_0013:  ldarg.0
    IL_0014:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_0019:  ceq
    IL_001b:  stfld      bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::isParallel
//000072: 
//000073:             // Get the images
//000074:             Bitmap bmp1 = (Bitmap)pbInput1.Image;
    IL_0020:  ldloc.s    'CS$<>8__locals3'
    IL_0022:  ldarg.0
    IL_0023:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput1
    IL_0028:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
    IL_002d:  castclass  [System.Drawing]System.Drawing.Bitmap
    IL_0032:  stfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp1
//000075:             Bitmap bmp2 = (Bitmap)pbInput2.Image;
    IL_0037:  ldloc.s    'CS$<>8__locals3'
    IL_0039:  ldarg.0
    IL_003a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_003f:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
    IL_0044:  castclass  [System.Drawing]System.Drawing.Bitmap
    IL_0049:  stfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp2
//000076:             if (bmp1 == null || bmp2 == null) return;
    IL_004e:  ldloc.s    'CS$<>8__locals3'
    IL_0050:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp1
    IL_0055:  brfalse.s  IL_0066

    IL_0057:  ldloc.s    'CS$<>8__locals3'
    IL_0059:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp2
    IL_005e:  ldnull
    IL_005f:  ceq
    IL_0061:  ldc.i4.0
    IL_0062:  ceq
    IL_0064:  br.s       IL_0067

    IL_0066:  ldc.i4.0
    IL_0067:  stloc.s    CS$4$0000
//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
//000080:             pbOutput.Image = null;
//000081:             if (oldOutput != null) oldOutput.Dispose();
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_0069:  ldloc.s    CS$4$0000
    IL_006b:  brtrue.s   IL_0072

//000076:             if (bmp1 == null || bmp2 == null) return;
    IL_006d:  br         IL_0197

//000077: 
//000078:             // Clear the output image
//000079:             Image oldOutput = pbOutput.Image;
    IL_0072:  ldarg.0
    IL_0073:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_0078:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
    IL_007d:  stloc.0
//000080:             pbOutput.Image = null;
    IL_007e:  ldarg.0
    IL_007f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_0084:  ldnull
    IL_0085:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
    IL_008a:  nop
//000081:             if (oldOutput != null) oldOutput.Dispose();
    IL_008b:  ldloc.0
    IL_008c:  ldnull
    IL_008d:  ceq
    IL_008f:  stloc.s    CS$4$0000
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_0091:  ldloc.s    CS$4$0000
    IL_0093:  brtrue.s   IL_009c

//000081:             if (oldOutput != null) oldOutput.Dispose();
    IL_0095:  ldloc.0
    IL_0096:  callvirt   instance void [System.Drawing]System.Drawing.Image::Dispose()
    IL_009b:  nop
//000082: 
//000083:             // Resize the second image's size to match that of the first
//000084:             if (bmp1.Size != bmp2.Size)
    IL_009c:  ldloc.s    'CS$<>8__locals3'
    IL_009e:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp1
    IL_00a3:  callvirt   instance valuetype [System.Drawing]System.Drawing.Size [System.Drawing]System.Drawing.Image::get_Size()
    IL_00a8:  ldloc.s    'CS$<>8__locals3'
    IL_00aa:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp2
    IL_00af:  callvirt   instance valuetype [System.Drawing]System.Drawing.Size [System.Drawing]System.Drawing.Image::get_Size()
    IL_00b4:  call       bool [System.Drawing]System.Drawing.Size::op_Inequality(valuetype [System.Drawing]System.Drawing.Size,
                                                                                 valuetype [System.Drawing]System.Drawing.Size)
    IL_00b9:  ldc.i4.0
    IL_00ba:  ceq
    IL_00bc:  stloc.s    CS$4$0000
//000085:             {
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_00be:  ldloc.s    CS$4$0000
    IL_00c0:  brtrue.s   IL_013c

//000085:             {
    IL_00c2:  nop
//000086:                 Bitmap newBmp2 = new Bitmap(bmp1.Width, bmp1.Height);
    IL_00c3:  ldloc.s    'CS$<>8__locals3'
    IL_00c5:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp1
    IL_00ca:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Width()
    IL_00cf:  ldloc.s    'CS$<>8__locals3'
    IL_00d1:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp1
    IL_00d6:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Height()
    IL_00db:  newobj     instance void [System.Drawing]System.Drawing.Bitmap::.ctor(int32,
                                                                                    int32)
    IL_00e0:  stloc.1
//000087:                 using (var g = Graphics.FromImage(newBmp2)) g.DrawImage(bmp2, 0, 0, newBmp2.Width, newBmp2.Height);
    IL_00e1:  ldloc.1
    IL_00e2:  call       class [System.Drawing]System.Drawing.Graphics [System.Drawing]System.Drawing.Graphics::FromImage(class [System.Drawing]System.Drawing.Image)
    IL_00e7:  stloc.2
    .try
    {
      IL_00e8:  ldloc.2
      IL_00e9:  ldloc.s    'CS$<>8__locals3'
      IL_00eb:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp2
      IL_00f0:  ldc.i4.0
      IL_00f1:  ldc.i4.0
      IL_00f2:  ldloc.1
      IL_00f3:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Width()
      IL_00f8:  ldloc.1
      IL_00f9:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Height()
      IL_00fe:  callvirt   instance void [System.Drawing]System.Drawing.Graphics::DrawImage(class [System.Drawing]System.Drawing.Image,
                                                                                            int32,
                                                                                            int32,
                                                                                            int32,
                                                                                            int32)
      IL_0103:  nop
//000088:                 pbInput2.Image = newBmp2;
//000089:                 bmp2.Dispose();
//000090:                 bmp2 = newBmp2;
//000091:             }
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
//000095:             lblSpeedup.Text = string.Empty;
//000096:             lblTime.Text = string.Empty;
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
//000100:             Task.Factory.StartNew(delegate
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      IL_0104:  leave.s    IL_0118

    }  // end .try
    finally
    {
      IL_0106:  ldloc.2
      IL_0107:  ldnull
      IL_0108:  ceq
      IL_010a:  stloc.s    CS$4$0000
      IL_010c:  ldloc.s    CS$4$0000
      IL_010e:  brtrue.s   IL_0117

      IL_0110:  ldloc.2
      IL_0111:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0116:  nop
      IL_0117:  endfinally
    }  // end handler
    IL_0118:  nop
//000088:                 pbInput2.Image = newBmp2;
    IL_0119:  ldarg.0
    IL_011a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbInput2
    IL_011f:  ldloc.1
    IL_0120:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
    IL_0125:  nop
//000089:                 bmp2.Dispose();
    IL_0126:  ldloc.s    'CS$<>8__locals3'
    IL_0128:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp2
    IL_012d:  callvirt   instance void [System.Drawing]System.Drawing.Image::Dispose()
    IL_0132:  nop
//000090:                 bmp2 = newBmp2;
    IL_0133:  ldloc.s    'CS$<>8__locals3'
    IL_0135:  ldloc.1
    IL_0136:  stfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::bmp2
//000091:             }
    IL_013b:  nop
//000092: 
//000093:             // Disable the form to prevent user interaction while merging
//000094:             EnableOrDisableFormControls(false);
    IL_013c:  ldarg.0
    IL_013d:  ldc.i4.0
    IL_013e:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::EnableOrDisableFormControls(bool)
    IL_0143:  nop
//000095:             lblSpeedup.Text = string.Empty;
    IL_0144:  ldarg.0
    IL_0145:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_014a:  ldsfld     string [mscorlib]System.String::Empty
    IL_014f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0154:  nop
//000096:             lblTime.Text = string.Empty;
    IL_0155:  ldarg.0
    IL_0156:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
    IL_015b:  ldsfld     string [mscorlib]System.String::Empty
    IL_0160:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0165:  nop
//000097: 
//000098:             // Do the work in the background
//000099:             var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
    IL_0166:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_016b:  stloc.3
//000100:             Task.Factory.StartNew(delegate
    IL_016c:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0171:  ldloc.s    'CS$<>8__locals3'
    IL_0173:  ldftn      instance class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass2'::'<btnBlendImages_Click>b__1'()
    IL_0179:  newobj     instance void class [mscorlib]System.Func`1<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>>::.ctor(object,
                                                                                                                                                                                                   native int)
    IL_017e:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task`1<!!0> [mscorlib]System.Threading.Tasks.TaskFactory::StartNew<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>>(class [mscorlib]System.Func`1<!!0>)
    IL_0183:  ldarg.0
    IL_0184:  ldftn      instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::'<btnBlendImages_Click>b__0'(class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>>)
    IL_018a:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>>>::.ctor(object,
                                                                                                                                                                                                                                                    native int)
    IL_018f:  ldloc.3
    IL_0190:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>>::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<!0>>,
                                                                                                                                                                                                                                                                 class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_0195:  pop
//000101:             {
//000102:                 // Blend the images (and time the operation)
//000103:                 TimeSpan time;
//000104:                 Bitmap output = BlendImages(bmp1, bmp2, .5, isParallel, out time);
//000105: 
//000106:                 // Update our stats
//000107:                 if (isParallel) _lastParallelTime = time;
//000108:                 else _lastSequentialTime = time;
//000109:                 string speedup = (_lastSequentialTime != null && _lastParallelTime != null) ?
//000110:                     string.Format("Speedup: {0:F2}", _lastSequentialTime.Value.TotalSeconds / _lastParallelTime.Value.TotalSeconds) + "x" :
//000111:                     string.Empty;
//000112: 
//000113:                 // Pass results to the UI
//000114:                 return new { output, time, speedup };
//000115:             }).ContinueWith(t =>
//000116:             {
//000117:                 EnableOrDisableFormControls(true);
//000118:                 pbOutput.Image = t.Result.output;
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
//000120:                 lblSpeedup.Text = t.Result.speedup;
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
//000122:             }, uiScheduler);
//000123:         }
    IL_0196:  nop
    IL_0197:  ret
  } // end of method MainForm::btnBlendImages_Click

  .method assembly hidebysig static class [System.Drawing]System.Drawing.Bitmap 
          BlendImages(class [System.Drawing]System.Drawing.Bitmap start,
                      class [System.Drawing]System.Drawing.Bitmap end,
                      float64 blend,
                      bool parallel,
                      [out] valuetype [mscorlib]System.TimeSpan& time) cil managed
  {
    // Code size       793 (0x319)
    .maxstack  5
    .locals init ([0] int32 height,
             [1] class [System.Drawing]System.Drawing.Bitmap output,
             [2] class [System]System.Diagnostics.Stopwatch sw,
             [3] int32 j,
             [4] valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* outPixel,
             [5] valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* startPixel,
             [6] valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* endPixel,
             [7] int32 i,
             [8] class [mscorlib]System.Action`1<int32> 'CS$<>9__CachedAnonymousMethodDelegateb',
             [9] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc' 'CS$<>8__localsd',
             [10] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9' 'CS$<>8__localsa',
             [11] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7' 'CS$<>8__locals8',
             [12] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' 'CS$<>8__locals6',
             [13] class [System.Drawing]System.Drawing.Bitmap CS$1$0000,
             [14] bool CS$4$0001)
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_0000:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::.ctor()
    IL_0005:  stloc.s    'CS$<>8__locals6'
    IL_0007:  ldloc.s    'CS$<>8__locals6'
    IL_0009:  ldarg.2
    IL_000a:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
//000126:         {
    IL_000f:  nop
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
    IL_0010:  ldarg.0
    IL_0011:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Width()
    IL_0016:  ldarg.1
    IL_0017:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Width()
    IL_001c:  bne.un.s   IL_002e

    IL_001e:  ldarg.0
    IL_001f:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Height()
    IL_0024:  ldarg.1
    IL_0025:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Height()
    IL_002a:  ceq
    IL_002c:  br.s       IL_002f

    IL_002e:  ldc.i4.0
    IL_002f:  stloc.s    CS$4$0001
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_0031:  ldloc.s    CS$4$0001
    IL_0033:  brtrue.s   IL_0040

//000129:                 throw new ArgumentException("The sizes of images do not match.");
    IL_0035:  ldstr      "The sizes of images do not match."
    IL_003a:  newobj     instance void [mscorlib]System.ArgumentException::.ctor(string)
    IL_003f:  throw

//000130:             if (blend < 0 || blend > 1) 
    IL_0040:  ldloc.s    'CS$<>8__locals6'
    IL_0042:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
    IL_0047:  ldc.r8     0.0
    IL_0050:  blt.s      IL_0069

    IL_0052:  ldloc.s    'CS$<>8__locals6'
    IL_0054:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
    IL_0059:  ldc.r8     1.
    IL_0062:  cgt
    IL_0064:  ldc.i4.0
    IL_0065:  ceq
    IL_0067:  br.s       IL_006a

    IL_0069:  ldc.i4.0
    IL_006a:  stloc.s    CS$4$0001
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_006c:  ldloc.s    CS$4$0001
    IL_006e:  brtrue.s   IL_008c

//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
    IL_0070:  ldstr      "blend"
    IL_0075:  ldloc.s    'CS$<>8__locals6'
    IL_0077:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
    IL_007c:  box        [mscorlib]System.Double
    IL_0081:  ldstr      "Must be in the range [0.0,1.1]."
    IL_0086:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string,
                                                                                           object,
                                                                                           string)
    IL_008b:  throw

//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
    IL_008c:  ldloc.s    'CS$<>8__locals6'
    IL_008e:  ldarg.0
    IL_008f:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Width()
    IL_0094:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::width
    IL_0099:  ldarg.0
    IL_009a:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Height()
    IL_009f:  stloc.0
//000135:             Bitmap output = new Bitmap(width, height);
    IL_00a0:  ldloc.s    'CS$<>8__locals6'
    IL_00a2:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::width
    IL_00a7:  ldloc.0
    IL_00a8:  newobj     instance void [System.Drawing]System.Drawing.Bitmap::.ctor(int32,
                                                                                    int32)
    IL_00ad:  stloc.1
//000136:             var sw = new Stopwatch();
    IL_00ae:  newobj     instance void [System]System.Diagnostics.Stopwatch::.ctor()
    IL_00b3:  stloc.2
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_00b4:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7'::.ctor()
    IL_00b9:  stloc.s    'CS$<>8__locals8'
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
    IL_00bb:  ldloc.s    'CS$<>8__locals8'
    IL_00bd:  ldloc.1
    IL_00be:  newobj     instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::.ctor(class [System.Drawing]System.Drawing.Bitmap)
    IL_00c3:  stfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7'::fastOut
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    .try
    {
      IL_00c8:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9'::.ctor()
      IL_00cd:  stloc.s    'CS$<>8__localsa'
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
      IL_00cf:  ldloc.s    'CS$<>8__localsa'
      IL_00d1:  ldarg.0
      IL_00d2:  newobj     instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::.ctor(class [System.Drawing]System.Drawing.Bitmap)
      IL_00d7:  stfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9'::fastStart
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
      .try
      {
        IL_00dc:  ldnull
        IL_00dd:  stloc.s    'CS$<>9__CachedAnonymousMethodDelegateb'
        IL_00df:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::.ctor()
        IL_00e4:  stloc.s    'CS$<>8__localsd'
        IL_00e6:  ldloc.s    'CS$<>8__localsd'
        IL_00e8:  ldloc.s    'CS$<>8__localsa'
        IL_00ea:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__localsa'
        IL_00ef:  ldloc.s    'CS$<>8__localsd'
        IL_00f1:  ldloc.s    'CS$<>8__locals8'
        IL_00f3:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals8'
        IL_00f8:  ldloc.s    'CS$<>8__localsd'
        IL_00fa:  ldloc.s    'CS$<>8__locals6'
        IL_00fc:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5' Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'CS$<>8__locals6'
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
        IL_0101:  ldloc.s    'CS$<>8__localsd'
        IL_0103:  ldarg.1
        IL_0104:  newobj     instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::.ctor(class [System.Drawing]System.Drawing.Bitmap)
        IL_0109:  stfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::fastEnd
//000142:             {
        .try
        {
          IL_010e:  nop
//000143:                 if (parallel)
          IL_010f:  ldarg.3
          IL_0110:  ldc.i4.0
          IL_0111:  ceq
          IL_0113:  stloc.s    CS$4$0001
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
          IL_0115:  ldloc.s    CS$4$0001
          IL_0117:  brtrue.s   IL_014d

//000144:                 {
          IL_0119:  nop
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
          IL_011a:  ldloc.2
          IL_011b:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Restart()
          IL_0120:  nop
//000147:                     Parallel.For(0, height, j =>
          IL_0121:  ldc.i4.0
          IL_0122:  ldloc.0
          IL_0123:  ldloc.s    'CS$<>9__CachedAnonymousMethodDelegateb'
          IL_0125:  brtrue.s   IL_0138

          IL_0127:  ldloc.s    'CS$<>8__localsd'
          IL_0129:  ldftn      instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::'<BlendImages>b__4'(int32)
          IL_012f:  newobj     instance void class [mscorlib]System.Action`1<int32>::.ctor(object,
                                                                                           native int)
          IL_0134:  stloc.s    'CS$<>9__CachedAnonymousMethodDelegateb'
          IL_0136:  br.s       IL_0138

          IL_0138:  ldloc.s    'CS$<>9__CachedAnonymousMethodDelegateb'
          IL_013a:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::For(int32,
                                                                                                                                            int32,
                                                                                                                                            class [mscorlib]System.Action`1<int32>)
          IL_013f:  pop
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
          IL_0140:  ldloc.2
          IL_0141:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Stop()
          IL_0146:  nop
//000166:                 }
          IL_0147:  nop
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
          IL_0148:  br         IL_02a0

//000168:                 {
          IL_014d:  nop
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
          IL_014e:  ldloc.2
          IL_014f:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Restart()
          IL_0154:  nop
//000171:                     for(int j=0; j<height; j++)
          IL_0155:  ldc.i4.0
          IL_0156:  stloc.3
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
          IL_0157:  br         IL_028b

//000172:                     {
          IL_015c:  nop
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
          IL_015d:  ldloc.s    'CS$<>8__locals8'
          IL_015f:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7'::fastOut
          IL_0164:  ldloc.3
          IL_0165:  callvirt   instance valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::GetInitialPixelForRow(int32)
          IL_016a:  stloc.s    outPixel
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
          IL_016c:  ldloc.s    'CS$<>8__localsa'
          IL_016e:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9'::fastStart
          IL_0173:  ldloc.3
          IL_0174:  callvirt   instance valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::GetInitialPixelForRow(int32)
          IL_0179:  stloc.s    startPixel
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
          IL_017b:  ldloc.s    'CS$<>8__localsd'
          IL_017d:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::fastEnd
          IL_0182:  ldloc.3
          IL_0183:  callvirt   instance valuetype [ParallelExtensionsExtras]Microsoft.Drawing.PixelData* [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::GetInitialPixelForRow(int32)
          IL_0188:  stloc.s    endPixel
//000176: 
//000177:                         for (int i = 0; i < width; i++)
          IL_018a:  ldc.i4.0
          IL_018b:  stloc.s    i
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
          IL_018d:  br         IL_0272

//000178:                         {
          IL_0192:  nop
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
          IL_0193:  ldloc.s    outPixel
          IL_0195:  ldloc.s    startPixel
          IL_0197:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::R
          IL_019c:  conv.r8
          IL_019d:  ldloc.s    'CS$<>8__locals6'
          IL_019f:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
          IL_01a4:  mul
          IL_01a5:  ldc.r8     0.5
          IL_01ae:  add
          IL_01af:  ldloc.s    endPixel
          IL_01b1:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::R
          IL_01b6:  conv.r8
          IL_01b7:  ldc.r8     1.
          IL_01c0:  ldloc.s    'CS$<>8__locals6'
          IL_01c2:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
          IL_01c7:  sub
          IL_01c8:  mul
          IL_01c9:  add
          IL_01ca:  conv.u1
          IL_01cb:  stfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::R
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
          IL_01d0:  ldloc.s    outPixel
          IL_01d2:  ldloc.s    startPixel
          IL_01d4:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::G
          IL_01d9:  conv.r8
          IL_01da:  ldloc.s    'CS$<>8__locals6'
          IL_01dc:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
          IL_01e1:  mul
          IL_01e2:  ldc.r8     0.5
          IL_01eb:  add
          IL_01ec:  ldloc.s    endPixel
          IL_01ee:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::G
          IL_01f3:  conv.r8
          IL_01f4:  ldc.r8     1.
          IL_01fd:  ldloc.s    'CS$<>8__locals6'
          IL_01ff:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
          IL_0204:  sub
          IL_0205:  mul
          IL_0206:  add
          IL_0207:  conv.u1
          IL_0208:  stfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::G
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
          IL_020d:  ldloc.s    outPixel
          IL_020f:  ldloc.s    startPixel
          IL_0211:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::B
          IL_0216:  conv.r8
          IL_0217:  ldloc.s    'CS$<>8__locals6'
          IL_0219:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
          IL_021e:  mul
          IL_021f:  ldc.r8     0.5
          IL_0228:  add
          IL_0229:  ldloc.s    endPixel
          IL_022b:  ldfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::B
          IL_0230:  conv.r8
          IL_0231:  ldc.r8     1.
          IL_023a:  ldloc.s    'CS$<>8__locals6'
          IL_023c:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::blend
          IL_0241:  sub
          IL_0242:  mul
          IL_0243:  add
          IL_0244:  conv.u1
          IL_0245:  stfld      uint8 [ParallelExtensionsExtras]Microsoft.Drawing.PixelData::B
//000183: 
//000184:                             outPixel++;
          IL_024a:  ldloc.s    outPixel
          IL_024c:  sizeof     [ParallelExtensionsExtras]Microsoft.Drawing.PixelData
          IL_0252:  add
          IL_0253:  stloc.s    outPixel
//000185:                             startPixel++;
          IL_0255:  ldloc.s    startPixel
          IL_0257:  sizeof     [ParallelExtensionsExtras]Microsoft.Drawing.PixelData
          IL_025d:  add
          IL_025e:  stloc.s    startPixel
//000186:                             endPixel++;
          IL_0260:  ldloc.s    endPixel
          IL_0262:  sizeof     [ParallelExtensionsExtras]Microsoft.Drawing.PixelData
          IL_0268:  add
          IL_0269:  stloc.s    endPixel
//000187:                         }
          IL_026b:  nop
//000177:                         for (int i = 0; i < width; i++)
          IL_026c:  ldloc.s    i
          IL_026e:  ldc.i4.1
          IL_026f:  add
          IL_0270:  stloc.s    i
          IL_0272:  ldloc.s    i
          IL_0274:  ldloc.s    'CS$<>8__locals6'
          IL_0276:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass5'::width
          IL_027b:  clt
          IL_027d:  stloc.s    CS$4$0001
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
          IL_027f:  ldloc.s    CS$4$0001
          IL_0281:  brtrue     IL_0192

//000188:                     }
          IL_0286:  nop
//000171:                     for(int j=0; j<height; j++)
          IL_0287:  ldloc.3
          IL_0288:  ldc.i4.1
          IL_0289:  add
          IL_028a:  stloc.3
          IL_028b:  ldloc.3
          IL_028c:  ldloc.0
          IL_028d:  clt
          IL_028f:  stloc.s    CS$4$0001
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
          IL_0291:  ldloc.s    CS$4$0001
          IL_0293:  brtrue     IL_015c

//000189:                     sw.Stop();
          IL_0298:  ldloc.2
          IL_0299:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Stop()
          IL_029e:  nop
//000190:                 }
          IL_029f:  nop
//000191:             }
          IL_02a0:  nop
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
          IL_02a1:  leave.s    IL_02c1

        }  // end .try
        finally
        {
          IL_02a3:  ldloc.s    'CS$<>8__localsd'
          IL_02a5:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::fastEnd
          IL_02aa:  ldnull
          IL_02ab:  ceq
          IL_02ad:  stloc.s    CS$4$0001
          IL_02af:  ldloc.s    CS$4$0001
          IL_02b1:  brtrue.s   IL_02c0

          IL_02b3:  ldloc.s    'CS$<>8__localsd'
          IL_02b5:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClassc'::fastEnd
          IL_02ba:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
          IL_02bf:  nop
          IL_02c0:  endfinally
        }  // end handler
        IL_02c1:  nop
        IL_02c2:  leave.s    IL_02e2

      }  // end .try
      finally
      {
        IL_02c4:  ldloc.s    'CS$<>8__localsa'
        IL_02c6:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9'::fastStart
        IL_02cb:  ldnull
        IL_02cc:  ceq
        IL_02ce:  stloc.s    CS$4$0001
        IL_02d0:  ldloc.s    CS$4$0001
        IL_02d2:  brtrue.s   IL_02e1

        IL_02d4:  ldloc.s    'CS$<>8__localsa'
        IL_02d6:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass9'::fastStart
        IL_02db:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
        IL_02e0:  nop
        IL_02e1:  endfinally
      }  // end handler
      IL_02e2:  nop
      IL_02e3:  leave.s    IL_0303

    }  // end .try
    finally
    {
      IL_02e5:  ldloc.s    'CS$<>8__locals8'
      IL_02e7:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7'::fastOut
      IL_02ec:  ldnull
      IL_02ed:  ceq
      IL_02ef:  stloc.s    CS$4$0001
      IL_02f1:  ldloc.s    CS$4$0001
      IL_02f3:  brtrue.s   IL_0302

      IL_02f5:  ldloc.s    'CS$<>8__locals8'
      IL_02f7:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm/'<>c__DisplayClass7'::fastOut
      IL_02fc:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0301:  nop
      IL_0302:  endfinally
    }  // end handler
    IL_0303:  nop
//000194:             time = sw.Elapsed;
    IL_0304:  ldarg.s    time
    IL_0306:  ldloc.2
    IL_0307:  callvirt   instance valuetype [mscorlib]System.TimeSpan [System]System.Diagnostics.Stopwatch::get_Elapsed()
    IL_030c:  stobj      [mscorlib]System.TimeSpan
//000195:             return output;
    IL_0311:  ldloc.1
    IL_0312:  stloc.s    CS$1$0000
    IL_0314:  br.s       IL_0316

//000196:         }
    IL_0316:  ldloc.s    CS$1$0000
    IL_0318:  ret
  } // end of method MainForm::BlendImages

  .method private hidebysig instance void 
          EnableOrDisableFormControls(bool enable) cil managed
  {
    // Code size       41 (0x29)
    .maxstack  8
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
    IL_0000:  nop
//000200:             btnParallel.Enabled = enable;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnParallel
    IL_0007:  ldarg.1
    IL_0008:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_000d:  nop
//000201:             btnSequential.Enabled = enable;
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::btnSequential
    IL_0014:  ldarg.1
    IL_0015:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_001a:  nop
//000202:             splitContainer1.Enabled = enable;
    IL_001b:  ldarg.0
    IL_001c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0021:  ldarg.1
    IL_0022:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_0027:  nop
//000203:         }
    IL_0028:  ret
  } // end of method MainForm::EnableOrDisableFormControls

  .method private hidebysig instance void 
          '<btnBlendImages_Click>b__0'(class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>> t) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       162 (0xa2)
    .maxstack  4
    .locals init ([0] valuetype [mscorlib]System.TimeSpan CS$0$0000,
             [1] valuetype [System.Drawing]System.Drawing.Point CS$0$0001)
//000116:             {
    IL_0000:  nop
//000117:                 EnableOrDisableFormControls(true);
    IL_0001:  ldarg.0
    IL_0002:  ldc.i4.1
    IL_0003:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::EnableOrDisableFormControls(bool)
    IL_0008:  nop
//000118:                 pbOutput.Image = t.Result.output;
    IL_0009:  ldarg.0
    IL_000a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::pbOutput
    IL_000f:  ldarg.1
    IL_0010:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>>::get_Result()
    IL_0015:  callvirt   instance !0 class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>::get_output()
    IL_001a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
    IL_001f:  nop
//000119:                 lblTime.Text = "Time: " + t.Result.time.ToString();
    IL_0020:  ldarg.0
    IL_0021:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblTime
    IL_0026:  ldstr      "Time: "
    IL_002b:  ldarg.1
    IL_002c:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>>::get_Result()
    IL_0031:  callvirt   instance !1 class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>::get_time()
    IL_0036:  stloc.0
    IL_0037:  ldloca.s   CS$0$0000
    IL_0039:  constrained. [mscorlib]System.TimeSpan
    IL_003f:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0044:  call       string [mscorlib]System.String::Concat(string,
                                                                string)
    IL_0049:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_004e:  nop
//000120:                 lblSpeedup.Text = t.Result.speedup;
    IL_004f:  ldarg.0
    IL_0050:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_0055:  ldarg.1
    IL_0056:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>>::get_Result()
    IL_005b:  callvirt   instance !2 class '<>f__AnonymousType0`3'<class [System.Drawing]System.Drawing.Bitmap,valuetype [mscorlib]System.TimeSpan,string>::get_speedup()
    IL_0060:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0065:  nop
//000121:                 lblSpeedup.Location = new Point(splitContainer1.Right - lblSpeedup.Width, lblSpeedup.Location.Y);
    IL_0066:  ldarg.0
    IL_0067:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_006c:  ldarg.0
    IL_006d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.SplitContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::splitContainer1
    IL_0072:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Right()
    IL_0077:  ldarg.0
    IL_0078:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_007d:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Width()
    IL_0082:  sub
    IL_0083:  ldarg.0
    IL_0084:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::lblSpeedup
    IL_0089:  callvirt   instance valuetype [System.Drawing]System.Drawing.Point [System.Windows.Forms]System.Windows.Forms.Control::get_Location()
    IL_008e:  stloc.1
    IL_008f:  ldloca.s   CS$0$0001
    IL_0091:  call       instance int32 [System.Drawing]System.Drawing.Point::get_Y()
    IL_0096:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_009b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_00a0:  nop
//000122:             }, uiScheduler);
//000123:         }
//000124: 
//000125:         internal unsafe static Bitmap BlendImages(Bitmap start, Bitmap end, double blend, bool parallel, out TimeSpan time)
//000126:         {
//000127:             // Validate parameters
//000128:             if (start.Width != end.Width || start.Height != end.Height) 
//000129:                 throw new ArgumentException("The sizes of images do not match.");
//000130:             if (blend < 0 || blend > 1) 
//000131:                 throw new ArgumentOutOfRangeException("blend", blend, "Must be in the range [0.0,1.1].");
//000132: 
//000133:             // Create the output image
//000134:             int width = start.Width, height = start.Height;
//000135:             Bitmap output = new Bitmap(width, height);
//000136:             var sw = new Stopwatch();
//000137: 
//000138:             // Blend the input images into the output
//000139:             using (FastBitmap fastOut = new FastBitmap(output))
//000140:             using (FastBitmap fastStart = new FastBitmap(start))
//000141:             using (FastBitmap fastEnd = new FastBitmap(end))
//000142:             {
//000143:                 if (parallel)
//000144:                 {
//000145:                     // Blend the images in parallel
//000146:                     sw.Restart();
//000147:                     Parallel.For(0, height, j =>
//000148:                     {
//000149:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000150:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000151:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000152: 
//000153:                         for (int i = 0; i < width; i++)
//000154:                         {
//000155:                             // Blend the input pixels into the output pixel
//000156:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000157:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000158:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000159: 
//000160:                             outPixel++;
//000161:                             startPixel++;
//000162:                             endPixel++;
//000163:                         }
//000164:                     });
//000165:                     sw.Stop();
//000166:                 }
//000167:                 else
//000168:                 {
//000169:                     // Blend the images sequentially
//000170:                     sw.Restart();
//000171:                     for(int j=0; j<height; j++)
//000172:                     {
//000173:                         PixelData* outPixel = fastOut.GetInitialPixelForRow(j);
//000174:                         PixelData* startPixel = fastStart.GetInitialPixelForRow(j);
//000175:                         PixelData* endPixel = fastEnd.GetInitialPixelForRow(j);
//000176: 
//000177:                         for (int i = 0; i < width; i++)
//000178:                         {
//000179:                             // Blend the input pixels into the output pixel
//000180:                             outPixel->R = (byte)((startPixel->R * blend) + .5 + (endPixel->R * (1 - blend))); // .5 for rounding
//000181:                             outPixel->G = (byte)((startPixel->G * blend) + .5 + (endPixel->G * (1 - blend)));
//000182:                             outPixel->B = (byte)((startPixel->B * blend) + .5 + (endPixel->B * (1 - blend)));
//000183: 
//000184:                             outPixel++;
//000185:                             startPixel++;
//000186:                             endPixel++;
//000187:                         }
//000188:                     }
//000189:                     sw.Stop();
//000190:                 }
//000191:             }
//000192: 
//000193:             // Return the new image
//000194:             time = sw.Elapsed;
//000195:             return output;
//000196:         }
//000197: 
//000198:         private void EnableOrDisableFormControls(bool enable)
//000199:         {
//000200:             btnParallel.Enabled = enable;
//000201:             btnSequential.Enabled = enable;
//000202:             splitContainer1.Enabled = enable;
//000203:         }
//000204:     }
//000205: }
    IL_00a1:  ret
  } // end of method MainForm::'<btnBlendImages_Click>b__0'

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm

.class private abstract auto ansi sealed beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Program
       extends [mscorlib]System.Object
{
  .method private hidebysig static void  Main(string[] args) cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       26 (0x1a)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BlendImages\BlendImages_CSharp\Program.cs' 
//000021:         {
    IL_0000:  nop
//000022:             Application.EnableVisualStyles();
    IL_0001:  call       void [System.Windows.Forms]System.Windows.Forms.Application::EnableVisualStyles()
    IL_0006:  nop
//000023:             Application.SetCompatibleTextRenderingDefault(false);
    IL_0007:  ldc.i4.0
    IL_0008:  call       void [System.Windows.Forms]System.Windows.Forms.Application::SetCompatibleTextRenderingDefault(bool)
    IL_000d:  nop
//000024:             Application.Run(new MainForm());
    IL_000e:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.MainForm::.ctor()
    IL_0013:  call       void [System.Windows.Forms]System.Windows.Forms.Application::Run(class [System.Windows.Forms]System.Windows.Forms.Form)
    IL_0018:  nop
//000025:         }
    IL_0019:  ret
  } // end of method Program::Main

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Program

.class private auto ansi beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BlendImages\BlendImages_CSharp\Properties\Resources.Designer.cs' 
//000031:         [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000032:         internal Resources() {
    IL_0007:  nop
//000033:         }
    IL_0008:  nop
    IL_0009:  ret
  } // end of method Resources::.ctor

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       63 (0x3f)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager temp,
             [1] class [mscorlib]System.Resources.ResourceManager CS$1$0000,
             [2] bool CS$4$0001)
//000034:         
//000035:         /// <summary>
//000036:         ///   Returns the cached ResourceManager instance used by this class.
//000037:         /// </summary>
//000038:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000039:         internal static global::System.Resources.ResourceManager ResourceManager {
//000040:             get {
    IL_0000:  nop
//000041:                 if (object.ReferenceEquals(resourceMan, null)) {
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  call       bool [mscorlib]System.Object::ReferenceEquals(object,
                                                                       object)
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.2
//000042:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resourc" +
//000043:                             "es", typeof(Resources).Assembly);
//000044:                     resourceMan = temp;
//000045:                 }
//000046:                 return resourceMan;
//000047:             }
//000048:         }
//000049:         
//000050:         /// <summary>
//000051:         ///   Overrides the current thread's CurrentUICulture property for all
//000052:         ///   resource lookups using this strongly typed resource class.
//000053:         /// </summary>
//000054:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000055:         internal static global::System.Globalization.CultureInfo Culture {
//000056:             get {
//000057:                 return resourceCulture;
//000058:             }
//000059:             set {
//000060:                 resourceCulture = value;
//000061:             }
//000062:         }
//000063:     }
//000064: }
    IL_0010:  ldloc.2
    IL_0011:  brtrue.s   IL_0035

//000041:                 if (object.ReferenceEquals(resourceMan, null)) {
    IL_0013:  nop
//000042:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resourc" +
    IL_0014:  ldstr      "Microsoft.ParallelComputingPlatform.ParallelExtens"
    + "ions.Samples.Properties.Resources"
    IL_0019:  ldtoken    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources
    IL_001e:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_0023:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0028:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_002d:  stloc.0
//000043:                             "es", typeof(Resources).Assembly);
//000044:                     resourceMan = temp;
    IL_002e:  ldloc.0
    IL_002f:  stsfld     class [mscorlib]System.Resources.ResourceManager Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources::resourceMan
//000045:                 }
    IL_0034:  nop
//000046:                 return resourceMan;
    IL_0035:  ldsfld     class [mscorlib]System.Resources.ResourceManager Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources::resourceMan
    IL_003a:  stloc.1
    IL_003b:  br.s       IL_003d

//000047:             }
    IL_003d:  ldloc.1
    IL_003e:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo CS$1$0000)
//000048:         }
//000049:         
//000050:         /// <summary>
//000051:         ///   Overrides the current thread's CurrentUICulture property for all
//000052:         ///   resource lookups using this strongly typed resource class.
//000053:         /// </summary>
//000054:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000055:         internal static global::System.Globalization.CultureInfo Culture {
//000056:             get {
    IL_0000:  nop
//000057:                 return resourceCulture;
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000058:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly hidebysig specialname static 
          void  set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
//000059:             set {
    IL_0000:  nop
//000060:                 resourceCulture = value;
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources::resourceCulture
//000061:             }
    IL_0007:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .set void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
    .get class [mscorlib]System.Globalization.CultureInfo Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources::get_Culture()
  } // end of property Resources::Culture
} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Properties.Resources

.class private auto ansi sealed beforefieldinit '<>f__AnonymousType0`3'<'<output>j__TPar','<time>j__TPar','<speedup>j__TPar'>
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 3A 5C 7B 20 6F 75 74 70 75 74 20 3D 20 7B   // ..:\{ output = {
                                                                                                 6F 75 74 70 75 74 7D 2C 20 74 69 6D 65 20 3D 20   // output}, time = 
                                                                                                 7B 74 69 6D 65 7D 2C 20 73 70 65 65 64 75 70 20   // {time}, speedup 
                                                                                                 3D 20 7B 73 70 65 65 64 75 70 7D 20 7D 01 00 54   // = {speedup} }..T
                                                                                                 0E 04 54 79 70 65 10 3C 41 6E 6F 6E 79 6D 6F 75   // ..Type.<Anonymou
                                                                                                 73 20 54 79 70 65 3E )                            // s Type>
  .field private initonly !'<output>j__TPar' '<output>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field private initonly !'<time>j__TPar' '<time>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field private initonly !'<speedup>j__TPar' '<speedup>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(!'<output>j__TPar' output,
                               !'<time>j__TPar' time,
                               !'<speedup>j__TPar' speedup) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       28 (0x1c)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  ldarg.0
    IL_0007:  ldarg.1
    IL_0008:  stfld      !0 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<output>i__Field'
    IL_000d:  ldarg.0
    IL_000e:  ldarg.2
    IL_000f:  stfld      !1 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<time>i__Field'
    IL_0014:  ldarg.0
    IL_0015:  ldarg.3
    IL_0016:  stfld      !2 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<speedup>i__Field'
    IL_001b:  ret
  } // end of method '<>f__AnonymousType0`3'::.ctor

  .method public hidebysig specialname instance !'<output>j__TPar' 
          get_output() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<output>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !0 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<output>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType0`3'::get_output

  .method public hidebysig specialname instance !'<time>j__TPar' 
          get_time() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<time>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !1 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<time>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType0`3'::get_time

  .method public hidebysig specialname instance !'<speedup>j__TPar' 
          get_speedup() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<speedup>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !2 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<speedup>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType0`3'::get_speedup

  .method public hidebysig virtual instance string 
          ToString() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       119 (0x77)
    .maxstack  2
    .locals init (class [mscorlib]System.Text.StringBuilder V_0,
             string V_1)
    IL_0000:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldstr      "{ output = "
    IL_000c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0011:  pop
    IL_0012:  ldloc.0
    IL_0013:  ldarg.0
    IL_0014:  ldfld      !0 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<output>i__Field'
    IL_0019:  box        !'<output>j__TPar'
    IL_001e:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_0023:  pop
    IL_0024:  ldloc.0
    IL_0025:  ldstr      ", time = "
    IL_002a:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_002f:  pop
    IL_0030:  ldloc.0
    IL_0031:  ldarg.0
    IL_0032:  ldfld      !1 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<time>i__Field'
    IL_0037:  box        !'<time>j__TPar'
    IL_003c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_0041:  pop
    IL_0042:  ldloc.0
    IL_0043:  ldstr      ", speedup = "
    IL_0048:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_004d:  pop
    IL_004e:  ldloc.0
    IL_004f:  ldarg.0
    IL_0050:  ldfld      !2 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<speedup>i__Field'
    IL_0055:  box        !'<speedup>j__TPar'
    IL_005a:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_005f:  pop
    IL_0060:  ldloc.0
    IL_0061:  ldstr      " }"
    IL_0066:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_006b:  pop
    IL_006c:  ldloc.0
    IL_006d:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0072:  stloc.1
    IL_0073:  br.s       IL_0075

    IL_0075:  ldloc.1
    IL_0076:  ret
  } // end of method '<>f__AnonymousType0`3'::ToString

  .method public hidebysig virtual instance bool 
          Equals(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       88 (0x58)
    .maxstack  3
    .locals init (class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'> V_0,
             bool V_1)
    IL_0000:  ldarg.1
    IL_0001:  isinst     class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  brfalse.s  IL_0052

    IL_000a:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<output>j__TPar'>::get_Default()
    IL_000f:  ldarg.0
    IL_0010:  ldfld      !0 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<output>i__Field'
    IL_0015:  ldloc.0
    IL_0016:  ldfld      !0 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<output>i__Field'
    IL_001b:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<output>j__TPar'>::Equals(!0,
                                                                                                                                 !0)
    IL_0020:  brfalse.s  IL_0052

    IL_0022:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<time>j__TPar'>::get_Default()
    IL_0027:  ldarg.0
    IL_0028:  ldfld      !1 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<time>i__Field'
    IL_002d:  ldloc.0
    IL_002e:  ldfld      !1 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<time>i__Field'
    IL_0033:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<time>j__TPar'>::Equals(!0,
                                                                                                                               !0)
    IL_0038:  brfalse.s  IL_0052

    IL_003a:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<speedup>j__TPar'>::get_Default()
    IL_003f:  ldarg.0
    IL_0040:  ldfld      !2 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<speedup>i__Field'
    IL_0045:  ldloc.0
    IL_0046:  ldfld      !2 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<speedup>i__Field'
    IL_004b:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<speedup>j__TPar'>::Equals(!0,
                                                                                                                                  !0)
    IL_0050:  br.s       IL_0053

    IL_0052:  ldc.i4.0
    IL_0053:  stloc.1
    IL_0054:  br.s       IL_0056

    IL_0056:  ldloc.1
    IL_0057:  ret
  } // end of method '<>f__AnonymousType0`3'::Equals

  .method public hidebysig virtual instance int32 
          GetHashCode() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       87 (0x57)
    .maxstack  3
    .locals init (int32 V_0,
             int32 V_1)
    IL_0000:  ldc.i4     0x465ed0df
    IL_0005:  stloc.0
    IL_0006:  ldc.i4     0xa5555529
    IL_000b:  ldloc.0
    IL_000c:  mul
    IL_000d:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<output>j__TPar'>::get_Default()
    IL_0012:  ldarg.0
    IL_0013:  ldfld      !0 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<output>i__Field'
    IL_0018:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<output>j__TPar'>::GetHashCode(!0)
    IL_001d:  add
    IL_001e:  stloc.0
    IL_001f:  ldc.i4     0xa5555529
    IL_0024:  ldloc.0
    IL_0025:  mul
    IL_0026:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<time>j__TPar'>::get_Default()
    IL_002b:  ldarg.0
    IL_002c:  ldfld      !1 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<time>i__Field'
    IL_0031:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<time>j__TPar'>::GetHashCode(!0)
    IL_0036:  add
    IL_0037:  stloc.0
    IL_0038:  ldc.i4     0xa5555529
    IL_003d:  ldloc.0
    IL_003e:  mul
    IL_003f:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<speedup>j__TPar'>::get_Default()
    IL_0044:  ldarg.0
    IL_0045:  ldfld      !2 class '<>f__AnonymousType0`3'<!'<output>j__TPar',!'<time>j__TPar',!'<speedup>j__TPar'>::'<speedup>i__Field'
    IL_004a:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<speedup>j__TPar'>::GetHashCode(!0)
    IL_004f:  add
    IL_0050:  stloc.0
    IL_0051:  ldloc.0
    IL_0052:  stloc.1
    IL_0053:  br.s       IL_0055

    IL_0055:  ldloc.1
    IL_0056:  ret
  } // end of method '<>f__AnonymousType0`3'::GetHashCode

  .property instance !'<output>j__TPar' output()
  {
    .get instance !'<output>j__TPar' '<>f__AnonymousType0`3'::get_output()
  } // end of property '<>f__AnonymousType0`3'::output
  .property instance !'<time>j__TPar' time()
  {
    .get instance !'<time>j__TPar' '<>f__AnonymousType0`3'::get_time()
  } // end of property '<>f__AnonymousType0`3'::time
  .property instance !'<speedup>j__TPar' speedup()
  {
    .get instance !'<speedup>j__TPar' '<>f__AnonymousType0`3'::get_speedup()
  } // end of property '<>f__AnonymousType0`3'::speedup
} // end of class '<>f__AnonymousType0`3'


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
