
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly ComputePi
{

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 09 43 6F 6D 70 75 74 65 50 69 00 00 )       // ...ComputePi..
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = ( 01 00 24 37 32 61 38 39 30 31 38 2D 35 65 35 36   // ..$72a89018-5e56
                                                                                                  2D 34 61 39 39 2D 61 38 35 38 2D 36 39 62 35 33   // -4a99-a858-69b53
                                                                                                  61 66 31 38 36 30 64 00 00 )                      // af1860d..
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 09 43 6F 6D 70 75 74 65 50 69 00 00 )       // ...ComputePi..
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.module ComputePi.exe
// MVID: {00ECF4BE-BDD9-4E84-B3F0-85ABA98C59B9}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0003       // WINDOWS_CUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x01290000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi beforefieldinit Program
       extends [mscorlib]System.Object
{
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClasse'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public float64 step
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClasse'::.ctor

    .method public hidebysig instance class '<>f__AnonymousType0`2'<int32,float64> 
            '<SerialLinqPi>b__b'(int32 i) cil managed
    {
      // Code size       30 (0x1e)
      .maxstack  3
      .locals init ([0] class '<>f__AnonymousType0`2'<int32,float64> CS$1$0000)
      .language '{3F5162F8-07C6-11D3-9053-00C04FA302A1}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ComputePi\ComputePi_CSharp\Program.cs' 
//000048:                 let x = (i + 0.5) * step
      IL_0000:  ldarg.1
      IL_0001:  ldarg.1
      IL_0002:  conv.r8
      IL_0003:  ldc.r8     0.5
      IL_000c:  add
      IL_000d:  ldarg.0
      IL_000e:  ldfld      float64 Program/'<>c__DisplayClasse'::step
      IL_0013:  mul
      IL_0014:  newobj     instance void class '<>f__AnonymousType0`2'<int32,float64>::.ctor(!0,
                                                                                             !1)
      IL_0019:  stloc.0
      IL_001a:  br.s       IL_001c

//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
      IL_001c:  ldloc.0
      IL_001d:  ret
    } // end of method '<>c__DisplayClasse'::'<SerialLinqPi>b__b'

  } // end of class '<>c__DisplayClasse'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass14'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public float64 step
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass14'::.ctor

    .method public hidebysig instance class '<>f__AnonymousType0`2'<int32,float64> 
            '<ParallelLinqPi>b__11'(int32 i) cil managed
    {
      // Code size       30 (0x1e)
      .maxstack  3
      .locals init ([0] class '<>f__AnonymousType0`2'<int32,float64> CS$1$0000)
//000057:                 let x = (i + 0.5) * step
      IL_0000:  ldarg.1
      IL_0001:  ldarg.1
      IL_0002:  conv.r8
      IL_0003:  ldc.r8     0.5
      IL_000c:  add
      IL_000d:  ldarg.0
      IL_000e:  ldfld      float64 Program/'<>c__DisplayClass14'::step
      IL_0013:  mul
      IL_0014:  newobj     instance void class '<>f__AnonymousType0`2'<int32,float64>::.ctor(!0,
                                                                                             !1)
      IL_0019:  stloc.0
      IL_001a:  br.s       IL_001c

//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
      IL_001c:  ldloc.0
      IL_001d:  ret
    } // end of method '<>c__DisplayClass14'::'<ParallelLinqPi>b__11'

  } // end of class '<>c__DisplayClass14'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass1b'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public float64 sum
    .field public float64 step
    .field public object monitor
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass1b'::.ctor

    .method public hidebysig instance float64 
            '<ParallelPi>b__18'(int32 i,
                                class [mscorlib]System.Threading.Tasks.ParallelLoopState state,
                                float64 local) cil managed
    {
      // Code size       51 (0x33)
      .maxstack  5
      .locals init ([0] float64 x,
               [1] float64 CS$1$0000)
//000081:         {
      IL_0000:  nop
//000082:             double x = (i + 0.5) * step;
      IL_0001:  ldarg.1
      IL_0002:  conv.r8
      IL_0003:  ldc.r8     0.5
      IL_000c:  add
      IL_000d:  ldarg.0
      IL_000e:  ldfld      float64 Program/'<>c__DisplayClass1b'::step
      IL_0013:  mul
      IL_0014:  stloc.0
//000083:             return local + 4.0 / (1.0 + x * x);
      IL_0015:  ldarg.3
      IL_0016:  ldc.r8     4.
      IL_001f:  ldc.r8     1.
      IL_0028:  ldloc.0
      IL_0029:  ldloc.0
      IL_002a:  mul
      IL_002b:  add
      IL_002c:  div
      IL_002d:  add
      IL_002e:  stloc.1
      IL_002f:  br.s       IL_0031

//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
      IL_0031:  ldloc.1
      IL_0032:  ret
    } // end of method '<>c__DisplayClass1b'::'<ParallelPi>b__18'

    .method public hidebysig instance void 
            '<ParallelPi>b__19'(float64 local) cil managed
    {
      // Code size       53 (0x35)
      .maxstack  3
      .locals init ([0] bool '<>s__LockTaken16',
               [1] object CS$2$0000,
               [2] bool CS$4$0001)
//000084:         }, local => { lock (monitor) sum += local; });
      IL_0000:  nop
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
      IL_0001:  ldc.i4.0
      IL_0002:  stloc.0
//000084:         }, local => { lock (monitor) sum += local; });
      .try
      {
        IL_0003:  ldarg.0
        IL_0004:  ldfld      object Program/'<>c__DisplayClass1b'::monitor
        IL_0009:  dup
        IL_000a:  stloc.1
        IL_000b:  ldloca.s   '<>s__LockTaken16'
        IL_000d:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                            bool&)
        IL_0012:  nop
        IL_0013:  ldarg.0
        IL_0014:  dup
        IL_0015:  ldfld      float64 Program/'<>c__DisplayClass1b'::sum
        IL_001a:  ldarg.1
        IL_001b:  add
        IL_001c:  stfld      float64 Program/'<>c__DisplayClass1b'::sum
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
        IL_0021:  leave.s    IL_0033

      }  // end .try
      finally
      {
        IL_0023:  ldloc.0
        IL_0024:  ldc.i4.0
        IL_0025:  ceq
        IL_0027:  stloc.2
        IL_0028:  ldloc.2
        IL_0029:  brtrue.s   IL_0032

        IL_002b:  ldloc.1
        IL_002c:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
        IL_0031:  nop
        IL_0032:  endfinally
      }  // end handler
      IL_0033:  nop
      IL_0034:  ret
    } // end of method '<>c__DisplayClass1b'::'<ParallelPi>b__19'

  } // end of class '<>c__DisplayClass1b'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass22'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public float64 sum
    .field public float64 step
    .field public object monitor
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass22'::.ctor

    .method public hidebysig instance float64 
            '<ParallelPartitionerPi>b__1f'(class [mscorlib]System.Tuple`2<int32,int32> range,
                                           class [mscorlib]System.Threading.Tasks.ParallelLoopState state,
                                           float64 local) cil managed
    {
      // Code size       82 (0x52)
      .maxstack  5
      .locals init ([0] int32 i,
               [1] float64 x,
               [2] float64 CS$1$0000,
               [3] bool CS$4$0001)
//000095:         {
      IL_0000:  nop
//000096:             for (int i = range.Item1; i < range.Item2; i++)
      IL_0001:  ldarg.1
      IL_0002:  callvirt   instance !0 class [mscorlib]System.Tuple`2<int32,int32>::get_Item1()
      IL_0007:  stloc.0
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
      IL_0008:  br.s       IL_003f

//000097:             {
      IL_000a:  nop
//000098:                 double x = (i + 0.5) * step;
      IL_000b:  ldloc.0
      IL_000c:  conv.r8
      IL_000d:  ldc.r8     0.5
      IL_0016:  add
      IL_0017:  ldarg.0
      IL_0018:  ldfld      float64 Program/'<>c__DisplayClass22'::step
      IL_001d:  mul
      IL_001e:  stloc.1
//000099:                 local += 4.0 / (1.0 + x * x);
      IL_001f:  ldarg.3
      IL_0020:  ldc.r8     4.
      IL_0029:  ldc.r8     1.
      IL_0032:  ldloc.1
      IL_0033:  ldloc.1
      IL_0034:  mul
      IL_0035:  add
      IL_0036:  div
      IL_0037:  add
      IL_0038:  starg.s    local
//000100:             }
      IL_003a:  nop
//000096:             for (int i = range.Item1; i < range.Item2; i++)
      IL_003b:  ldloc.0
      IL_003c:  ldc.i4.1
      IL_003d:  add
      IL_003e:  stloc.0
      IL_003f:  ldloc.0
      IL_0040:  ldarg.1
      IL_0041:  callvirt   instance !1 class [mscorlib]System.Tuple`2<int32,int32>::get_Item2()
      IL_0046:  clt
      IL_0048:  stloc.3
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
      IL_0049:  ldloc.3
      IL_004a:  brtrue.s   IL_000a

//000101:             return local;
      IL_004c:  ldarg.3
      IL_004d:  stloc.2
      IL_004e:  br.s       IL_0050

//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
      IL_0050:  ldloc.2
      IL_0051:  ret
    } // end of method '<>c__DisplayClass22'::'<ParallelPartitionerPi>b__1f'

    .method public hidebysig instance void 
            '<ParallelPartitionerPi>b__20'(float64 local) cil managed
    {
      // Code size       53 (0x35)
      .maxstack  3
      .locals init ([0] bool '<>s__LockTaken1d',
               [1] object CS$2$0000,
               [2] bool CS$4$0001)
//000102:         }, local => { lock (monitor) sum += local; });
      IL_0000:  nop
//000103:         return step * sum;
//000104:     }
//000105: }
      IL_0001:  ldc.i4.0
      IL_0002:  stloc.0
//000102:         }, local => { lock (monitor) sum += local; });
      .try
      {
        IL_0003:  ldarg.0
        IL_0004:  ldfld      object Program/'<>c__DisplayClass22'::monitor
        IL_0009:  dup
        IL_000a:  stloc.1
        IL_000b:  ldloca.s   '<>s__LockTaken1d'
        IL_000d:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                            bool&)
        IL_0012:  nop
        IL_0013:  ldarg.0
        IL_0014:  dup
        IL_0015:  ldfld      float64 Program/'<>c__DisplayClass22'::sum
        IL_001a:  ldarg.1
        IL_001b:  add
        IL_001c:  stfld      float64 Program/'<>c__DisplayClass22'::sum
//000103:         return step * sum;
//000104:     }
//000105: }
        IL_0021:  leave.s    IL_0033

      }  // end .try
      finally
      {
        IL_0023:  ldloc.0
        IL_0024:  ldc.i4.0
        IL_0025:  ceq
        IL_0027:  stloc.2
        IL_0028:  ldloc.2
        IL_0029:  brtrue.s   IL_0032

        IL_002b:  ldloc.1
        IL_002c:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
        IL_0031:  nop
        IL_0032:  endfinally
      }  // end handler
      IL_0033:  nop
      IL_0034:  ret
    } // end of method '<>c__DisplayClass22'::'<ParallelPartitionerPi>b__20'

  } // end of class '<>c__DisplayClass22'

  .field private static literal int32 num_steps = int32(0x05F5E100)
  .field private static class [mscorlib]System.Func`1<float64> 'CS$<>9__CachedAnonymousMethodDelegate5'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`1<float64> 'CS$<>9__CachedAnonymousMethodDelegate6'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`1<float64> 'CS$<>9__CachedAnonymousMethodDelegate7'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`1<float64> 'CS$<>9__CachedAnonymousMethodDelegate8'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`1<float64> 'CS$<>9__CachedAnonymousMethodDelegate9'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64> 'CS$<>9__CachedAnonymousMethodDelegated'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64> 'CS$<>9__CachedAnonymousMethodDelegate13'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`1<float64> 'CS$<>9__CachedAnonymousMethodDelegate1a'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Func`1<float64> 'CS$<>9__CachedAnonymousMethodDelegate21'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method private hidebysig static void  Main(string[] args) cil managed
  {
    .entrypoint
    // Code size       217 (0xd9)
    .maxstack  3
    .locals init ([0] bool CS$4$0000)
//000021:     {
    IL_0000:  nop
//000022:         while (true)
//000023:         {
//000024:             Time(() => SerialLinqPi());
//000025:             Time(() => ParallelLinqPi());
//000026:             Time(() => SerialPi());
//000027:             Time(() => ParallelPi());
//000028:             Time(() => ParallelPartitionerPi());
//000029: 
//000030:             Console.WriteLine("----");
//000031:             Console.ReadLine();
//000032:         }
//000033:     }
//000034: 
//000035:     /// <summary>Times the execution of a function and outputs both the elapsed time and the function's result.</summary>
//000036:     static void Time<T>(Func<T> work)
//000037:     {
//000038:         var sw = Stopwatch.StartNew();
//000039:         var result = work();
//000040:         Console.WriteLine(sw.Elapsed + ": " + result);
//000041:     }
//000042: 
//000043:     /// <summary>Estimates the value of PI using a LINQ-based implementation.</summary>
//000044:     static double SerialLinqPi()
//000045:     {
//000046:         double step = 1.0 / (double)num_steps;
//000047:         return (from i in Enumerable.Range(0, num_steps)
//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0001:  br         IL_00d2

//000023:         {
    IL_0006:  nop
//000024:             Time(() => SerialLinqPi());
    IL_0007:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate5'
    IL_000c:  brtrue.s   IL_0021

    IL_000e:  ldnull
    IL_000f:  ldftn      float64 Program::'<Main>b__0'()
    IL_0015:  newobj     instance void class [mscorlib]System.Func`1<float64>::.ctor(object,
                                                                                     native int)
    IL_001a:  stsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate5'
    IL_001f:  br.s       IL_0021

    IL_0021:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate5'
    IL_0026:  call       void Program::Time<float64>(class [mscorlib]System.Func`1<!!0>)
    IL_002b:  nop
//000025:             Time(() => ParallelLinqPi());
    IL_002c:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate6'
    IL_0031:  brtrue.s   IL_0046

    IL_0033:  ldnull
    IL_0034:  ldftn      float64 Program::'<Main>b__1'()
    IL_003a:  newobj     instance void class [mscorlib]System.Func`1<float64>::.ctor(object,
                                                                                     native int)
    IL_003f:  stsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate6'
    IL_0044:  br.s       IL_0046

    IL_0046:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate6'
    IL_004b:  call       void Program::Time<float64>(class [mscorlib]System.Func`1<!!0>)
    IL_0050:  nop
//000026:             Time(() => SerialPi());
    IL_0051:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate7'
    IL_0056:  brtrue.s   IL_006b

    IL_0058:  ldnull
    IL_0059:  ldftn      float64 Program::'<Main>b__2'()
    IL_005f:  newobj     instance void class [mscorlib]System.Func`1<float64>::.ctor(object,
                                                                                     native int)
    IL_0064:  stsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate7'
    IL_0069:  br.s       IL_006b

    IL_006b:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate7'
    IL_0070:  call       void Program::Time<float64>(class [mscorlib]System.Func`1<!!0>)
    IL_0075:  nop
//000027:             Time(() => ParallelPi());
    IL_0076:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate8'
    IL_007b:  brtrue.s   IL_0090

    IL_007d:  ldnull
    IL_007e:  ldftn      float64 Program::'<Main>b__3'()
    IL_0084:  newobj     instance void class [mscorlib]System.Func`1<float64>::.ctor(object,
                                                                                     native int)
    IL_0089:  stsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate8'
    IL_008e:  br.s       IL_0090

    IL_0090:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate8'
    IL_0095:  call       void Program::Time<float64>(class [mscorlib]System.Func`1<!!0>)
    IL_009a:  nop
//000028:             Time(() => ParallelPartitionerPi());
    IL_009b:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate9'
    IL_00a0:  brtrue.s   IL_00b5

    IL_00a2:  ldnull
    IL_00a3:  ldftn      float64 Program::'<Main>b__4'()
    IL_00a9:  newobj     instance void class [mscorlib]System.Func`1<float64>::.ctor(object,
                                                                                     native int)
    IL_00ae:  stsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate9'
    IL_00b3:  br.s       IL_00b5

    IL_00b5:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate9'
    IL_00ba:  call       void Program::Time<float64>(class [mscorlib]System.Func`1<!!0>)
    IL_00bf:  nop
//000029: 
//000030:             Console.WriteLine("----");
    IL_00c0:  ldstr      "----"
    IL_00c5:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_00ca:  nop
//000031:             Console.ReadLine();
    IL_00cb:  call       string [mscorlib]System.Console::ReadLine()
    IL_00d0:  pop
//000032:         }
    IL_00d1:  nop
//000022:         while (true)
    IL_00d2:  ldc.i4.1
    IL_00d3:  stloc.0
//000023:         {
//000024:             Time(() => SerialLinqPi());
//000025:             Time(() => ParallelLinqPi());
//000026:             Time(() => SerialPi());
//000027:             Time(() => ParallelPi());
//000028:             Time(() => ParallelPartitionerPi());
//000029: 
//000030:             Console.WriteLine("----");
//000031:             Console.ReadLine();
//000032:         }
//000033:     }
//000034: 
//000035:     /// <summary>Times the execution of a function and outputs both the elapsed time and the function's result.</summary>
//000036:     static void Time<T>(Func<T> work)
//000037:     {
//000038:         var sw = Stopwatch.StartNew();
//000039:         var result = work();
//000040:         Console.WriteLine(sw.Elapsed + ": " + result);
//000041:     }
//000042: 
//000043:     /// <summary>Estimates the value of PI using a LINQ-based implementation.</summary>
//000044:     static double SerialLinqPi()
//000045:     {
//000046:         double step = 1.0 / (double)num_steps;
//000047:         return (from i in Enumerable.Range(0, num_steps)
//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_00d4:  br         IL_0006
  } // end of method Program::Main

  .method private hidebysig static void  Time<T>(class [mscorlib]System.Func`1<!!T> work) cil managed
  {
    // Code size       48 (0x30)
    .maxstack  3
    .locals init ([0] class [System]System.Diagnostics.Stopwatch sw,
             [1] !!T result)
//000037:     {
    IL_0000:  nop
//000038:         var sw = Stopwatch.StartNew();
    IL_0001:  call       class [System]System.Diagnostics.Stopwatch [System]System.Diagnostics.Stopwatch::StartNew()
    IL_0006:  stloc.0
//000039:         var result = work();
    IL_0007:  ldarg.0
    IL_0008:  callvirt   instance !0 class [mscorlib]System.Func`1<!!T>::Invoke()
    IL_000d:  stloc.1
//000040:         Console.WriteLine(sw.Elapsed + ": " + result);
    IL_000e:  ldloc.0
    IL_000f:  callvirt   instance valuetype [mscorlib]System.TimeSpan [System]System.Diagnostics.Stopwatch::get_Elapsed()
    IL_0014:  box        [mscorlib]System.TimeSpan
    IL_0019:  ldstr      ": "
    IL_001e:  ldloc.1
    IL_001f:  box        !!T
    IL_0024:  call       string [mscorlib]System.String::Concat(object,
                                                                object,
                                                                object)
    IL_0029:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_002e:  nop
//000041:     }
    IL_002f:  ret
  } // end of method Program::Time

  .method private hidebysig static float64 
          SerialLinqPi() cil managed
  {
    // Code size       103 (0x67)
    .maxstack  4
    .locals init ([0] class Program/'<>c__DisplayClasse' 'CS$<>8__localsf',
             [1] float64 CS$1$0000)
//000042: 
//000043:     /// <summary>Estimates the value of PI using a LINQ-based implementation.</summary>
//000044:     static double SerialLinqPi()
//000045:     {
//000046:         double step = 1.0 / (double)num_steps;
//000047:         return (from i in Enumerable.Range(0, num_steps)
//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0000:  newobj     instance void Program/'<>c__DisplayClasse'::.ctor()
    IL_0005:  stloc.0
//000045:     {
    IL_0006:  nop
//000046:         double step = 1.0 / (double)num_steps;
    IL_0007:  ldloc.0
    IL_0008:  ldc.r8     1.e-008
    IL_0011:  stfld      float64 Program/'<>c__DisplayClasse'::step
//000047:         return (from i in Enumerable.Range(0, num_steps)
    IL_0016:  ldc.i4.0
    IL_0017:  ldc.i4     0x5f5e100
    IL_001c:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_0021:  ldloc.0
    IL_0022:  ldftn      instance class '<>f__AnonymousType0`2'<int32,float64> Program/'<>c__DisplayClasse'::'<SerialLinqPi>b__b'(int32)
    IL_0028:  newobj     instance void class [mscorlib]System.Func`2<int32,class '<>f__AnonymousType0`2'<int32,float64>>::.ctor(object,
                                                                                                                                native int)
    IL_002d:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<int32,class '<>f__AnonymousType0`2'<int32,float64>>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                       class [mscorlib]System.Func`2<!!0,!!1>)
    IL_0032:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64> Program::'CS$<>9__CachedAnonymousMethodDelegated'
    IL_0037:  brtrue.s   IL_004c

    IL_0039:  ldnull
    IL_003a:  ldftn      float64 Program::'<SerialLinqPi>b__c'(class '<>f__AnonymousType0`2'<int32,float64>)
    IL_0040:  newobj     instance void class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64>::.ctor(object,
                                                                                                                                  native int)
    IL_0045:  stsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64> Program::'CS$<>9__CachedAnonymousMethodDelegated'
    IL_004a:  br.s       IL_004c

    IL_004c:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64> Program::'CS$<>9__CachedAnonymousMethodDelegated'
    IL_0051:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<class '<>f__AnonymousType0`2'<int32,float64>,float64>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                         class [mscorlib]System.Func`2<!!0,!!1>)
    IL_0056:  call       float64 [System.Core]System.Linq.Enumerable::Sum(class [mscorlib]System.Collections.Generic.IEnumerable`1<float64>)
    IL_005b:  ldloc.0
    IL_005c:  ldfld      float64 Program/'<>c__DisplayClasse'::step
    IL_0061:  mul
    IL_0062:  stloc.1
    IL_0063:  br.s       IL_0065

//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
    IL_0065:  ldloc.1
    IL_0066:  ret
  } // end of method Program::SerialLinqPi

  .method private hidebysig static float64 
          ParallelLinqPi() cil managed
  {
    // Code size       103 (0x67)
    .maxstack  4
    .locals init ([0] class Program/'<>c__DisplayClass14' 'CS$<>8__locals15',
             [1] float64 CS$1$0000)
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0000:  newobj     instance void Program/'<>c__DisplayClass14'::.ctor()
    IL_0005:  stloc.0
//000054:     {
    IL_0006:  nop
//000055:         double step = 1.0 / (double)num_steps;
    IL_0007:  ldloc.0
    IL_0008:  ldc.r8     1.e-008
    IL_0011:  stfld      float64 Program/'<>c__DisplayClass14'::step
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
    IL_0016:  ldc.i4.0
    IL_0017:  ldc.i4     0x5f5e100
    IL_001c:  call       class [System.Core]System.Linq.ParallelQuery`1<int32> [System.Core]System.Linq.ParallelEnumerable::Range(int32,
                                                                                                                                  int32)
    IL_0021:  ldloc.0
    IL_0022:  ldftn      instance class '<>f__AnonymousType0`2'<int32,float64> Program/'<>c__DisplayClass14'::'<ParallelLinqPi>b__11'(int32)
    IL_0028:  newobj     instance void class [mscorlib]System.Func`2<int32,class '<>f__AnonymousType0`2'<int32,float64>>::.ctor(object,
                                                                                                                                native int)
    IL_002d:  call       class [System.Core]System.Linq.ParallelQuery`1<!!1> [System.Core]System.Linq.ParallelEnumerable::Select<int32,class '<>f__AnonymousType0`2'<int32,float64>>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                                                     class [mscorlib]System.Func`2<!!0,!!1>)
    IL_0032:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64> Program::'CS$<>9__CachedAnonymousMethodDelegate13'
    IL_0037:  brtrue.s   IL_004c

    IL_0039:  ldnull
    IL_003a:  ldftn      float64 Program::'<ParallelLinqPi>b__12'(class '<>f__AnonymousType0`2'<int32,float64>)
    IL_0040:  newobj     instance void class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64>::.ctor(object,
                                                                                                                                  native int)
    IL_0045:  stsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64> Program::'CS$<>9__CachedAnonymousMethodDelegate13'
    IL_004a:  br.s       IL_004c

    IL_004c:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<int32,float64>,float64> Program::'CS$<>9__CachedAnonymousMethodDelegate13'
    IL_0051:  call       class [System.Core]System.Linq.ParallelQuery`1<!!1> [System.Core]System.Linq.ParallelEnumerable::Select<class '<>f__AnonymousType0`2'<int32,float64>,float64>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                                                       class [mscorlib]System.Func`2<!!0,!!1>)
    IL_0056:  call       float64 [System.Core]System.Linq.ParallelEnumerable::Sum(class [System.Core]System.Linq.ParallelQuery`1<float64>)
    IL_005b:  ldloc.0
    IL_005c:  ldfld      float64 Program/'<>c__DisplayClass14'::step
    IL_0061:  mul
    IL_0062:  stloc.1
    IL_0063:  br.s       IL_0065

//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
    IL_0065:  ldloc.1
    IL_0066:  ret
  } // end of method Program::ParallelLinqPi

  .method private hidebysig static float64 
          SerialPi() cil managed
  {
    // Code size       96 (0x60)
    .maxstack  5
    .locals init ([0] float64 sum,
             [1] float64 step,
             [2] int32 i,
             [3] float64 x,
             [4] float64 CS$1$0000,
             [5] bool CS$4$0001)
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
    IL_0000:  nop
//000064:         double sum = 0.0;
    IL_0001:  ldc.r8     0.0
    IL_000a:  stloc.0
//000065:         double step = 1.0 / (double)num_steps;
    IL_000b:  ldc.r8     1.e-008
    IL_0014:  stloc.1
//000066:         for (int i = 0; i < num_steps; i++)
    IL_0015:  ldc.i4.0
    IL_0016:  stloc.2
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0017:  br.s       IL_0048

//000067:         {
    IL_0019:  nop
//000068:             double x = (i + 0.5) * step;
    IL_001a:  ldloc.2
    IL_001b:  conv.r8
    IL_001c:  ldc.r8     0.5
    IL_0025:  add
    IL_0026:  ldloc.1
    IL_0027:  mul
    IL_0028:  stloc.3
//000069:             sum = sum + 4.0 / (1.0 + x * x);
    IL_0029:  ldloc.0
    IL_002a:  ldc.r8     4.
    IL_0033:  ldc.r8     1.
    IL_003c:  ldloc.3
    IL_003d:  ldloc.3
    IL_003e:  mul
    IL_003f:  add
    IL_0040:  div
    IL_0041:  add
    IL_0042:  stloc.0
//000070:         }
    IL_0043:  nop
//000066:         for (int i = 0; i < num_steps; i++)
    IL_0044:  ldloc.2
    IL_0045:  ldc.i4.1
    IL_0046:  add
    IL_0047:  stloc.2
    IL_0048:  ldloc.2
    IL_0049:  ldc.i4     0x5f5e100
    IL_004e:  clt
    IL_0050:  stloc.s    CS$4$0001
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0052:  ldloc.s    CS$4$0001
    IL_0054:  brtrue.s   IL_0019

//000071:         return step * sum;
    IL_0056:  ldloc.1
    IL_0057:  ldloc.0
    IL_0058:  mul
    IL_0059:  stloc.s    CS$1$0000
    IL_005b:  br.s       IL_005d

//000072:     }
    IL_005d:  ldloc.s    CS$1$0000
    IL_005f:  ret
  } // end of method Program::SerialPi

  .method private hidebysig static float64 
          ParallelPi() cil managed
  {
    // Code size       133 (0x85)
    .maxstack  7
    .locals init ([0] class Program/'<>c__DisplayClass1b' 'CS$<>8__locals1c',
             [1] float64 CS$1$0000)
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0000:  newobj     instance void Program/'<>c__DisplayClass1b'::.ctor()
    IL_0005:  stloc.0
//000076:     {
    IL_0006:  nop
//000077:         double sum = 0.0;
    IL_0007:  ldloc.0
    IL_0008:  ldc.r8     0.0
    IL_0011:  stfld      float64 Program/'<>c__DisplayClass1b'::sum
//000078:         double step = 1.0 / (double)num_steps;
    IL_0016:  ldloc.0
    IL_0017:  ldc.r8     1.e-008
    IL_0020:  stfld      float64 Program/'<>c__DisplayClass1b'::step
//000079:         object monitor = new object();
    IL_0025:  ldloc.0
    IL_0026:  newobj     instance void [mscorlib]System.Object::.ctor()
    IL_002b:  stfld      object Program/'<>c__DisplayClass1b'::monitor
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
    IL_0030:  ldc.i4.0
    IL_0031:  ldc.i4     0x5f5e100
    IL_0036:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate1a'
    IL_003b:  brtrue.s   IL_0050

    IL_003d:  ldnull
    IL_003e:  ldftn      float64 Program::'<ParallelPi>b__17'()
    IL_0044:  newobj     instance void class [mscorlib]System.Func`1<float64>::.ctor(object,
                                                                                     native int)
    IL_0049:  stsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate1a'
    IL_004e:  br.s       IL_0050

    IL_0050:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate1a'
    IL_0055:  ldloc.0
    IL_0056:  ldftn      instance float64 Program/'<>c__DisplayClass1b'::'<ParallelPi>b__18'(int32,
                                                                                             class [mscorlib]System.Threading.Tasks.ParallelLoopState,
                                                                                             float64)
    IL_005c:  newobj     instance void class [mscorlib]System.Func`4<int32,class [mscorlib]System.Threading.Tasks.ParallelLoopState,float64,float64>::.ctor(object,
                                                                                                                                                            native int)
    IL_0061:  ldloc.0
    IL_0062:  ldftn      instance void Program/'<>c__DisplayClass1b'::'<ParallelPi>b__19'(float64)
    IL_0068:  newobj     instance void class [mscorlib]System.Action`1<float64>::.ctor(object,
                                                                                       native int)
    IL_006d:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::For<float64>(int32,
                                                                                                                                               int32,
                                                                                                                                               class [mscorlib]System.Func`1<!!0>,
                                                                                                                                               class [mscorlib]System.Func`4<int32,class [mscorlib]System.Threading.Tasks.ParallelLoopState,!!0,!!0>,
                                                                                                                                               class [mscorlib]System.Action`1<!!0>)
    IL_0072:  pop
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
    IL_0073:  ldloc.0
    IL_0074:  ldfld      float64 Program/'<>c__DisplayClass1b'::step
    IL_0079:  ldloc.0
    IL_007a:  ldfld      float64 Program/'<>c__DisplayClass1b'::sum
    IL_007f:  mul
    IL_0080:  stloc.1
    IL_0081:  br.s       IL_0083

//000086:     }
    IL_0083:  ldloc.1
    IL_0084:  ret
  } // end of method Program::ParallelPi

  .method private hidebysig static float64 
          ParallelPartitionerPi() cil managed
  {
    // Code size       138 (0x8a)
    .maxstack  6
    .locals init ([0] class Program/'<>c__DisplayClass22' 'CS$<>8__locals23',
             [1] float64 CS$1$0000)
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0000:  newobj     instance void Program/'<>c__DisplayClass22'::.ctor()
    IL_0005:  stloc.0
//000090:     {
    IL_0006:  nop
//000091:         double sum = 0.0;
    IL_0007:  ldloc.0
    IL_0008:  ldc.r8     0.0
    IL_0011:  stfld      float64 Program/'<>c__DisplayClass22'::sum
//000092:         double step = 1.0 / (double)num_steps;
    IL_0016:  ldloc.0
    IL_0017:  ldc.r8     1.e-008
    IL_0020:  stfld      float64 Program/'<>c__DisplayClass22'::step
//000093:         object monitor = new object();
    IL_0025:  ldloc.0
    IL_0026:  newobj     instance void [mscorlib]System.Object::.ctor()
    IL_002b:  stfld      object Program/'<>c__DisplayClass22'::monitor
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
    IL_0030:  ldc.i4.0
    IL_0031:  ldc.i4     0x5f5e100
    IL_0036:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<class [mscorlib]System.Tuple`2<int32,int32>> [mscorlib]System.Collections.Concurrent.Partitioner::Create(int32,
                                                                                                                                                                                                       int32)
    IL_003b:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate21'
    IL_0040:  brtrue.s   IL_0055

    IL_0042:  ldnull
    IL_0043:  ldftn      float64 Program::'<ParallelPartitionerPi>b__1e'()
    IL_0049:  newobj     instance void class [mscorlib]System.Func`1<float64>::.ctor(object,
                                                                                     native int)
    IL_004e:  stsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate21'
    IL_0053:  br.s       IL_0055

    IL_0055:  ldsfld     class [mscorlib]System.Func`1<float64> Program::'CS$<>9__CachedAnonymousMethodDelegate21'
    IL_005a:  ldloc.0
    IL_005b:  ldftn      instance float64 Program/'<>c__DisplayClass22'::'<ParallelPartitionerPi>b__1f'(class [mscorlib]System.Tuple`2<int32,int32>,
                                                                                                        class [mscorlib]System.Threading.Tasks.ParallelLoopState,
                                                                                                        float64)
    IL_0061:  newobj     instance void class [mscorlib]System.Func`4<class [mscorlib]System.Tuple`2<int32,int32>,class [mscorlib]System.Threading.Tasks.ParallelLoopState,float64,float64>::.ctor(object,
                                                                                                                                                                                                  native int)
    IL_0066:  ldloc.0
    IL_0067:  ldftn      instance void Program/'<>c__DisplayClass22'::'<ParallelPartitionerPi>b__20'(float64)
    IL_006d:  newobj     instance void class [mscorlib]System.Action`1<float64>::.ctor(object,
                                                                                       native int)
    IL_0072:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::ForEach<class [mscorlib]System.Tuple`2<int32,int32>,float64>(class [mscorlib]System.Collections.Concurrent.Partitioner`1<!!0>,
                                                                                                                                                                                               class [mscorlib]System.Func`1<!!1>,
                                                                                                                                                                                               class [mscorlib]System.Func`4<!!0,class [mscorlib]System.Threading.Tasks.ParallelLoopState,!!1,!!1>,
                                                                                                                                                                                               class [mscorlib]System.Action`1<!!1>)
    IL_0077:  pop
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
    IL_0078:  ldloc.0
    IL_0079:  ldfld      float64 Program/'<>c__DisplayClass22'::step
    IL_007e:  ldloc.0
    IL_007f:  ldfld      float64 Program/'<>c__DisplayClass22'::sum
    IL_0084:  mul
    IL_0085:  stloc.1
    IL_0086:  br.s       IL_0088

//000104:     }
    IL_0088:  ldloc.1
    IL_0089:  ret
  } // end of method Program::ParallelPartitionerPi

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  ret
  } // end of method Program::.ctor

  .method private hidebysig static float64 
          '<Main>b__0'() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000024:             Time(() => SerialLinqPi());
    IL_0000:  call       float64 Program::SerialLinqPi()
    IL_0005:  stloc.0
    IL_0006:  br.s       IL_0008

//000025:             Time(() => ParallelLinqPi());
//000026:             Time(() => SerialPi());
//000027:             Time(() => ParallelPi());
//000028:             Time(() => ParallelPartitionerPi());
//000029: 
//000030:             Console.WriteLine("----");
//000031:             Console.ReadLine();
//000032:         }
//000033:     }
//000034: 
//000035:     /// <summary>Times the execution of a function and outputs both the elapsed time and the function's result.</summary>
//000036:     static void Time<T>(Func<T> work)
//000037:     {
//000038:         var sw = Stopwatch.StartNew();
//000039:         var result = work();
//000040:         Console.WriteLine(sw.Elapsed + ": " + result);
//000041:     }
//000042: 
//000043:     /// <summary>Estimates the value of PI using a LINQ-based implementation.</summary>
//000044:     static double SerialLinqPi()
//000045:     {
//000046:         double step = 1.0 / (double)num_steps;
//000047:         return (from i in Enumerable.Range(0, num_steps)
//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0008:  ldloc.0
    IL_0009:  ret
  } // end of method Program::'<Main>b__0'

  .method private hidebysig static float64 
          '<Main>b__1'() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000025:             Time(() => ParallelLinqPi());
    IL_0000:  call       float64 Program::ParallelLinqPi()
    IL_0005:  stloc.0
    IL_0006:  br.s       IL_0008

//000026:             Time(() => SerialPi());
//000027:             Time(() => ParallelPi());
//000028:             Time(() => ParallelPartitionerPi());
//000029: 
//000030:             Console.WriteLine("----");
//000031:             Console.ReadLine();
//000032:         }
//000033:     }
//000034: 
//000035:     /// <summary>Times the execution of a function and outputs both the elapsed time and the function's result.</summary>
//000036:     static void Time<T>(Func<T> work)
//000037:     {
//000038:         var sw = Stopwatch.StartNew();
//000039:         var result = work();
//000040:         Console.WriteLine(sw.Elapsed + ": " + result);
//000041:     }
//000042: 
//000043:     /// <summary>Estimates the value of PI using a LINQ-based implementation.</summary>
//000044:     static double SerialLinqPi()
//000045:     {
//000046:         double step = 1.0 / (double)num_steps;
//000047:         return (from i in Enumerable.Range(0, num_steps)
//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0008:  ldloc.0
    IL_0009:  ret
  } // end of method Program::'<Main>b__1'

  .method private hidebysig static float64 
          '<Main>b__2'() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000026:             Time(() => SerialPi());
    IL_0000:  call       float64 Program::SerialPi()
    IL_0005:  stloc.0
    IL_0006:  br.s       IL_0008

//000027:             Time(() => ParallelPi());
//000028:             Time(() => ParallelPartitionerPi());
//000029: 
//000030:             Console.WriteLine("----");
//000031:             Console.ReadLine();
//000032:         }
//000033:     }
//000034: 
//000035:     /// <summary>Times the execution of a function and outputs both the elapsed time and the function's result.</summary>
//000036:     static void Time<T>(Func<T> work)
//000037:     {
//000038:         var sw = Stopwatch.StartNew();
//000039:         var result = work();
//000040:         Console.WriteLine(sw.Elapsed + ": " + result);
//000041:     }
//000042: 
//000043:     /// <summary>Estimates the value of PI using a LINQ-based implementation.</summary>
//000044:     static double SerialLinqPi()
//000045:     {
//000046:         double step = 1.0 / (double)num_steps;
//000047:         return (from i in Enumerable.Range(0, num_steps)
//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0008:  ldloc.0
    IL_0009:  ret
  } // end of method Program::'<Main>b__2'

  .method private hidebysig static float64 
          '<Main>b__3'() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000027:             Time(() => ParallelPi());
    IL_0000:  call       float64 Program::ParallelPi()
    IL_0005:  stloc.0
    IL_0006:  br.s       IL_0008

//000028:             Time(() => ParallelPartitionerPi());
//000029: 
//000030:             Console.WriteLine("----");
//000031:             Console.ReadLine();
//000032:         }
//000033:     }
//000034: 
//000035:     /// <summary>Times the execution of a function and outputs both the elapsed time and the function's result.</summary>
//000036:     static void Time<T>(Func<T> work)
//000037:     {
//000038:         var sw = Stopwatch.StartNew();
//000039:         var result = work();
//000040:         Console.WriteLine(sw.Elapsed + ": " + result);
//000041:     }
//000042: 
//000043:     /// <summary>Estimates the value of PI using a LINQ-based implementation.</summary>
//000044:     static double SerialLinqPi()
//000045:     {
//000046:         double step = 1.0 / (double)num_steps;
//000047:         return (from i in Enumerable.Range(0, num_steps)
//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0008:  ldloc.0
    IL_0009:  ret
  } // end of method Program::'<Main>b__3'

  .method private hidebysig static float64 
          '<Main>b__4'() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000028:             Time(() => ParallelPartitionerPi());
    IL_0000:  call       float64 Program::ParallelPartitionerPi()
    IL_0005:  stloc.0
    IL_0006:  br.s       IL_0008

//000029: 
//000030:             Console.WriteLine("----");
//000031:             Console.ReadLine();
//000032:         }
//000033:     }
//000034: 
//000035:     /// <summary>Times the execution of a function and outputs both the elapsed time and the function's result.</summary>
//000036:     static void Time<T>(Func<T> work)
//000037:     {
//000038:         var sw = Stopwatch.StartNew();
//000039:         var result = work();
//000040:         Console.WriteLine(sw.Elapsed + ": " + result);
//000041:     }
//000042: 
//000043:     /// <summary>Estimates the value of PI using a LINQ-based implementation.</summary>
//000044:     static double SerialLinqPi()
//000045:     {
//000046:         double step = 1.0 / (double)num_steps;
//000047:         return (from i in Enumerable.Range(0, num_steps)
//000048:                 let x = (i + 0.5) * step
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0008:  ldloc.0
    IL_0009:  ret
  } // end of method Program::'<Main>b__4'

  .method private hidebysig static float64 
          '<SerialLinqPi>b__c'(class '<>f__AnonymousType0`2'<int32,float64> '<>h__TransparentIdentifiera') cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       38 (0x26)
    .maxstack  4
    .locals init ([0] float64 CS$1$0000)
//000049:                 select 4.0 / (1.0 + x * x)).Sum() * step;
    IL_0000:  ldc.r8     4.
    IL_0009:  ldc.r8     1.
    IL_0012:  ldarg.0
    IL_0013:  callvirt   instance !1 class '<>f__AnonymousType0`2'<int32,float64>::get_x()
    IL_0018:  ldarg.0
    IL_0019:  callvirt   instance !1 class '<>f__AnonymousType0`2'<int32,float64>::get_x()
    IL_001e:  mul
    IL_001f:  add
    IL_0020:  div
    IL_0021:  stloc.0
    IL_0022:  br.s       IL_0024

//000050:     }
//000051: 
//000052:     /// <summary>Estimates the value of PI using a PLINQ-based implementation.</summary>
//000053:     static double ParallelLinqPi()
//000054:     {
//000055:         double step = 1.0 / (double)num_steps;
//000056:         return (from i in ParallelEnumerable.Range(0, num_steps)
//000057:                 let x = (i + 0.5) * step
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0024:  ldloc.0
    IL_0025:  ret
  } // end of method Program::'<SerialLinqPi>b__c'

  .method private hidebysig static float64 
          '<ParallelLinqPi>b__12'(class '<>f__AnonymousType0`2'<int32,float64> '<>h__TransparentIdentifier10') cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       38 (0x26)
    .maxstack  4
    .locals init ([0] float64 CS$1$0000)
//000058:                 select 4.0 / (1.0 + x * x)).Sum() * step;
    IL_0000:  ldc.r8     4.
    IL_0009:  ldc.r8     1.
    IL_0012:  ldarg.0
    IL_0013:  callvirt   instance !1 class '<>f__AnonymousType0`2'<int32,float64>::get_x()
    IL_0018:  ldarg.0
    IL_0019:  callvirt   instance !1 class '<>f__AnonymousType0`2'<int32,float64>::get_x()
    IL_001e:  mul
    IL_001f:  add
    IL_0020:  div
    IL_0021:  stloc.0
    IL_0022:  br.s       IL_0024

//000059:     }
//000060: 
//000061:     /// <summary>Estimates the value of PI using a for loop.</summary>
//000062:     static double SerialPi()
//000063:     {
//000064:         double sum = 0.0;
//000065:         double step = 1.0 / (double)num_steps;
//000066:         for (int i = 0; i < num_steps; i++)
//000067:         {
//000068:             double x = (i + 0.5) * step;
//000069:             sum = sum + 4.0 / (1.0 + x * x);
//000070:         }
//000071:         return step * sum;
//000072:     }
//000073: 
//000074:     /// <summary>Estimates the value of PI using a Parallel.For.</summary>
//000075:     static double ParallelPi()
//000076:     {
//000077:         double sum = 0.0;
//000078:         double step = 1.0 / (double)num_steps;
//000079:         object monitor = new object();
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_0024:  ldloc.0
    IL_0025:  ret
  } // end of method Program::'<ParallelLinqPi>b__12'

  .method private hidebysig static float64 
          '<ParallelPi>b__17'() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       14 (0xe)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000080:         Parallel.For(0, num_steps, () => 0.0, (i, state, local) =>
    IL_0000:  ldc.r8     0.0
    IL_0009:  stloc.0
    IL_000a:  br.s       IL_000c

//000081:         {
//000082:             double x = (i + 0.5) * step;
//000083:             return local + 4.0 / (1.0 + x * x);
//000084:         }, local => { lock (monitor) sum += local; });
//000085:         return step * sum;
//000086:     }
//000087: 
//000088:     /// <summary>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</summary>
//000089:     static double ParallelPartitionerPi()
//000090:     {
//000091:         double sum = 0.0;
//000092:         double step = 1.0 / (double)num_steps;
//000093:         object monitor = new object();
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_000c:  ldloc.0
    IL_000d:  ret
  } // end of method Program::'<ParallelPi>b__17'

  .method private hidebysig static float64 
          '<ParallelPartitionerPi>b__1e'() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       14 (0xe)
    .maxstack  1
    .locals init ([0] float64 CS$1$0000)
//000094:         Parallel.ForEach(Partitioner.Create(0, num_steps), () => 0.0, (range, state, local) =>
    IL_0000:  ldc.r8     0.0
    IL_0009:  stloc.0
    IL_000a:  br.s       IL_000c

//000095:         {
//000096:             for (int i = range.Item1; i < range.Item2; i++)
//000097:             {
//000098:                 double x = (i + 0.5) * step;
//000099:                 local += 4.0 / (1.0 + x * x);
//000100:             }
//000101:             return local;
//000102:         }, local => { lock (monitor) sum += local; });
//000103:         return step * sum;
//000104:     }
//000105: }
    IL_000c:  ldloc.0
    IL_000d:  ret
  } // end of method Program::'<ParallelPartitionerPi>b__1e'

} // end of class Program

.class private auto ansi sealed beforefieldinit '<>f__AnonymousType0`2'<'<i>j__TPar','<x>j__TPar'>
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 15 5C 7B 20 69 20 3D 20 7B 69 7D 2C 20 78   // ...\{ i = {i}, x
                                                                                                 20 3D 20 7B 78 7D 20 7D 01 00 54 0E 04 54 79 70   //  = {x} }..T..Typ
                                                                                                 65 10 3C 41 6E 6F 6E 79 6D 6F 75 73 20 54 79 70   // e.<Anonymous Typ
                                                                                                 65 3E )                                           // e>
  .field private initonly !'<i>j__TPar' '<i>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field private initonly !'<x>j__TPar' '<x>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(!'<i>j__TPar' i,
                               !'<x>j__TPar' x) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       21 (0x15)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  ldarg.0
    IL_0007:  ldarg.1
    IL_0008:  stfld      !0 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<i>i__Field'
    IL_000d:  ldarg.0
    IL_000e:  ldarg.2
    IL_000f:  stfld      !1 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<x>i__Field'
    IL_0014:  ret
  } // end of method '<>f__AnonymousType0`2'::.ctor

  .method public hidebysig specialname instance !'<i>j__TPar' 
          get_i() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<i>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<i>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType0`2'::get_i

  .method public hidebysig specialname instance !'<x>j__TPar' 
          get_x() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<x>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<x>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType0`2'::get_x

  .method public hidebysig virtual instance string 
          ToString() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       89 (0x59)
    .maxstack  2
    .locals init (class [mscorlib]System.Text.StringBuilder V_0,
             string V_1)
    IL_0000:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldstr      "{ i = "
    IL_000c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0011:  pop
    IL_0012:  ldloc.0
    IL_0013:  ldarg.0
    IL_0014:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<i>i__Field'
    IL_0019:  box        !'<i>j__TPar'
    IL_001e:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_0023:  pop
    IL_0024:  ldloc.0
    IL_0025:  ldstr      ", x = "
    IL_002a:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_002f:  pop
    IL_0030:  ldloc.0
    IL_0031:  ldarg.0
    IL_0032:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<x>i__Field'
    IL_0037:  box        !'<x>j__TPar'
    IL_003c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_0041:  pop
    IL_0042:  ldloc.0
    IL_0043:  ldstr      " }"
    IL_0048:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_004d:  pop
    IL_004e:  ldloc.0
    IL_004f:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0054:  stloc.1
    IL_0055:  br.s       IL_0057

    IL_0057:  ldloc.1
    IL_0058:  ret
  } // end of method '<>f__AnonymousType0`2'::ToString

  .method public hidebysig virtual instance bool 
          Equals(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       64 (0x40)
    .maxstack  3
    .locals init (class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'> V_0,
             bool V_1)
    IL_0000:  ldarg.1
    IL_0001:  isinst     class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  brfalse.s  IL_003a

    IL_000a:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<i>j__TPar'>::get_Default()
    IL_000f:  ldarg.0
    IL_0010:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<i>i__Field'
    IL_0015:  ldloc.0
    IL_0016:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<i>i__Field'
    IL_001b:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<i>j__TPar'>::Equals(!0,
                                                                                                                            !0)
    IL_0020:  brfalse.s  IL_003a

    IL_0022:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<x>j__TPar'>::get_Default()
    IL_0027:  ldarg.0
    IL_0028:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<x>i__Field'
    IL_002d:  ldloc.0
    IL_002e:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<x>i__Field'
    IL_0033:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<x>j__TPar'>::Equals(!0,
                                                                                                                            !0)
    IL_0038:  br.s       IL_003b

    IL_003a:  ldc.i4.0
    IL_003b:  stloc.1
    IL_003c:  br.s       IL_003e

    IL_003e:  ldloc.1
    IL_003f:  ret
  } // end of method '<>f__AnonymousType0`2'::Equals

  .method public hidebysig virtual instance int32 
          GetHashCode() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       62 (0x3e)
    .maxstack  3
    .locals init (int32 V_0,
             int32 V_1)
    IL_0000:  ldc.i4     0xbb113aec
    IL_0005:  stloc.0
    IL_0006:  ldc.i4     0xa5555529
    IL_000b:  ldloc.0
    IL_000c:  mul
    IL_000d:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<i>j__TPar'>::get_Default()
    IL_0012:  ldarg.0
    IL_0013:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<i>i__Field'
    IL_0018:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<i>j__TPar'>::GetHashCode(!0)
    IL_001d:  add
    IL_001e:  stloc.0
    IL_001f:  ldc.i4     0xa5555529
    IL_0024:  ldloc.0
    IL_0025:  mul
    IL_0026:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<x>j__TPar'>::get_Default()
    IL_002b:  ldarg.0
    IL_002c:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<i>j__TPar',!'<x>j__TPar'>::'<x>i__Field'
    IL_0031:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<x>j__TPar'>::GetHashCode(!0)
    IL_0036:  add
    IL_0037:  stloc.0
    IL_0038:  ldloc.0
    IL_0039:  stloc.1
    IL_003a:  br.s       IL_003c

    IL_003c:  ldloc.1
    IL_003d:  ret
  } // end of method '<>f__AnonymousType0`2'::GetHashCode

  .property instance !'<i>j__TPar' i()
  {
    .get instance !'<i>j__TPar' '<>f__AnonymousType0`2'::get_i()
  } // end of property '<>f__AnonymousType0`2'::i
  .property instance !'<x>j__TPar' x()
  {
    .get instance !'<x>j__TPar' '<>f__AnonymousType0`2'::get_x()
  } // end of property '<>f__AnonymousType0`2'::x
} // end of class '<>f__AnonymousType0`2'


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
