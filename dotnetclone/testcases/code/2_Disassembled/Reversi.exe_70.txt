
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern PresentationCore
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern PresentationFramework
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Xaml
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern WindowsBase
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly Reversi
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 07 52 65 76 65 72 73 69 00 00 )             // ...Reversi..
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 09 4D 69 63 72 6F 73 6F 66 74 00 00 )       // ...Microsoft..
  .custom instance void [PresentationFramework]System.Windows.ThemeInfoAttribute::.ctor(valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation,
                                                                                        valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation) = ( 01 00 00 00 00 00 01 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 07 52 65 76 65 72 73 69 00 00 )             // ...Reversi..
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 1B 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ...Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 32 30 30 39 00 00 ) // Microsoft 2009..
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public Reversi.g.resources
{
  // Offset: 0x00000000 Length: 0x00011475
}
.mresource public Reversi.Properties.Resources.resources
{
  // Offset: 0x00011480 Length: 0x000000B4
}
.module Reversi.exe
// MVID: {C0DF30B7-4245-4263-AE7F-F7704306302B}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x013D0000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi beforefieldinit Reversi.Properties.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
    .language '{3F5162F8-07C6-11D3-9053-00C04FA302A1}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Properties\Resources.Designer.cs' 
//000032:         [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000033:         internal Resources()
//000034:         {
    IL_0007:  nop
//000035:         }
    IL_0008:  nop
    IL_0009:  ret
  } // end of method Resources::.ctor

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       60 (0x3c)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager temp,
             [1] class [mscorlib]System.Resources.ResourceManager CS$1$0000,
             [2] bool CS$4$0001)
//000036: 
//000037:         /// <summary>
//000038:         ///   Returns the cached ResourceManager instance used by this class.
//000039:         /// </summary>
//000040:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000041:         internal static global::System.Resources.ResourceManager ResourceManager
//000042:         {
//000043:             get
//000044:             {
    IL_0000:  nop
//000045:                 if ((resourceMan == null))
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager Reversi.Properties.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  ceq
    IL_0009:  ldc.i4.0
    IL_000a:  ceq
    IL_000c:  stloc.2
//000046:                 {
//000047:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Reversi.Properties.Resources", typeof(Resources).Assembly);
//000048:                     resourceMan = temp;
//000049:                 }
//000050:                 return resourceMan;
//000051:             }
//000052:         }
//000053: 
//000054:         /// <summary>
//000055:         ///   Overrides the current thread's CurrentUICulture property for all
//000056:         ///   resource lookups using this strongly typed resource class.
//000057:         /// </summary>
//000058:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000059:         internal static global::System.Globalization.CultureInfo Culture
//000060:         {
//000061:             get
//000062:             {
//000063:                 return resourceCulture;
//000064:             }
//000065:             set
//000066:             {
//000067:                 resourceCulture = value;
//000068:             }
//000069:         }
//000070:     }
//000071: }
    IL_000d:  ldloc.2
    IL_000e:  brtrue.s   IL_0032

//000046:                 {
    IL_0010:  nop
//000047:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Reversi.Properties.Resources", typeof(Resources).Assembly);
    IL_0011:  ldstr      "Reversi.Properties.Resources"
    IL_0016:  ldtoken    Reversi.Properties.Resources
    IL_001b:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_0020:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0025:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_002a:  stloc.0
//000048:                     resourceMan = temp;
    IL_002b:  ldloc.0
    IL_002c:  stsfld     class [mscorlib]System.Resources.ResourceManager Reversi.Properties.Resources::resourceMan
//000049:                 }
    IL_0031:  nop
//000050:                 return resourceMan;
    IL_0032:  ldsfld     class [mscorlib]System.Resources.ResourceManager Reversi.Properties.Resources::resourceMan
    IL_0037:  stloc.1
    IL_0038:  br.s       IL_003a

//000051:             }
    IL_003a:  ldloc.1
    IL_003b:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo CS$1$0000)
//000052:         }
//000053: 
//000054:         /// <summary>
//000055:         ///   Overrides the current thread's CurrentUICulture property for all
//000056:         ///   resource lookups using this strongly typed resource class.
//000057:         /// </summary>
//000058:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000059:         internal static global::System.Globalization.CultureInfo Culture
//000060:         {
//000061:             get
//000062:             {
    IL_0000:  nop
//000063:                 return resourceCulture;
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo Reversi.Properties.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000064:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly hidebysig specialname static 
          void  set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
//000065:             set
//000066:             {
    IL_0000:  nop
//000067:                 resourceCulture = value;
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo Reversi.Properties.Resources::resourceCulture
//000068:             }
    IL_0007:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager Reversi.Properties.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo Reversi.Properties.Resources::get_Culture()
    .set void Reversi.Properties.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
} // end of class Reversi.Properties.Resources

.class public auto ansi beforefieldinit Reversi.Cylinder
       extends [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D
{
  .field private class [PresentationCore]System.Windows.Media.Media3D.Material m_material
  .field private valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D m_centerPoint
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(float64 radius,
                               float64 height,
                               int32 resolution,
                               class [PresentationCore]System.Windows.Media.Media3D.Material material) cil managed
  {
    // Code size       704 (0x2c0)
    .maxstack  5
    .locals init ([0] class [PresentationCore]System.Windows.Media.Media3D.Model3DGroup cylinderMeshGroup,
             [1] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D topCenter,
             [2] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D bottomCenter,
             [3] class [PresentationCore]System.Windows.Media.RotateTransform rotateTransform,
             [4] valuetype [WindowsBase]System.Windows.Point circleReferencePoint,
             [5] int32 i,
             [6] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D topLeft,
             [7] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D bottomLeft,
             [8] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D topRight,
             [9] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D bottomRight,
             [10] class [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D topTriangleMesh,
             [11] class [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D bottomTriangleMesh,
             [12] class [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D sideSquareMesh,
             [13] class [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D topTriangleModel,
             [14] class [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D bottomTriangleModel,
             [15] class [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D sideSquareModel,
             [16] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Cylinder.cs' 
//000023:         public Cylinder(double radius, double height, int resolution, Material material)
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D::.ctor()
    IL_0006:  nop
//000024:             : base()
//000025:         {
    IL_0007:  nop
//000026: 
//000027:             m_material = material;
    IL_0008:  ldarg.0
    IL_0009:  ldarg.s    material
    IL_000b:  stfld      class [PresentationCore]System.Windows.Media.Media3D.Material Reversi.Cylinder::m_material
//000028:             // 3 meshes per resolution of a cylineder: the top triange, a bottom triangle, 
//000029:             // and a square that makes up the edge of the cylinder
//000030:             // this translates to 6 points: the center of the top of the cylinder, 
//000031:             // the center of the bottom of the cylinder, and the four points
//000032:             // that make up the square
//000033: 
//000034:             // constants
//000035:             var cylinderMeshGroup = new Model3DGroup();
    IL_0010:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Model3DGroup::.ctor()
    IL_0015:  stloc.0
//000036:             // invariant ref points
//000037:             var topCenter = new Point3D(0.0, 0.0, height);
    IL_0016:  ldloca.s   topCenter
    IL_0018:  ldc.r8     0.0
    IL_0021:  ldc.r8     0.0
    IL_002a:  ldarg.2
    IL_002b:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_0030:  nop
//000038:             var bottomCenter = new Point3D(0.0, 0.0, 0.0);
    IL_0031:  ldloca.s   bottomCenter
    IL_0033:  ldc.r8     0.0
    IL_003c:  ldc.r8     0.0
    IL_0045:  ldc.r8     0.0
    IL_004e:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_0053:  nop
//000039:             // degrees of the circle that each resolution covers
//000040:             var rotateTransform = new RotateTransform(360.0 / resolution);
    IL_0054:  ldc.r8     360.
    IL_005d:  ldarg.3
    IL_005e:  conv.r8
    IL_005f:  div
    IL_0060:  newobj     instance void [PresentationCore]System.Windows.Media.RotateTransform::.ctor(float64)
    IL_0065:  stloc.3
//000041:             // we use this point to determine the 2d dimensional points that make 
//000042:             // up the edge of both the top and bottom circles
//000043:             var circleReferencePoint = new Point(radius, 0.0);
    IL_0066:  ldloca.s   circleReferencePoint
    IL_0068:  ldarg.1
    IL_0069:  ldc.r8     0.0
    IL_0072:  call       instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_0077:  nop
//000044: 
//000045:             // make one mesh object per resolution
//000046:             for (int i = 0; i < resolution; ++i)
    IL_0078:  ldc.i4.0
    IL_0079:  stloc.s    i
//000047:             {
//000048:                 // 4 points that make up the edge square
//000049:                 Point3D topLeft, bottomLeft, topRight, bottomRight;
//000050:                 topLeft = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, height);
//000051:                 bottomLeft = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, 0.0);
//000052:                 // rotate again to find right edge of square
//000053:                 circleReferencePoint = rotateTransform.Transform(circleReferencePoint);
//000054:                 topRight = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, height);
//000055:                 bottomRight = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, 0.0);
//000056: 
//000057:                 // create top triangle mesh
//000058:                 var topTriangleMesh = new MeshGeometry3D();
//000059:                 topTriangleMesh.Positions.Add(topCenter);
//000060:                 topTriangleMesh.Positions.Add(topLeft);
//000061:                 topTriangleMesh.Positions.Add(topRight);
//000062:                 // create bottom triangle mesh
//000063:                 var bottomTriangleMesh = new MeshGeometry3D();
//000064:                 bottomTriangleMesh.Positions.Add(bottomCenter);
//000065:                 bottomTriangleMesh.Positions.Add(bottomRight);
//000066:                 bottomTriangleMesh.Positions.Add(bottomLeft);
//000067:                 // create side square mesh
//000068:                 var sideSquareMesh = new MeshGeometry3D();
//000069:                 sideSquareMesh.Positions.Add(topLeft);
//000070:                 sideSquareMesh.Positions.Add(bottomLeft);
//000071:                 sideSquareMesh.Positions.Add(topRight);
//000072:                 sideSquareMesh.Positions.Add(bottomRight);
//000073:                 sideSquareMesh.TriangleIndices.Add(0);
//000074:                 sideSquareMesh.TriangleIndices.Add(1);
//000075:                 sideSquareMesh.TriangleIndices.Add(2);
//000076:                 sideSquareMesh.TriangleIndices.Add(1);
//000077:                 sideSquareMesh.TriangleIndices.Add(3);
//000078:                 sideSquareMesh.TriangleIndices.Add(2);
//000079: 
//000080:                 // add the meshes to the overall cylinder
//000081:                 // top triangle
//000082:                 var topTriangleModel = new GeometryModel3D();
//000083:                 topTriangleModel.Geometry = topTriangleMesh;
//000084:                 topTriangleModel.Material = material;
//000085:                 cylinderMeshGroup.Children.Add(topTriangleModel);
//000086:                 // bottom triangle
//000087:                 var bottomTriangleModel = new GeometryModel3D();
//000088:                 bottomTriangleModel.Geometry = bottomTriangleMesh;
//000089:                 bottomTriangleModel.Material = material;
//000090:                 cylinderMeshGroup.Children.Add(bottomTriangleModel);
//000091:                 // side square
//000092:                 var sideSquareModel = new GeometryModel3D();
//000093:                 sideSquareModel.Geometry = sideSquareMesh;
//000094:                 sideSquareModel.Material = material;
//000095:                 cylinderMeshGroup.Children.Add(sideSquareModel);
//000096:             }
//000097:             this.Content = cylinderMeshGroup;
//000098:             m_centerPoint = new Point3D(0.0, 0.0, 0.0);
//000099:             Transform = new Transform3DGroup();
//000100:         }
//000101: 
//000102:         public Material Material
//000103:         {
//000104:             get
//000105:             {
//000106:                 return m_material;
//000107:             }
//000108:         }
//000109: 
//000110:         public new Transform3D Transform
//000111:         {
//000112:             get
//000113:             {
//000114:                 return base.Transform;
//000115:             }
//000116: 
//000117:             set
//000118:             {
//000119:                 //m_centerPoint = value.Transform(CenterPoint);
//000120:                 base.Transform = value;
//000121:             }
//000122:         }
//000123: 
//000124:         //public Point3D CenterPoint
//000125:         //{
//000126:         //    get
//000127:         //    {
//000128:         //        return m_centerPoint;
//000129:         //    }
//000130:         //}
//000131:         private Point3D m_centerPoint;
//000132: 
//000133:         public void MoveTo(Point3D newCenterPoint)
//000134:         {
//000135: 
//000136:             (Transform as Transform3DGroup).Children.Add( new TranslateTransform3D(Point3D.Subtract(newCenterPoint, m_centerPoint)));
//000137:         }
//000138:         
//000139:    
//000140:     }
//000141: }
//000142: 
    IL_007b:  br         IL_0276

//000047:             {
    IL_0080:  nop
//000048:                 // 4 points that make up the edge square
//000049:                 Point3D topLeft, bottomLeft, topRight, bottomRight;
//000050:                 topLeft = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, height);
    IL_0081:  ldloca.s   topLeft
    IL_0083:  ldloca.s   circleReferencePoint
    IL_0085:  call       instance float64 [WindowsBase]System.Windows.Point::get_X()
    IL_008a:  ldloca.s   circleReferencePoint
    IL_008c:  call       instance float64 [WindowsBase]System.Windows.Point::get_Y()
    IL_0091:  ldarg.2
    IL_0092:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_0097:  nop
//000051:                 bottomLeft = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, 0.0);
    IL_0098:  ldloca.s   bottomLeft
    IL_009a:  ldloca.s   circleReferencePoint
    IL_009c:  call       instance float64 [WindowsBase]System.Windows.Point::get_X()
    IL_00a1:  ldloca.s   circleReferencePoint
    IL_00a3:  call       instance float64 [WindowsBase]System.Windows.Point::get_Y()
    IL_00a8:  ldc.r8     0.0
    IL_00b1:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_00b6:  nop
//000052:                 // rotate again to find right edge of square
//000053:                 circleReferencePoint = rotateTransform.Transform(circleReferencePoint);
    IL_00b7:  ldloc.3
    IL_00b8:  ldloc.s    circleReferencePoint
    IL_00ba:  callvirt   instance valuetype [WindowsBase]System.Windows.Point [PresentationCore]System.Windows.Media.GeneralTransform::Transform(valuetype [WindowsBase]System.Windows.Point)
    IL_00bf:  stloc.s    circleReferencePoint
//000054:                 topRight = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, height);
    IL_00c1:  ldloca.s   topRight
    IL_00c3:  ldloca.s   circleReferencePoint
    IL_00c5:  call       instance float64 [WindowsBase]System.Windows.Point::get_X()
    IL_00ca:  ldloca.s   circleReferencePoint
    IL_00cc:  call       instance float64 [WindowsBase]System.Windows.Point::get_Y()
    IL_00d1:  ldarg.2
    IL_00d2:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_00d7:  nop
//000055:                 bottomRight = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, 0.0);
    IL_00d8:  ldloca.s   bottomRight
    IL_00da:  ldloca.s   circleReferencePoint
    IL_00dc:  call       instance float64 [WindowsBase]System.Windows.Point::get_X()
    IL_00e1:  ldloca.s   circleReferencePoint
    IL_00e3:  call       instance float64 [WindowsBase]System.Windows.Point::get_Y()
    IL_00e8:  ldc.r8     0.0
    IL_00f1:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_00f6:  nop
//000056: 
//000057:                 // create top triangle mesh
//000058:                 var topTriangleMesh = new MeshGeometry3D();
    IL_00f7:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::.ctor()
    IL_00fc:  stloc.s    topTriangleMesh
//000059:                 topTriangleMesh.Positions.Add(topCenter);
    IL_00fe:  ldloc.s    topTriangleMesh
    IL_0100:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0105:  ldloc.1
    IL_0106:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_010b:  nop
//000060:                 topTriangleMesh.Positions.Add(topLeft);
    IL_010c:  ldloc.s    topTriangleMesh
    IL_010e:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0113:  ldloc.s    topLeft
    IL_0115:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_011a:  nop
//000061:                 topTriangleMesh.Positions.Add(topRight);
    IL_011b:  ldloc.s    topTriangleMesh
    IL_011d:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0122:  ldloc.s    topRight
    IL_0124:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_0129:  nop
//000062:                 // create bottom triangle mesh
//000063:                 var bottomTriangleMesh = new MeshGeometry3D();
    IL_012a:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::.ctor()
    IL_012f:  stloc.s    bottomTriangleMesh
//000064:                 bottomTriangleMesh.Positions.Add(bottomCenter);
    IL_0131:  ldloc.s    bottomTriangleMesh
    IL_0133:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0138:  ldloc.2
    IL_0139:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_013e:  nop
//000065:                 bottomTriangleMesh.Positions.Add(bottomRight);
    IL_013f:  ldloc.s    bottomTriangleMesh
    IL_0141:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0146:  ldloc.s    bottomRight
    IL_0148:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_014d:  nop
//000066:                 bottomTriangleMesh.Positions.Add(bottomLeft);
    IL_014e:  ldloc.s    bottomTriangleMesh
    IL_0150:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0155:  ldloc.s    bottomLeft
    IL_0157:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_015c:  nop
//000067:                 // create side square mesh
//000068:                 var sideSquareMesh = new MeshGeometry3D();
    IL_015d:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::.ctor()
    IL_0162:  stloc.s    sideSquareMesh
//000069:                 sideSquareMesh.Positions.Add(topLeft);
    IL_0164:  ldloc.s    sideSquareMesh
    IL_0166:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_016b:  ldloc.s    topLeft
    IL_016d:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_0172:  nop
//000070:                 sideSquareMesh.Positions.Add(bottomLeft);
    IL_0173:  ldloc.s    sideSquareMesh
    IL_0175:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_017a:  ldloc.s    bottomLeft
    IL_017c:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_0181:  nop
//000071:                 sideSquareMesh.Positions.Add(topRight);
    IL_0182:  ldloc.s    sideSquareMesh
    IL_0184:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0189:  ldloc.s    topRight
    IL_018b:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_0190:  nop
//000072:                 sideSquareMesh.Positions.Add(bottomRight);
    IL_0191:  ldloc.s    sideSquareMesh
    IL_0193:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0198:  ldloc.s    bottomRight
    IL_019a:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_019f:  nop
//000073:                 sideSquareMesh.TriangleIndices.Add(0);
    IL_01a0:  ldloc.s    sideSquareMesh
    IL_01a2:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_01a7:  ldc.i4.0
    IL_01a8:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_01ad:  nop
//000074:                 sideSquareMesh.TriangleIndices.Add(1);
    IL_01ae:  ldloc.s    sideSquareMesh
    IL_01b0:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_01b5:  ldc.i4.1
    IL_01b6:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_01bb:  nop
//000075:                 sideSquareMesh.TriangleIndices.Add(2);
    IL_01bc:  ldloc.s    sideSquareMesh
    IL_01be:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_01c3:  ldc.i4.2
    IL_01c4:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_01c9:  nop
//000076:                 sideSquareMesh.TriangleIndices.Add(1);
    IL_01ca:  ldloc.s    sideSquareMesh
    IL_01cc:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_01d1:  ldc.i4.1
    IL_01d2:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_01d7:  nop
//000077:                 sideSquareMesh.TriangleIndices.Add(3);
    IL_01d8:  ldloc.s    sideSquareMesh
    IL_01da:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_01df:  ldc.i4.3
    IL_01e0:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_01e5:  nop
//000078:                 sideSquareMesh.TriangleIndices.Add(2);
    IL_01e6:  ldloc.s    sideSquareMesh
    IL_01e8:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_01ed:  ldc.i4.2
    IL_01ee:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_01f3:  nop
//000079: 
//000080:                 // add the meshes to the overall cylinder
//000081:                 // top triangle
//000082:                 var topTriangleModel = new GeometryModel3D();
    IL_01f4:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::.ctor()
    IL_01f9:  stloc.s    topTriangleModel
//000083:                 topTriangleModel.Geometry = topTriangleMesh;
    IL_01fb:  ldloc.s    topTriangleModel
    IL_01fd:  ldloc.s    topTriangleMesh
    IL_01ff:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_Geometry(class [PresentationCore]System.Windows.Media.Media3D.Geometry3D)
    IL_0204:  nop
//000084:                 topTriangleModel.Material = material;
    IL_0205:  ldloc.s    topTriangleModel
    IL_0207:  ldarg.s    material
    IL_0209:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_Material(class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_020e:  nop
//000085:                 cylinderMeshGroup.Children.Add(topTriangleModel);
    IL_020f:  ldloc.0
    IL_0210:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Model3DCollection [PresentationCore]System.Windows.Media.Media3D.Model3DGroup::get_Children()
    IL_0215:  ldloc.s    topTriangleModel
    IL_0217:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Model3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Model3D)
    IL_021c:  nop
//000086:                 // bottom triangle
//000087:                 var bottomTriangleModel = new GeometryModel3D();
    IL_021d:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::.ctor()
    IL_0222:  stloc.s    bottomTriangleModel
//000088:                 bottomTriangleModel.Geometry = bottomTriangleMesh;
    IL_0224:  ldloc.s    bottomTriangleModel
    IL_0226:  ldloc.s    bottomTriangleMesh
    IL_0228:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_Geometry(class [PresentationCore]System.Windows.Media.Media3D.Geometry3D)
    IL_022d:  nop
//000089:                 bottomTriangleModel.Material = material;
    IL_022e:  ldloc.s    bottomTriangleModel
    IL_0230:  ldarg.s    material
    IL_0232:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_Material(class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_0237:  nop
//000090:                 cylinderMeshGroup.Children.Add(bottomTriangleModel);
    IL_0238:  ldloc.0
    IL_0239:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Model3DCollection [PresentationCore]System.Windows.Media.Media3D.Model3DGroup::get_Children()
    IL_023e:  ldloc.s    bottomTriangleModel
    IL_0240:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Model3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Model3D)
    IL_0245:  nop
//000091:                 // side square
//000092:                 var sideSquareModel = new GeometryModel3D();
    IL_0246:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::.ctor()
    IL_024b:  stloc.s    sideSquareModel
//000093:                 sideSquareModel.Geometry = sideSquareMesh;
    IL_024d:  ldloc.s    sideSquareModel
    IL_024f:  ldloc.s    sideSquareMesh
    IL_0251:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_Geometry(class [PresentationCore]System.Windows.Media.Media3D.Geometry3D)
    IL_0256:  nop
//000094:                 sideSquareModel.Material = material;
    IL_0257:  ldloc.s    sideSquareModel
    IL_0259:  ldarg.s    material
    IL_025b:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_Material(class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_0260:  nop
//000095:                 cylinderMeshGroup.Children.Add(sideSquareModel);
    IL_0261:  ldloc.0
    IL_0262:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Model3DCollection [PresentationCore]System.Windows.Media.Media3D.Model3DGroup::get_Children()
    IL_0267:  ldloc.s    sideSquareModel
    IL_0269:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Model3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Model3D)
    IL_026e:  nop
//000096:             }
    IL_026f:  nop
//000046:             for (int i = 0; i < resolution; ++i)
    IL_0270:  ldloc.s    i
    IL_0272:  ldc.i4.1
    IL_0273:  add
    IL_0274:  stloc.s    i
    IL_0276:  ldloc.s    i
    IL_0278:  ldarg.3
    IL_0279:  clt
    IL_027b:  stloc.s    CS$4$0000
//000047:             {
//000048:                 // 4 points that make up the edge square
//000049:                 Point3D topLeft, bottomLeft, topRight, bottomRight;
//000050:                 topLeft = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, height);
//000051:                 bottomLeft = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, 0.0);
//000052:                 // rotate again to find right edge of square
//000053:                 circleReferencePoint = rotateTransform.Transform(circleReferencePoint);
//000054:                 topRight = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, height);
//000055:                 bottomRight = new Point3D(circleReferencePoint.X, circleReferencePoint.Y, 0.0);
//000056: 
//000057:                 // create top triangle mesh
//000058:                 var topTriangleMesh = new MeshGeometry3D();
//000059:                 topTriangleMesh.Positions.Add(topCenter);
//000060:                 topTriangleMesh.Positions.Add(topLeft);
//000061:                 topTriangleMesh.Positions.Add(topRight);
//000062:                 // create bottom triangle mesh
//000063:                 var bottomTriangleMesh = new MeshGeometry3D();
//000064:                 bottomTriangleMesh.Positions.Add(bottomCenter);
//000065:                 bottomTriangleMesh.Positions.Add(bottomRight);
//000066:                 bottomTriangleMesh.Positions.Add(bottomLeft);
//000067:                 // create side square mesh
//000068:                 var sideSquareMesh = new MeshGeometry3D();
//000069:                 sideSquareMesh.Positions.Add(topLeft);
//000070:                 sideSquareMesh.Positions.Add(bottomLeft);
//000071:                 sideSquareMesh.Positions.Add(topRight);
//000072:                 sideSquareMesh.Positions.Add(bottomRight);
//000073:                 sideSquareMesh.TriangleIndices.Add(0);
//000074:                 sideSquareMesh.TriangleIndices.Add(1);
//000075:                 sideSquareMesh.TriangleIndices.Add(2);
//000076:                 sideSquareMesh.TriangleIndices.Add(1);
//000077:                 sideSquareMesh.TriangleIndices.Add(3);
//000078:                 sideSquareMesh.TriangleIndices.Add(2);
//000079: 
//000080:                 // add the meshes to the overall cylinder
//000081:                 // top triangle
//000082:                 var topTriangleModel = new GeometryModel3D();
//000083:                 topTriangleModel.Geometry = topTriangleMesh;
//000084:                 topTriangleModel.Material = material;
//000085:                 cylinderMeshGroup.Children.Add(topTriangleModel);
//000086:                 // bottom triangle
//000087:                 var bottomTriangleModel = new GeometryModel3D();
//000088:                 bottomTriangleModel.Geometry = bottomTriangleMesh;
//000089:                 bottomTriangleModel.Material = material;
//000090:                 cylinderMeshGroup.Children.Add(bottomTriangleModel);
//000091:                 // side square
//000092:                 var sideSquareModel = new GeometryModel3D();
//000093:                 sideSquareModel.Geometry = sideSquareMesh;
//000094:                 sideSquareModel.Material = material;
//000095:                 cylinderMeshGroup.Children.Add(sideSquareModel);
//000096:             }
//000097:             this.Content = cylinderMeshGroup;
//000098:             m_centerPoint = new Point3D(0.0, 0.0, 0.0);
//000099:             Transform = new Transform3DGroup();
//000100:         }
//000101: 
//000102:         public Material Material
//000103:         {
//000104:             get
//000105:             {
//000106:                 return m_material;
//000107:             }
//000108:         }
//000109: 
//000110:         public new Transform3D Transform
//000111:         {
//000112:             get
//000113:             {
//000114:                 return base.Transform;
//000115:             }
//000116: 
//000117:             set
//000118:             {
//000119:                 //m_centerPoint = value.Transform(CenterPoint);
//000120:                 base.Transform = value;
//000121:             }
//000122:         }
//000123: 
//000124:         //public Point3D CenterPoint
//000125:         //{
//000126:         //    get
//000127:         //    {
//000128:         //        return m_centerPoint;
//000129:         //    }
//000130:         //}
//000131:         private Point3D m_centerPoint;
//000132: 
//000133:         public void MoveTo(Point3D newCenterPoint)
//000134:         {
//000135: 
//000136:             (Transform as Transform3DGroup).Children.Add( new TranslateTransform3D(Point3D.Subtract(newCenterPoint, m_centerPoint)));
//000137:         }
//000138:         
//000139:    
//000140:     }
//000141: }
//000142: 
    IL_027d:  ldloc.s    CS$4$0000
    IL_027f:  brtrue     IL_0080

//000097:             this.Content = cylinderMeshGroup;
    IL_0284:  ldarg.0
    IL_0285:  ldloc.0
    IL_0286:  call       instance void [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D::set_Content(class [PresentationCore]System.Windows.Media.Media3D.Model3D)
    IL_028b:  nop
//000098:             m_centerPoint = new Point3D(0.0, 0.0, 0.0);
    IL_028c:  ldarg.0
    IL_028d:  ldc.r8     0.0
    IL_0296:  ldc.r8     0.0
    IL_029f:  ldc.r8     0.0
    IL_02a8:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_02ad:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D Reversi.Cylinder::m_centerPoint
//000099:             Transform = new Transform3DGroup();
    IL_02b2:  ldarg.0
    IL_02b3:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::.ctor()
    IL_02b8:  call       instance void Reversi.Cylinder::set_Transform(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_02bd:  nop
//000100:         }
    IL_02be:  nop
    IL_02bf:  ret
  } // end of method Cylinder::.ctor

  .method public hidebysig specialname instance class [PresentationCore]System.Windows.Media.Media3D.Material 
          get_Material() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] class [PresentationCore]System.Windows.Media.Media3D.Material CS$1$0000)
//000101: 
//000102:         public Material Material
//000103:         {
//000104:             get
//000105:             {
    IL_0000:  nop
//000106:                 return m_material;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.Material Reversi.Cylinder::m_material
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000107:             }
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method Cylinder::get_Material

  .method public hidebysig specialname instance class [PresentationCore]System.Windows.Media.Media3D.Transform3D 
          get_Transform() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] class [PresentationCore]System.Windows.Media.Media3D.Transform3D CS$1$0000)
//000108:         }
//000109: 
//000110:         public new Transform3D Transform
//000111:         {
//000112:             get
//000113:             {
    IL_0000:  nop
//000114:                 return base.Transform;
    IL_0001:  ldarg.0
    IL_0002:  call       instance class [PresentationCore]System.Windows.Media.Media3D.Transform3D [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D::get_Transform()
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000115:             }
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method Cylinder::get_Transform

  .method public hidebysig specialname instance void 
          set_Transform(class [PresentationCore]System.Windows.Media.Media3D.Transform3D 'value') cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
//000116: 
//000117:             set
//000118:             {
    IL_0000:  nop
//000119:                 //m_centerPoint = value.Transform(CenterPoint);
//000120:                 base.Transform = value;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  call       instance void [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D::set_Transform(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_0008:  nop
//000121:             }
    IL_0009:  ret
  } // end of method Cylinder::set_Transform

  .method public hidebysig instance void 
          MoveTo(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D newCenterPoint) cil managed
  {
    // Code size       41 (0x29)
    .maxstack  8
//000122:         }
//000123: 
//000124:         //public Point3D CenterPoint
//000125:         //{
//000126:         //    get
//000127:         //    {
//000128:         //        return m_centerPoint;
//000129:         //    }
//000130:         //}
//000131:         private Point3D m_centerPoint;
//000132: 
//000133:         public void MoveTo(Point3D newCenterPoint)
//000134:         {
    IL_0000:  nop
//000135: 
//000136:             (Transform as Transform3DGroup).Children.Add( new TranslateTransform3D(Point3D.Subtract(newCenterPoint, m_centerPoint)));
    IL_0001:  ldarg.0
    IL_0002:  call       instance class [PresentationCore]System.Windows.Media.Media3D.Transform3D Reversi.Cylinder::get_Transform()
    IL_0007:  isinst     [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup
    IL_000c:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::get_Children()
    IL_0011:  ldarg.1
    IL_0012:  ldarg.0
    IL_0013:  ldfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D Reversi.Cylinder::m_centerPoint
    IL_0018:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Point3D::Subtract(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D,
                                                                                                                                                            valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_001d:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::.ctor(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0022:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_0027:  nop
//000137:         }
    IL_0028:  ret
  } // end of method Cylinder::MoveTo

  .property instance class [PresentationCore]System.Windows.Media.Media3D.Material
          Material()
  {
    .get instance class [PresentationCore]System.Windows.Media.Media3D.Material Reversi.Cylinder::get_Material()
  } // end of property Cylinder::Material
  .property instance class [PresentationCore]System.Windows.Media.Media3D.Transform3D
          Transform()
  {
    .get instance class [PresentationCore]System.Windows.Media.Media3D.Transform3D Reversi.Cylinder::get_Transform()
    .set instance void Reversi.Cylinder::set_Transform(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
  } // end of property Cylinder::Transform
} // end of class Reversi.Cylinder

.class public abstract auto ansi beforefieldinit Reversi.Minimax
       extends [mscorlib]System.Object
{
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass3'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public valuetype Reversi.MinimaxMove bestMove
    .field public object bigLock
    .field public class [mscorlib]System.Threading.CancellationTokenSource cts
    .field public class Reversi.Minimax '<>4__this'
    .field public valuetype Reversi.MinimaxSpot[0...,0...] state
    .field public bool isLightPlayer
    .field public int32 alpha
    .field public int32 beta
    .field public int32 depth
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass3'::.ctor

  } // end of class '<>c__DisplayClass3'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass6'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class Reversi.Minimax/'<>c__DisplayClass3' 'CS$<>8__locals4'
    .field public valuetype Reversi.MinimaxMove curMove
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass6'::.ctor

    .method public hidebysig instance void 
            '<InternalSearchTPL>b__2'() cil managed
    {
      // Code size       661 (0x295)
      .maxstack  8
      .locals init ([0] bool '<>s__LockTaken0',
               [1] object CS$2$0000,
               [2] bool CS$4$0001,
               [3] valuetype [mscorlib]System.Nullable`1<int32> CS$0$0002,
               [4] valuetype [mscorlib]System.Nullable`1<int32> CS$0$0003,
               [5] int32 CS$0$0004)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Minimax.cs' 
//000197:                     {
      IL_0000:  nop
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
      IL_0001:  ldarg.0
      IL_0002:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
      IL_0007:  ldarg.0
      IL_0008:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_000d:  ldfld      class Reversi.Minimax Reversi.Minimax/'<>c__DisplayClass3'::'<>4__this'
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_0018:  ldfld      class Reversi.Minimax Reversi.Minimax/'<>c__DisplayClass3'::'<>4__this'
      IL_001d:  ldarg.0
      IL_001e:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_0023:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax/'<>c__DisplayClass3'::state
      IL_0028:  ldarg.0
      IL_0029:  ldfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
      IL_002e:  ldarg.0
      IL_002f:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_0034:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
      IL_0039:  callvirt   instance valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax::GetInsight(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                         valuetype Reversi.MinimaxMove,
                                                                                                         bool)
      IL_003e:  ldarg.0
      IL_003f:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_0044:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
      IL_0049:  ldc.i4.0
      IL_004a:  ceq
      IL_004c:  ldarg.0
      IL_004d:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_0052:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
      IL_0057:  ldarg.0
      IL_0058:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_005d:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
      IL_0062:  ldarg.0
      IL_0063:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_0068:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::depth
      IL_006d:  ldc.i4.1
      IL_006e:  add
      IL_006f:  ldarg.0
      IL_0070:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_0075:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass3'::cts
      IL_007a:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
      IL_007f:  call       instance valuetype Reversi.MinimaxMove Reversi.Minimax::InternalSearchTPL(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                     bool,
                                                                                                     int32,
                                                                                                     int32,
                                                                                                     int32,
                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
      IL_0084:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_0089:  stfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_008e:  ldc.i4.0
      IL_008f:  stloc.0
//000199:                         lock (bigLock)
      .try
      {
        IL_0090:  ldarg.0
        IL_0091:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_0096:  ldfld      object Reversi.Minimax/'<>c__DisplayClass3'::bigLock
        IL_009b:  dup
        IL_009c:  stloc.1
        IL_009d:  ldloca.s   '<>s__LockTaken0'
        IL_009f:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                            bool&)
        IL_00a4:  nop
//000200:                         {
        IL_00a5:  nop
//000201:                             if (isLightPlayer)
        IL_00a6:  ldarg.0
        IL_00a7:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_00ac:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
        IL_00b1:  ldc.i4.0
        IL_00b2:  ceq
        IL_00b4:  stloc.2
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_00b5:  ldloc.2
        IL_00b6:  brtrue     IL_0195

//000202:                             {
        IL_00bb:  nop
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
        IL_00bc:  ldarg.0
        IL_00bd:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
        IL_00c2:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_00c7:  stloc.3
        IL_00c8:  ldarg.0
        IL_00c9:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_00ce:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_00d3:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_00d8:  stloc.s    CS$0$0003
        IL_00da:  ldloca.s   CS$0$0002
        IL_00dc:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_00e1:  ldloca.s   CS$0$0003
        IL_00e3:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_00e8:  ble.s      IL_00fb

        IL_00ea:  ldloca.s   CS$0$0002
        IL_00ec:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_00f1:  ldloca.s   CS$0$0003
        IL_00f3:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_00f8:  and
        IL_00f9:  br.s       IL_00fc

        IL_00fb:  ldc.i4.0
        IL_00fc:  ldc.i4.0
        IL_00fd:  ceq
        IL_00ff:  stloc.2
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_0100:  ldloc.2
        IL_0101:  brtrue.s   IL_0114

//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
        IL_0103:  ldarg.0
        IL_0104:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_0109:  ldarg.0
        IL_010a:  ldfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
        IL_010f:  stfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
        IL_0114:  ldarg.0
        IL_0115:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_011a:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_011f:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_0124:  stloc.3
        IL_0125:  ldarg.0
        IL_0126:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_012b:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
        IL_0130:  stloc.s    CS$0$0004
        IL_0132:  ldloca.s   CS$0$0002
        IL_0134:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_0139:  ldloc.s    CS$0$0004
        IL_013b:  blt.s      IL_0146

        IL_013d:  ldloca.s   CS$0$0002
        IL_013f:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_0144:  br.s       IL_0147

        IL_0146:  ldc.i4.0
        IL_0147:  ldc.i4.0
        IL_0148:  ceq
        IL_014a:  stloc.2
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_014b:  ldloc.2
        IL_014c:  brtrue.s   IL_015f

//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
        IL_014e:  ldarg.0
        IL_014f:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_0154:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass3'::cts
        IL_0159:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
        IL_015e:  nop
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
        IL_015f:  ldarg.0
        IL_0160:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_0165:  ldarg.0
        IL_0166:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_016b:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
        IL_0170:  ldarg.0
        IL_0171:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_0176:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_017b:  ldflda     valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_0180:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::get_Value()
        IL_0185:  call       int32 [mscorlib]System.Math::Max(int32,
                                                              int32)
        IL_018a:  stfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
//000206:                             }
        IL_018f:  nop
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_0190:  br         IL_026a

//000208:                             {
        IL_0195:  nop
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
        IL_0196:  ldarg.0
        IL_0197:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
        IL_019c:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_01a1:  stloc.3
        IL_01a2:  ldarg.0
        IL_01a3:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_01a8:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_01ad:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_01b2:  stloc.s    CS$0$0003
        IL_01b4:  ldloca.s   CS$0$0002
        IL_01b6:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_01bb:  ldloca.s   CS$0$0003
        IL_01bd:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_01c2:  bge.s      IL_01d5

        IL_01c4:  ldloca.s   CS$0$0002
        IL_01c6:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_01cb:  ldloca.s   CS$0$0003
        IL_01cd:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_01d2:  and
        IL_01d3:  br.s       IL_01d6

        IL_01d5:  ldc.i4.0
        IL_01d6:  ldc.i4.0
        IL_01d7:  ceq
        IL_01d9:  stloc.2
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_01da:  ldloc.2
        IL_01db:  brtrue.s   IL_01ee

//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
        IL_01dd:  ldarg.0
        IL_01de:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_01e3:  ldarg.0
        IL_01e4:  ldfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
        IL_01e9:  stfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
        IL_01ee:  ldarg.0
        IL_01ef:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_01f4:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_01f9:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_01fe:  stloc.3
        IL_01ff:  ldarg.0
        IL_0200:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_0205:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
        IL_020a:  stloc.s    CS$0$0004
        IL_020c:  ldloca.s   CS$0$0002
        IL_020e:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_0213:  ldloc.s    CS$0$0004
        IL_0215:  bgt.s      IL_0220

        IL_0217:  ldloca.s   CS$0$0002
        IL_0219:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_021e:  br.s       IL_0221

        IL_0220:  ldc.i4.0
        IL_0221:  ldc.i4.0
        IL_0222:  ceq
        IL_0224:  stloc.2
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_0225:  ldloc.2
        IL_0226:  brtrue.s   IL_0239

//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
        IL_0228:  ldarg.0
        IL_0229:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_022e:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass3'::cts
        IL_0233:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
        IL_0238:  nop
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
        IL_0239:  ldarg.0
        IL_023a:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_023f:  ldarg.0
        IL_0240:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_0245:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
        IL_024a:  ldarg.0
        IL_024b:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
        IL_0250:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_0255:  ldflda     valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_025a:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::get_Value()
        IL_025f:  call       int32 [mscorlib]System.Math::Min(int32,
                                                              int32)
        IL_0264:  stfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
//000212:                             }
        IL_0269:  nop
//000213:                         }
        IL_026a:  nop
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_026b:  leave.s    IL_027d

      }  // end .try
      finally
      {
        IL_026d:  ldloc.0
        IL_026e:  ldc.i4.0
        IL_026f:  ceq
        IL_0271:  stloc.2
        IL_0272:  ldloc.2
        IL_0273:  brtrue.s   IL_027c

        IL_0275:  ldloc.1
        IL_0276:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
        IL_027b:  nop
        IL_027c:  endfinally
      }  // end handler
      IL_027d:  nop
//000214:                         Interlocked.Decrement(ref m_taskCount);
      IL_027e:  ldarg.0
      IL_027f:  ldfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
      IL_0284:  ldfld      class Reversi.Minimax Reversi.Minimax/'<>c__DisplayClass3'::'<>4__this'
      IL_0289:  ldflda     int32 Reversi.Minimax::m_taskCount
      IL_028e:  call       int32 [mscorlib]System.Threading.Interlocked::Decrement(int32&)
      IL_0293:  pop
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_0294:  ret
    } // end of method '<>c__DisplayClass6'::'<InternalSearchTPL>b__2'

  } // end of class '<>c__DisplayClass6'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass9'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class [mscorlib]System.Threading.CancellationTokenSource curCts
    .field public class Reversi.Minimax '<>4__this'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass9'::.ctor

    .method public hidebysig instance void 
            '<Search>b__8'() cil managed
    {
      // Code size       31 (0x1f)
      .maxstack  8
//000287:             {
      IL_0000:  nop
//000288:                 Thread.Sleep(m_timeLimit);
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Reversi.Minimax Reversi.Minimax/'<>c__DisplayClass9'::'<>4__this'
      IL_0007:  ldfld      valuetype [mscorlib]System.TimeSpan Reversi.Minimax::m_timeLimit
      IL_000c:  call       void [mscorlib]System.Threading.Thread::Sleep(valuetype [mscorlib]System.TimeSpan)
      IL_0011:  nop
//000289:                 curCts.Cancel();
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass9'::curCts
      IL_0018:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
      IL_001d:  nop
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_001e:  ret
    } // end of method '<>c__DisplayClass9'::'<Search>b__8'

  } // end of class '<>c__DisplayClass9'

  .field private int32 m_maxDepth
  .field private int32 m_degOfParallelism
  .field private valuetype [mscorlib]System.TimeSpan m_timeLimit
  .field private int32 m_taskCount
  .field private int32 modreq([mscorlib]System.Runtime.CompilerServices.IsVolatile) m_movesConsidered
  .field private class [mscorlib]System.Threading.CancellationTokenSource m_cts
  .field private valuetype [mscorlib]System.Threading.CancellationToken m_ct
  .method public hidebysig newslot specialname abstract virtual 
          instance int32  get_MaxDepth() cil managed
  {
  } // end of method Minimax::get_MaxDepth

  .method public hidebysig newslot specialname abstract virtual 
          instance valuetype [mscorlib]System.TimeSpan 
          get_TimeLimit() cil managed
  {
  } // end of method Minimax::get_TimeLimit

  .method public hidebysig newslot specialname abstract virtual 
          instance int32  get_DegreeOfParallelism() cil managed
  {
  } // end of method Minimax::get_DegreeOfParallelism

  .method family hidebysig newslot abstract virtual 
          instance bool  TerminalTest(valuetype Reversi.MinimaxSpot[0...,0...] state) cil managed
  {
  } // end of method Minimax::TerminalTest

  .method family hidebysig newslot abstract virtual 
          instance int32  EvaluateHeuristic(valuetype Reversi.MinimaxSpot[0...,0...] state) cil managed
  {
  } // end of method Minimax::EvaluateHeuristic

  .method family hidebysig newslot abstract virtual 
          instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> 
          GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...] state,
                        bool isLightPlayer) cil managed
  {
  } // end of method Minimax::GetValidMoves

  .method family hidebysig newslot abstract virtual 
          instance valuetype Reversi.MinimaxSpot[0...,0...] 
          GetInsight(valuetype Reversi.MinimaxSpot[0...,0...] state,
                     valuetype Reversi.MinimaxMove move,
                     bool isLightPlayer) cil managed
  {
  } // end of method Minimax::GetInsight

  .method private hidebysig instance valuetype Reversi.MinimaxMove 
          InternalSearch(valuetype Reversi.MinimaxSpot[0...,0...] state,
                         bool isLightPlayer,
                         int32 alpha,
                         int32 beta,
                         int32 depth) cil managed
  {
    // Code size       562 (0x232)
    .maxstack  8
    .locals init ([0] valuetype Reversi.MinimaxMove bestMove,
             [1] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> validMoves,
             [2] bool consideredLocalMoves,
             [3] valuetype Reversi.MinimaxMove move,
             [4] valuetype Reversi.MinimaxMove curMove,
             [5] valuetype Reversi.MinimaxMove CS$1$0000,
             [6] bool CS$4$0001,
             [7] class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove> CS$5$0002,
             [8] valuetype [mscorlib]System.Nullable`1<int32> CS$0$0003,
             [9] valuetype [mscorlib]System.Nullable`1<int32> CS$0$0004,
             [10] int32 CS$0$0005)
//000095:         {
    IL_0000:  nop
//000096:             // Stop the search if...
//000097:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  callvirt   instance bool Reversi.Minimax::TerminalTest(valuetype Reversi.MinimaxSpot[0...,0...])
    IL_0008:  brtrue.s   IL_0024

    IL_000a:  ldarg.s    depth
    IL_000c:  ldarg.0
    IL_000d:  ldfld      int32 Reversi.Minimax::m_maxDepth
    IL_0012:  bge.s      IL_0024

    IL_0014:  ldarg.0
    IL_0015:  ldflda     valuetype [mscorlib]System.Threading.CancellationToken Reversi.Minimax::m_ct
    IL_001a:  call       instance bool [mscorlib]System.Threading.CancellationToken::get_IsCancellationRequested()
    IL_001f:  ldc.i4.0
    IL_0020:  ceq
    IL_0022:  br.s       IL_0025

    IL_0024:  ldc.i4.0
    IL_0025:  stloc.s    CS$4$0001
//000098:             {
//000099:                 m_movesConsidered++;
//000100:                 return new MinimaxMove(EvaluateHeuristic(state));
//000101:             }
//000102: 
//000103:             // Initialize the best move for this recursive call.
//000104:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000105: 
//000106:             // Get the valid moves for this recursive call.
//000107:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000108: 
//000109:             // If there are valid moves, recurse on each.
//000110:             bool consideredLocalMoves = false;
//000111:             foreach (MinimaxMove move in validMoves)
//000112:             {
//000113:                 consideredLocalMoves = true;
//000114: 
//000115:                 MinimaxMove curMove = move;
//000116:                 curMove.Value = InternalSearch(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1).Value;
//000117:                 if (isLightPlayer)
//000118:                 {
//000119:                     if (curMove.Value > bestMove.Value) bestMove = curMove;
//000120:                     if (bestMove.Value >= beta) break;
//000121:                     alpha = Math.Max(alpha, bestMove.Value.Value);
//000122:                 }
//000123:                 else
//000124:                 {
//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
//000126:                     if (bestMove.Value <= alpha) break;
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    IL_0027:  ldloc.s    CS$4$0001
    IL_0029:  brtrue.s   IL_0056

//000098:             {
    IL_002b:  nop
//000099:                 m_movesConsidered++;
    IL_002c:  ldarg.0
    IL_002d:  dup
    IL_002e:  volatile.
    IL_0030:  ldfld      int32 modreq([mscorlib]System.Runtime.CompilerServices.IsVolatile) Reversi.Minimax::m_movesConsidered
    IL_0035:  ldc.i4.1
    IL_0036:  add
    IL_0037:  volatile.
    IL_0039:  stfld      int32 modreq([mscorlib]System.Runtime.CompilerServices.IsVolatile) Reversi.Minimax::m_movesConsidered
//000100:                 return new MinimaxMove(EvaluateHeuristic(state));
    IL_003e:  ldarg.0
    IL_003f:  ldarg.1
    IL_0040:  callvirt   instance int32 Reversi.Minimax::EvaluateHeuristic(valuetype Reversi.MinimaxSpot[0...,0...])
    IL_0045:  newobj     instance void valuetype [mscorlib]System.Nullable`1<int32>::.ctor(!0)
    IL_004a:  newobj     instance void Reversi.MinimaxMove::.ctor(valuetype [mscorlib]System.Nullable`1<int32>)
    IL_004f:  stloc.s    CS$1$0000
    IL_0051:  br         IL_022f

//000101:             }
//000102: 
//000103:             // Initialize the best move for this recursive call.
//000104:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
    IL_0056:  ldloca.s   bestMove
    IL_0058:  ldarg.2
    IL_0059:  brtrue.s   IL_0062

    IL_005b:  ldc.i4     0x7fffffff
    IL_0060:  br.s       IL_0067

    IL_0062:  ldc.i4     0x80000000
    IL_0067:  newobj     instance void valuetype [mscorlib]System.Nullable`1<int32>::.ctor(!0)
    IL_006c:  call       instance void Reversi.MinimaxMove::.ctor(valuetype [mscorlib]System.Nullable`1<int32>)
    IL_0071:  nop
//000105: 
//000106:             // Get the valid moves for this recursive call.
//000107:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
    IL_0072:  ldarg.0
    IL_0073:  ldarg.1
    IL_0074:  ldarg.2
    IL_0075:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> Reversi.Minimax::GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                                                                         bool)
    IL_007a:  stloc.1
//000108: 
//000109:             // If there are valid moves, recurse on each.
//000110:             bool consideredLocalMoves = false;
    IL_007b:  ldc.i4.0
    IL_007c:  stloc.2
//000111:             foreach (MinimaxMove move in validMoves)
    IL_007d:  nop
    IL_007e:  ldloc.1
    IL_007f:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove>::GetEnumerator()
    IL_0084:  stloc.s    CS$5$0002
//000112:             {
//000113:                 consideredLocalMoves = true;
//000114: 
//000115:                 MinimaxMove curMove = move;
//000116:                 curMove.Value = InternalSearch(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1).Value;
//000117:                 if (isLightPlayer)
//000118:                 {
//000119:                     if (curMove.Value > bestMove.Value) bestMove = curMove;
//000120:                     if (bestMove.Value >= beta) break;
//000121:                     alpha = Math.Max(alpha, bestMove.Value.Value);
//000122:                 }
//000123:                 else
//000124:                 {
//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
//000126:                     if (bestMove.Value <= alpha) break;
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    .try
    {
      IL_0086:  br         IL_01dc

//000111:             foreach (MinimaxMove move in validMoves)
      IL_008b:  ldloc.s    CS$5$0002
      IL_008d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove>::get_Current()
      IL_0092:  stloc.3
//000112:             {
      IL_0093:  nop
//000113:                 consideredLocalMoves = true;
      IL_0094:  ldc.i4.1
      IL_0095:  stloc.2
//000114: 
//000115:                 MinimaxMove curMove = move;
      IL_0096:  ldloc.3
      IL_0097:  stloc.s    curMove
//000116:                 curMove.Value = InternalSearch(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1).Value;
      IL_0099:  ldloca.s   curMove
      IL_009b:  ldarg.0
      IL_009c:  ldarg.0
      IL_009d:  ldarg.1
      IL_009e:  ldloc.s    curMove
      IL_00a0:  ldarg.2
      IL_00a1:  callvirt   instance valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax::GetInsight(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                         valuetype Reversi.MinimaxMove,
                                                                                                         bool)
      IL_00a6:  ldarg.2
      IL_00a7:  ldc.i4.0
      IL_00a8:  ceq
      IL_00aa:  ldarg.3
      IL_00ab:  ldarg.s    beta
      IL_00ad:  ldarg.s    depth
      IL_00af:  ldc.i4.1
      IL_00b0:  add
      IL_00b1:  call       instance valuetype Reversi.MinimaxMove Reversi.Minimax::InternalSearch(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                  bool,
                                                                                                  int32,
                                                                                                  int32,
                                                                                                  int32)
      IL_00b6:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_00bb:  stfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
//000117:                 if (isLightPlayer)
      IL_00c0:  ldarg.2
      IL_00c1:  ldc.i4.0
      IL_00c2:  ceq
      IL_00c4:  stloc.s    CS$4$0001
//000118:                 {
//000119:                     if (curMove.Value > bestMove.Value) bestMove = curMove;
//000120:                     if (bestMove.Value >= beta) break;
//000121:                     alpha = Math.Max(alpha, bestMove.Value.Value);
//000122:                 }
//000123:                 else
//000124:                 {
//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
//000126:                     if (bestMove.Value <= alpha) break;
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_00c6:  ldloc.s    CS$4$0001
      IL_00c8:  brtrue     IL_0158

//000118:                 {
      IL_00cd:  nop
//000119:                     if (curMove.Value > bestMove.Value) bestMove = curMove;
      IL_00ce:  ldloca.s   curMove
      IL_00d0:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_00d5:  stloc.s    CS$0$0003
      IL_00d7:  ldloca.s   bestMove
      IL_00d9:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_00de:  stloc.s    CS$0$0004
      IL_00e0:  ldloca.s   CS$0$0003
      IL_00e2:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
      IL_00e7:  ldloca.s   CS$0$0004
      IL_00e9:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
      IL_00ee:  ble.s      IL_0101

      IL_00f0:  ldloca.s   CS$0$0003
      IL_00f2:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
      IL_00f7:  ldloca.s   CS$0$0004
      IL_00f9:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
      IL_00fe:  and
      IL_00ff:  br.s       IL_0102

      IL_0101:  ldc.i4.0
      IL_0102:  ldc.i4.0
      IL_0103:  ceq
      IL_0105:  stloc.s    CS$4$0001
//000120:                     if (bestMove.Value >= beta) break;
//000121:                     alpha = Math.Max(alpha, bestMove.Value.Value);
//000122:                 }
//000123:                 else
//000124:                 {
//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
//000126:                     if (bestMove.Value <= alpha) break;
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_0107:  ldloc.s    CS$4$0001
      IL_0109:  brtrue.s   IL_010e

//000119:                     if (curMove.Value > bestMove.Value) bestMove = curMove;
      IL_010b:  ldloc.s    curMove
      IL_010d:  stloc.0
//000120:                     if (bestMove.Value >= beta) break;
      IL_010e:  ldloca.s   bestMove
      IL_0110:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_0115:  stloc.s    CS$0$0003
      IL_0117:  ldarg.s    beta
      IL_0119:  stloc.s    CS$0$0005
      IL_011b:  ldloca.s   CS$0$0003
      IL_011d:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
      IL_0122:  ldloc.s    CS$0$0005
      IL_0124:  blt.s      IL_012f

      IL_0126:  ldloca.s   CS$0$0003
      IL_0128:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
      IL_012d:  br.s       IL_0130

      IL_012f:  ldc.i4.0
      IL_0130:  ldc.i4.0
      IL_0131:  ceq
      IL_0133:  stloc.s    CS$4$0001
//000121:                     alpha = Math.Max(alpha, bestMove.Value.Value);
//000122:                 }
//000123:                 else
//000124:                 {
//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
//000126:                     if (bestMove.Value <= alpha) break;
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_0135:  ldloc.s    CS$4$0001
      IL_0137:  brtrue.s   IL_013e

//000120:                     if (bestMove.Value >= beta) break;
      IL_0139:  br         IL_01ec

//000121:                     alpha = Math.Max(alpha, bestMove.Value.Value);
      IL_013e:  ldarg.3
      IL_013f:  ldloca.s   bestMove
      IL_0141:  ldflda     valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_0146:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::get_Value()
      IL_014b:  call       int32 [mscorlib]System.Math::Max(int32,
                                                            int32)
      IL_0150:  starg.s    alpha
//000122:                 }
      IL_0152:  nop
//000123:                 else
//000124:                 {
//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
//000126:                     if (bestMove.Value <= alpha) break;
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_0153:  br         IL_01db

//000124:                 {
      IL_0158:  nop
//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
      IL_0159:  ldloca.s   curMove
      IL_015b:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_0160:  stloc.s    CS$0$0003
      IL_0162:  ldloca.s   bestMove
      IL_0164:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_0169:  stloc.s    CS$0$0004
      IL_016b:  ldloca.s   CS$0$0003
      IL_016d:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
      IL_0172:  ldloca.s   CS$0$0004
      IL_0174:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
      IL_0179:  bge.s      IL_018c

      IL_017b:  ldloca.s   CS$0$0003
      IL_017d:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
      IL_0182:  ldloca.s   CS$0$0004
      IL_0184:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
      IL_0189:  and
      IL_018a:  br.s       IL_018d

      IL_018c:  ldc.i4.0
      IL_018d:  ldc.i4.0
      IL_018e:  ceq
      IL_0190:  stloc.s    CS$4$0001
//000126:                     if (bestMove.Value <= alpha) break;
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_0192:  ldloc.s    CS$4$0001
      IL_0194:  brtrue.s   IL_0199

//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
      IL_0196:  ldloc.s    curMove
      IL_0198:  stloc.0
//000126:                     if (bestMove.Value <= alpha) break;
      IL_0199:  ldloca.s   bestMove
      IL_019b:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_01a0:  stloc.s    CS$0$0003
      IL_01a2:  ldarg.3
      IL_01a3:  stloc.s    CS$0$0005
      IL_01a5:  ldloca.s   CS$0$0003
      IL_01a7:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
      IL_01ac:  ldloc.s    CS$0$0005
      IL_01ae:  bgt.s      IL_01b9

      IL_01b0:  ldloca.s   CS$0$0003
      IL_01b2:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
      IL_01b7:  br.s       IL_01ba

      IL_01b9:  ldc.i4.0
      IL_01ba:  ldc.i4.0
      IL_01bb:  ceq
      IL_01bd:  stloc.s    CS$4$0001
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_01bf:  ldloc.s    CS$4$0001
      IL_01c1:  brtrue.s   IL_01c5

//000126:                     if (bestMove.Value <= alpha) break;
      IL_01c3:  br.s       IL_01ec

//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
      IL_01c5:  ldarg.s    beta
      IL_01c7:  ldloca.s   bestMove
      IL_01c9:  ldflda     valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_01ce:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::get_Value()
      IL_01d3:  call       int32 [mscorlib]System.Math::Min(int32,
                                                            int32)
      IL_01d8:  starg.s    beta
//000128:                 }
      IL_01da:  nop
//000129:             }
      IL_01db:  nop
//000111:             foreach (MinimaxMove move in validMoves)
      IL_01dc:  ldloc.s    CS$5$0002
      IL_01de:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_01e3:  stloc.s    CS$4$0001
//000112:             {
//000113:                 consideredLocalMoves = true;
//000114: 
//000115:                 MinimaxMove curMove = move;
//000116:                 curMove.Value = InternalSearch(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1).Value;
//000117:                 if (isLightPlayer)
//000118:                 {
//000119:                     if (curMove.Value > bestMove.Value) bestMove = curMove;
//000120:                     if (bestMove.Value >= beta) break;
//000121:                     alpha = Math.Max(alpha, bestMove.Value.Value);
//000122:                 }
//000123:                 else
//000124:                 {
//000125:                     if (curMove.Value < bestMove.Value) bestMove = curMove;
//000126:                     if (bestMove.Value <= alpha) break;
//000127:                     beta = Math.Min(beta, bestMove.Value.Value);
//000128:                 }
//000129:             }
//000130: 
//000131:             // If there were no valid moves, still calculate the value.
//000132:             if (!consideredLocalMoves)
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_01e5:  ldloc.s    CS$4$0001
      IL_01e7:  brtrue     IL_008b

      IL_01ec:  leave.s    IL_0202

    }  // end .try
    finally
    {
      IL_01ee:  ldloc.s    CS$5$0002
      IL_01f0:  ldnull
      IL_01f1:  ceq
      IL_01f3:  stloc.s    CS$4$0001
      IL_01f5:  ldloc.s    CS$4$0001
      IL_01f7:  brtrue.s   IL_0201

      IL_01f9:  ldloc.s    CS$5$0002
      IL_01fb:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0200:  nop
      IL_0201:  endfinally
    }  // end handler
    IL_0202:  nop
//000132:             if (!consideredLocalMoves)
    IL_0203:  ldloc.2
    IL_0204:  stloc.s    CS$4$0001
//000133:             {
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
//000135:             }
//000136: 
//000137:             return bestMove;
//000138:         }
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    IL_0206:  ldloc.s    CS$4$0001
    IL_0208:  brtrue.s   IL_022a

//000133:             {
    IL_020a:  nop
//000134:                 bestMove.Value = InternalSearch(state, !isLightPlayer, alpha, beta, depth + 1).Value;
    IL_020b:  ldloca.s   bestMove
    IL_020d:  ldarg.0
    IL_020e:  ldarg.1
    IL_020f:  ldarg.2
    IL_0210:  ldc.i4.0
    IL_0211:  ceq
    IL_0213:  ldarg.3
    IL_0214:  ldarg.s    beta
    IL_0216:  ldarg.s    depth
    IL_0218:  ldc.i4.1
    IL_0219:  add
    IL_021a:  call       instance valuetype Reversi.MinimaxMove Reversi.Minimax::InternalSearch(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                bool,
                                                                                                int32,
                                                                                                int32,
                                                                                                int32)
    IL_021f:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
    IL_0224:  stfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
//000135:             }
    IL_0229:  nop
//000136: 
//000137:             return bestMove;
    IL_022a:  ldloc.0
    IL_022b:  stloc.s    CS$1$0000
    IL_022d:  br.s       IL_022f

//000138:         }
    IL_022f:  ldloc.s    CS$1$0000
    IL_0231:  ret
  } // end of method Minimax::InternalSearch

  .method private hidebysig instance valuetype Reversi.MinimaxMove 
          InternalSearchTPL(valuetype Reversi.MinimaxSpot[0...,0...] state,
                            bool isLightPlayer,
                            int32 alpha,
                            int32 beta,
                            int32 depth,
                            valuetype [mscorlib]System.Threading.CancellationToken token) cil managed
  {
    // Code size       1159 (0x487)
    .maxstack  8
    .locals init ([0] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> validMoves,
             [1] bool consideredLocalMoves,
             [2] class [System]System.Collections.Generic.Queue`1<class [mscorlib]System.Threading.Tasks.Task> workers,
             [3] valuetype Reversi.MinimaxMove move,
             [4] bool isPruning,
             [5] bool lockTaken,
             [6] class [mscorlib]System.Action 'CS$<>9__CachedAnonymousMethodDelegate5',
             [7] class Reversi.Minimax/'<>c__DisplayClass6' 'CS$<>8__locals7',
             [8] class Reversi.Minimax/'<>c__DisplayClass3' 'CS$<>8__locals4',
             [9] valuetype Reversi.MinimaxMove CS$1$0000,
             [10] bool CS$4$0001,
             [11] class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove> CS$5$0002,
             [12] valuetype [mscorlib]System.Nullable`1<int32> CS$0$0003,
             [13] valuetype [mscorlib]System.Nullable`1<int32> CS$0$0004,
             [14] int32 CS$0$0005)
//000139: 
//000140:         /// <summary>
//000141:         /// Should only be called through the public Search method.
//000142:         /// </summary>
//000143:         /// <param name="state">The game state to consider.</param>
//000144:         /// <param name="isLightPlayer">The player to move.</param>
//000145:         /// <param name="alpha">The alpha pruning value.</param>
//000146:         /// <param name="beta">The beta pruning value.</param>
//000147:         /// <param name="depth">The current search depth.</param>
//000148:         /// <param name="token">The pruning token.</param>
//000149:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000150:         /// <remarks>
//000151:         /// The initial alpha value should be Int32.MinValue, the initial beta value 
//000152:         /// should be Int32.MaxValue, the initial depth value should be 0, and the 
//000153:         /// initial token should be a non-settable token.
//000154:         /// 
//000155:         /// The search will terminate ASAP if the m_ct cancellation token is signaled.
//000156:         /// 
//000157:         /// This method is thread-safe.
//000158:         /// </remarks>
//000159:         private MinimaxMove InternalSearchTPL(MinimaxSpot[,] state, bool isLightPlayer, int alpha, int beta, int depth, CancellationToken token)
//000160:         {
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    IL_0000:  newobj     instance void Reversi.Minimax/'<>c__DisplayClass3'::.ctor()
    IL_0005:  stloc.s    'CS$<>8__locals4'
    IL_0007:  ldloc.s    'CS$<>8__locals4'
    IL_0009:  ldarg.1
    IL_000a:  stfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax/'<>c__DisplayClass3'::state
    IL_000f:  ldloc.s    'CS$<>8__locals4'
    IL_0011:  ldarg.2
    IL_0012:  stfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
    IL_0017:  ldloc.s    'CS$<>8__locals4'
    IL_0019:  ldarg.3
    IL_001a:  stfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
    IL_001f:  ldloc.s    'CS$<>8__locals4'
    IL_0021:  ldarg.s    beta
    IL_0023:  stfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
    IL_0028:  ldloc.s    'CS$<>8__locals4'
    IL_002a:  ldarg.s    depth
    IL_002c:  stfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::depth
    IL_0031:  ldloc.s    'CS$<>8__locals4'
    IL_0033:  ldarg.0
    IL_0034:  stfld      class Reversi.Minimax Reversi.Minimax/'<>c__DisplayClass3'::'<>4__this'
//000160:         {
    IL_0039:  nop
//000161:             // Stop the search if...
//000162:             if (TerminalTest(state) || depth >= m_maxDepth || m_ct.IsCancellationRequested)
    IL_003a:  ldarg.0
    IL_003b:  ldloc.s    'CS$<>8__locals4'
    IL_003d:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax/'<>c__DisplayClass3'::state
    IL_0042:  callvirt   instance bool Reversi.Minimax::TerminalTest(valuetype Reversi.MinimaxSpot[0...,0...])
    IL_0047:  brtrue.s   IL_0068

    IL_0049:  ldloc.s    'CS$<>8__locals4'
    IL_004b:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::depth
    IL_0050:  ldarg.0
    IL_0051:  ldfld      int32 Reversi.Minimax::m_maxDepth
    IL_0056:  bge.s      IL_0068

    IL_0058:  ldarg.0
    IL_0059:  ldflda     valuetype [mscorlib]System.Threading.CancellationToken Reversi.Minimax::m_ct
    IL_005e:  call       instance bool [mscorlib]System.Threading.CancellationToken::get_IsCancellationRequested()
    IL_0063:  ldc.i4.0
    IL_0064:  ceq
    IL_0066:  br.s       IL_0069

    IL_0068:  ldc.i4.0
    IL_0069:  stloc.s    CS$4$0001
//000163:             {
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
//000173: 
//000174:             bool consideredLocalMoves = false;
//000175:             Queue<Task> workers = new Queue<Task>();
//000176:             object bigLock = new object();
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
//000178:             foreach (MinimaxMove move in validMoves)
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    IL_006b:  ldloc.s    CS$4$0001
    IL_006d:  brtrue.s   IL_00a0

//000163:             {
    IL_006f:  nop
//000164:                 m_movesConsidered++; // NOTE: this is racy and may be lower than the actual count, but it only needs to be an appx
    IL_0070:  ldarg.0
    IL_0071:  dup
    IL_0072:  volatile.
    IL_0074:  ldfld      int32 modreq([mscorlib]System.Runtime.CompilerServices.IsVolatile) Reversi.Minimax::m_movesConsidered
    IL_0079:  ldc.i4.1
    IL_007a:  add
    IL_007b:  volatile.
    IL_007d:  stfld      int32 modreq([mscorlib]System.Runtime.CompilerServices.IsVolatile) Reversi.Minimax::m_movesConsidered
//000165:                 return new MinimaxMove(EvaluateHeuristic(state));
    IL_0082:  ldarg.0
    IL_0083:  ldloc.s    'CS$<>8__locals4'
    IL_0085:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax/'<>c__DisplayClass3'::state
    IL_008a:  callvirt   instance int32 Reversi.Minimax::EvaluateHeuristic(valuetype Reversi.MinimaxSpot[0...,0...])
    IL_008f:  newobj     instance void valuetype [mscorlib]System.Nullable`1<int32>::.ctor(!0)
    IL_0094:  newobj     instance void Reversi.MinimaxMove::.ctor(valuetype [mscorlib]System.Nullable`1<int32>)
    IL_0099:  stloc.s    CS$1$0000
    IL_009b:  br         IL_0484

//000166:             }
//000167: 
//000168:             // Initialize the best move for this recursive call.
//000169:             MinimaxMove bestMove = new MinimaxMove(isLightPlayer ? Int32.MinValue : Int32.MaxValue);
    IL_00a0:  ldloc.s    'CS$<>8__locals4'
    IL_00a2:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
    IL_00a7:  ldloc.s    'CS$<>8__locals4'
    IL_00a9:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
    IL_00ae:  brtrue.s   IL_00b7

    IL_00b0:  ldc.i4     0x7fffffff
    IL_00b5:  br.s       IL_00bc

    IL_00b7:  ldc.i4     0x80000000
    IL_00bc:  newobj     instance void valuetype [mscorlib]System.Nullable`1<int32>::.ctor(!0)
    IL_00c1:  newobj     instance void Reversi.MinimaxMove::.ctor(valuetype [mscorlib]System.Nullable`1<int32>)
    IL_00c6:  stobj      Reversi.MinimaxMove
//000170: 
//000171:             // Get the valid moves for this recursive call.
//000172:             IEnumerable<MinimaxMove> validMoves = GetValidMoves(state, isLightPlayer);
    IL_00cb:  ldarg.0
    IL_00cc:  ldloc.s    'CS$<>8__locals4'
    IL_00ce:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax/'<>c__DisplayClass3'::state
    IL_00d3:  ldloc.s    'CS$<>8__locals4'
    IL_00d5:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
    IL_00da:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> Reversi.Minimax::GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                                                                         bool)
    IL_00df:  stloc.0
//000173: 
//000174:             bool consideredLocalMoves = false;
    IL_00e0:  ldc.i4.0
    IL_00e1:  stloc.1
//000175:             Queue<Task> workers = new Queue<Task>();
    IL_00e2:  newobj     instance void class [System]System.Collections.Generic.Queue`1<class [mscorlib]System.Threading.Tasks.Task>::.ctor()
    IL_00e7:  stloc.2
//000176:             object bigLock = new object();
    IL_00e8:  ldloc.s    'CS$<>8__locals4'
    IL_00ea:  newobj     instance void [mscorlib]System.Object::.ctor()
    IL_00ef:  stfld      object Reversi.Minimax/'<>c__DisplayClass3'::bigLock
//000177:             CancellationTokenSource cts = new CancellationTokenSource();
    IL_00f4:  ldloc.s    'CS$<>8__locals4'
    IL_00f6:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_00fb:  stfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass3'::cts
//000178:             foreach (MinimaxMove move in validMoves)
    IL_0100:  nop
    IL_0101:  ldloc.0
    IL_0102:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove>::GetEnumerator()
    IL_0107:  stloc.s    CS$5$0002
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    .try
    {
      IL_0109:  br         IL_03fc

//000178:             foreach (MinimaxMove move in validMoves)
      IL_010e:  ldloc.s    CS$5$0002
      IL_0110:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove>::get_Current()
      IL_0115:  stloc.3
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_0116:  ldnull
      IL_0117:  stloc.s    'CS$<>9__CachedAnonymousMethodDelegate5'
      IL_0119:  newobj     instance void Reversi.Minimax/'<>c__DisplayClass6'::.ctor()
      IL_011e:  stloc.s    'CS$<>8__locals7'
      IL_0120:  ldloc.s    'CS$<>8__locals7'
      IL_0122:  ldloc.s    'CS$<>8__locals4'
      IL_0124:  stfld      class Reversi.Minimax/'<>c__DisplayClass3' Reversi.Minimax/'<>c__DisplayClass6'::'CS$<>8__locals4'
//000179:             {
      IL_0129:  nop
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
      IL_012a:  ldc.i4.1
      IL_012b:  stloc.1
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
      IL_012c:  ldarga.s   token
      IL_012e:  call       instance bool [mscorlib]System.Threading.CancellationToken::get_IsCancellationRequested()
      IL_0133:  ldc.i4.0
      IL_0134:  ceq
      IL_0136:  stloc.s    CS$4$0001
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_0138:  ldloc.s    CS$4$0001
      IL_013a:  brtrue.s   IL_014f

//000187:                 {
      IL_013c:  nop
//000188:                     cts.Cancel();
      IL_013d:  ldloc.s    'CS$<>8__locals4'
      IL_013f:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass3'::cts
      IL_0144:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
      IL_0149:  nop
//000189:                     break;
      IL_014a:  br         IL_040c

//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
      IL_014f:  ldloc.s    'CS$<>8__locals7'
      IL_0151:  ldloc.3
      IL_0152:  stfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
      IL_0157:  ldarg.0
      IL_0158:  ldfld      int32 Reversi.Minimax::m_taskCount
      IL_015d:  ldarg.0
      IL_015e:  ldfld      int32 Reversi.Minimax::m_degOfParallelism
      IL_0163:  bge.s      IL_0178

      IL_0165:  ldloc.s    'CS$<>8__locals4'
      IL_0167:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::depth
      IL_016c:  ldarg.0
      IL_016d:  ldfld      int32 Reversi.Minimax::m_maxDepth
      IL_0172:  ldc.i4.1
      IL_0173:  sub
      IL_0174:  cgt
      IL_0176:  br.s       IL_0179

      IL_0178:  ldc.i4.1
      IL_0179:  stloc.s    CS$4$0001
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_017b:  ldloc.s    CS$4$0001
      IL_017d:  brtrue.s   IL_01ba

//000194:                 {
      IL_017f:  nop
//000195:                     Interlocked.Increment(ref m_taskCount);
      IL_0180:  ldarg.0
      IL_0181:  ldflda     int32 Reversi.Minimax::m_taskCount
      IL_0186:  call       int32 [mscorlib]System.Threading.Interlocked::Increment(int32&)
      IL_018b:  pop
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
      IL_018c:  ldloc.2
      IL_018d:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
      IL_0192:  ldloc.s    'CS$<>9__CachedAnonymousMethodDelegate5'
      IL_0194:  brtrue.s   IL_01a7

      IL_0196:  ldloc.s    'CS$<>8__locals7'
      IL_0198:  ldftn      instance void Reversi.Minimax/'<>c__DisplayClass6'::'<InternalSearchTPL>b__2'()
      IL_019e:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                        native int)
      IL_01a3:  stloc.s    'CS$<>9__CachedAnonymousMethodDelegate5'
      IL_01a5:  br.s       IL_01a7

      IL_01a7:  ldloc.s    'CS$<>9__CachedAnonymousMethodDelegate5'
      IL_01a9:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
      IL_01ae:  callvirt   instance void class [System]System.Collections.Generic.Queue`1<class [mscorlib]System.Threading.Tasks.Task>::Enqueue(!0)
      IL_01b3:  nop
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
      IL_01b4:  nop
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_01b5:  br         IL_03fb

//000218:                 {
      IL_01ba:  nop
//000219:                     bool isPruning = false;
      IL_01bb:  ldc.i4.0
      IL_01bc:  stloc.s    isPruning
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
      IL_01be:  ldloc.s    'CS$<>8__locals7'
      IL_01c0:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
      IL_01c5:  ldarg.0
      IL_01c6:  ldarg.0
      IL_01c7:  ldloc.s    'CS$<>8__locals4'
      IL_01c9:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax/'<>c__DisplayClass3'::state
      IL_01ce:  ldloc.s    'CS$<>8__locals7'
      IL_01d0:  ldfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
      IL_01d5:  ldloc.s    'CS$<>8__locals4'
      IL_01d7:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
      IL_01dc:  callvirt   instance valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax::GetInsight(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                         valuetype Reversi.MinimaxMove,
                                                                                                         bool)
      IL_01e1:  ldloc.s    'CS$<>8__locals4'
      IL_01e3:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
      IL_01e8:  ldc.i4.0
      IL_01e9:  ceq
      IL_01eb:  ldloc.s    'CS$<>8__locals4'
      IL_01ed:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
      IL_01f2:  ldloc.s    'CS$<>8__locals4'
      IL_01f4:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
      IL_01f9:  ldloc.s    'CS$<>8__locals4'
      IL_01fb:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::depth
      IL_0200:  ldc.i4.1
      IL_0201:  add
      IL_0202:  ldloc.s    'CS$<>8__locals4'
      IL_0204:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass3'::cts
      IL_0209:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
      IL_020e:  call       instance valuetype Reversi.MinimaxMove Reversi.Minimax::InternalSearchTPL(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                     bool,
                                                                                                     int32,
                                                                                                     int32,
                                                                                                     int32,
                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
      IL_0213:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
      IL_0218:  stfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
      IL_021d:  ldc.i4.0
      IL_021e:  stloc.s    lockTaken
//000224:                     try
//000225:                     {
      .try
      {
        IL_0220:  nop
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
        IL_0221:  ldloc.2
        IL_0222:  callvirt   instance int32 class [System]System.Collections.Generic.Queue`1<class [mscorlib]System.Threading.Tasks.Task>::get_Count()
        IL_0227:  ldc.i4.0
        IL_0228:  cgt
        IL_022a:  ldc.i4.0
        IL_022b:  ceq
        IL_022d:  stloc.s    CS$4$0001
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_022f:  ldloc.s    CS$4$0001
        IL_0231:  brtrue.s   IL_0242

//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
        IL_0233:  ldloc.s    'CS$<>8__locals4'
        IL_0235:  ldfld      object Reversi.Minimax/'<>c__DisplayClass3'::bigLock
        IL_023a:  ldloca.s   lockTaken
        IL_023c:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                            bool&)
        IL_0241:  nop
//000227:                         if (isLightPlayer)
        IL_0242:  ldloc.s    'CS$<>8__locals4'
        IL_0244:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
        IL_0249:  ldc.i4.0
        IL_024a:  ceq
        IL_024c:  stloc.s    CS$4$0001
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_024e:  ldloc.s    CS$4$0001
        IL_0250:  brtrue     IL_030d

//000228:                         {
        IL_0255:  nop
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
        IL_0256:  ldloc.s    'CS$<>8__locals7'
        IL_0258:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
        IL_025d:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_0262:  stloc.s    CS$0$0003
        IL_0264:  ldloc.s    'CS$<>8__locals4'
        IL_0266:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_026b:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_0270:  stloc.s    CS$0$0004
        IL_0272:  ldloca.s   CS$0$0003
        IL_0274:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_0279:  ldloca.s   CS$0$0004
        IL_027b:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_0280:  ble.s      IL_0293

        IL_0282:  ldloca.s   CS$0$0003
        IL_0284:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_0289:  ldloca.s   CS$0$0004
        IL_028b:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_0290:  and
        IL_0291:  br.s       IL_0294

        IL_0293:  ldc.i4.0
        IL_0294:  ldc.i4.0
        IL_0295:  ceq
        IL_0297:  stloc.s    CS$4$0001
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_0299:  ldloc.s    CS$4$0001
        IL_029b:  brtrue.s   IL_02ab

//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
        IL_029d:  ldloc.s    'CS$<>8__locals4'
        IL_029f:  ldloc.s    'CS$<>8__locals7'
        IL_02a1:  ldfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
        IL_02a6:  stfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
//000230:                             if (bestMove.Value >= beta) isPruning = true;
        IL_02ab:  ldloc.s    'CS$<>8__locals4'
        IL_02ad:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_02b2:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_02b7:  stloc.s    CS$0$0003
        IL_02b9:  ldloc.s    'CS$<>8__locals4'
        IL_02bb:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
        IL_02c0:  stloc.s    CS$0$0005
        IL_02c2:  ldloca.s   CS$0$0003
        IL_02c4:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_02c9:  ldloc.s    CS$0$0005
        IL_02cb:  blt.s      IL_02d6

        IL_02cd:  ldloca.s   CS$0$0003
        IL_02cf:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_02d4:  br.s       IL_02d7

        IL_02d6:  ldc.i4.0
        IL_02d7:  ldc.i4.0
        IL_02d8:  ceq
        IL_02da:  stloc.s    CS$4$0001
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_02dc:  ldloc.s    CS$4$0001
        IL_02de:  brtrue.s   IL_02e3

//000230:                             if (bestMove.Value >= beta) isPruning = true;
        IL_02e0:  ldc.i4.1
        IL_02e1:  stloc.s    isPruning
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
        IL_02e3:  ldloc.s    'CS$<>8__locals4'
        IL_02e5:  ldloc.s    'CS$<>8__locals4'
        IL_02e7:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
        IL_02ec:  ldloc.s    'CS$<>8__locals4'
        IL_02ee:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_02f3:  ldflda     valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_02f8:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::get_Value()
        IL_02fd:  call       int32 [mscorlib]System.Math::Max(int32,
                                                              int32)
        IL_0302:  stfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
//000232:                         }
        IL_0307:  nop
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_0308:  br         IL_03c0

//000234:                         {
        IL_030d:  nop
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
        IL_030e:  ldloc.s    'CS$<>8__locals7'
        IL_0310:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
        IL_0315:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_031a:  stloc.s    CS$0$0003
        IL_031c:  ldloc.s    'CS$<>8__locals4'
        IL_031e:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_0323:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_0328:  stloc.s    CS$0$0004
        IL_032a:  ldloca.s   CS$0$0003
        IL_032c:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_0331:  ldloca.s   CS$0$0004
        IL_0333:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_0338:  bge.s      IL_034b

        IL_033a:  ldloca.s   CS$0$0003
        IL_033c:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_0341:  ldloca.s   CS$0$0004
        IL_0343:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_0348:  and
        IL_0349:  br.s       IL_034c

        IL_034b:  ldc.i4.0
        IL_034c:  ldc.i4.0
        IL_034d:  ceq
        IL_034f:  stloc.s    CS$4$0001
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_0351:  ldloc.s    CS$4$0001
        IL_0353:  brtrue.s   IL_0363

//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
        IL_0355:  ldloc.s    'CS$<>8__locals4'
        IL_0357:  ldloc.s    'CS$<>8__locals7'
        IL_0359:  ldfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass6'::curMove
        IL_035e:  stfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
        IL_0363:  ldloc.s    'CS$<>8__locals4'
        IL_0365:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_036a:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_036f:  stloc.s    CS$0$0003
        IL_0371:  ldloc.s    'CS$<>8__locals4'
        IL_0373:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
        IL_0378:  stloc.s    CS$0$0005
        IL_037a:  ldloca.s   CS$0$0003
        IL_037c:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()
        IL_0381:  ldloc.s    CS$0$0005
        IL_0383:  bgt.s      IL_038e

        IL_0385:  ldloca.s   CS$0$0003
        IL_0387:  call       instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()
        IL_038c:  br.s       IL_038f

        IL_038e:  ldc.i4.0
        IL_038f:  ldc.i4.0
        IL_0390:  ceq
        IL_0392:  stloc.s    CS$4$0001
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_0394:  ldloc.s    CS$4$0001
        IL_0396:  brtrue.s   IL_039b

//000236:                             if (bestMove.Value <= alpha) isPruning = true;
        IL_0398:  ldc.i4.1
        IL_0399:  stloc.s    isPruning
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
        IL_039b:  ldloc.s    'CS$<>8__locals4'
        IL_039d:  ldloc.s    'CS$<>8__locals4'
        IL_039f:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
        IL_03a4:  ldloc.s    'CS$<>8__locals4'
        IL_03a6:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
        IL_03ab:  ldflda     valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
        IL_03b0:  call       instance !0 valuetype [mscorlib]System.Nullable`1<int32>::get_Value()
        IL_03b5:  call       int32 [mscorlib]System.Math::Min(int32,
                                                              int32)
        IL_03ba:  stfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
//000238:                         }
        IL_03bf:  nop
//000239:                     }
        IL_03c0:  nop
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_03c1:  leave.s    IL_03de

//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
      }  // end .try
      finally
      {
        IL_03c3:  nop
        IL_03c4:  ldloc.s    lockTaken
        IL_03c6:  ldc.i4.0
        IL_03c7:  ceq
        IL_03c9:  stloc.s    CS$4$0001
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_03cb:  ldloc.s    CS$4$0001
        IL_03cd:  brtrue.s   IL_03dc

//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
        IL_03cf:  ldloc.s    'CS$<>8__locals4'
        IL_03d1:  ldfld      object Reversi.Minimax/'<>c__DisplayClass3'::bigLock
        IL_03d6:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
        IL_03db:  nop
        IL_03dc:  nop
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
        IL_03dd:  endfinally
      }  // end handler
      IL_03de:  nop
//000242:                     if (isPruning)
      IL_03df:  ldloc.s    isPruning
      IL_03e1:  ldc.i4.0
      IL_03e2:  ceq
      IL_03e4:  stloc.s    CS$4$0001
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_03e6:  ldloc.s    CS$4$0001
      IL_03e8:  brtrue.s   IL_03fa

//000243:                     {
      IL_03ea:  nop
//000244:                         cts.Cancel();
      IL_03eb:  ldloc.s    'CS$<>8__locals4'
      IL_03ed:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass3'::cts
      IL_03f2:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
      IL_03f7:  nop
//000245:                         break;
      IL_03f8:  br.s       IL_040c

//000246:                     }
//000247:                 }
      IL_03fa:  nop
//000248:             }
      IL_03fb:  nop
//000178:             foreach (MinimaxMove move in validMoves)
      IL_03fc:  ldloc.s    CS$5$0002
      IL_03fe:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_0403:  stloc.s    CS$4$0001
//000179:             {
//000180:                 // SHARED STATE
//000181:                 //     The local variables (bestMove, alpha, beta) are protected by a lock.
//000182:                 //     The non-local variables (m_taskCount) are modified using Interlocked
//000183:                 consideredLocalMoves = true;
//000184: 
//000185:                 // If the pruning token is signaled, stop this loop.
//000186:                 if (token.IsCancellationRequested)
//000187:                 {
//000188:                     cts.Cancel();
//000189:                     break;
//000190:                 }
//000191: 
//000192:                 MinimaxMove curMove = move;
//000193:                 if (m_taskCount < m_degOfParallelism && depth <= m_maxDepth - 1)
//000194:                 {
//000195:                     Interlocked.Increment(ref m_taskCount);
//000196:                     workers.Enqueue(Task.Factory.StartNew(() =>
//000197:                     {
//000198:                         curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000199:                         lock (bigLock)
//000200:                         {
//000201:                             if (isLightPlayer)
//000202:                             {
//000203:                                 if (curMove.Value > bestMove.Value) bestMove = curMove;
//000204:                                 if (bestMove.Value >= beta) cts.Cancel();
//000205:                                 alpha = Math.Max(alpha, bestMove.Value.Value);
//000206:                             }
//000207:                             else
//000208:                             {
//000209:                                 if (curMove.Value < bestMove.Value) bestMove = curMove;
//000210:                                 if (bestMove.Value <= alpha) cts.Cancel();
//000211:                                 beta = Math.Min(beta, bestMove.Value.Value);
//000212:                             }
//000213:                         }
//000214:                         Interlocked.Decrement(ref m_taskCount);
//000215:                     }));
//000216:                 }
//000217:                 else
//000218:                 {
//000219:                     bool isPruning = false;
//000220:                     curMove.Value = InternalSearchTPL(GetInsight(state, curMove, isLightPlayer), !isLightPlayer, alpha, beta, depth + 1, cts.Token).Value;
//000221: 
//000222:                     // If there are no tasks, no need to lock.
//000223:                     bool lockTaken = false;
//000224:                     try
//000225:                     {
//000226:                         if (workers.Count > 0) Monitor.Enter(bigLock, ref lockTaken);
//000227:                         if (isLightPlayer)
//000228:                         {
//000229:                             if (curMove.Value > bestMove.Value) bestMove = curMove;
//000230:                             if (bestMove.Value >= beta) isPruning = true;
//000231:                             alpha = Math.Max(alpha, bestMove.Value.Value);
//000232:                         }
//000233:                         else
//000234:                         {
//000235:                             if (curMove.Value < bestMove.Value) bestMove = curMove;
//000236:                             if (bestMove.Value <= alpha) isPruning = true;
//000237:                             beta = Math.Min(beta, bestMove.Value.Value);
//000238:                         }
//000239:                     }
//000240:                     finally { if (lockTaken) Monitor.Exit(bigLock); }
//000241: 
//000242:                     if (isPruning)
//000243:                     {
//000244:                         cts.Cancel();
//000245:                         break;
//000246:                     }
//000247:                 }
//000248:             }
//000249: 
//000250:             Task.WaitAll(workers.ToArray());
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_0405:  ldloc.s    CS$4$0001
      IL_0407:  brtrue     IL_010e

      IL_040c:  leave.s    IL_0422

    }  // end .try
    finally
    {
      IL_040e:  ldloc.s    CS$5$0002
      IL_0410:  ldnull
      IL_0411:  ceq
      IL_0413:  stloc.s    CS$4$0001
      IL_0415:  ldloc.s    CS$4$0001
      IL_0417:  brtrue.s   IL_0421

      IL_0419:  ldloc.s    CS$5$0002
      IL_041b:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0420:  nop
      IL_0421:  endfinally
    }  // end handler
    IL_0422:  nop
//000250:             Task.WaitAll(workers.ToArray());
    IL_0423:  ldloc.2
    IL_0424:  callvirt   instance !0[] class [System]System.Collections.Generic.Queue`1<class [mscorlib]System.Threading.Tasks.Task>::ToArray()
    IL_0429:  call       void [mscorlib]System.Threading.Tasks.Task::WaitAll(class [mscorlib]System.Threading.Tasks.Task[])
    IL_042e:  nop
//000251: 
//000252:             // If there were no valid moves, still calculate the value.
//000253:             if (!consideredLocalMoves)
    IL_042f:  ldloc.1
    IL_0430:  stloc.s    CS$4$0001
//000254:             {
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
//000256:             }
//000257: 
//000258:             return bestMove;
//000259:         }
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    IL_0432:  ldloc.s    CS$4$0001
    IL_0434:  brtrue.s   IL_0479

//000254:             {
    IL_0436:  nop
//000255:                 bestMove.Value = InternalSearchTPL(state, !isLightPlayer, alpha, beta, depth + 1, token).Value;
    IL_0437:  ldloc.s    'CS$<>8__locals4'
    IL_0439:  ldflda     valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
    IL_043e:  ldarg.0
    IL_043f:  ldloc.s    'CS$<>8__locals4'
    IL_0441:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Minimax/'<>c__DisplayClass3'::state
    IL_0446:  ldloc.s    'CS$<>8__locals4'
    IL_0448:  ldfld      bool Reversi.Minimax/'<>c__DisplayClass3'::isLightPlayer
    IL_044d:  ldc.i4.0
    IL_044e:  ceq
    IL_0450:  ldloc.s    'CS$<>8__locals4'
    IL_0452:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::alpha
    IL_0457:  ldloc.s    'CS$<>8__locals4'
    IL_0459:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::beta
    IL_045e:  ldloc.s    'CS$<>8__locals4'
    IL_0460:  ldfld      int32 Reversi.Minimax/'<>c__DisplayClass3'::depth
    IL_0465:  ldc.i4.1
    IL_0466:  add
    IL_0467:  ldarg.s    token
    IL_0469:  call       instance valuetype Reversi.MinimaxMove Reversi.Minimax::InternalSearchTPL(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                   bool,
                                                                                                   int32,
                                                                                                   int32,
                                                                                                   int32,
                                                                                                   valuetype [mscorlib]System.Threading.CancellationToken)
    IL_046e:  ldfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
    IL_0473:  stfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
//000256:             }
    IL_0478:  nop
//000257: 
//000258:             return bestMove;
    IL_0479:  ldloc.s    'CS$<>8__locals4'
    IL_047b:  ldfld      valuetype Reversi.MinimaxMove Reversi.Minimax/'<>c__DisplayClass3'::bestMove
    IL_0480:  stloc.s    CS$1$0000
    IL_0482:  br.s       IL_0484

//000259:         }
    IL_0484:  ldloc.s    CS$1$0000
    IL_0486:  ret
  } // end of method Minimax::InternalSearchTPL

  .method public hidebysig instance valuetype Reversi.MinimaxMove 
          Search(valuetype Reversi.MinimaxSpot[0...,0...] state,
                 bool isLightPlayer,
                 bool inParallel) cil managed
  {
    // Code size       337 (0x151)
    .maxstack  8
    .locals init ([0] valuetype Reversi.MinimaxMove aiMove,
             [1] class [mscorlib]System.Threading.Tasks.Task timeoutTask,
             [2] valuetype Reversi.MinimaxMove move,
             [3] class Reversi.Minimax/'<>c__DisplayClass9' 'CS$<>8__localsa',
             [4] valuetype Reversi.MinimaxMove CS$1$0000,
             [5] class [mscorlib]System.Threading.CancellationTokenSource CS$0$0001,
             [6] valuetype [mscorlib]System.Nullable`1<int32> CS$0$0002,
             [7] bool CS$4$0003,
             [8] class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove> CS$5$0004)
//000260: 
//000261:         /// <summary>
//000262:         /// Returns the best move resulting from a Minimax, alpha-beta pruning search on the given state.
//000263:         /// </summary>
//000264:         /// <param name="state">The state to consider.</param>
//000265:         /// <param name="isLightPlayer">The player to move.</param>
//000266:         /// <param name="inParallel">A boolean indicating whether to use the parallel algorithm.</param>
//000267:         /// <returns>A MinimaxMove that represents the best move found.</returns>
//000268:         /// <remarks>
//000269:         /// This method will only return a MinimaxMove(-1...) if there are no valid moves.
//000270:         /// </remarks>
//000271:         public MinimaxMove Search(MinimaxSpot[,] state, bool isLightPlayer, bool inParallel)
//000272:         {
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
//000275:             m_degOfParallelism = DegreeOfParallelism;
//000276:             m_timeLimit = TimeLimit;
//000277:             m_taskCount = 0;
//000278:             m_movesConsidered = 0;
//000279:             var curCts = m_cts = new CancellationTokenSource();
//000280:             m_ct = m_cts.Token;
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    IL_0000:  newobj     instance void Reversi.Minimax/'<>c__DisplayClass9'::.ctor()
    IL_0005:  stloc.3
    IL_0006:  ldloc.3
    IL_0007:  ldarg.0
    IL_0008:  stfld      class Reversi.Minimax Reversi.Minimax/'<>c__DisplayClass9'::'<>4__this'
//000272:         {
    IL_000d:  nop
//000273:             // Initialize a bunch of state.
//000274:             m_maxDepth = MaxDepth == -1 ? Int32.MaxValue : MaxDepth;
    IL_000e:  ldarg.0
    IL_000f:  ldarg.0
    IL_0010:  callvirt   instance int32 Reversi.Minimax::get_MaxDepth()
    IL_0015:  ldc.i4.m1
    IL_0016:  beq.s      IL_0020

    IL_0018:  ldarg.0
    IL_0019:  callvirt   instance int32 Reversi.Minimax::get_MaxDepth()
    IL_001e:  br.s       IL_0025

    IL_0020:  ldc.i4     0x7fffffff
    IL_0025:  stfld      int32 Reversi.Minimax::m_maxDepth
//000275:             m_degOfParallelism = DegreeOfParallelism;
    IL_002a:  ldarg.0
    IL_002b:  ldarg.0
    IL_002c:  callvirt   instance int32 Reversi.Minimax::get_DegreeOfParallelism()
    IL_0031:  stfld      int32 Reversi.Minimax::m_degOfParallelism
//000276:             m_timeLimit = TimeLimit;
    IL_0036:  ldarg.0
    IL_0037:  ldarg.0
    IL_0038:  callvirt   instance valuetype [mscorlib]System.TimeSpan Reversi.Minimax::get_TimeLimit()
    IL_003d:  stfld      valuetype [mscorlib]System.TimeSpan Reversi.Minimax::m_timeLimit
//000277:             m_taskCount = 0;
    IL_0042:  ldarg.0
    IL_0043:  ldc.i4.0
    IL_0044:  stfld      int32 Reversi.Minimax::m_taskCount
//000278:             m_movesConsidered = 0;
    IL_0049:  ldarg.0
    IL_004a:  ldc.i4.0
    IL_004b:  volatile.
    IL_004d:  stfld      int32 modreq([mscorlib]System.Runtime.CompilerServices.IsVolatile) Reversi.Minimax::m_movesConsidered
//000279:             var curCts = m_cts = new CancellationTokenSource();
    IL_0052:  ldloc.3
    IL_0053:  ldarg.0
    IL_0054:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_0059:  dup
    IL_005a:  stloc.s    CS$0$0001
    IL_005c:  stfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax::m_cts
    IL_0061:  ldloc.s    CS$0$0001
    IL_0063:  stfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax/'<>c__DisplayClass9'::curCts
//000280:             m_ct = m_cts.Token;
    IL_0068:  ldarg.0
    IL_0069:  ldarg.0
    IL_006a:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax::m_cts
    IL_006f:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_0074:  stfld      valuetype [mscorlib]System.Threading.CancellationToken Reversi.Minimax::m_ct
//000281: 
//000282:             MinimaxMove aiMove = new MinimaxMove(-1, -1, null);
    IL_0079:  ldloca.s   aiMove
    IL_007b:  ldc.i4.m1
    IL_007c:  ldc.i4.m1
    IL_007d:  ldloca.s   CS$0$0002
    IL_007f:  initobj    valuetype [mscorlib]System.Nullable`1<int32>
    IL_0085:  ldloc.s    CS$0$0002
    IL_0087:  call       instance void Reversi.MinimaxMove::.ctor(int32,
                                                                  int32,
                                                                  valuetype [mscorlib]System.Nullable`1<int32>)
    IL_008c:  nop
//000283: 
//000284:             // Start the timeout timer.  Done using a dedicated thread to minimize delay 
//000285:             // in cancellation due to lack of threads in the pool to run the callback.
//000286:             var timeoutTask = Task.Factory.StartNew(() =>
    IL_008d:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0092:  ldloc.3
    IL_0093:  ldftn      instance void Reversi.Minimax/'<>c__DisplayClass9'::'<Search>b__8'()
    IL_0099:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_009e:  ldc.i4.2
    IL_009f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.Tasks.TaskCreationOptions)
    IL_00a4:  stloc.1
//000287:             {
//000288:                 Thread.Sleep(m_timeLimit);
//000289:                 curCts.Cancel();
//000290:             }, TaskCreationOptions.LongRunning);
//000291: 
//000292:             // Do the search
//000293:             aiMove = inParallel ?
    IL_00a5:  ldarg.3
    IL_00a6:  brtrue.s   IL_00bd

    IL_00a8:  ldarg.0
    IL_00a9:  ldarg.1
    IL_00aa:  ldarg.2
    IL_00ab:  ldc.i4     0x80000000
    IL_00b0:  ldc.i4     0x7fffffff
    IL_00b5:  ldc.i4.0
    IL_00b6:  call       instance valuetype Reversi.MinimaxMove Reversi.Minimax::InternalSearch(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                bool,
                                                                                                int32,
                                                                                                int32,
                                                                                                int32)
    IL_00bb:  br.s       IL_00d5

    IL_00bd:  ldarg.0
    IL_00be:  ldarg.1
    IL_00bf:  ldarg.2
    IL_00c0:  ldc.i4     0x80000000
    IL_00c5:  ldc.i4     0x7fffffff
    IL_00ca:  ldc.i4.0
    IL_00cb:  call       valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationToken::get_None()
    IL_00d0:  call       instance valuetype Reversi.MinimaxMove Reversi.Minimax::InternalSearchTPL(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                   bool,
                                                                                                   int32,
                                                                                                   int32,
                                                                                                   int32,
                                                                                                   valuetype [mscorlib]System.Threading.CancellationToken)
    IL_00d5:  stloc.0
//000294:                 InternalSearchTPL(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0, CancellationToken.None) :
//000295:                 InternalSearch(state, isLightPlayer, Int32.MinValue, Int32.MaxValue, 0);
//000296: 
//000297:             // Make sure that MinimaxMove(-1...) is only returned if there are no valid moves, because
//000298:             // InternalSearch* may return MinimaxMove(-1...) if none of the valid moves beats Int32.Min/Max.
//000299:             if (aiMove.Row == -1)
    IL_00d6:  ldloca.s   aiMove
    IL_00d8:  ldfld      int32 Reversi.MinimaxMove::Row
    IL_00dd:  ldc.i4.m1
    IL_00de:  ceq
    IL_00e0:  ldc.i4.0
    IL_00e1:  ceq
    IL_00e3:  stloc.s    CS$4$0003
//000300:             {
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    IL_00e5:  ldloc.s    CS$4$0003
    IL_00e7:  brtrue.s   IL_0149

//000300:             {
    IL_00e9:  nop
//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
    IL_00ea:  nop
    IL_00eb:  ldarg.0
    IL_00ec:  ldarg.1
    IL_00ed:  ldarg.2
    IL_00ee:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> Reversi.Minimax::GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                                                                         bool)
    IL_00f3:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove>::GetEnumerator()
    IL_00f8:  stloc.s    CS$5$0004
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    .try
    {
      IL_00fa:  br.s       IL_0124

//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
      IL_00fc:  ldloc.s    CS$5$0004
      IL_00fe:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove>::get_Current()
      IL_0103:  stloc.2
//000302:                 {
      IL_0104:  nop
//000303:                     aiMove = move;
      IL_0105:  ldloc.2
      IL_0106:  stloc.0
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
      IL_0107:  ldloca.s   aiMove
      IL_0109:  ldarg.2
      IL_010a:  brtrue.s   IL_0113

      IL_010c:  ldc.i4     0x7fffffff
      IL_0111:  br.s       IL_0118

      IL_0113:  ldc.i4     0x80000000
      IL_0118:  newobj     instance void valuetype [mscorlib]System.Nullable`1<int32>::.ctor(!0)
      IL_011d:  stfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
//000305:                     break;
      IL_0122:  br.s       IL_0131

//000301:                 foreach (var move in GetValidMoves(state, isLightPlayer))
      IL_0124:  ldloc.s    CS$5$0004
      IL_0126:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_012b:  stloc.s    CS$4$0003
//000302:                 {
//000303:                     aiMove = move;
//000304:                     aiMove.Value = isLightPlayer ? Int32.MinValue : Int32.MaxValue;
//000305:                     break;
//000306:                 }
//000307:             }
//000308: 
//000309:             return aiMove;
//000310:         }
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
//000317:             if(m_cts!=null)
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
      IL_012d:  ldloc.s    CS$4$0003
      IL_012f:  brtrue.s   IL_00fc

      IL_0131:  leave.s    IL_0147

    }  // end .try
    finally
    {
      IL_0133:  ldloc.s    CS$5$0004
      IL_0135:  ldnull
      IL_0136:  ceq
      IL_0138:  stloc.s    CS$4$0003
      IL_013a:  ldloc.s    CS$4$0003
      IL_013c:  brtrue.s   IL_0146

      IL_013e:  ldloc.s    CS$5$0004
      IL_0140:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0145:  nop
      IL_0146:  endfinally
    }  // end handler
    IL_0147:  nop
//000307:             }
    IL_0148:  nop
//000308: 
//000309:             return aiMove;
    IL_0149:  ldloc.0
    IL_014a:  stloc.s    CS$1$0000
    IL_014c:  br.s       IL_014e

//000310:         }
    IL_014e:  ldloc.s    CS$1$0000
    IL_0150:  ret
  } // end of method Minimax::Search

  .method public hidebysig instance void 
          Cancel() cil managed
  {
    // Code size       27 (0x1b)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
//000311: 
//000312:         /// <summary>
//000313:         /// Cancel the ongoing operation, if there is one.
//000314:         /// </summary>
//000315:         public void Cancel()
//000316:         {
    IL_0000:  nop
//000317:             if(m_cts!=null)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax::m_cts
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  stloc.0
//000318:                 m_cts.Cancel();
//000319:         }
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
//000358:             Row = row;
//000359:             Col = col;
//000360:             Value = null;
//000361:         }
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
//000365:             Row = Col = -1;
//000366:             Value = value;
//000367:         }
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
//000371:             Row = row;
//000372:             Col = col;
//000373:             Value = value;
//000374:         }
//000375:     }
//000376: }
    IL_000b:  ldloc.0
    IL_000c:  brtrue.s   IL_001a

//000318:                 m_cts.Cancel();
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Minimax::m_cts
    IL_0014:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_0019:  nop
//000319:         }
    IL_001a:  ret
  } // end of method Minimax::Cancel

  .method public hidebysig specialname instance int32 
          get_MovesConsidered() cil managed
  {
    // Code size       14 (0xe)
    .maxstack  1
    .locals init ([0] int32 CS$1$0000)
//000320: 
//000321:         /// <summary>
//000322:         /// Returns the number of moves considered by the most recent Search.
//000323:         /// </summary>
//000324:         public int MovesConsidered
//000325:         {
//000326:             get { return m_movesConsidered; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  volatile.
    IL_0004:  ldfld      int32 modreq([mscorlib]System.Runtime.CompilerServices.IsVolatile) Reversi.Minimax::m_movesConsidered
    IL_0009:  stloc.0
    IL_000a:  br.s       IL_000c

    IL_000c:  ldloc.0
    IL_000d:  ret
  } // end of method Minimax::get_MovesConsidered

  .method family hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  ret
  } // end of method Minimax::.ctor

  .property instance int32 MaxDepth()
  {
    .get instance int32 Reversi.Minimax::get_MaxDepth()
  } // end of property Minimax::MaxDepth
  .property instance valuetype [mscorlib]System.TimeSpan
          TimeLimit()
  {
    .get instance valuetype [mscorlib]System.TimeSpan Reversi.Minimax::get_TimeLimit()
  } // end of property Minimax::TimeLimit
  .property instance int32 DegreeOfParallelism()
  {
    .get instance int32 Reversi.Minimax::get_DegreeOfParallelism()
  } // end of property Minimax::DegreeOfParallelism
  .property instance int32 MovesConsidered()
  {
    .get instance int32 Reversi.Minimax::get_MovesConsidered()
  } // end of property Minimax::MovesConsidered
} // end of class Reversi.Minimax

.class public auto ansi sealed Reversi.MinimaxSpot
       extends [mscorlib]System.Enum
{
  .field public specialname rtspecialname int32 value__
  .field public static literal valuetype Reversi.MinimaxSpot Empty = int32(0x00000000)
  .field public static literal valuetype Reversi.MinimaxSpot Dark = int32(0xFFFFFFFF)
  .field public static literal valuetype Reversi.MinimaxSpot Light = int32(0x00000001)
} // end of class Reversi.MinimaxSpot

.class public sequential ansi sealed beforefieldinit Reversi.MinimaxMove
       extends [mscorlib]System.ValueType
{
  .field public int32 Row
  .field public int32 Col
  .field public valuetype [mscorlib]System.Nullable`1<int32> Value
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(int32 row,
                               int32 col) cil managed
  {
    // Code size       28 (0x1c)
    .maxstack  8
//000327:         }
//000328: 
//000329:         private int m_maxDepth, m_degOfParallelism;
//000330:         private TimeSpan m_timeLimit;
//000331:         private int m_taskCount;
//000332:         private volatile int m_movesConsidered;
//000333:         private CancellationTokenSource m_cts;
//000334:         private CancellationToken m_ct;
//000335:     }
//000336: 
//000337:     /// <summary>
//000338:     /// An enum that represents the state of a board game spot.
//000339:     /// </summary>
//000340:     public enum MinimaxSpot
//000341:     {
//000342:         Empty = 0,
//000343:         Dark = -1,
//000344:         Light = 1
//000345:     }
//000346: 
//000347:     /// <summary>
//000348:     /// A struct that represents a board game move.  The value field
//000349:     /// should only be manipulated by Minimax.
//000350:     /// </summary>
//000351:     public struct MinimaxMove
//000352:     {
//000353:         public int Row, Col;
//000354:         public int? Value;
//000355: 
//000356:         public MinimaxMove(int row, int col)
//000357:         {
    IL_0000:  nop
//000358:             Row = row;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      int32 Reversi.MinimaxMove::Row
//000359:             Col = col;
    IL_0008:  ldarg.0
    IL_0009:  ldarg.2
    IL_000a:  stfld      int32 Reversi.MinimaxMove::Col
//000360:             Value = null;
    IL_000f:  ldarg.0
    IL_0010:  ldflda     valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
    IL_0015:  initobj    valuetype [mscorlib]System.Nullable`1<int32>
//000361:         }
    IL_001b:  ret
  } // end of method MinimaxMove::.ctor

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(valuetype [mscorlib]System.Nullable`1<int32> 'value') cil managed
  {
    // Code size       25 (0x19)
    .maxstack  4
    .locals init ([0] int32 CS$0$0000)
//000362: 
//000363:         public MinimaxMove(int? value)
//000364:         {
    IL_0000:  nop
//000365:             Row = Col = -1;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  ldc.i4.m1
    IL_0004:  dup
    IL_0005:  stloc.0
    IL_0006:  stfld      int32 Reversi.MinimaxMove::Col
    IL_000b:  ldloc.0
    IL_000c:  stfld      int32 Reversi.MinimaxMove::Row
//000366:             Value = value;
    IL_0011:  ldarg.0
    IL_0012:  ldarg.1
    IL_0013:  stfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
//000367:         }
    IL_0018:  ret
  } // end of method MinimaxMove::.ctor

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(int32 row,
                               int32 col,
                               valuetype [mscorlib]System.Nullable`1<int32> 'value') cil managed
  {
    // Code size       23 (0x17)
    .maxstack  8
//000368: 
//000369:         public MinimaxMove(int row, int col, int? value)
//000370:         {
    IL_0000:  nop
//000371:             Row = row;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      int32 Reversi.MinimaxMove::Row
//000372:             Col = col;
    IL_0008:  ldarg.0
    IL_0009:  ldarg.2
    IL_000a:  stfld      int32 Reversi.MinimaxMove::Col
//000373:             Value = value;
    IL_000f:  ldarg.0
    IL_0010:  ldarg.3
    IL_0011:  stfld      valuetype [mscorlib]System.Nullable`1<int32> Reversi.MinimaxMove::Value
//000374:         }
    IL_0016:  ret
  } // end of method MinimaxMove::.ctor

} // end of class Reversi.MinimaxMove

.class public auto ansi beforefieldinit Reversi.Window1
       extends [PresentationFramework]System.Windows.Window
       implements [System.Xaml]System.Windows.Markup.IComponentConnector
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .field private static literal float64 S_CYLINDER_HEIGHT = float64(3.)
  .field private static literal float64 S_CYLINDER_WIDTH = float64(5.)
  .field private static literal int32 CYLINDER_RESOLUTION = int32(0x00000032)
  .field private initonly valuetype [PresentationCore]System.Windows.Media.Color S_DARK_COLOR
  .field private initonly valuetype [PresentationCore]System.Windows.Media.Color S_LIGHT_COLOR
  .field private class Reversi.ReversiGame m_game
  .field private valuetype Reversi.MinimaxSpot[0...,0...] m_GUIboard
  .field private class [mscorlib]System.Threading.Tasks.Task m_aiUITask
  .field private class [mscorlib]System.Threading.CancellationTokenSource m_aiUICts
  .field private class [mscorlib]System.Threading.Tasks.TaskScheduler m_UIScheduler
  .field private bool m_isGameOver
  .field private bool m_isAIMoving
  .field private bool m_isAIParallel
  .field private bool m_isAuto
  .field private valuetype [PresentationCore]System.Windows.Duration m_progBarDuration
  .field private class [PresentationCore]System.Windows.Media.Animation.DoubleAnimation m_progBarAnim
  .field private bool m_useAnimation
  .field private class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder> m_gamePieces
  .field private class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> m_ghostPieces
  .field assembly class [PresentationFramework]System.Windows.Controls.Viewport3D mainViewport
  .field assembly class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera mainCamera
  .field assembly class [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D m_gameBoard
  .field assembly class [PresentationFramework]System.Windows.Controls.Grid theGrid
  .field assembly class [PresentationFramework]System.Windows.Controls.Viewport3D seqPlayerViewport
  .field assembly class [PresentationFramework]System.Windows.Controls.Label ui_seqPlayerLabel
  .field assembly class [PresentationFramework]System.Windows.Controls.Label ui_seqLabel
  .field assembly class [PresentationFramework]System.Windows.Controls.ProgressBar ui_seqProgBar
  .field assembly class [PresentationFramework]System.Windows.Controls.Viewport3D parPlayerViewport
  .field assembly class [PresentationFramework]System.Windows.Controls.Label ui_parLabel
  .field assembly class [PresentationFramework]System.Windows.Controls.ProgressBar ui_parProgBar
  .field assembly class [PresentationFramework]System.Windows.Controls.Button ui_startStopButton
  .field assembly class [PresentationFramework]System.Windows.Controls.Expander ui_settings
  .field assembly class [PresentationFramework]System.Windows.Controls.Label ui_dopLabel
  .field assembly class [PresentationFramework]System.Windows.Controls.Slider ui_dopSlider
  .field assembly class [PresentationFramework]System.Windows.Controls.Label ui_depthLabel
  .field assembly class [PresentationFramework]System.Windows.Controls.Slider ui_depthSlider
  .field assembly class [PresentationFramework]System.Windows.Controls.Label ui_timeoutLabel
  .field assembly class [PresentationFramework]System.Windows.Controls.Slider ui_timeoutSlider
  .field assembly class [PresentationFramework]System.Windows.Controls.CheckBox m_animationCheckBox
  .field private bool _contentLoaded
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       394 (0x18a)
    .maxstack  4
    .locals init ([0] int32 i,
             [1] int32 j,
             [2] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Window1.xaml.cs' 
//000042:         private readonly Color S_DARK_COLOR = Color.FromRgb(30, 30, 30);
    IL_0000:  ldarg.0
    IL_0001:  ldc.i4.s   30
    IL_0003:  ldc.i4.s   30
    IL_0005:  ldc.i4.s   30
    IL_0007:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Color::FromRgb(uint8,
                                                                                                                                      uint8,
                                                                                                                                      uint8)
    IL_000c:  stfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_DARK_COLOR
//000043:         private readonly Color S_LIGHT_COLOR = Colors.White;
    IL_0011:  ldarg.0
    IL_0012:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Colors::get_White()
    IL_0017:  stfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
//000044: 
//000045:         private ReversiGame m_game;
//000046:         private MinimaxSpot[,] m_GUIboard;
//000047:         private Task m_aiUITask;
//000048:         private CancellationTokenSource m_aiUICts;
//000049:         private TaskScheduler m_UIScheduler;
//000050:         private bool m_isGameOver, m_isAIMoving, m_isAIParallel, m_isAuto;
//000051:         private Duration m_progBarDuration;
//000052:         private DoubleAnimation m_progBarAnim;
//000053: 
//000054:         private bool m_useAnimation;
//000055: 
//000056:         public Window1()
    IL_001c:  ldarg.0
    IL_001d:  call       instance void [PresentationFramework]System.Windows.Window::.ctor()
    IL_0022:  nop
//000057:         {
    IL_0023:  nop
//000058:             InitializeComponent();
    IL_0024:  ldarg.0
    IL_0025:  call       instance void Reversi.Window1::InitializeComponent()
    IL_002a:  nop
//000059:             m_gamePieces = new Dictionary<Point, Cylinder>();
    IL_002b:  ldarg.0
    IL_002c:  newobj     instance void class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder>::.ctor()
    IL_0031:  stfld      class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder> Reversi.Window1::m_gamePieces
//000060:             m_ghostPieces = new Dictionary<Cylinder, Point>();
    IL_0036:  ldarg.0
    IL_0037:  newobj     instance void class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::.ctor()
    IL_003c:  stfld      class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> Reversi.Window1::m_ghostPieces
//000061: 
//000062:             // some animation/UI initialization
//000063:             NameScope.SetNameScope(mainViewport, new NameScope());
    IL_0041:  ldarg.0
    IL_0042:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0047:  newobj     instance void [WindowsBase]System.Windows.NameScope::.ctor()
    IL_004c:  call       void [WindowsBase]System.Windows.NameScope::SetNameScope(class [WindowsBase]System.Windows.DependencyObject,
                                                                                  class [System.Xaml]System.Windows.Markup.INameScope)
    IL_0051:  nop
//000064: 
//000065:             ui_dopSlider.Minimum = 1.0;
    IL_0052:  ldarg.0
    IL_0053:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_dopSlider
    IL_0058:  ldc.r8     1.
    IL_0061:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Minimum(float64)
    IL_0066:  nop
//000066:             ui_dopSlider.Maximum = Environment.ProcessorCount * 2;
    IL_0067:  ldarg.0
    IL_0068:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_dopSlider
    IL_006d:  call       int32 [mscorlib]System.Environment::get_ProcessorCount()
    IL_0072:  ldc.i4.2
    IL_0073:  mul
    IL_0074:  conv.r8
    IL_0075:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Maximum(float64)
    IL_007a:  nop
//000067:             ui_dopSlider.Value = Environment.ProcessorCount;
    IL_007b:  ldarg.0
    IL_007c:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_dopSlider
    IL_0081:  call       int32 [mscorlib]System.Environment::get_ProcessorCount()
    IL_0086:  conv.r8
    IL_0087:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Value(float64)
    IL_008c:  nop
//000068:             ui_depthSlider.Minimum = 8.0;
    IL_008d:  ldarg.0
    IL_008e:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_depthSlider
    IL_0093:  ldc.r8     8.
    IL_009c:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Minimum(float64)
    IL_00a1:  nop
//000069:             ui_depthSlider.Maximum = 24.0;
    IL_00a2:  ldarg.0
    IL_00a3:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_depthSlider
    IL_00a8:  ldc.r8     24.
    IL_00b1:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Maximum(float64)
    IL_00b6:  nop
//000070:             ui_depthSlider.Value = 18.0;
    IL_00b7:  ldarg.0
    IL_00b8:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_depthSlider
    IL_00bd:  ldc.r8     18.
    IL_00c6:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Value(float64)
    IL_00cb:  nop
//000071:             ui_timeoutSlider.Minimum = 1.0;
    IL_00cc:  ldarg.0
    IL_00cd:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_timeoutSlider
    IL_00d2:  ldc.r8     1.
    IL_00db:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Minimum(float64)
    IL_00e0:  nop
//000072:             ui_timeoutSlider.Maximum = 60.0;
    IL_00e1:  ldarg.0
    IL_00e2:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_timeoutSlider
    IL_00e7:  ldc.r8     60.
    IL_00f0:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Maximum(float64)
    IL_00f5:  nop
//000073:             ui_timeoutSlider.Value = 8.0;
    IL_00f6:  ldarg.0
    IL_00f7:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_timeoutSlider
    IL_00fc:  ldc.r8     8.
    IL_0105:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::set_Value(float64)
    IL_010a:  nop
//000074:             m_useAnimation = true;
    IL_010b:  ldarg.0
    IL_010c:  ldc.i4.1
    IL_010d:  stfld      bool Reversi.Window1::m_useAnimation
//000075: 
//000076:             // Set the UI scheduler
//000077:             m_UIScheduler = TaskScheduler.FromCurrentSynchronizationContext();
    IL_0112:  ldarg.0
    IL_0113:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_0118:  stfld      class [mscorlib]System.Threading.Tasks.TaskScheduler Reversi.Window1::m_UIScheduler
//000078: 
//000079:             // Initialize the game
//000080:             m_game = new ReversiGame(8, 8);
    IL_011d:  ldarg.0
    IL_011e:  ldc.i4.8
    IL_011f:  ldc.i4.8
    IL_0120:  newobj     instance void Reversi.ReversiGame::.ctor(int32,
                                                                  int32)
    IL_0125:  stfld      class Reversi.ReversiGame Reversi.Window1::m_game
//000081:             m_isGameOver = false;
    IL_012a:  ldarg.0
    IL_012b:  ldc.i4.0
    IL_012c:  stfld      bool Reversi.Window1::m_isGameOver
//000082:             m_isAIMoving = false;
    IL_0131:  ldarg.0
    IL_0132:  ldc.i4.0
    IL_0133:  stfld      bool Reversi.Window1::m_isAIMoving
//000083:             m_isAIParallel = true;
    IL_0138:  ldarg.0
    IL_0139:  ldc.i4.1
    IL_013a:  stfld      bool Reversi.Window1::m_isAIParallel
//000084:             m_isAuto = false;
    IL_013f:  ldarg.0
    IL_0140:  ldc.i4.0
    IL_0141:  stfld      bool Reversi.Window1::m_isAuto
//000085: 
//000086:             // Initialize the GUI's board
//000087:             m_GUIboard = new MinimaxSpot[8, 8];
    IL_0146:  ldarg.0
    IL_0147:  ldc.i4.8
    IL_0148:  ldc.i4.8
    IL_0149:  newobj     instance void valuetype Reversi.MinimaxSpot[0...,0...]::.ctor(int32,
                                                                                       int32)
    IL_014e:  stfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
//000088:             for (int i = 0; i < 8; i++)
    IL_0153:  ldc.i4.0
    IL_0154:  stloc.0
//000089:                 for (int j = 0; j < 8; j++)
//000090:                     m_GUIboard[i, j] = MinimaxSpot.Empty;
//000091:             UpdateBoard();
//000092:         }
//000093: 
//000094:         private void GoAI()
//000095:         {
//000096:             if (m_isGameOver)
//000097:                 return;
//000098: 
//000099:             m_isAIMoving = true;
//000100: 
//000101:             m_progBarAnim = new DoubleAnimation(0.0, 100.0, m_progBarDuration);
//000102:             if (m_isAIParallel)
//000103:             {
//000104:                 ui_parProgBar.Visibility = Visibility.Visible;
//000105:                 ui_parProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000106:             }
//000107:             else
//000108:             {
//000109:                 ui_seqProgBar.Visibility = Visibility.Visible;
//000110:                 ui_seqProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000111:             }
//000112: 
//000113:             m_aiUICts = new CancellationTokenSource();
//000114:             m_aiUITask = Task.Factory.StartNew(() =>
//000115:             {
//000116:                 return m_game.GetAIMove(m_isAIParallel);
//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0155:  br.s       IL_0179

//000089:                 for (int j = 0; j < 8; j++)
    IL_0157:  ldc.i4.0
    IL_0158:  stloc.1
//000090:                     m_GUIboard[i, j] = MinimaxSpot.Empty;
//000091:             UpdateBoard();
//000092:         }
//000093: 
//000094:         private void GoAI()
//000095:         {
//000096:             if (m_isGameOver)
//000097:                 return;
//000098: 
//000099:             m_isAIMoving = true;
//000100: 
//000101:             m_progBarAnim = new DoubleAnimation(0.0, 100.0, m_progBarDuration);
//000102:             if (m_isAIParallel)
//000103:             {
//000104:                 ui_parProgBar.Visibility = Visibility.Visible;
//000105:                 ui_parProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000106:             }
//000107:             else
//000108:             {
//000109:                 ui_seqProgBar.Visibility = Visibility.Visible;
//000110:                 ui_seqProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000111:             }
//000112: 
//000113:             m_aiUICts = new CancellationTokenSource();
//000114:             m_aiUITask = Task.Factory.StartNew(() =>
//000115:             {
//000116:                 return m_game.GetAIMove(m_isAIParallel);
//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0159:  br.s       IL_016d

//000090:                     m_GUIboard[i, j] = MinimaxSpot.Empty;
    IL_015b:  ldarg.0
    IL_015c:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
    IL_0161:  ldloc.0
    IL_0162:  ldloc.1
    IL_0163:  ldc.i4.0
    IL_0164:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000089:                 for (int j = 0; j < 8; j++)
    IL_0169:  ldloc.1
    IL_016a:  ldc.i4.1
    IL_016b:  add
    IL_016c:  stloc.1
    IL_016d:  ldloc.1
    IL_016e:  ldc.i4.8
    IL_016f:  clt
    IL_0171:  stloc.2
//000090:                     m_GUIboard[i, j] = MinimaxSpot.Empty;
//000091:             UpdateBoard();
//000092:         }
//000093: 
//000094:         private void GoAI()
//000095:         {
//000096:             if (m_isGameOver)
//000097:                 return;
//000098: 
//000099:             m_isAIMoving = true;
//000100: 
//000101:             m_progBarAnim = new DoubleAnimation(0.0, 100.0, m_progBarDuration);
//000102:             if (m_isAIParallel)
//000103:             {
//000104:                 ui_parProgBar.Visibility = Visibility.Visible;
//000105:                 ui_parProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000106:             }
//000107:             else
//000108:             {
//000109:                 ui_seqProgBar.Visibility = Visibility.Visible;
//000110:                 ui_seqProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000111:             }
//000112: 
//000113:             m_aiUICts = new CancellationTokenSource();
//000114:             m_aiUITask = Task.Factory.StartNew(() =>
//000115:             {
//000116:                 return m_game.GetAIMove(m_isAIParallel);
//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0172:  ldloc.2
    IL_0173:  brtrue.s   IL_015b

//000088:             for (int i = 0; i < 8; i++)
    IL_0175:  ldloc.0
    IL_0176:  ldc.i4.1
    IL_0177:  add
    IL_0178:  stloc.0
    IL_0179:  ldloc.0
    IL_017a:  ldc.i4.8
    IL_017b:  clt
    IL_017d:  stloc.2
//000089:                 for (int j = 0; j < 8; j++)
//000090:                     m_GUIboard[i, j] = MinimaxSpot.Empty;
//000091:             UpdateBoard();
//000092:         }
//000093: 
//000094:         private void GoAI()
//000095:         {
//000096:             if (m_isGameOver)
//000097:                 return;
//000098: 
//000099:             m_isAIMoving = true;
//000100: 
//000101:             m_progBarAnim = new DoubleAnimation(0.0, 100.0, m_progBarDuration);
//000102:             if (m_isAIParallel)
//000103:             {
//000104:                 ui_parProgBar.Visibility = Visibility.Visible;
//000105:                 ui_parProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000106:             }
//000107:             else
//000108:             {
//000109:                 ui_seqProgBar.Visibility = Visibility.Visible;
//000110:                 ui_seqProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000111:             }
//000112: 
//000113:             m_aiUICts = new CancellationTokenSource();
//000114:             m_aiUITask = Task.Factory.StartNew(() =>
//000115:             {
//000116:                 return m_game.GetAIMove(m_isAIParallel);
//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_017e:  ldloc.2
    IL_017f:  brtrue.s   IL_0157

//000091:             UpdateBoard();
    IL_0181:  ldarg.0
    IL_0182:  call       instance bool Reversi.Window1::UpdateBoard()
    IL_0187:  pop
//000092:         }
    IL_0188:  nop
    IL_0189:  ret
  } // end of method Window1::.ctor

  .method private hidebysig instance void 
          GoAI() cil managed
  {
    // Code size       246 (0xf6)
    .maxstack  6
    .locals init ([0] bool CS$4$0000)
//000093: 
//000094:         private void GoAI()
//000095:         {
    IL_0000:  nop
//000096:             if (m_isGameOver)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool Reversi.Window1::m_isGameOver
    IL_0007:  ldc.i4.0
    IL_0008:  ceq
    IL_000a:  stloc.0
//000097:                 return;
//000098: 
//000099:             m_isAIMoving = true;
//000100: 
//000101:             m_progBarAnim = new DoubleAnimation(0.0, 100.0, m_progBarDuration);
//000102:             if (m_isAIParallel)
//000103:             {
//000104:                 ui_parProgBar.Visibility = Visibility.Visible;
//000105:                 ui_parProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000106:             }
//000107:             else
//000108:             {
//000109:                 ui_seqProgBar.Visibility = Visibility.Visible;
//000110:                 ui_seqProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000111:             }
//000112: 
//000113:             m_aiUICts = new CancellationTokenSource();
//000114:             m_aiUITask = Task.Factory.StartNew(() =>
//000115:             {
//000116:                 return m_game.GetAIMove(m_isAIParallel);
//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_000b:  ldloc.0
    IL_000c:  brtrue.s   IL_0013

//000097:                 return;
    IL_000e:  br         IL_00f5

//000098: 
//000099:             m_isAIMoving = true;
    IL_0013:  ldarg.0
    IL_0014:  ldc.i4.1
    IL_0015:  stfld      bool Reversi.Window1::m_isAIMoving
//000100: 
//000101:             m_progBarAnim = new DoubleAnimation(0.0, 100.0, m_progBarDuration);
    IL_001a:  ldarg.0
    IL_001b:  ldc.r8     0.0
    IL_0024:  ldc.r8     100.
    IL_002d:  ldarg.0
    IL_002e:  ldfld      valuetype [PresentationCore]System.Windows.Duration Reversi.Window1::m_progBarDuration
    IL_0033:  newobj     instance void [PresentationCore]System.Windows.Media.Animation.DoubleAnimation::.ctor(float64,
                                                                                                               float64,
                                                                                                               valuetype [PresentationCore]System.Windows.Duration)
    IL_0038:  stfld      class [PresentationCore]System.Windows.Media.Animation.DoubleAnimation Reversi.Window1::m_progBarAnim
//000102:             if (m_isAIParallel)
    IL_003d:  ldarg.0
    IL_003e:  ldfld      bool Reversi.Window1::m_isAIParallel
    IL_0043:  ldc.i4.0
    IL_0044:  ceq
    IL_0046:  stloc.0
//000103:             {
//000104:                 ui_parProgBar.Visibility = Visibility.Visible;
//000105:                 ui_parProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000106:             }
//000107:             else
//000108:             {
//000109:                 ui_seqProgBar.Visibility = Visibility.Visible;
//000110:                 ui_seqProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000111:             }
//000112: 
//000113:             m_aiUICts = new CancellationTokenSource();
//000114:             m_aiUITask = Task.Factory.StartNew(() =>
//000115:             {
//000116:                 return m_game.GetAIMove(m_isAIParallel);
//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0047:  ldloc.0
    IL_0048:  brtrue.s   IL_0073

//000103:             {
    IL_004a:  nop
//000104:                 ui_parProgBar.Visibility = Visibility.Visible;
    IL_004b:  ldarg.0
    IL_004c:  ldfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_parProgBar
    IL_0051:  ldc.i4.0
    IL_0052:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_Visibility(valuetype [PresentationCore]System.Windows.Visibility)
    IL_0057:  nop
//000105:                 ui_parProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
    IL_0058:  ldarg.0
    IL_0059:  ldfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_parProgBar
    IL_005e:  ldsfld     class [WindowsBase]System.Windows.DependencyProperty [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::ValueProperty
    IL_0063:  ldarg.0
    IL_0064:  ldfld      class [PresentationCore]System.Windows.Media.Animation.DoubleAnimation Reversi.Window1::m_progBarAnim
    IL_0069:  ldc.i4.0
    IL_006a:  callvirt   instance void [PresentationCore]System.Windows.UIElement::BeginAnimation(class [WindowsBase]System.Windows.DependencyProperty,
                                                                                                  class [PresentationCore]System.Windows.Media.Animation.AnimationTimeline,
                                                                                                  valuetype [PresentationCore]System.Windows.Media.Animation.HandoffBehavior)
    IL_006f:  nop
//000106:             }
    IL_0070:  nop
//000107:             else
//000108:             {
//000109:                 ui_seqProgBar.Visibility = Visibility.Visible;
//000110:                 ui_seqProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
//000111:             }
//000112: 
//000113:             m_aiUICts = new CancellationTokenSource();
//000114:             m_aiUITask = Task.Factory.StartNew(() =>
//000115:             {
//000116:                 return m_game.GetAIMove(m_isAIParallel);
//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0071:  br.s       IL_009a

//000108:             {
    IL_0073:  nop
//000109:                 ui_seqProgBar.Visibility = Visibility.Visible;
    IL_0074:  ldarg.0
    IL_0075:  ldfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_seqProgBar
    IL_007a:  ldc.i4.0
    IL_007b:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_Visibility(valuetype [PresentationCore]System.Windows.Visibility)
    IL_0080:  nop
//000110:                 ui_seqProgBar.BeginAnimation(ProgressBar.ValueProperty, m_progBarAnim, HandoffBehavior.SnapshotAndReplace);
    IL_0081:  ldarg.0
    IL_0082:  ldfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_seqProgBar
    IL_0087:  ldsfld     class [WindowsBase]System.Windows.DependencyProperty [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::ValueProperty
    IL_008c:  ldarg.0
    IL_008d:  ldfld      class [PresentationCore]System.Windows.Media.Animation.DoubleAnimation Reversi.Window1::m_progBarAnim
    IL_0092:  ldc.i4.0
    IL_0093:  callvirt   instance void [PresentationCore]System.Windows.UIElement::BeginAnimation(class [WindowsBase]System.Windows.DependencyProperty,
                                                                                                  class [PresentationCore]System.Windows.Media.Animation.AnimationTimeline,
                                                                                                  valuetype [PresentationCore]System.Windows.Media.Animation.HandoffBehavior)
    IL_0098:  nop
//000111:             }
    IL_0099:  nop
//000112: 
//000113:             m_aiUICts = new CancellationTokenSource();
    IL_009a:  ldarg.0
    IL_009b:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_00a0:  stfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Window1::m_aiUICts
//000114:             m_aiUITask = Task.Factory.StartNew(() =>
    IL_00a5:  ldarg.0
    IL_00a6:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_00ab:  ldarg.0
    IL_00ac:  ldftn      instance valuetype Reversi.MinimaxMove Reversi.Window1::'<GoAI>b__1'()
    IL_00b2:  newobj     instance void class [mscorlib]System.Func`1<valuetype Reversi.MinimaxMove>::.ctor(object,
                                                                                                           native int)
    IL_00b7:  ldarg.0
    IL_00b8:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Window1::m_aiUICts
    IL_00bd:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_00c2:  ldc.i4.0
    IL_00c3:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::get_Default()
    IL_00c8:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task`1<!!0> [mscorlib]System.Threading.Tasks.TaskFactory::StartNew<valuetype Reversi.MinimaxMove>(class [mscorlib]System.Func`1<!!0>,
                                                                                                                                                                           valuetype [mscorlib]System.Threading.CancellationToken,
                                                                                                                                                                           valuetype [mscorlib]System.Threading.Tasks.TaskCreationOptions,
                                                                                                                                                                           class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_00cd:  ldarg.0
    IL_00ce:  ldftn      instance void Reversi.Window1::'<GoAI>b__0'(class [mscorlib]System.Threading.Tasks.Task`1<valuetype Reversi.MinimaxMove>)
    IL_00d4:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<valuetype Reversi.MinimaxMove>>::.ctor(object,
                                                                                                                                                            native int)
    IL_00d9:  ldarg.0
    IL_00da:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Window1::m_aiUICts
    IL_00df:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_00e4:  ldc.i4.0
    IL_00e5:  ldarg.0
    IL_00e6:  ldfld      class [mscorlib]System.Threading.Tasks.TaskScheduler Reversi.Window1::m_UIScheduler
    IL_00eb:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task class [mscorlib]System.Threading.Tasks.Task`1<valuetype Reversi.MinimaxMove>::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<!0>>,
                                                                                                                                                                         valuetype [mscorlib]System.Threading.CancellationToken,
                                                                                                                                                                         valuetype [mscorlib]System.Threading.Tasks.TaskContinuationOptions,
                                                                                                                                                                         class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_00f0:  stfld      class [mscorlib]System.Threading.Tasks.Task Reversi.Window1::m_aiUITask
//000115:             {
//000116:                 return m_game.GetAIMove(m_isAIParallel);
//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
    IL_00f5:  ret
  } // end of method Window1::GoAI

  .method private hidebysig instance bool 
          UpdateBoard() cil managed
  {
    // Code size       676 (0x2a4)
    .maxstack  6
    .locals init ([0] valuetype Reversi.MinimaxSpot[0...,0...] game,
             [1] valuetype Reversi.MinimaxSpot[0...,0...] gui,
             [2] int32 i,
             [3] int32 j,
             [4] valuetype [mscorlib]System.Collections.Generic.KeyValuePair`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> c,
             [5] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> moves,
             [6] valuetype Reversi.MinimaxMove m,
             [7] valuetype Reversi.ReversiGameResult gs,
             [8] bool CS$1$0000,
             [9] bool CS$4$0001,
             [10] valuetype [mscorlib]System.Collections.Generic.Dictionary`2/Enumerator<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> CS$5$0002,
             [11] class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove> CS$5$0003)
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
    IL_0000:  nop
//000156:             if (m_isGameOver)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool Reversi.Window1::m_isGameOver
    IL_0007:  ldc.i4.0
    IL_0008:  ceq
    IL_000a:  stloc.s    CS$4$0001
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_000c:  ldloc.s    CS$4$0001
    IL_000e:  brtrue.s   IL_0018

//000157:                 return false;
    IL_0010:  ldc.i4.0
    IL_0011:  stloc.s    CS$1$0000
    IL_0013:  br         IL_02a1

//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
    IL_0018:  ldarg.0
    IL_0019:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_001e:  callvirt   instance valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::get_Board()
    IL_0023:  stloc.0
//000160:             MinimaxSpot[,] gui = m_GUIboard;
    IL_0024:  ldarg.0
    IL_0025:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
    IL_002a:  stloc.1
//000161: 
//000162:             for (int i = 0; i < 8; i++)
    IL_002b:  ldc.i4.0
    IL_002c:  stloc.2
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_002d:  br         IL_00d2

//000163:             {
    IL_0032:  nop
//000164:                 for (int j = 0; j < 8; j++)
    IL_0033:  ldc.i4.0
    IL_0034:  stloc.3
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0035:  br         IL_00c0

//000165:                 {
    IL_003a:  nop
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
    IL_003b:  ldloc.1
    IL_003c:  ldloc.2
    IL_003d:  ldloc.3
    IL_003e:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0043:  brtrue.s   IL_0052

    IL_0045:  ldloc.0
    IL_0046:  ldloc.2
    IL_0047:  ldloc.3
    IL_0048:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_004d:  ldc.i4.0
    IL_004e:  ceq
    IL_0050:  br.s       IL_0053

    IL_0052:  ldc.i4.1
    IL_0053:  stloc.s    CS$4$0001
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0055:  ldloc.s    CS$4$0001
    IL_0057:  brtrue.s   IL_0075

//000167:                     {
    IL_0059:  nop
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
    IL_005a:  ldarg.0
    IL_005b:  ldloc.2
    IL_005c:  ldloc.3
    IL_005d:  ldloc.0
    IL_005e:  ldloc.2
    IL_005f:  ldloc.3
    IL_0060:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0065:  ldc.i4.1
    IL_0066:  beq.s      IL_006b

    IL_0068:  ldc.i4.0
    IL_0069:  br.s       IL_006c

    IL_006b:  ldc.i4.1
    IL_006c:  call       instance void Reversi.Window1::AddPiece(int32,
                                                                 int32,
                                                                 bool)
    IL_0071:  nop
//000169:                     }
    IL_0072:  nop
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0073:  br.s       IL_00bb

//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
    IL_0075:  ldloc.1
    IL_0076:  ldloc.2
    IL_0077:  ldloc.3
    IL_0078:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_007d:  ldc.i4.1
    IL_007e:  bne.un.s   IL_008b

    IL_0080:  ldloc.0
    IL_0081:  ldloc.2
    IL_0082:  ldloc.3
    IL_0083:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0088:  ldc.i4.m1
    IL_0089:  beq.s      IL_00a9

    IL_008b:  ldloc.1
    IL_008c:  ldloc.2
    IL_008d:  ldloc.3
    IL_008e:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0093:  ldc.i4.m1
    IL_0094:  bne.un.s   IL_00a6

    IL_0096:  ldloc.0
    IL_0097:  ldloc.2
    IL_0098:  ldloc.3
    IL_0099:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_009e:  ldc.i4.1
    IL_009f:  ceq
    IL_00a1:  ldc.i4.0
    IL_00a2:  ceq
    IL_00a4:  br.s       IL_00a7

    IL_00a6:  ldc.i4.1
    IL_00a7:  br.s       IL_00aa

    IL_00a9:  ldc.i4.0
    IL_00aa:  stloc.s    CS$4$0001
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00ac:  ldloc.s    CS$4$0001
    IL_00ae:  brtrue.s   IL_00bb

//000172:                     {
    IL_00b0:  nop
//000173:                         FlipPiece(i, j);
    IL_00b1:  ldarg.0
    IL_00b2:  ldloc.2
    IL_00b3:  ldloc.3
    IL_00b4:  call       instance void Reversi.Window1::FlipPiece(int32,
                                                                  int32)
    IL_00b9:  nop
//000174:                     }
    IL_00ba:  nop
//000175:                 }
    IL_00bb:  nop
//000164:                 for (int j = 0; j < 8; j++)
    IL_00bc:  ldloc.3
    IL_00bd:  ldc.i4.1
    IL_00be:  add
    IL_00bf:  stloc.3
    IL_00c0:  ldloc.3
    IL_00c1:  ldc.i4.8
    IL_00c2:  clt
    IL_00c4:  stloc.s    CS$4$0001
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00c6:  ldloc.s    CS$4$0001
    IL_00c8:  brtrue     IL_003a

//000176:             }
    IL_00cd:  nop
//000162:             for (int i = 0; i < 8; i++)
    IL_00ce:  ldloc.2
    IL_00cf:  ldc.i4.1
    IL_00d0:  add
    IL_00d1:  stloc.2
    IL_00d2:  ldloc.2
    IL_00d3:  ldc.i4.8
    IL_00d4:  clt
    IL_00d6:  stloc.s    CS$4$0001
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00d8:  ldloc.s    CS$4$0001
    IL_00da:  brtrue     IL_0032

//000179:             foreach (var c in m_ghostPieces)
    IL_00df:  nop
    IL_00e0:  ldarg.0
    IL_00e1:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> Reversi.Window1::m_ghostPieces
    IL_00e6:  callvirt   instance valuetype [mscorlib]System.Collections.Generic.Dictionary`2/Enumerator<!0,!1> class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::GetEnumerator()
    IL_00eb:  stloc.s    CS$5$0002
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    .try
    {
      IL_00ed:  br.s       IL_0112

//000179:             foreach (var c in m_ghostPieces)
      IL_00ef:  ldloca.s   CS$5$0002
      IL_00f1:  call       instance valuetype [mscorlib]System.Collections.Generic.KeyValuePair`2<!0,!1> valuetype [mscorlib]System.Collections.Generic.Dictionary`2/Enumerator<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::get_Current()
      IL_00f6:  stloc.s    c
//000180:             {
      IL_00f8:  nop
//000181:                 mainViewport.Children.Remove(c.Key);
      IL_00f9:  ldarg.0
      IL_00fa:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
      IL_00ff:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection [PresentationFramework]System.Windows.Controls.Viewport3D::get_Children()
      IL_0104:  ldloca.s   c
      IL_0106:  call       instance !0 valuetype [mscorlib]System.Collections.Generic.KeyValuePair`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::get_Key()
      IL_010b:  callvirt   instance bool [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection::Remove(class [PresentationCore]System.Windows.Media.Media3D.Visual3D)
      IL_0110:  pop
//000182:             }
      IL_0111:  nop
//000179:             foreach (var c in m_ghostPieces)
      IL_0112:  ldloca.s   CS$5$0002
      IL_0114:  call       instance bool valuetype [mscorlib]System.Collections.Generic.Dictionary`2/Enumerator<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::MoveNext()
      IL_0119:  stloc.s    CS$4$0001
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
      IL_011b:  ldloc.s    CS$4$0001
      IL_011d:  brtrue.s   IL_00ef

      IL_011f:  leave.s    IL_0130

    }  // end .try
    finally
    {
      IL_0121:  ldloca.s   CS$5$0002
      IL_0123:  constrained. valuetype [mscorlib]System.Collections.Generic.Dictionary`2/Enumerator<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>
      IL_0129:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_012e:  nop
      IL_012f:  endfinally
    }  // end handler
    IL_0130:  nop
//000183:             m_ghostPieces.Clear();
    IL_0131:  ldarg.0
    IL_0132:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> Reversi.Window1::m_ghostPieces
    IL_0137:  callvirt   instance void class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::Clear()
    IL_013c:  nop
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
    IL_013d:  ldarg.0
    IL_013e:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_0143:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> Reversi.ReversiGame::GetValidMoves()
    IL_0148:  stloc.s    moves
//000187:             foreach (var m in moves)
    IL_014a:  nop
    IL_014b:  ldloc.s    moves
    IL_014d:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove>::GetEnumerator()
    IL_0152:  stloc.s    CS$5$0003
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    .try
    {
      IL_0154:  br.s       IL_0181

//000187:             foreach (var m in moves)
      IL_0156:  ldloc.s    CS$5$0003
      IL_0158:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove>::get_Current()
      IL_015d:  stloc.s    m
//000188:             {
      IL_015f:  nop
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
      IL_0160:  ldarg.0
      IL_0161:  ldloca.s   m
      IL_0163:  ldfld      int32 Reversi.MinimaxMove::Row
      IL_0168:  ldloca.s   m
      IL_016a:  ldfld      int32 Reversi.MinimaxMove::Col
      IL_016f:  ldarg.0
      IL_0170:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
      IL_0175:  callvirt   instance bool Reversi.ReversiGame::get_IsLightMove()
      IL_017a:  call       instance void Reversi.Window1::ShowGhost(int32,
                                                                    int32,
                                                                    bool)
      IL_017f:  nop
//000190:             }
      IL_0180:  nop
//000187:             foreach (var m in moves)
      IL_0181:  ldloc.s    CS$5$0003
      IL_0183:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_0188:  stloc.s    CS$4$0001
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
      IL_018a:  ldloc.s    CS$4$0001
      IL_018c:  brtrue.s   IL_0156

      IL_018e:  leave.s    IL_01a4

    }  // end .try
    finally
    {
      IL_0190:  ldloc.s    CS$5$0003
      IL_0192:  ldnull
      IL_0193:  ceq
      IL_0195:  stloc.s    CS$4$0001
      IL_0197:  ldloc.s    CS$4$0001
      IL_0199:  brtrue.s   IL_01a3

      IL_019b:  ldloc.s    CS$5$0003
      IL_019d:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_01a2:  nop
      IL_01a3:  endfinally
    }  // end handler
    IL_01a4:  nop
//000192:             ReversiGameResult gs = m_game.GetGameResult();
    IL_01a5:  ldarg.0
    IL_01a6:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_01ab:  callvirt   instance valuetype Reversi.ReversiGameResult Reversi.ReversiGame::GetGameResult()
    IL_01b0:  stloc.s    gs
//000193:             if (gs.GameState == ReversiGameState.LightWon)
    IL_01b2:  ldloca.s   gs
    IL_01b4:  ldfld      valuetype Reversi.ReversiGameState Reversi.ReversiGameResult::GameState
    IL_01b9:  ldc.i4.1
    IL_01ba:  ceq
    IL_01bc:  ldc.i4.0
    IL_01bd:  ceq
    IL_01bf:  stloc.s    CS$4$0001
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_01c1:  ldloc.s    CS$4$0001
    IL_01c3:  brtrue.s   IL_0202

//000194:             {
    IL_01c5:  nop
//000195:                 m_isGameOver = true;
    IL_01c6:  ldarg.0
    IL_01c7:  ldc.i4.1
    IL_01c8:  stfld      bool Reversi.Window1::m_isGameOver
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
    IL_01cd:  ldstr      "Light Won! {0}-{1}"
    IL_01d2:  ldloca.s   gs
    IL_01d4:  ldfld      int32 Reversi.ReversiGameResult::NumLightPieces
    IL_01d9:  box        [mscorlib]System.Int32
    IL_01de:  ldloca.s   gs
    IL_01e0:  ldfld      int32 Reversi.ReversiGameResult::NumDarkPieces
    IL_01e5:  box        [mscorlib]System.Int32
    IL_01ea:  call       string [mscorlib]System.String::Format(string,
                                                                object,
                                                                object)
    IL_01ef:  ldstr      "GAME OVER"
    IL_01f4:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string,
                                                                                                                                                 string)
    IL_01f9:  pop
//000197:                 return false;
    IL_01fa:  ldc.i4.0
    IL_01fb:  stloc.s    CS$1$0000
    IL_01fd:  br         IL_02a1

//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
    IL_0202:  ldloca.s   gs
    IL_0204:  ldfld      valuetype Reversi.ReversiGameState Reversi.ReversiGameResult::GameState
    IL_0209:  ldc.i4.m1
    IL_020a:  ceq
    IL_020c:  ldc.i4.0
    IL_020d:  ceq
    IL_020f:  stloc.s    CS$4$0001
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0211:  ldloc.s    CS$4$0001
    IL_0213:  brtrue.s   IL_024f

//000200:             {
    IL_0215:  nop
//000201:                 m_isGameOver = true;
    IL_0216:  ldarg.0
    IL_0217:  ldc.i4.1
    IL_0218:  stfld      bool Reversi.Window1::m_isGameOver
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
    IL_021d:  ldstr      "Dark Won! {0}-{1}"
    IL_0222:  ldloca.s   gs
    IL_0224:  ldfld      int32 Reversi.ReversiGameResult::NumLightPieces
    IL_0229:  box        [mscorlib]System.Int32
    IL_022e:  ldloca.s   gs
    IL_0230:  ldfld      int32 Reversi.ReversiGameResult::NumDarkPieces
    IL_0235:  box        [mscorlib]System.Int32
    IL_023a:  call       string [mscorlib]System.String::Format(string,
                                                                object,
                                                                object)
    IL_023f:  ldstr      "GAME OVER"
    IL_0244:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string,
                                                                                                                                                 string)
    IL_0249:  pop
//000203:                 return false;
    IL_024a:  ldc.i4.0
    IL_024b:  stloc.s    CS$1$0000
    IL_024d:  br.s       IL_02a1

//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
    IL_024f:  ldloca.s   gs
    IL_0251:  ldfld      valuetype Reversi.ReversiGameState Reversi.ReversiGameResult::GameState
    IL_0256:  ldc.i4.0
    IL_0257:  ceq
    IL_0259:  ldc.i4.0
    IL_025a:  ceq
    IL_025c:  stloc.s    CS$4$0001
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_025e:  ldloc.s    CS$4$0001
    IL_0260:  brtrue.s   IL_029c

//000206:             {
    IL_0262:  nop
//000207:                 m_isGameOver = true;
    IL_0263:  ldarg.0
    IL_0264:  ldc.i4.1
    IL_0265:  stfld      bool Reversi.Window1::m_isGameOver
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
    IL_026a:  ldstr      "Draw! {0}-{1}"
    IL_026f:  ldloca.s   gs
    IL_0271:  ldfld      int32 Reversi.ReversiGameResult::NumLightPieces
    IL_0276:  box        [mscorlib]System.Int32
    IL_027b:  ldloca.s   gs
    IL_027d:  ldfld      int32 Reversi.ReversiGameResult::NumDarkPieces
    IL_0282:  box        [mscorlib]System.Int32
    IL_0287:  call       string [mscorlib]System.String::Format(string,
                                                                object,
                                                                object)
    IL_028c:  ldstr      "GAME OVER"
    IL_0291:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string,
                                                                                                                                                 string)
    IL_0296:  pop
//000209:                 return false;
    IL_0297:  ldc.i4.0
    IL_0298:  stloc.s    CS$1$0000
    IL_029a:  br.s       IL_02a1

//000210:             }
//000211:             return true;
    IL_029c:  ldc.i4.1
    IL_029d:  stloc.s    CS$1$0000
    IL_029f:  br.s       IL_02a1

//000212:         }
    IL_02a1:  ldloc.s    CS$1$0000
    IL_02a3:  ret
  } // end of method Window1::UpdateBoard

  .method private hidebysig instance void 
          Window_KeyDown(object sender,
                         class [PresentationCore]System.Windows.Input.KeyEventArgs e) cil managed
  {
    // Code size       246 (0xf6)
    .maxstack  3
    .locals init ([0] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D cameraPos,
             [1] bool CS$4$0000)
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
    IL_0000:  nop
//000216:             var cameraPos = mainCamera.Position;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera Reversi.Window1::mainCamera
    IL_0007:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::get_Position()
    IL_000c:  stloc.0
//000217:             if (e.Key == Key.Up)
    IL_000d:  ldarg.2
    IL_000e:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0013:  ldc.i4.s   24
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_001b:  ldloc.1
    IL_001c:  brtrue.s   IL_0036

//000218:                 cameraPos.Z += 1;
    IL_001e:  ldloca.s   cameraPos
    IL_0020:  dup
    IL_0021:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Point3D::get_Z()
    IL_0026:  ldc.r8     1.
    IL_002f:  add
    IL_0030:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::set_Z(float64)
    IL_0035:  nop
//000219:             if (e.Key == Key.Down)
    IL_0036:  ldarg.2
    IL_0037:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_003c:  ldc.i4.s   26
    IL_003e:  ceq
    IL_0040:  ldc.i4.0
    IL_0041:  ceq
    IL_0043:  stloc.1
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0044:  ldloc.1
    IL_0045:  brtrue.s   IL_005f

//000220:                 cameraPos.Z -= 1;
    IL_0047:  ldloca.s   cameraPos
    IL_0049:  dup
    IL_004a:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Point3D::get_Z()
    IL_004f:  ldc.r8     1.
    IL_0058:  sub
    IL_0059:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::set_Z(float64)
    IL_005e:  nop
//000221:             if (e.Key == Key.T)
    IL_005f:  ldarg.2
    IL_0060:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0065:  ldc.i4.s   63
    IL_0067:  ceq
    IL_0069:  ldc.i4.0
    IL_006a:  ceq
    IL_006c:  stloc.1
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_006d:  ldloc.1
    IL_006e:  brtrue.s   IL_008c

//000222:                 mainCamera.FieldOfView += 10;
    IL_0070:  ldarg.0
    IL_0071:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera Reversi.Window1::mainCamera
    IL_0076:  dup
    IL_0077:  callvirt   instance float64 [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera::get_FieldOfView()
    IL_007c:  ldc.r8     10.
    IL_0085:  add
    IL_0086:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera::set_FieldOfView(float64)
    IL_008b:  nop
//000223:             if (e.Key == Key.G)
    IL_008c:  ldarg.2
    IL_008d:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0092:  ldc.i4.s   50
    IL_0094:  ceq
    IL_0096:  ldc.i4.0
    IL_0097:  ceq
    IL_0099:  stloc.1
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_009a:  ldloc.1
    IL_009b:  brtrue.s   IL_00b9

//000224:                 mainCamera.FieldOfView -= 10;
    IL_009d:  ldarg.0
    IL_009e:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera Reversi.Window1::mainCamera
    IL_00a3:  dup
    IL_00a4:  callvirt   instance float64 [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera::get_FieldOfView()
    IL_00a9:  ldc.r8     10.
    IL_00b2:  sub
    IL_00b3:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera::set_FieldOfView(float64)
    IL_00b8:  nop
//000225:             if (e.Key == Key.D)
    IL_00b9:  ldarg.2
    IL_00ba:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_00bf:  ldc.i4.s   47
    IL_00c1:  ceq
    IL_00c3:  ldc.i4.0
    IL_00c4:  ceq
    IL_00c6:  stloc.1
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00c7:  ldloc.1
    IL_00c8:  brtrue.s   IL_00e8

//000226:             {
    IL_00ca:  nop
//000227:                 m_game.Dump("");
    IL_00cb:  ldarg.0
    IL_00cc:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_00d1:  ldstr      ""
    IL_00d6:  callvirt   instance void Reversi.ReversiGame::Dump(string)
    IL_00db:  nop
//000228:                 MessageBox.Show("Dumped.");
    IL_00dc:  ldstr      "Dumped."
    IL_00e1:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string)
    IL_00e6:  pop
//000229:             }
    IL_00e7:  nop
//000230: 
//000231:             mainCamera.Position = cameraPos;
    IL_00e8:  ldarg.0
    IL_00e9:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera Reversi.Window1::mainCamera
    IL_00ee:  ldloc.0
    IL_00ef:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::set_Position(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_00f4:  nop
//000232:         }
    IL_00f5:  ret
  } // end of method Window1::Window_KeyDown

  .method public hidebysig instance void 
          AddPiece(int32 row,
                   int32 col,
                   bool isPlayerLight) cil managed
  {
    // Code size       37 (0x25)
    .maxstack  4
    .locals init ([0] bool CS$4$0000)
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
    IL_0000:  nop
//000244:             if (m_useAnimation)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool Reversi.Window1::m_useAnimation
    IL_0007:  ldc.i4.0
    IL_0008:  ceq
    IL_000a:  stloc.0
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_000b:  ldloc.0
    IL_000c:  brtrue.s   IL_001a

//000245:                 AddPieceAnimated(row, col, isPlayerLight);
    IL_000e:  ldarg.0
    IL_000f:  ldarg.1
    IL_0010:  ldarg.2
    IL_0011:  ldarg.3
    IL_0012:  call       instance void Reversi.Window1::AddPieceAnimated(int32,
                                                                         int32,
                                                                         bool)
    IL_0017:  nop
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0018:  br.s       IL_0024

//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
    IL_001a:  ldarg.0
    IL_001b:  ldarg.1
    IL_001c:  ldarg.2
    IL_001d:  ldarg.3
    IL_001e:  call       instance void Reversi.Window1::AddPieceUnanimated(int32,
                                                                           int32,
                                                                           bool)
    IL_0023:  nop
//000248:         }
    IL_0024:  ret
  } // end of method Window1::AddPiece

  .method public hidebysig instance void 
          AddPieceAnimated(int32 row,
                           int32 col,
                           bool isPlayerLight) cil managed
  {
    // Code size       327 (0x147)
    .maxstack  6
    .locals init ([0] class Reversi.Cylinder newPiece,
             [1] float64 centerX,
             [2] float64 centerY,
             [3] class [PresentationFramework]System.Windows.Media.Animation.Storyboard animationStoryboard,
             [4] class [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D translateTransform,
             [5] class [PresentationCore]System.Windows.Media.Animation.DoubleAnimation moveDownAnimation)
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
    IL_0000:  nop
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
    IL_0007:  ldarg.1
    IL_0008:  ldarg.2
    IL_0009:  ldarg.3
    IL_000a:  brtrue.s   IL_000f

    IL_000c:  ldc.i4.m1
    IL_000d:  br.s       IL_0010

    IL_000f:  ldc.i4.1
    IL_0010:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
    IL_0015:  ldc.i4.7
    IL_0016:  ldarg.1
    IL_0017:  sub
    IL_0018:  starg.s    row
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
    IL_001a:  ldc.r8     5.
    IL_0023:  ldc.r8     3.
    IL_002c:  ldc.i4.s   50
    IL_002e:  ldarg.3
    IL_002f:  brtrue.s   IL_0043

    IL_0031:  ldarg.0
    IL_0032:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_DARK_COLOR
    IL_0037:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_003c:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_0041:  br.s       IL_0053

    IL_0043:  ldarg.0
    IL_0044:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
    IL_0049:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_004e:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_0053:  newobj     instance void Reversi.Cylinder::.ctor(float64,
                                                               float64,
                                                               int32,
                                                               class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_0058:  stloc.0
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
    IL_0059:  ldarg.2
    IL_005a:  ldarg.1
    IL_005b:  ldloca.s   centerX
    IL_005d:  ldloca.s   centerY
    IL_005f:  call       void Reversi.Window1::GetViewCoordinates(int32,
                                                                  int32,
                                                                  float64&,
                                                                  float64&)
    IL_0064:  nop
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
    IL_0065:  ldloc.0
    IL_0066:  ldloc.1
    IL_0067:  ldloc.2
    IL_0068:  ldc.r8     20.
    IL_0071:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_0076:  callvirt   instance void Reversi.Cylinder::MoveTo(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_007b:  nop
//000273:             mainViewport.Children.Add(newPiece);
    IL_007c:  ldarg.0
    IL_007d:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0082:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection [PresentationFramework]System.Windows.Controls.Viewport3D::get_Children()
    IL_0087:  ldloc.0
    IL_0088:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Visual3D)
    IL_008d:  nop
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
    IL_008e:  newobj     instance void [PresentationFramework]System.Windows.Media.Animation.Storyboard::.ctor()
    IL_0093:  stloc.3
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
    IL_0094:  ldloc.1
    IL_0095:  ldloc.2
    IL_0096:  ldc.r8     20.
    IL_009f:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::.ctor(float64,
                                                                                                                  float64,
                                                                                                                  float64)
    IL_00a4:  stloc.s    translateTransform
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
    IL_00a6:  ldc.r8     0.0
    IL_00af:  ldc.r8     500.
    IL_00b8:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromMilliseconds(float64)
    IL_00bd:  newobj     instance void [PresentationCore]System.Windows.Duration::.ctor(valuetype [mscorlib]System.TimeSpan)
    IL_00c2:  newobj     instance void [PresentationCore]System.Windows.Media.Animation.DoubleAnimation::.ctor(float64,
                                                                                                               valuetype [PresentationCore]System.Windows.Duration)
    IL_00c7:  stloc.s    moveDownAnimation
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
    IL_00c9:  ldarg.0
    IL_00ca:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_00cf:  ldstr      "GamePieceDrop"
    IL_00d4:  ldloc.s    translateTransform
    IL_00d6:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::RegisterName(string,
                                                                                                            object)
    IL_00db:  nop
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
    IL_00dc:  ldloc.s    moveDownAnimation
    IL_00de:  ldstr      "GamePieceDrop"
    IL_00e3:  call       void [PresentationFramework]System.Windows.Media.Animation.Storyboard::SetTargetName(class [WindowsBase]System.Windows.DependencyObject,
                                                                                                              string)
    IL_00e8:  nop
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
    IL_00e9:  ldloc.s    moveDownAnimation
    IL_00eb:  ldsfld     class [WindowsBase]System.Windows.DependencyProperty [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::OffsetZProperty
    IL_00f0:  newobj     instance void [PresentationFramework]System.Windows.PropertyPath::.ctor(object)
    IL_00f5:  call       void [PresentationFramework]System.Windows.Media.Animation.Storyboard::SetTargetProperty(class [WindowsBase]System.Windows.DependencyObject,
                                                                                                                  class [PresentationFramework]System.Windows.PropertyPath)
    IL_00fa:  nop
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
    IL_00fb:  ldloc.3
    IL_00fc:  callvirt   instance class [PresentationCore]System.Windows.Media.Animation.TimelineCollection [PresentationCore]System.Windows.Media.Animation.TimelineGroup::get_Children()
    IL_0101:  ldloc.s    moveDownAnimation
    IL_0103:  callvirt   instance void [PresentationCore]System.Windows.Media.Animation.TimelineCollection::Add(class [PresentationCore]System.Windows.Media.Animation.Timeline)
    IL_0108:  nop
//000285:             newPiece.Transform = translateTransform;
    IL_0109:  ldloc.0
    IL_010a:  ldloc.s    translateTransform
    IL_010c:  callvirt   instance void Reversi.Cylinder::set_Transform(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_0111:  nop
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
    IL_0112:  ldloc.3
    IL_0113:  ldarg.0
    IL_0114:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0119:  callvirt   instance void [PresentationFramework]System.Windows.Media.Animation.Storyboard::Begin(class [PresentationFramework]System.Windows.FrameworkElement)
    IL_011e:  nop
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
    IL_011f:  ldarg.0
    IL_0120:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0125:  ldstr      "GamePieceDrop"
    IL_012a:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::UnregisterName(string)
    IL_012f:  nop
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
    IL_0130:  ldarg.0
    IL_0131:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder> Reversi.Window1::m_gamePieces
    IL_0136:  ldarg.1
    IL_0137:  conv.r8
    IL_0138:  ldarg.2
    IL_0139:  conv.r8
    IL_013a:  newobj     instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_013f:  ldloc.0
    IL_0140:  callvirt   instance void class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder>::set_Item(!0,
                                                                                                                                                                             !1)
    IL_0145:  nop
//000292:         }
    IL_0146:  ret
  } // end of method Window1::AddPieceAnimated

  .method public hidebysig instance void 
          AddPieceUnanimated(int32 row,
                             int32 col,
                             bool isPlayerLight) cil managed
  {
    // Code size       140 (0x8c)
    .maxstack  6
    .locals init ([0] class Reversi.Cylinder newPiece)
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
    IL_0000:  nop
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
    IL_0007:  ldarg.1
    IL_0008:  ldarg.2
    IL_0009:  ldarg.3
    IL_000a:  brtrue.s   IL_000f

    IL_000c:  ldc.i4.m1
    IL_000d:  br.s       IL_0010

    IL_000f:  ldc.i4.1
    IL_0010:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
    IL_0015:  ldc.i4.7
    IL_0016:  ldarg.1
    IL_0017:  sub
    IL_0018:  starg.s    row
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
    IL_001a:  ldc.r8     5.
    IL_0023:  ldc.r8     3.
    IL_002c:  ldc.i4.s   50
    IL_002e:  ldarg.3
    IL_002f:  brtrue.s   IL_0043

    IL_0031:  ldarg.0
    IL_0032:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_DARK_COLOR
    IL_0037:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_003c:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_0041:  br.s       IL_0053

    IL_0043:  ldarg.0
    IL_0044:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
    IL_0049:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_004e:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_0053:  newobj     instance void Reversi.Cylinder::.ctor(float64,
                                                               float64,
                                                               int32,
                                                               class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_0058:  stloc.0
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
    IL_0059:  ldarg.0
    IL_005a:  ldloc.0
    IL_005b:  ldarg.2
    IL_005c:  ldarg.1
    IL_005d:  call       instance void Reversi.Window1::MovePiece(class Reversi.Cylinder,
                                                                  int32,
                                                                  int32)
    IL_0062:  nop
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
    IL_0063:  ldarg.0
    IL_0064:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder> Reversi.Window1::m_gamePieces
    IL_0069:  ldarg.1
    IL_006a:  conv.r8
    IL_006b:  ldarg.2
    IL_006c:  conv.r8
    IL_006d:  newobj     instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_0072:  ldloc.0
    IL_0073:  callvirt   instance void class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder>::set_Item(!0,
                                                                                                                                                                             !1)
    IL_0078:  nop
//000315:             mainViewport.Children.Add(newPiece);
    IL_0079:  ldarg.0
    IL_007a:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_007f:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection [PresentationFramework]System.Windows.Controls.Viewport3D::get_Children()
    IL_0084:  ldloc.0
    IL_0085:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Visual3D)
    IL_008a:  nop
//000316:         }
    IL_008b:  ret
  } // end of method Window1::AddPieceUnanimated

  .method public hidebysig instance void 
          FlipPiece(int32 row,
                    int32 col) cil managed
  {
    // Code size       35 (0x23)
    .maxstack  3
    .locals init ([0] bool CS$4$0000)
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
    IL_0000:  nop
//000320:             if (m_useAnimation)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool Reversi.Window1::m_useAnimation
    IL_0007:  ldc.i4.0
    IL_0008:  ceq
    IL_000a:  stloc.0
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_000b:  ldloc.0
    IL_000c:  brtrue.s   IL_0019

//000321:                 FlipPieceAnimated(row, col);
    IL_000e:  ldarg.0
    IL_000f:  ldarg.1
    IL_0010:  ldarg.2
    IL_0011:  call       instance void Reversi.Window1::FlipPieceAnimated(int32,
                                                                          int32)
    IL_0016:  nop
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0017:  br.s       IL_0022

//000323:                 FlipPieceUnanimated(row, col);
    IL_0019:  ldarg.0
    IL_001a:  ldarg.1
    IL_001b:  ldarg.2
    IL_001c:  call       instance void Reversi.Window1::FlipPieceUnanimated(int32,
                                                                            int32)
    IL_0021:  nop
//000324:         }
    IL_0022:  ret
  } // end of method Window1::FlipPiece

  .method public hidebysig instance void 
          FlipPieceUnanimated(int32 row,
                              int32 col) cil managed
  {
    // Code size       139 (0x8b)
    .maxstack  6
    .locals init ([0] float64 centerX,
             [1] float64 centerY,
             [2] class Reversi.Cylinder gamePiece,
             [3] class [PresentationCore]System.Windows.Media.SolidColorBrush diffMaterialBrush,
             [4] valuetype [PresentationCore]System.Windows.Media.Color CS$0$0000)
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
    IL_0000:  nop
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
    IL_0007:  ldarg.1
    IL_0008:  ldarg.2
    IL_0009:  ldarg.0
    IL_000a:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
    IL_000f:  ldarg.1
    IL_0010:  ldarg.2
    IL_0011:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0016:  ldc.i4.1
    IL_0017:  beq.s      IL_001c

    IL_0019:  ldc.i4.1
    IL_001a:  br.s       IL_001d

    IL_001c:  ldc.i4.m1
    IL_001d:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
    IL_0022:  ldc.i4.7
    IL_0023:  ldarg.1
    IL_0024:  sub
    IL_0025:  starg.s    row
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
    IL_0027:  ldarg.2
    IL_0028:  ldarg.1
    IL_0029:  ldloca.s   centerX
    IL_002b:  ldloca.s   centerY
    IL_002d:  call       void Reversi.Window1::GetViewCoordinates(int32,
                                                                  int32,
                                                                  float64&,
                                                                  float64&)
    IL_0032:  nop
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder> Reversi.Window1::m_gamePieces
    IL_0039:  ldarg.1
    IL_003a:  conv.r8
    IL_003b:  ldarg.2
    IL_003c:  conv.r8
    IL_003d:  newobj     instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_0042:  callvirt   instance !1 class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder>::get_Item(!0)
    IL_0047:  stloc.2
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
    IL_0048:  ldloc.2
    IL_0049:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Material Reversi.Cylinder::get_Material()
    IL_004e:  isinst     [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial
    IL_0053:  callvirt   instance class [PresentationCore]System.Windows.Media.Brush [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::get_Brush()
    IL_0058:  isinst     [PresentationCore]System.Windows.Media.SolidColorBrush
    IL_005d:  stloc.3
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
    IL_005e:  ldloc.3
    IL_005f:  ldloc.3
    IL_0060:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_0065:  stloc.s    CS$0$0000
    IL_0067:  ldloca.s   CS$0$0000
    IL_0069:  ldarg.0
    IL_006a:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
    IL_006f:  call       instance bool [PresentationCore]System.Windows.Media.Color::Equals(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_0074:  brtrue.s   IL_007e

    IL_0076:  ldarg.0
    IL_0077:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
    IL_007c:  br.s       IL_0084

    IL_007e:  ldarg.0
    IL_007f:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_DARK_COLOR
    IL_0084:  callvirt   instance void [PresentationCore]System.Windows.Media.SolidColorBrush::set_Color(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_0089:  nop
//000342:         }
    IL_008a:  ret
  } // end of method Window1::FlipPieceUnanimated

  .method public hidebysig instance void 
          FlipPieceAnimated(int32 row,
                            int32 col) cil managed
  {
    // Code size       694 (0x2b6)
    .maxstack  6
    .locals init ([0] float64 centerX,
             [1] float64 centerY,
             [2] class Reversi.Cylinder gamePiece,
             [3] class [PresentationFramework]System.Windows.Media.Animation.Storyboard animationsStoryboard,
             [4] class [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup transformGroup,
             [5] class [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D translateTransform,
             [6] class [PresentationCore]System.Windows.Media.Animation.DoubleAnimation moveUpAnimation,
             [7] class [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D axisAngleRotation,
             [8] class [PresentationCore]System.Windows.Media.Media3D.RotateTransform3D rotateTransform,
             [9] class [PresentationCore]System.Windows.Media.Animation.DoubleAnimation flipOverAnimation,
             [10] class [PresentationCore]System.Windows.Media.SolidColorBrush diffMaterialBrush,
             [11] class [PresentationCore]System.Windows.Media.Animation.ColorAnimation changeColorAnimation,
             [12] valuetype [PresentationCore]System.Windows.Media.Color CS$0$0000)
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
    IL_0000:  nop
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
    IL_0007:  ldarg.1
    IL_0008:  ldarg.2
    IL_0009:  ldarg.0
    IL_000a:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.Window1::m_GUIboard
    IL_000f:  ldarg.1
    IL_0010:  ldarg.2
    IL_0011:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0016:  ldc.i4.1
    IL_0017:  beq.s      IL_001c

    IL_0019:  ldc.i4.1
    IL_001a:  br.s       IL_001d

    IL_001c:  ldc.i4.m1
    IL_001d:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
    IL_0022:  ldc.i4.7
    IL_0023:  ldarg.1
    IL_0024:  sub
    IL_0025:  starg.s    row
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
    IL_0027:  ldarg.2
    IL_0028:  ldarg.1
    IL_0029:  ldloca.s   centerX
    IL_002b:  ldloca.s   centerY
    IL_002d:  call       void Reversi.Window1::GetViewCoordinates(int32,
                                                                  int32,
                                                                  float64&,
                                                                  float64&)
    IL_0032:  nop
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder> Reversi.Window1::m_gamePieces
    IL_0039:  ldarg.1
    IL_003a:  conv.r8
    IL_003b:  ldarg.2
    IL_003c:  conv.r8
    IL_003d:  newobj     instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_0042:  callvirt   instance !1 class [mscorlib]System.Collections.Generic.Dictionary`2<valuetype [WindowsBase]System.Windows.Point,class Reversi.Cylinder>::get_Item(!0)
    IL_0047:  stloc.2
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
    IL_0048:  newobj     instance void [PresentationFramework]System.Windows.Media.Animation.Storyboard::.ctor()
    IL_004d:  stloc.3
//000364:             var transformGroup = new Transform3DGroup();
    IL_004e:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::.ctor()
    IL_0053:  stloc.s    transformGroup
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
    IL_0055:  ldloc.0
    IL_0056:  ldloc.1
    IL_0057:  ldc.r8     1.5
    IL_0060:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::.ctor(float64,
                                                                                                                  float64,
                                                                                                                  float64)
    IL_0065:  stloc.s    translateTransform
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
    IL_0067:  ldc.r8     10.
    IL_0070:  ldc.r8     500.
    IL_0079:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromMilliseconds(float64)
    IL_007e:  newobj     instance void [PresentationCore]System.Windows.Duration::.ctor(valuetype [mscorlib]System.TimeSpan)
    IL_0083:  newobj     instance void [PresentationCore]System.Windows.Media.Animation.DoubleAnimation::.ctor(float64,
                                                                                                               valuetype [PresentationCore]System.Windows.Duration)
    IL_0088:  stloc.s    moveUpAnimation
//000370:             moveUpAnimation.AutoReverse = true;
    IL_008a:  ldloc.s    moveUpAnimation
    IL_008c:  ldc.i4.1
    IL_008d:  callvirt   instance void [PresentationCore]System.Windows.Media.Animation.Timeline::set_AutoReverse(bool)
    IL_0092:  nop
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
    IL_0093:  ldarg.0
    IL_0094:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0099:  ldstr      "GamePieceMoveUp"
    IL_009e:  ldloc.s    translateTransform
    IL_00a0:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::RegisterName(string,
                                                                                                            object)
    IL_00a5:  nop
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
    IL_00a6:  ldloc.s    moveUpAnimation
    IL_00a8:  ldstr      "GamePieceMoveUp"
    IL_00ad:  call       void [PresentationFramework]System.Windows.Media.Animation.Storyboard::SetTargetName(class [WindowsBase]System.Windows.DependencyObject,
                                                                                                              string)
    IL_00b2:  nop
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
    IL_00b3:  ldloc.s    moveUpAnimation
    IL_00b5:  ldsfld     class [WindowsBase]System.Windows.DependencyProperty [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::OffsetZProperty
    IL_00ba:  newobj     instance void [PresentationFramework]System.Windows.PropertyPath::.ctor(object)
    IL_00bf:  call       void [PresentationFramework]System.Windows.Media.Animation.Storyboard::SetTargetProperty(class [WindowsBase]System.Windows.DependencyObject,
                                                                                                                  class [PresentationFramework]System.Windows.PropertyPath)
    IL_00c4:  nop
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
    IL_00c5:  ldloc.3
    IL_00c6:  callvirt   instance class [PresentationCore]System.Windows.Media.Animation.TimelineCollection [PresentationCore]System.Windows.Media.Animation.TimelineGroup::get_Children()
    IL_00cb:  ldloc.s    moveUpAnimation
    IL_00cd:  callvirt   instance void [PresentationCore]System.Windows.Media.Animation.TimelineCollection::Add(class [PresentationCore]System.Windows.Media.Animation.Timeline)
    IL_00d2:  nop
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
    IL_00d3:  ldc.r8     0.0
    IL_00dc:  ldc.r8     1.
    IL_00e5:  ldc.r8     0.0
    IL_00ee:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::.ctor(float64,
                                                                                                      float64,
                                                                                                      float64)
    IL_00f3:  ldc.r8     0.0
    IL_00fc:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D::.ctor(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                 float64)
    IL_0101:  stloc.s    axisAngleRotation
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
    IL_0103:  ldloc.s    axisAngleRotation
    IL_0105:  ldc.r8     0.0
    IL_010e:  ldc.r8     0.0
    IL_0117:  ldc.r8     1.5
    IL_0120:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_0125:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.RotateTransform3D::.ctor(class [PresentationCore]System.Windows.Media.Media3D.Rotation3D,
                                                                                                               valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_012a:  stloc.s    rotateTransform
//000380:             rotateTransform.Rotation = axisAngleRotation;
    IL_012c:  ldloc.s    rotateTransform
    IL_012e:  ldloc.s    axisAngleRotation
    IL_0130:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.RotateTransform3D::set_Rotation(class [PresentationCore]System.Windows.Media.Media3D.Rotation3D)
    IL_0135:  nop
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
    IL_0136:  ldc.r8     0.0
    IL_013f:  ldc.r8     180.
    IL_0148:  ldc.r8     1000.
    IL_0151:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromMilliseconds(float64)
    IL_0156:  newobj     instance void [PresentationCore]System.Windows.Duration::.ctor(valuetype [mscorlib]System.TimeSpan)
    IL_015b:  newobj     instance void [PresentationCore]System.Windows.Media.Animation.DoubleAnimation::.ctor(float64,
                                                                                                               float64,
                                                                                                               valuetype [PresentationCore]System.Windows.Duration)
    IL_0160:  stloc.s    flipOverAnimation
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
    IL_0162:  ldarg.0
    IL_0163:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0168:  ldstr      "GamePieceFlipOver"
    IL_016d:  ldloc.s    axisAngleRotation
    IL_016f:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::RegisterName(string,
                                                                                                            object)
    IL_0174:  nop
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
    IL_0175:  ldloc.s    flipOverAnimation
    IL_0177:  ldstr      "GamePieceFlipOver"
    IL_017c:  call       void [PresentationFramework]System.Windows.Media.Animation.Storyboard::SetTargetName(class [WindowsBase]System.Windows.DependencyObject,
                                                                                                              string)
    IL_0181:  nop
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
    IL_0182:  ldloc.s    flipOverAnimation
    IL_0184:  ldsfld     class [WindowsBase]System.Windows.DependencyProperty [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D::AngleProperty
    IL_0189:  newobj     instance void [PresentationFramework]System.Windows.PropertyPath::.ctor(object)
    IL_018e:  call       void [PresentationFramework]System.Windows.Media.Animation.Storyboard::SetTargetProperty(class [WindowsBase]System.Windows.DependencyObject,
                                                                                                                  class [PresentationFramework]System.Windows.PropertyPath)
    IL_0193:  nop
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
    IL_0194:  ldloc.3
    IL_0195:  callvirt   instance class [PresentationCore]System.Windows.Media.Animation.TimelineCollection [PresentationCore]System.Windows.Media.Animation.TimelineGroup::get_Children()
    IL_019a:  ldloc.s    flipOverAnimation
    IL_019c:  callvirt   instance void [PresentationCore]System.Windows.Media.Animation.TimelineCollection::Add(class [PresentationCore]System.Windows.Media.Animation.Timeline)
    IL_01a1:  nop
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
    IL_01a2:  ldloc.2
    IL_01a3:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Material Reversi.Cylinder::get_Material()
    IL_01a8:  isinst     [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial
    IL_01ad:  callvirt   instance class [PresentationCore]System.Windows.Media.Brush [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::get_Brush()
    IL_01b2:  isinst     [PresentationCore]System.Windows.Media.SolidColorBrush
    IL_01b7:  stloc.s    diffMaterialBrush
//000390:             var changeColorAnimation = new ColorAnimation();
    IL_01b9:  newobj     instance void [PresentationCore]System.Windows.Media.Animation.ColorAnimation::.ctor()
    IL_01be:  stloc.s    changeColorAnimation
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
    IL_01c0:  ldloc.s    changeColorAnimation
    IL_01c2:  ldloc.s    diffMaterialBrush
    IL_01c4:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_01c9:  stloc.s    CS$0$0000
    IL_01cb:  ldloca.s   CS$0$0000
    IL_01cd:  ldarg.0
    IL_01ce:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
    IL_01d3:  call       instance bool [PresentationCore]System.Windows.Media.Color::Equals(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_01d8:  brtrue.s   IL_01e2

    IL_01da:  ldarg.0
    IL_01db:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
    IL_01e0:  br.s       IL_01e8

    IL_01e2:  ldarg.0
    IL_01e3:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_DARK_COLOR
    IL_01e8:  newobj     instance void valuetype [mscorlib]System.Nullable`1<valuetype [PresentationCore]System.Windows.Media.Color>::.ctor(!0)
    IL_01ed:  callvirt   instance void [PresentationCore]System.Windows.Media.Animation.ColorAnimation::set_To(valuetype [mscorlib]System.Nullable`1<valuetype [PresentationCore]System.Windows.Media.Color>)
    IL_01f2:  nop
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
    IL_01f3:  ldloc.s    changeColorAnimation
    IL_01f5:  ldc.r8     1000.
    IL_01fe:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromMilliseconds(float64)
    IL_0203:  call       valuetype [PresentationCore]System.Windows.Duration [PresentationCore]System.Windows.Duration::op_Implicit(valuetype [mscorlib]System.TimeSpan)
    IL_0208:  callvirt   instance void [PresentationCore]System.Windows.Media.Animation.Timeline::set_Duration(valuetype [PresentationCore]System.Windows.Duration)
    IL_020d:  nop
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
    IL_020e:  ldarg.0
    IL_020f:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0214:  ldstr      "GamePieceChangeColor"
    IL_0219:  ldloc.s    diffMaterialBrush
    IL_021b:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::RegisterName(string,
                                                                                                            object)
    IL_0220:  nop
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
    IL_0221:  ldloc.s    changeColorAnimation
    IL_0223:  ldstr      "GamePieceChangeColor"
    IL_0228:  call       void [PresentationFramework]System.Windows.Media.Animation.Storyboard::SetTargetName(class [WindowsBase]System.Windows.DependencyObject,
                                                                                                              string)
    IL_022d:  nop
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
    IL_022e:  ldloc.s    changeColorAnimation
    IL_0230:  ldsfld     class [WindowsBase]System.Windows.DependencyProperty [PresentationCore]System.Windows.Media.SolidColorBrush::ColorProperty
    IL_0235:  newobj     instance void [PresentationFramework]System.Windows.PropertyPath::.ctor(object)
    IL_023a:  call       void [PresentationFramework]System.Windows.Media.Animation.Storyboard::SetTargetProperty(class [WindowsBase]System.Windows.DependencyObject,
                                                                                                                  class [PresentationFramework]System.Windows.PropertyPath)
    IL_023f:  nop
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
    IL_0240:  ldloc.3
    IL_0241:  callvirt   instance class [PresentationCore]System.Windows.Media.Animation.TimelineCollection [PresentationCore]System.Windows.Media.Animation.TimelineGroup::get_Children()
    IL_0246:  ldloc.s    changeColorAnimation
    IL_0248:  callvirt   instance void [PresentationCore]System.Windows.Media.Animation.TimelineCollection::Add(class [PresentationCore]System.Windows.Media.Animation.Timeline)
    IL_024d:  nop
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
    IL_024e:  ldloc.s    transformGroup
    IL_0250:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::get_Children()
    IL_0255:  ldloc.s    rotateTransform
    IL_0257:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_025c:  nop
//000401:             transformGroup.Children.Add(translateTransform);
    IL_025d:  ldloc.s    transformGroup
    IL_025f:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::get_Children()
    IL_0264:  ldloc.s    translateTransform
    IL_0266:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_026b:  nop
//000402:             gamePiece.Transform = transformGroup;
    IL_026c:  ldloc.2
    IL_026d:  ldloc.s    transformGroup
    IL_026f:  callvirt   instance void Reversi.Cylinder::set_Transform(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_0274:  nop
//000403:             animationsStoryboard.Begin(mainViewport);
    IL_0275:  ldloc.3
    IL_0276:  ldarg.0
    IL_0277:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_027c:  callvirt   instance void [PresentationFramework]System.Windows.Media.Animation.Storyboard::Begin(class [PresentationFramework]System.Windows.FrameworkElement)
    IL_0281:  nop
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
    IL_0282:  ldarg.0
    IL_0283:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0288:  ldstr      "GamePieceMoveUp"
    IL_028d:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::UnregisterName(string)
    IL_0292:  nop
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
    IL_0293:  ldarg.0
    IL_0294:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0299:  ldstr      "GamePieceFlipOver"
    IL_029e:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::UnregisterName(string)
    IL_02a3:  nop
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
    IL_02a4:  ldarg.0
    IL_02a5:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_02aa:  ldstr      "GamePieceChangeColor"
    IL_02af:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::UnregisterName(string)
    IL_02b4:  nop
//000409:         }
    IL_02b5:  ret
  } // end of method Window1::FlipPieceAnimated

  .method public hidebysig instance void 
          ShowGhost(int32 row,
                    int32 col,
                    bool isPlayerLight) cil managed
  {
    // Code size       190 (0xbe)
    .maxstack  6
    .locals init ([0] class Reversi.Cylinder newPiece,
             [1] float64 centerX,
             [2] float64 centerY,
             [3] valuetype [PresentationCore]System.Windows.Media.Color pieceColor)
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
    IL_0000:  nop
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
    IL_0001:  ldc.i4.7
    IL_0002:  ldarg.1
    IL_0003:  sub
    IL_0004:  starg.s    row
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
    IL_0006:  ldc.r8     5.
    IL_000f:  ldc.r8     3.
    IL_0018:  ldc.i4.s   50
    IL_001a:  ldarg.3
    IL_001b:  brtrue.s   IL_002f

    IL_001d:  ldarg.0
    IL_001e:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_DARK_COLOR
    IL_0023:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_0028:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_002d:  br.s       IL_003f

    IL_002f:  ldarg.0
    IL_0030:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
    IL_0035:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_003a:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_003f:  newobj     instance void Reversi.Cylinder::.ctor(float64,
                                                               float64,
                                                               int32,
                                                               class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_0044:  stloc.0
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
    IL_0045:  ldarg.2
    IL_0046:  ldarg.1
    IL_0047:  ldloca.s   centerX
    IL_0049:  ldloca.s   centerY
    IL_004b:  call       void Reversi.Window1::GetViewCoordinates(int32,
                                                                  int32,
                                                                  float64&,
                                                                  float64&)
    IL_0050:  nop
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
    IL_0051:  ldloc.0
    IL_0052:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Material Reversi.Cylinder::get_Material()
    IL_0057:  isinst     [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial
    IL_005c:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::get_Color()
    IL_0061:  stloc.3
//000424:             pieceColor.A = 70;
    IL_0062:  ldloca.s   pieceColor
    IL_0064:  ldc.i4.s   70
    IL_0066:  call       instance void [PresentationCore]System.Windows.Media.Color::set_A(uint8)
    IL_006b:  nop
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
    IL_006c:  ldloc.0
    IL_006d:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Material Reversi.Cylinder::get_Material()
    IL_0072:  isinst     [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial
    IL_0077:  ldloc.3
    IL_0078:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::set_Color(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_007d:  nop
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
    IL_007e:  ldloc.0
    IL_007f:  ldloc.1
    IL_0080:  ldloc.2
    IL_0081:  ldc.r8     0.0
    IL_008a:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_008f:  callvirt   instance void Reversi.Cylinder::MoveTo(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_0094:  nop
//000427:             mainViewport.Children.Add(newPiece);
    IL_0095:  ldarg.0
    IL_0096:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_009b:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection [PresentationFramework]System.Windows.Controls.Viewport3D::get_Children()
    IL_00a0:  ldloc.0
    IL_00a1:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Visual3D)
    IL_00a6:  nop
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
    IL_00a7:  ldarg.0
    IL_00a8:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> Reversi.Window1::m_ghostPieces
    IL_00ad:  ldloc.0
    IL_00ae:  ldarg.2
    IL_00af:  conv.r8
    IL_00b0:  ldarg.1
    IL_00b1:  conv.r8
    IL_00b2:  newobj     instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_00b7:  callvirt   instance void class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::Add(!0,
                                                                                                                                                                        !1)
    IL_00bc:  nop
//000430:         }
    IL_00bd:  ret
  } // end of method Window1::ShowGhost

  .method private hidebysig instance void 
          MovePiece(class Reversi.Cylinder piece,
                    int32 col,
                    int32 row) cil managed
  {
    // Code size       37 (0x25)
    .maxstack  5
    .locals init ([0] float64 centerX,
             [1] float64 centerY)
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
    IL_0000:  nop
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
    IL_0001:  ldarg.2
    IL_0002:  ldarg.3
    IL_0003:  ldloca.s   centerX
    IL_0005:  ldloca.s   centerY
    IL_0007:  call       void Reversi.Window1::GetViewCoordinates(int32,
                                                                  int32,
                                                                  float64&,
                                                                  float64&)
    IL_000c:  nop
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
    IL_000d:  ldarg.1
    IL_000e:  ldloc.0
    IL_000f:  ldloc.1
    IL_0010:  ldc.r8     1.5
    IL_0019:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_001e:  callvirt   instance void Reversi.Cylinder::MoveTo(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_0023:  nop
//000443:         }
    IL_0024:  ret
  } // end of method Window1::MovePiece

  .method private hidebysig static void  GetViewCoordinates(int32 col,
                                                            int32 row,
                                                            [out] float64& centerX,
                                                            [out] float64& centerY) cil managed
  {
    // Code size       51 (0x33)
    .maxstack  8
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
    IL_0000:  nop
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
    IL_0001:  ldarg.3
    IL_0002:  ldarg.1
    IL_0003:  conv.r8
    IL_0004:  ldc.r8     10.
    IL_000d:  mul
    IL_000e:  ldc.r8     35.
    IL_0017:  sub
    IL_0018:  neg
    IL_0019:  stind.r8
//000449:             centerX = col * 10.0 - 35.0;
    IL_001a:  ldarg.2
    IL_001b:  ldarg.0
    IL_001c:  conv.r8
    IL_001d:  ldc.r8     10.
    IL_0026:  mul
    IL_0027:  ldc.r8     35.
    IL_0030:  sub
    IL_0031:  stind.r8
//000450:         }
    IL_0032:  ret
  } // end of method Window1::GetViewCoordinates

  .method private hidebysig instance void 
          mainViewport_MouseUp(object sender,
                               class [PresentationCore]System.Windows.Input.MouseButtonEventArgs e) cil managed
  {
    // Code size       328 (0x148)
    .maxstack  4
    .locals init ([0] valuetype [WindowsBase]System.Windows.Point ghostPos,
             [1] bool res,
             [2] int32 row,
             [3] int32 col,
             [4] bool CS$4$0000)
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
    IL_0000:  nop
//000455:             if (m_isGameOver)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool Reversi.Window1::m_isGameOver
    IL_0007:  ldc.i4.0
    IL_0008:  ceq
    IL_000a:  stloc.s    CS$4$0000
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_000c:  ldloc.s    CS$4$0000
    IL_000e:  brtrue.s   IL_0026

//000456:             {
    IL_0010:  nop
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
    IL_0011:  ldstr      "Game is over."
    IL_0016:  ldstr      "GAME OVER"
    IL_001b:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string,
                                                                                                                                                 string)
    IL_0020:  pop
//000458:                 return;
    IL_0021:  br         IL_0147

//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
    IL_0026:  ldarg.0
    IL_0027:  ldfld      bool Reversi.Window1::m_isAIMoving
    IL_002c:  ldc.i4.0
    IL_002d:  ceq
    IL_002f:  stloc.s    CS$4$0000
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0031:  ldloc.s    CS$4$0000
    IL_0033:  brtrue.s   IL_004b

//000462:             {
    IL_0035:  nop
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
    IL_0036:  ldstr      "AI is moving.  Wait for your opponent."
    IL_003b:  ldstr      "INVALID"
    IL_0040:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string,
                                                                                                                                                 string)
    IL_0045:  pop
//000464:                 return;
    IL_0046:  br         IL_0147

//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
    IL_004b:  ldarg.0
    IL_004c:  ldarg.2
    IL_004d:  ldarg.0
    IL_004e:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_0053:  callvirt   instance valuetype [WindowsBase]System.Windows.Point [PresentationCore]System.Windows.Input.MouseEventArgs::GetPosition(class [PresentationCore]System.Windows.IInputElement)
    IL_0058:  ldloca.s   ghostPos
    IL_005a:  call       instance bool Reversi.Window1::GetGhostPiecePosition(valuetype [WindowsBase]System.Windows.Point,
                                                                              valuetype [WindowsBase]System.Windows.Point&)
    IL_005f:  stloc.1
//000469:             if (res)
    IL_0060:  ldloc.1
    IL_0061:  ldc.i4.0
    IL_0062:  ceq
    IL_0064:  stloc.s    CS$4$0000
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0066:  ldloc.s    CS$4$0000
    IL_0068:  brtrue     IL_0113

//000470:             {
    IL_006d:  nop
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
    IL_006e:  ldarg.0
    IL_006f:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_0074:  ldarg.0
    IL_0075:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_depthSlider
    IL_007a:  callvirt   instance float64 [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::get_Value()
    IL_007f:  conv.i4
    IL_0080:  ldarg.0
    IL_0081:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_timeoutSlider
    IL_0086:  callvirt   instance float64 [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::get_Value()
    IL_008b:  conv.i4
    IL_008c:  conv.r8
    IL_008d:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)
    IL_0092:  ldarg.0
    IL_0093:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_dopSlider
    IL_0098:  callvirt   instance float64 [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::get_Value()
    IL_009d:  conv.i4
    IL_009e:  callvirt   instance void Reversi.ReversiGame::SetMinimaxKnobs(int32,
                                                                            valuetype [mscorlib]System.TimeSpan,
                                                                            int32)
    IL_00a3:  nop
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
    IL_00a4:  ldarg.0
    IL_00a5:  ldarg.0
    IL_00a6:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_00ab:  callvirt   instance valuetype [mscorlib]System.TimeSpan Reversi.Minimax::get_TimeLimit()
    IL_00b0:  newobj     instance void [PresentationCore]System.Windows.Duration::.ctor(valuetype [mscorlib]System.TimeSpan)
    IL_00b5:  stfld      valuetype [PresentationCore]System.Windows.Duration Reversi.Window1::m_progBarDuration
//000473:                 int row = 7 - (int)ghostPos.Y;
    IL_00ba:  ldc.i4.7
    IL_00bb:  ldloca.s   ghostPos
    IL_00bd:  call       instance float64 [WindowsBase]System.Windows.Point::get_Y()
    IL_00c2:  conv.i4
    IL_00c3:  sub
    IL_00c4:  stloc.2
//000474:                 int col = (int)ghostPos.X;
    IL_00c5:  ldloca.s   ghostPos
    IL_00c7:  call       instance float64 [WindowsBase]System.Windows.Point::get_X()
    IL_00cc:  conv.i4
    IL_00cd:  stloc.3
//000475:                 if (m_game.MakeMove(row, col))
    IL_00ce:  ldarg.0
    IL_00cf:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_00d4:  ldloc.2
    IL_00d5:  ldloc.3
    IL_00d6:  callvirt   instance bool Reversi.ReversiGame::MakeMove(int32,
                                                                     int32)
    IL_00db:  ldc.i4.0
    IL_00dc:  ceq
    IL_00de:  stloc.s    CS$4$0000
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00e0:  ldloc.s    CS$4$0000
    IL_00e2:  brtrue.s   IL_00fe

//000476:                 {
    IL_00e4:  nop
//000477:                     if (UpdateBoard())
    IL_00e5:  ldarg.0
    IL_00e6:  call       instance bool Reversi.Window1::UpdateBoard()
    IL_00eb:  ldc.i4.0
    IL_00ec:  ceq
    IL_00ee:  stloc.s    CS$4$0000
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00f0:  ldloc.s    CS$4$0000
    IL_00f2:  brtrue.s   IL_00fb

//000478:                         GoAI();
    IL_00f4:  ldarg.0
    IL_00f5:  call       instance void Reversi.Window1::GoAI()
    IL_00fa:  nop
//000479:                 }
    IL_00fb:  nop
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00fc:  br.s       IL_0110

//000481:                 {
    IL_00fe:  nop
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
    IL_00ff:  ldstr      "Can't move there. Shouldn't be seeing this message."
    IL_0104:  ldstr      "ERROR"
    IL_0109:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string,
                                                                                                                                                 string)
    IL_010e:  pop
//000483:                 }
    IL_010f:  nop
//000484:             }
    IL_0110:  nop
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0111:  br.s       IL_0147

//000486:             {
    IL_0113:  nop
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
    IL_0114:  ldstr      "You chose to pass."
    IL_0119:  ldstr      "USER MOVE"
    IL_011e:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string,
                                                                                                                                                 string)
    IL_0123:  pop
//000488:                 m_game.PassMove();
    IL_0124:  ldarg.0
    IL_0125:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_012a:  callvirt   instance void Reversi.ReversiGame::PassMove()
    IL_012f:  nop
//000489:                 if (UpdateBoard())
    IL_0130:  ldarg.0
    IL_0131:  call       instance bool Reversi.Window1::UpdateBoard()
    IL_0136:  ldc.i4.0
    IL_0137:  ceq
    IL_0139:  stloc.s    CS$4$0000
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_013b:  ldloc.s    CS$4$0000
    IL_013d:  brtrue.s   IL_0146

//000490:                     GoAI();
    IL_013f:  ldarg.0
    IL_0140:  call       instance void Reversi.Window1::GoAI()
    IL_0145:  nop
//000491:             }
    IL_0146:  nop
//000492:         }
    IL_0147:  ret
  } // end of method Window1::mainViewport_MouseUp

  .method private hidebysig instance bool 
          GetGhostPiecePosition(valuetype [WindowsBase]System.Windows.Point mousePosition,
                                [out] valuetype [WindowsBase]System.Windows.Point& ghostPosition) cil managed
  {
    // Code size       104 (0x68)
    .maxstack  3
    .locals init ([0] class [PresentationCore]System.Windows.Media.HitTestResult hitTestResult,
             [1] class Reversi.Cylinder cylinder,
             [2] bool CS$1$0000,
             [3] bool CS$4$0001)
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
    IL_0000:  nop
//000496:             ghostPosition = new Point();
    IL_0001:  ldarg.2
    IL_0002:  initobj    [WindowsBase]System.Windows.Point
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
    IL_0008:  ldarg.0
    IL_0009:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_000e:  ldarg.1
    IL_000f:  call       class [PresentationCore]System.Windows.Media.HitTestResult [PresentationCore]System.Windows.Media.VisualTreeHelper::HitTest(class [PresentationCore]System.Windows.Media.Visual,
                                                                                                                                                     valuetype [WindowsBase]System.Windows.Point)
    IL_0014:  stloc.0
//000498:             if (hitTestResult.VisualHit is Cylinder)
    IL_0015:  ldloc.0
    IL_0016:  callvirt   instance class [WindowsBase]System.Windows.DependencyObject [PresentationCore]System.Windows.Media.HitTestResult::get_VisualHit()
    IL_001b:  isinst     Reversi.Cylinder
    IL_0020:  ldnull
    IL_0021:  cgt.un
    IL_0023:  ldc.i4.0
    IL_0024:  ceq
    IL_0026:  stloc.3
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0027:  ldloc.3
    IL_0028:  brtrue.s   IL_0061

//000499:             {
    IL_002a:  nop
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
    IL_002b:  ldloc.0
    IL_002c:  callvirt   instance class [WindowsBase]System.Windows.DependencyObject [PresentationCore]System.Windows.Media.HitTestResult::get_VisualHit()
    IL_0031:  isinst     Reversi.Cylinder
    IL_0036:  stloc.1
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
    IL_0037:  ldarg.0
    IL_0038:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> Reversi.Window1::m_ghostPieces
    IL_003d:  ldloc.1
    IL_003e:  callvirt   instance bool class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::ContainsKey(!0)
    IL_0043:  stloc.3
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0044:  ldloc.3
    IL_0045:  brtrue.s   IL_004b

//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
    IL_0047:  ldc.i4.0
    IL_0048:  stloc.2
    IL_0049:  br.s       IL_0066

//000502:                 ghostPosition = m_ghostPieces[cylinder];
    IL_004b:  ldarg.2
    IL_004c:  ldarg.0
    IL_004d:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point> Reversi.Window1::m_ghostPieces
    IL_0052:  ldloc.1
    IL_0053:  callvirt   instance !1 class [mscorlib]System.Collections.Generic.Dictionary`2<class Reversi.Cylinder,valuetype [WindowsBase]System.Windows.Point>::get_Item(!0)
    IL_0058:  stobj      [WindowsBase]System.Windows.Point
//000503:                 return true;
    IL_005d:  ldc.i4.1
    IL_005e:  stloc.2
    IL_005f:  br.s       IL_0066

//000504:             }
//000505:             else
//000506:             {
    IL_0061:  nop
//000507: 
//000508:                 return false;
    IL_0062:  ldc.i4.0
    IL_0063:  stloc.2
    IL_0064:  br.s       IL_0066

//000509:             }
//000510:         }
    IL_0066:  ldloc.2
    IL_0067:  ret
  } // end of method Window1::GetGhostPiecePosition

  .method private hidebysig instance void 
          ui_startStopButton_Click(object sender,
                                   class [PresentationCore]System.Windows.RoutedEventArgs e) cil managed
  {
    // Code size       350 (0x15e)
    .maxstack  4
    .locals init ([0] bool CS$4$0000)
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
    IL_0000:  nop
//000515:             if (!m_isAuto)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool Reversi.Window1::m_isAuto
    IL_0007:  stloc.0
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0008:  ldloc.0
    IL_0009:  brtrue     IL_00bf

//000516:             {
    IL_000e:  nop
//000517:                 ui_dopSlider.IsEnabled = false;
    IL_000f:  ldarg.0
    IL_0010:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_dopSlider
    IL_0015:  ldc.i4.0
    IL_0016:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_001b:  nop
//000518:                 ui_depthSlider.IsEnabled = false;
    IL_001c:  ldarg.0
    IL_001d:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_depthSlider
    IL_0022:  ldc.i4.0
    IL_0023:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_0028:  nop
//000519:                 ui_timeoutSlider.IsEnabled = false;
    IL_0029:  ldarg.0
    IL_002a:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_timeoutSlider
    IL_002f:  ldc.i4.0
    IL_0030:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_0035:  nop
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
    IL_0036:  ldarg.0
    IL_0037:  ldfld      class [PresentationFramework]System.Windows.Controls.Button Reversi.Window1::ui_startStopButton
    IL_003c:  ldstr      "Stop Sequential vs. Parallel"
    IL_0041:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ContentControl::set_Content(object)
    IL_0046:  nop
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
    IL_0047:  ldarg.0
    IL_0048:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_004d:  ldarg.0
    IL_004e:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_depthSlider
    IL_0053:  callvirt   instance float64 [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::get_Value()
    IL_0058:  conv.i4
    IL_0059:  ldarg.0
    IL_005a:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_timeoutSlider
    IL_005f:  callvirt   instance float64 [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::get_Value()
    IL_0064:  conv.i4
    IL_0065:  conv.r8
    IL_0066:  call       valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)
    IL_006b:  ldarg.0
    IL_006c:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_dopSlider
    IL_0071:  callvirt   instance float64 [PresentationFramework]System.Windows.Controls.Primitives.RangeBase::get_Value()
    IL_0076:  conv.i4
    IL_0077:  callvirt   instance void Reversi.ReversiGame::SetMinimaxKnobs(int32,
                                                                            valuetype [mscorlib]System.TimeSpan,
                                                                            int32)
    IL_007c:  nop
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
    IL_007d:  ldarg.0
    IL_007e:  ldarg.0
    IL_007f:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_0084:  callvirt   instance valuetype [mscorlib]System.TimeSpan Reversi.Minimax::get_TimeLimit()
    IL_0089:  newobj     instance void [PresentationCore]System.Windows.Duration::.ctor(valuetype [mscorlib]System.TimeSpan)
    IL_008e:  stfld      valuetype [PresentationCore]System.Windows.Duration Reversi.Window1::m_progBarDuration
//000525:                 m_isAuto = true;
    IL_0093:  ldarg.0
    IL_0094:  ldc.i4.1
    IL_0095:  stfld      bool Reversi.Window1::m_isAuto
//000526:                 m_isAIParallel = false;
    IL_009a:  ldarg.0
    IL_009b:  ldc.i4.0
    IL_009c:  stfld      bool Reversi.Window1::m_isAIParallel
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
    IL_00a1:  ldarg.0
    IL_00a2:  ldfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_seqPlayerLabel
    IL_00a7:  ldstr      "Sequential Player"
    IL_00ac:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ContentControl::set_Content(object)
    IL_00b1:  nop
//000529:                 GoAI();
    IL_00b2:  ldarg.0
    IL_00b3:  call       instance void Reversi.Window1::GoAI()
    IL_00b8:  nop
//000530:             }
    IL_00b9:  nop
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00ba:  br         IL_0151

//000532:             {
    IL_00bf:  nop
//000533:                 m_game.Cancel();
    IL_00c0:  ldarg.0
    IL_00c1:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_00c6:  callvirt   instance void Reversi.Minimax::Cancel()
    IL_00cb:  nop
//000534:                 m_aiUICts.Cancel();
    IL_00cc:  ldarg.0
    IL_00cd:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Reversi.Window1::m_aiUICts
    IL_00d2:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_00d7:  nop
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
    IL_00d8:  ldarg.0
    IL_00d9:  ldfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_seqProgBar
    IL_00de:  ldc.i4.1
    IL_00df:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_Visibility(valuetype [PresentationCore]System.Windows.Visibility)
    IL_00e4:  nop
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
    IL_00e5:  ldarg.0
    IL_00e6:  ldfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_parProgBar
    IL_00eb:  ldc.i4.1
    IL_00ec:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_Visibility(valuetype [PresentationCore]System.Windows.Visibility)
    IL_00f1:  nop
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
    IL_00f2:  ldarg.0
    IL_00f3:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_dopSlider
    IL_00f8:  ldc.i4.1
    IL_00f9:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_00fe:  nop
//000539:                 ui_depthSlider.IsEnabled = true;
    IL_00ff:  ldarg.0
    IL_0100:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_depthSlider
    IL_0105:  ldc.i4.1
    IL_0106:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_010b:  nop
//000540:                 ui_timeoutSlider.IsEnabled = true;
    IL_010c:  ldarg.0
    IL_010d:  ldfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_timeoutSlider
    IL_0112:  ldc.i4.1
    IL_0113:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_0118:  nop
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
    IL_0119:  ldarg.0
    IL_011a:  ldfld      class [PresentationFramework]System.Windows.Controls.Button Reversi.Window1::ui_startStopButton
    IL_011f:  ldstr      "Start Sequential vs. Parallel"
    IL_0124:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ContentControl::set_Content(object)
    IL_0129:  nop
//000543: 
//000544:                 m_isAuto = false;
    IL_012a:  ldarg.0
    IL_012b:  ldc.i4.0
    IL_012c:  stfld      bool Reversi.Window1::m_isAuto
//000545:                 m_isAIMoving = false;
    IL_0131:  ldarg.0
    IL_0132:  ldc.i4.0
    IL_0133:  stfld      bool Reversi.Window1::m_isAIMoving
//000546:                 m_isAIParallel = true;
    IL_0138:  ldarg.0
    IL_0139:  ldc.i4.1
    IL_013a:  stfld      bool Reversi.Window1::m_isAIParallel
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
    IL_013f:  ldarg.0
    IL_0140:  ldfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_seqPlayerLabel
    IL_0145:  ldstr      "You"
    IL_014a:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ContentControl::set_Content(object)
    IL_014f:  nop
//000549:             }
    IL_0150:  nop
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
    IL_0151:  ldarg.0
    IL_0152:  ldfld      class [PresentationFramework]System.Windows.Controls.Expander Reversi.Window1::ui_settings
    IL_0157:  callvirt   instance bool [PresentationCore]System.Windows.UIElement::Focus()
    IL_015c:  pop
//000551:         }
    IL_015d:  ret
  } // end of method Window1::ui_startStopButton_Click

  .method private hidebysig instance void 
          Animation_Toggled(object sender,
                            class [PresentationCore]System.Windows.RoutedEventArgs e) cil managed
  {
    // Code size       17 (0x11)
    .maxstack  8
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
    IL_0000:  nop
//000555:             m_useAnimation = !m_useAnimation;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      bool Reversi.Window1::m_useAnimation
    IL_0008:  ldc.i4.0
    IL_0009:  ceq
    IL_000b:  stfld      bool Reversi.Window1::m_useAnimation
//000556:         }
    IL_0010:  ret
  } // end of method Window1::Animation_Toggled

  .method private hidebysig instance void 
          Window_Loaded(object sender,
                        class [PresentationCore]System.Windows.RoutedEventArgs e) cil managed
  {
    // Code size       118 (0x76)
    .maxstack  6
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
    IL_0000:  nop
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::seqPlayerViewport
    IL_0007:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection [PresentationFramework]System.Windows.Controls.Viewport3D::get_Children()
    IL_000c:  ldc.r8     5.
    IL_0015:  ldc.r8     3.
    IL_001e:  ldc.i4.s   50
    IL_0020:  ldarg.0
    IL_0021:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_DARK_COLOR
    IL_0026:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_002b:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_0030:  newobj     instance void Reversi.Cylinder::.ctor(float64,
                                                               float64,
                                                               int32,
                                                               class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_0035:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Visual3D)
    IL_003a:  nop
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
    IL_003b:  ldarg.0
    IL_003c:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::parPlayerViewport
    IL_0041:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection [PresentationFramework]System.Windows.Controls.Viewport3D::get_Children()
    IL_0046:  ldc.r8     5.
    IL_004f:  ldc.r8     3.
    IL_0058:  ldc.i4.s   50
    IL_005a:  ldarg.0
    IL_005b:  ldfld      valuetype [PresentationCore]System.Windows.Media.Color Reversi.Window1::S_LIGHT_COLOR
    IL_0060:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_0065:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_006a:  newobj     instance void Reversi.Cylinder::.ctor(float64,
                                                               float64,
                                                               int32,
                                                               class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_006f:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Visual3D)
    IL_0074:  nop
//000563:         }
    IL_0075:  ret
  } // end of method Window1::Window_Loaded

  .method public hidebysig newslot virtual final 
          instance void  InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       45 (0x2d)
    .maxstack  3
    .locals init ([0] class [System]System.Uri resourceLocater,
             [1] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\obj\Debug\Window1.g.cs' 
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool Reversi.Window1::_contentLoaded
    IL_0007:  ldc.i4.0
    IL_0008:  ceq
    IL_000a:  stloc.1
    IL_000b:  ldloc.1
    IL_000c:  brtrue.s   IL_0011

    IL_000e:  nop
    IL_000f:  br.s       IL_002c

    IL_0011:  ldarg.0
    IL_0012:  ldc.i4.1
    IL_0013:  stfld      bool Reversi.Window1::_contentLoaded
    IL_0018:  ldstr      "/Reversi;component/window1.xaml"
    IL_001d:  ldc.i4.2
    IL_001e:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_0023:  stloc.0
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Window1.xaml' 
//000001: ?<Window x:Class="Reversi.Window1"
    IL_0024:  ldarg.0
    IL_0025:  ldloc.0
    IL_0026:  call       void [PresentationFramework]System.Windows.Application::LoadComponent(object,
                                                                                               class [System]System.Uri)
    IL_002b:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\obj\Debug\Window1.g.cs' 
    IL_002c:  ret
  } // end of method Window1::InitializeComponent

  .method private hidebysig newslot virtual final 
          instance void  System.Windows.Markup.IComponentConnector.Connect(int32 connectionId,
                                                                           object target) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .override [System.Xaml]System.Windows.Markup.IComponentConnector::Connect
    // Code size       579 (0x243)
    .maxstack  4
    .locals init ([0] int32 CS$4$0000)
    IL_0000:  nop
    IL_0001:  ldarg.1
    IL_0002:  stloc.0
    IL_0003:  ldloc.0
    IL_0004:  ldc.i4.1
    IL_0005:  sub
    IL_0006:  switch     ( 
                          IL_0064,
                          IL_0099,
                          IL_00c2,
                          IL_00d3,
                          IL_00e4,
                          IL_00f5,
                          IL_0106,
                          IL_0117,
                          IL_0128,
                          IL_0139,
                          IL_014a,
                          IL_015b,
                          IL_016c,
                          IL_0195,
                          IL_01a6,
                          IL_01b7,
                          IL_01c5,
                          IL_01d3,
                          IL_01e1,
                          IL_01ef,
                          IL_01fd)
    IL_005f:  br         IL_023b

// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Window1.xaml' 
//000006:     KeyDown="Window_KeyDown"
    IL_0064:  ldarg.2
    IL_0065:  castclass  Reversi.Window1
    IL_006a:  ldarg.0
    IL_006b:  ldftn      instance void Reversi.Window1::Window_KeyDown(object,
                                                                       class [PresentationCore]System.Windows.Input.KeyEventArgs)
    IL_0071:  newobj     instance void [PresentationCore]System.Windows.Input.KeyEventHandler::.ctor(object,
                                                                                                     native int)
    IL_0076:  callvirt   instance void [PresentationCore]System.Windows.UIElement::add_KeyDown(class [PresentationCore]System.Windows.Input.KeyEventHandler)
    IL_007b:  nop
//000007:     Loaded="Window_Loaded" MinWidth="733" MinHeight="487">
    IL_007c:  ldarg.2
    IL_007d:  castclass  Reversi.Window1
    IL_0082:  ldarg.0
    IL_0083:  ldftn      instance void Reversi.Window1::Window_Loaded(object,
                                                                      class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_0089:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_008e:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::add_Loaded(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_0093:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\obj\Debug\Window1.g.cs' 
    IL_0094:  br         IL_0242

    IL_0099:  ldarg.0
    IL_009a:  ldarg.2
    IL_009b:  castclass  [PresentationFramework]System.Windows.Controls.Viewport3D
    IL_00a0:  stfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Window1.xaml' 
//000011:             <Viewport3D x:Name="mainViewport" Width="150" Height="150" MouseUp="mainViewport_MouseUp" >
    IL_00a5:  ldarg.0
    IL_00a6:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::mainViewport
    IL_00ab:  ldarg.0
    IL_00ac:  ldftn      instance void Reversi.Window1::mainViewport_MouseUp(object,
                                                                             class [PresentationCore]System.Windows.Input.MouseButtonEventArgs)
    IL_00b2:  newobj     instance void [PresentationCore]System.Windows.Input.MouseButtonEventHandler::.ctor(object,
                                                                                                             native int)
    IL_00b7:  callvirt   instance void [PresentationCore]System.Windows.UIElement::add_MouseUp(class [PresentationCore]System.Windows.Input.MouseButtonEventHandler)
    IL_00bc:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\obj\Debug\Window1.g.cs' 
    IL_00bd:  br         IL_0242

    IL_00c2:  ldarg.0
    IL_00c3:  ldarg.2
    IL_00c4:  castclass  [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera
    IL_00c9:  stfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera Reversi.Window1::mainCamera
    IL_00ce:  br         IL_0242

    IL_00d3:  ldarg.0
    IL_00d4:  ldarg.2
    IL_00d5:  castclass  [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D
    IL_00da:  stfld      class [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D Reversi.Window1::m_gameBoard
    IL_00df:  br         IL_0242

    IL_00e4:  ldarg.0
    IL_00e5:  ldarg.2
    IL_00e6:  castclass  [PresentationFramework]System.Windows.Controls.Grid
    IL_00eb:  stfld      class [PresentationFramework]System.Windows.Controls.Grid Reversi.Window1::theGrid
    IL_00f0:  br         IL_0242

    IL_00f5:  ldarg.0
    IL_00f6:  ldarg.2
    IL_00f7:  castclass  [PresentationFramework]System.Windows.Controls.Viewport3D
    IL_00fc:  stfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::seqPlayerViewport
    IL_0101:  br         IL_0242

    IL_0106:  ldarg.0
    IL_0107:  ldarg.2
    IL_0108:  castclass  [PresentationFramework]System.Windows.Controls.Label
    IL_010d:  stfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_seqPlayerLabel
    IL_0112:  br         IL_0242

    IL_0117:  ldarg.0
    IL_0118:  ldarg.2
    IL_0119:  castclass  [PresentationFramework]System.Windows.Controls.Label
    IL_011e:  stfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_seqLabel
    IL_0123:  br         IL_0242

    IL_0128:  ldarg.0
    IL_0129:  ldarg.2
    IL_012a:  castclass  [PresentationFramework]System.Windows.Controls.ProgressBar
    IL_012f:  stfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_seqProgBar
    IL_0134:  br         IL_0242

    IL_0139:  ldarg.0
    IL_013a:  ldarg.2
    IL_013b:  castclass  [PresentationFramework]System.Windows.Controls.Viewport3D
    IL_0140:  stfld      class [PresentationFramework]System.Windows.Controls.Viewport3D Reversi.Window1::parPlayerViewport
    IL_0145:  br         IL_0242

    IL_014a:  ldarg.0
    IL_014b:  ldarg.2
    IL_014c:  castclass  [PresentationFramework]System.Windows.Controls.Label
    IL_0151:  stfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_parLabel
    IL_0156:  br         IL_0242

    IL_015b:  ldarg.0
    IL_015c:  ldarg.2
    IL_015d:  castclass  [PresentationFramework]System.Windows.Controls.ProgressBar
    IL_0162:  stfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_parProgBar
    IL_0167:  br         IL_0242

    IL_016c:  ldarg.0
    IL_016d:  ldarg.2
    IL_016e:  castclass  [PresentationFramework]System.Windows.Controls.Button
    IL_0173:  stfld      class [PresentationFramework]System.Windows.Controls.Button Reversi.Window1::ui_startStopButton
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Window1.xaml' 
//000121:         <Button Name="ui_startStopButton" Width="150" Click="ui_startStopButton_Click" FontWeight="Normal" VerticalAlignment="Top" Margin="10" Content="Start Sequential vs. Parallel"
    IL_0178:  ldarg.0
    IL_0179:  ldfld      class [PresentationFramework]System.Windows.Controls.Button Reversi.Window1::ui_startStopButton
    IL_017e:  ldarg.0
    IL_017f:  ldftn      instance void Reversi.Window1::ui_startStopButton_Click(object,
                                                                                 class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_0185:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_018a:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ButtonBase::add_Click(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_018f:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\obj\Debug\Window1.g.cs' 
    IL_0190:  br         IL_0242

    IL_0195:  ldarg.0
    IL_0196:  ldarg.2
    IL_0197:  castclass  [PresentationFramework]System.Windows.Controls.Expander
    IL_019c:  stfld      class [PresentationFramework]System.Windows.Controls.Expander Reversi.Window1::ui_settings
    IL_01a1:  br         IL_0242

    IL_01a6:  ldarg.0
    IL_01a7:  ldarg.2
    IL_01a8:  castclass  [PresentationFramework]System.Windows.Controls.Label
    IL_01ad:  stfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_dopLabel
    IL_01b2:  br         IL_0242

    IL_01b7:  ldarg.0
    IL_01b8:  ldarg.2
    IL_01b9:  castclass  [PresentationFramework]System.Windows.Controls.Slider
    IL_01be:  stfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_dopSlider
    IL_01c3:  br.s       IL_0242

    IL_01c5:  ldarg.0
    IL_01c6:  ldarg.2
    IL_01c7:  castclass  [PresentationFramework]System.Windows.Controls.Label
    IL_01cc:  stfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_depthLabel
    IL_01d1:  br.s       IL_0242

    IL_01d3:  ldarg.0
    IL_01d4:  ldarg.2
    IL_01d5:  castclass  [PresentationFramework]System.Windows.Controls.Slider
    IL_01da:  stfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_depthSlider
    IL_01df:  br.s       IL_0242

    IL_01e1:  ldarg.0
    IL_01e2:  ldarg.2
    IL_01e3:  castclass  [PresentationFramework]System.Windows.Controls.Label
    IL_01e8:  stfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_timeoutLabel
    IL_01ed:  br.s       IL_0242

    IL_01ef:  ldarg.0
    IL_01f0:  ldarg.2
    IL_01f1:  castclass  [PresentationFramework]System.Windows.Controls.Slider
    IL_01f6:  stfld      class [PresentationFramework]System.Windows.Controls.Slider Reversi.Window1::ui_timeoutSlider
    IL_01fb:  br.s       IL_0242

    IL_01fd:  ldarg.0
    IL_01fe:  ldarg.2
    IL_01ff:  castclass  [PresentationFramework]System.Windows.Controls.CheckBox
    IL_0204:  stfld      class [PresentationFramework]System.Windows.Controls.CheckBox Reversi.Window1::m_animationCheckBox
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Window1.xaml' 
//000139:                 <CheckBox Content="Animation"  Foreground="LightGreen"  Margin="10" Height="16" HorizontalAlignment="Left" Name="m_animationCheckBox" VerticalAlignment="Top" Width="120" Checked="Animation_Toggled" Unchecked="Animation_Toggled" IsChecked="True" />
    IL_0209:  ldarg.0
    IL_020a:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox Reversi.Window1::m_animationCheckBox
    IL_020f:  ldarg.0
    IL_0210:  ldftn      instance void Reversi.Window1::Animation_Toggled(object,
                                                                          class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_0216:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_021b:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::add_Checked(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_0220:  nop
    IL_0221:  ldarg.0
    IL_0222:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox Reversi.Window1::m_animationCheckBox
    IL_0227:  ldarg.0
    IL_0228:  ldftn      instance void Reversi.Window1::Animation_Toggled(object,
                                                                          class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_022e:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_0233:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::add_Unchecked(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_0238:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\obj\Debug\Window1.g.cs' 
    IL_0239:  br.s       IL_0242

    IL_023b:  ldarg.0
    IL_023c:  ldc.i4.1
    IL_023d:  stfld      bool Reversi.Window1::_contentLoaded
    IL_0242:  ret
  } // end of method Window1::System.Windows.Markup.IComponentConnector.Connect

  .method private hidebysig instance void 
          '<GoAI>b__0'(class [mscorlib]System.Threading.Tasks.Task`1<valuetype Reversi.MinimaxMove> completedTask) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       271 (0x10f)
    .maxstack  4
    .locals init ([0] valuetype Reversi.MinimaxMove aiMove,
             [1] string s,
             [2] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Window1.xaml.cs' 
//000120:             {
    IL_0000:  nop
//000121:                 MinimaxMove aiMove = completedTask.Result;
    IL_0001:  ldarg.1
    IL_0002:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<valuetype Reversi.MinimaxMove>::get_Result()
    IL_0007:  stloc.0
//000122:                 if (aiMove.Row != -1)
    IL_0008:  ldloca.s   aiMove
    IL_000a:  ldfld      int32 Reversi.MinimaxMove::Row
    IL_000f:  ldc.i4.m1
    IL_0010:  ceq
    IL_0012:  stloc.2
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0013:  ldloc.2
    IL_0014:  brtrue.s   IL_0032

//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
    IL_0016:  ldarg.0
    IL_0017:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_001c:  ldloca.s   aiMove
    IL_001e:  ldfld      int32 Reversi.MinimaxMove::Row
    IL_0023:  ldloca.s   aiMove
    IL_0025:  ldfld      int32 Reversi.MinimaxMove::Col
    IL_002a:  callvirt   instance bool Reversi.ReversiGame::MakeMove(int32,
                                                                     int32)
    IL_002f:  pop
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0030:  br.s       IL_003e

//000125:                     m_game.PassMove();
    IL_0032:  ldarg.0
    IL_0033:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_0038:  callvirt   instance void Reversi.ReversiGame::PassMove()
    IL_003d:  nop
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
    IL_003e:  ldarg.0
    IL_003f:  ldfld      bool Reversi.Window1::m_isAIParallel
    IL_0044:  ldc.i4.0
    IL_0045:  ceq
    IL_0047:  stloc.2
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0048:  ldloc.2
    IL_0049:  brtrue.s   IL_0094

//000129:                 {
    IL_004b:  nop
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
    IL_004c:  ldstr      "{0:N}"
    IL_0051:  ldarg.0
    IL_0052:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_0057:  callvirt   instance int32 Reversi.Minimax::get_MovesConsidered()
    IL_005c:  box        [mscorlib]System.Int32
    IL_0061:  call       string [mscorlib]System.String::Format(string,
                                                                object)
    IL_0066:  stloc.1
//000131:                     s = s.Substring(0, s.Length - 3);
    IL_0067:  ldloc.1
    IL_0068:  ldc.i4.0
    IL_0069:  ldloc.1
    IL_006a:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_006f:  ldc.i4.3
    IL_0070:  sub
    IL_0071:  callvirt   instance string [mscorlib]System.String::Substring(int32,
                                                                            int32)
    IL_0076:  stloc.1
//000132:                     ui_parLabel.Content = s;
    IL_0077:  ldarg.0
    IL_0078:  ldfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_parLabel
    IL_007d:  ldloc.1
    IL_007e:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ContentControl::set_Content(object)
    IL_0083:  nop
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
    IL_0084:  ldarg.0
    IL_0085:  ldfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_parProgBar
    IL_008a:  ldc.i4.1
    IL_008b:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_Visibility(valuetype [PresentationCore]System.Windows.Visibility)
    IL_0090:  nop
//000134:                 }
    IL_0091:  nop
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0092:  br.s       IL_00db

//000136:                 {
    IL_0094:  nop
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
    IL_0095:  ldstr      "{0:N}"
    IL_009a:  ldarg.0
    IL_009b:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_00a0:  callvirt   instance int32 Reversi.Minimax::get_MovesConsidered()
    IL_00a5:  box        [mscorlib]System.Int32
    IL_00aa:  call       string [mscorlib]System.String::Format(string,
                                                                object)
    IL_00af:  stloc.1
//000138:                     s = s.Substring(0, s.Length - 3);
    IL_00b0:  ldloc.1
    IL_00b1:  ldc.i4.0
    IL_00b2:  ldloc.1
    IL_00b3:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_00b8:  ldc.i4.3
    IL_00b9:  sub
    IL_00ba:  callvirt   instance string [mscorlib]System.String::Substring(int32,
                                                                            int32)
    IL_00bf:  stloc.1
//000139:                     ui_seqLabel.Content = s;
    IL_00c0:  ldarg.0
    IL_00c1:  ldfld      class [PresentationFramework]System.Windows.Controls.Label Reversi.Window1::ui_seqLabel
    IL_00c6:  ldloc.1
    IL_00c7:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ContentControl::set_Content(object)
    IL_00cc:  nop
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
    IL_00cd:  ldarg.0
    IL_00ce:  ldfld      class [PresentationFramework]System.Windows.Controls.ProgressBar Reversi.Window1::ui_seqProgBar
    IL_00d3:  ldc.i4.1
    IL_00d4:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_Visibility(valuetype [PresentationCore]System.Windows.Visibility)
    IL_00d9:  nop
//000141:                 }
    IL_00da:  nop
//000142: 
//000143:                 UpdateBoard();
    IL_00db:  ldarg.0
    IL_00dc:  call       instance bool Reversi.Window1::UpdateBoard()
    IL_00e1:  pop
//000144:                 m_isAIMoving = false;
    IL_00e2:  ldarg.0
    IL_00e3:  ldc.i4.0
    IL_00e4:  stfld      bool Reversi.Window1::m_isAIMoving
//000145: 
//000146:                 if (m_isAuto)
    IL_00e9:  ldarg.0
    IL_00ea:  ldfld      bool Reversi.Window1::m_isAuto
    IL_00ef:  ldc.i4.0
    IL_00f0:  ceq
    IL_00f2:  stloc.2
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_00f3:  ldloc.2
    IL_00f4:  brtrue.s   IL_010e

//000147:                 {
    IL_00f6:  nop
//000148:                     m_isAIParallel = !m_isAIParallel;
    IL_00f7:  ldarg.0
    IL_00f8:  ldarg.0
    IL_00f9:  ldfld      bool Reversi.Window1::m_isAIParallel
    IL_00fe:  ldc.i4.0
    IL_00ff:  ceq
    IL_0101:  stfld      bool Reversi.Window1::m_isAIParallel
//000149:                     GoAI();
    IL_0106:  ldarg.0
    IL_0107:  call       instance void Reversi.Window1::GoAI()
    IL_010c:  nop
//000150:                 }
    IL_010d:  nop
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_010e:  ret
  } // end of method Window1::'<GoAI>b__0'

  .method private hidebysig instance valuetype Reversi.MinimaxMove 
          '<GoAI>b__1'() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       23 (0x17)
    .maxstack  2
    .locals init ([0] valuetype Reversi.MinimaxMove CS$1$0000)
//000115:             {
    IL_0000:  nop
//000116:                 return m_game.GetAIMove(m_isAIParallel);
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class Reversi.ReversiGame Reversi.Window1::m_game
    IL_0007:  ldarg.0
    IL_0008:  ldfld      bool Reversi.Window1::m_isAIParallel
    IL_000d:  callvirt   instance valuetype Reversi.MinimaxMove Reversi.ReversiGame::GetAIMove(bool)
    IL_0012:  stloc.0
    IL_0013:  br.s       IL_0015

//000117: 
//000118:             }, m_aiUICts.Token, TaskCreationOptions.None, TaskScheduler.Default)
//000119:             .ContinueWith(completedTask =>
//000120:             {
//000121:                 MinimaxMove aiMove = completedTask.Result;
//000122:                 if (aiMove.Row != -1)
//000123:                     m_game.MakeMove(aiMove.Row, aiMove.Col);
//000124:                 else
//000125:                     m_game.PassMove();
//000126: 
//000127:                 string s;
//000128:                 if (m_isAIParallel)
//000129:                 {
//000130:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000131:                     s = s.Substring(0, s.Length - 3);
//000132:                     ui_parLabel.Content = s;
//000133:                     ui_parProgBar.Visibility = Visibility.Hidden;
//000134:                 }
//000135:                 else
//000136:                 {
//000137:                     s = String.Format("{0:N}", m_game.MovesConsidered);
//000138:                     s = s.Substring(0, s.Length - 3);
//000139:                     ui_seqLabel.Content = s;
//000140:                     ui_seqProgBar.Visibility = Visibility.Hidden;
//000141:                 }
//000142: 
//000143:                 UpdateBoard();
//000144:                 m_isAIMoving = false;
//000145: 
//000146:                 if (m_isAuto)
//000147:                 {
//000148:                     m_isAIParallel = !m_isAIParallel;
//000149:                     GoAI();
//000150:                 }
//000151:             }, m_aiUICts.Token, TaskContinuationOptions.None, m_UIScheduler);
//000152:         }
//000153: 
//000154:         private bool UpdateBoard()
//000155:         {
//000156:             if (m_isGameOver)
//000157:                 return false;
//000158: 
//000159:             MinimaxSpot[,] game = m_game.Board;
//000160:             MinimaxSpot[,] gui = m_GUIboard;
//000161: 
//000162:             for (int i = 0; i < 8; i++)
//000163:             {
//000164:                 for (int j = 0; j < 8; j++)
//000165:                 {
//000166:                     if (gui[i, j] == MinimaxSpot.Empty && game[i, j] != MinimaxSpot.Empty)
//000167:                     {
//000168:                         AddPiece(i, j, game[i, j] == MinimaxSpot.Light ? true : false);
//000169:                     }
//000170:                     else if ((gui[i, j] == MinimaxSpot.Light && game[i, j] == MinimaxSpot.Dark) ||
//000171:                         (gui[i, j] == MinimaxSpot.Dark && game[i, j] == MinimaxSpot.Light))
//000172:                     {
//000173:                         FlipPiece(i, j);
//000174:                     }
//000175:                 }
//000176:             }
//000177: 
//000178:             // Remove old ghost pieces.
//000179:             foreach (var c in m_ghostPieces)
//000180:             {
//000181:                 mainViewport.Children.Remove(c.Key);
//000182:             }
//000183:             m_ghostPieces.Clear();
//000184: 
//000185:             // Generate new ghost pieces.
//000186:             IEnumerable<MinimaxMove> moves = m_game.GetValidMoves();
//000187:             foreach (var m in moves)
//000188:             {
//000189:                 ShowGhost(m.Row, m.Col, m_game.IsLightMove);
//000190:             }
//000191: 
//000192:             ReversiGameResult gs = m_game.GetGameResult();
//000193:             if (gs.GameState == ReversiGameState.LightWon)
//000194:             {
//000195:                 m_isGameOver = true;
//000196:                 MessageBox.Show(String.Format("Light Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000197:                 return false;
//000198:             }
//000199:             if (gs.GameState == ReversiGameState.DarkWon)
//000200:             {
//000201:                 m_isGameOver = true;
//000202:                 MessageBox.Show(String.Format("Dark Won! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000203:                 return false;
//000204:             }
//000205:             if (gs.GameState == ReversiGameState.Draw)
//000206:             {
//000207:                 m_isGameOver = true;
//000208:                 MessageBox.Show(String.Format("Draw! {0}-{1}", gs.NumLightPieces, gs.NumDarkPieces), "GAME OVER");
//000209:                 return false;
//000210:             }
//000211:             return true;
//000212:         }
//000213: 
//000214:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000215:         {
//000216:             var cameraPos = mainCamera.Position;
//000217:             if (e.Key == Key.Up)
//000218:                 cameraPos.Z += 1;
//000219:             if (e.Key == Key.Down)
//000220:                 cameraPos.Z -= 1;
//000221:             if (e.Key == Key.T)
//000222:                 mainCamera.FieldOfView += 10;
//000223:             if (e.Key == Key.G)
//000224:                 mainCamera.FieldOfView -= 10;
//000225:             if (e.Key == Key.D)
//000226:             {
//000227:                 m_game.Dump("");
//000228:                 MessageBox.Show("Dumped.");
//000229:             }
//000230: 
//000231:             mainCamera.Position = cameraPos;
//000232:         }
//000233: 
//000234:         #region IReversiView Members
//000235: 
//000236:         /// <summary>
//000237:         /// Collection of pieces on the board.
//000238:         /// </summary>
//000239:         private Dictionary<Point, Cylinder> m_gamePieces;
//000240:         private Dictionary<Cylinder, Point> m_ghostPieces;
//000241: 
//000242:         public void AddPiece(int row, int col, bool isPlayerLight)
//000243:         {
//000244:             if (m_useAnimation)
//000245:                 AddPieceAnimated(row, col, isPlayerLight);
//000246:             else
//000247:                 AddPieceUnanimated(row, col, isPlayerLight);
//000248:         }
//000249: 
//000250:         const int CYLINDER_RESOLUTION = 50;
//000251: 
//000252:         /// <summary>
//000253:         /// Places a piece on the gameboard by visually "dropping the piece."
//000254:         /// </summary>
//000255:         /// <param name="row">The row of the piece to place.</param>
//000256:         /// <param name="col">The column of the piece to place.</param>
//000257:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000258:         public void AddPieceAnimated(int row, int col, bool isPlayerLight)
//000259:         {
//000260:             // Update the GUI board
//000261:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000262: 
//000263:             // Hack to match danny's orientation
//000264:             row = 7 - row;
//000265: 
//000266:             // create the piece and place it above the destination square
//000267:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000268:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000269:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000270:             double centerX, centerY;
//000271:             GetViewCoordinates(col, row, out centerX, out centerY);
//000272:             newPiece.MoveTo(new Point3D(centerX, centerY, 20.0));
//000273:             mainViewport.Children.Add(newPiece);
//000274: 
//000275:             // animate it's descent
//000276:             var animationStoryboard = new Storyboard();
//000277: 
//000278:             var translateTransform = new TranslateTransform3D(
//000279:                 centerX, centerY, 20.0);
//000280:             var moveDownAnimation = new DoubleAnimation(0, new Duration(TimeSpan.FromMilliseconds(500)));
//000281:             mainViewport.RegisterName("GamePieceDrop", translateTransform);
//000282:             Storyboard.SetTargetName(moveDownAnimation, "GamePieceDrop");
//000283:             Storyboard.SetTargetProperty(moveDownAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000284:             animationStoryboard.Children.Add(moveDownAnimation);
//000285:             newPiece.Transform = translateTransform;
//000286: 
//000287:             animationStoryboard.Begin(mainViewport);
//000288: 
//000289:             mainViewport.UnregisterName("GamePieceDrop");
//000290: 
//000291:             m_gamePieces[new Point(row, col)] = newPiece;
//000292:         }
//000293: 
//000294:         /// <summary>
//000295:         /// Adds a piece to the game board without animation.  This method is called when the board is
//000296:         /// initialized.
//000297:         /// </summary>
//000298:         /// <param name="col">The column of the piece to add.</param>
//000299:         /// <param name="row">The row of the piece to add.</param>
//000300:         /// <param name="isBlack">If true, the piece color is black; otherwise, it's white.</param>
//000301:         public void AddPieceUnanimated(int row, int col, bool isPlayerLight)
//000302:         {
//000303:             // Update the GUI board
//000304:             m_GUIboard[row, col] = isPlayerLight ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000305: 
//000306:             // Hack to match danny's orientation
//000307:             row = 7 - row;
//000308: 
//000309:             // create the piece and place it above the destination square
//000310:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000311:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000312:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000313:             MovePiece(newPiece, col, row);
//000314:             m_gamePieces[new Point(row, col)] = newPiece;
//000315:             mainViewport.Children.Add(newPiece);
//000316:         }
//000317: 
//000318:         public void FlipPiece( int row, int col )
//000319:         {
//000320:             if (m_useAnimation)
//000321:                 FlipPieceAnimated(row, col);
//000322:             else
//000323:                 FlipPieceUnanimated(row, col);
//000324:         }
//000325: 
//000326:         public void FlipPieceUnanimated(int row, int col)
//000327:         {
//000328:             // Update the GUI board
//000329:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000330: 
//000331:             // Hack to match danny's orientation
//000332:             row = 7 - row;
//000333: 
//000334:             // get the piece's world coordinates
//000335:             double centerX, centerY;
//000336:             GetViewCoordinates(col, row, out centerX, out centerY);
//000337:             var gamePiece = m_gamePieces[new Point(row, col)];
//000338: 
//000339:             // get the diffuse material
//000340:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000341:             diffMaterialBrush.Color = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000342:         }
//000343: 
//000344:         /// <summary>
//000345:         /// "Flips" the game piece by lifting it, rotating it, and fading it's color from black to white, or vice versa.
//000346:         /// </summary>
//000347:         /// <param name="col">The column of the piece to flip.</param>
//000348:         /// <param name="row">The row of the piece to flip.</param>
//000349:         public void FlipPieceAnimated(int row, int col)
//000350:         {
//000351:             // Update the GUI board
//000352:             m_GUIboard[row, col] = m_GUIboard[row, col] == MinimaxSpot.Light ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000353: 
//000354:             // Hack to match danny's orientation
//000355:             row = 7 - row;
//000356: 
//000357:             // get the piece's world coordinates
//000358:             double centerX, centerY;
//000359:             GetViewCoordinates(col, row, out centerX, out centerY);
//000360:             var gamePiece = m_gamePieces[new Point(row, col)];
//000361: 
//000362:             // define an animation storyboard and a transform group
//000363:             var animationsStoryboard = new Storyboard();
//000364:             var transformGroup = new Transform3DGroup();
//000365: 
//000366:             // setup the lift animation
//000367:             var translateTransform = new TranslateTransform3D(
//000368:                 centerX, centerY, S_CYLINDER_HEIGHT / 2.0);
//000369:             var moveUpAnimation = new DoubleAnimation(10, new Duration(TimeSpan.FromMilliseconds(500)));
//000370:             moveUpAnimation.AutoReverse = true;
//000371:             mainViewport.RegisterName("GamePieceMoveUp", translateTransform);
//000372:             Storyboard.SetTargetName(moveUpAnimation, "GamePieceMoveUp");
//000373:             Storyboard.SetTargetProperty(moveUpAnimation, new PropertyPath(TranslateTransform3D.OffsetZProperty));
//000374:             animationsStoryboard.Children.Add(moveUpAnimation);
//000375: 
//000376: 
//000377:             // setup the rotate animation
//000378:             var axisAngleRotation = new AxisAngleRotation3D(new Vector3D(0, 1, 0), 0);
//000379:             var rotateTransform = new RotateTransform3D(axisAngleRotation, new Point3D(-0, 0, S_CYLINDER_HEIGHT / 2.0));
//000380:             rotateTransform.Rotation = axisAngleRotation;
//000381:             var flipOverAnimation = new DoubleAnimation(0, 180, new Duration(TimeSpan.FromMilliseconds(1000)));
//000382:             mainViewport.RegisterName("GamePieceFlipOver", axisAngleRotation);
//000383:             Storyboard.SetTargetName(flipOverAnimation, "GamePieceFlipOver");
//000384:             Storyboard.SetTargetProperty(flipOverAnimation, new PropertyPath(AxisAngleRotation3D.AngleProperty));
//000385:             animationsStoryboard.Children.Add(flipOverAnimation);
//000386: 
//000387:             // setup the recolor animation
//000388:             // get the diffuse material
//000389:             var diffMaterialBrush = (gamePiece.Material as DiffuseMaterial).Brush as SolidColorBrush;
//000390:             var changeColorAnimation = new ColorAnimation();
//000391:             changeColorAnimation.To = diffMaterialBrush.Color.Equals(S_LIGHT_COLOR) ? S_DARK_COLOR : S_LIGHT_COLOR;
//000392:             changeColorAnimation.Duration = TimeSpan.FromMilliseconds(1000);
//000393:             mainViewport.RegisterName("GamePieceChangeColor", diffMaterialBrush);
//000394:             Storyboard.SetTargetName(changeColorAnimation, "GamePieceChangeColor");
//000395:             Storyboard.SetTargetProperty(changeColorAnimation, new PropertyPath(SolidColorBrush.ColorProperty));
//000396:             animationsStoryboard.Children.Add(changeColorAnimation);
//000397: 
//000398:             // start the animation
//000399:             // note the transforms are applied in this specific order so that the piece ends up in the right location
//000400:             transformGroup.Children.Add(rotateTransform);
//000401:             transformGroup.Children.Add(translateTransform);
//000402:             gamePiece.Transform = transformGroup;
//000403:             animationsStoryboard.Begin(mainViewport);
//000404: 
//000405:             // unregister all animations so they can be performed again
//000406:             mainViewport.UnregisterName("GamePieceMoveUp");
//000407:             mainViewport.UnregisterName("GamePieceFlipOver");
//000408:             mainViewport.UnregisterName("GamePieceChangeColor");
//000409:         }
//000410: 
//000411:         public void ShowGhost(int row, int col, bool isPlayerLight)
//000412:         {
//000413:             // Hack to match danny's orientation
//000414:             row = 7 - row;
//000415: 
//000416:             // create the piece and place it above the destination square
//000417:             var newPiece = new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, isPlayerLight
//000418:                 ? new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))
//000419:                 : new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR)));
//000420:             double centerX, centerY;
//000421:             GetViewCoordinates(col, row, out centerX, out centerY);
//000422:             // make the piece transparent
//000423:             var pieceColor = (newPiece.Material as DiffuseMaterial).Color;
//000424:             pieceColor.A = 70;
//000425:             (newPiece.Material as DiffuseMaterial).Color = pieceColor;
//000426:             newPiece.MoveTo(new Point3D(centerX, centerY, 0.0));
//000427:             mainViewport.Children.Add(newPiece);
//000428: 
//000429:             m_ghostPieces.Add(newPiece, new Point(col, row));
//000430:         }
//000431: 
//000432:         #endregion
//000433: 
//000434:         #region View Helper Functions
//000435: 
//000436:         // moves a cylinder piece to a place on the gameboard
//000437:         private void MovePiece(Cylinder piece, int col, int row)
//000438:         {
//000439:             double centerX;
//000440:             double centerY;
//000441:             GetViewCoordinates(col, row, out centerX, out centerY);
//000442:             piece.MoveTo(new Point3D(centerX, centerY, S_CYLINDER_HEIGHT / 2.0));
//000443:         }
//000444: 
//000445:         private static void GetViewCoordinates(int col, int row, out double centerX, out double centerY)
//000446:         {
//000447:             // width of cell * number of row/col - center point of first col/row
//000448:             centerY = -(row * 10.0 - 35.0);
//000449:             centerX = col * 10.0 - 35.0;
//000450:         }
//000451:         #endregion
//000452: 
//000453:         private void mainViewport_MouseUp(object sender, MouseButtonEventArgs e)
//000454:         {
//000455:             if (m_isGameOver)
//000456:             {
//000457:                 MessageBox.Show("Game is over.", "GAME OVER");
//000458:                 return;
//000459:             }
//000460: 
//000461:             if (m_isAIMoving)
//000462:             {
//000463:                 MessageBox.Show("AI is moving.  Wait for your opponent.", "INVALID");
//000464:                 return;
//000465:             }
//000466: 
//000467:             Point ghostPos;
//000468:             var res = GetGhostPiecePosition(e.GetPosition(mainViewport), out ghostPos);
//000469:             if (res)
//000470:             {
//000471:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000472:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000473:                 int row = 7 - (int)ghostPos.Y;
//000474:                 int col = (int)ghostPos.X;
//000475:                 if (m_game.MakeMove(row, col))
//000476:                 {
//000477:                     if (UpdateBoard())
//000478:                         GoAI();
//000479:                 }
//000480:                 else
//000481:                 {
//000482:                     MessageBox.Show("Can't move there. Shouldn't be seeing this message.", "ERROR");
//000483:                 }
//000484:             }
//000485:             else
//000486:             {
//000487:                 MessageBox.Show("You chose to pass.", "USER MOVE");
//000488:                 m_game.PassMove();
//000489:                 if (UpdateBoard())
//000490:                     GoAI();
//000491:             }
//000492:         }
//000493: 
//000494:         private bool GetGhostPiecePosition(Point mousePosition, out Point ghostPosition)
//000495:         {
//000496:             ghostPosition = new Point();
//000497:             var hitTestResult = VisualTreeHelper.HitTest(mainViewport, mousePosition);
//000498:             if (hitTestResult.VisualHit is Cylinder)
//000499:             {
//000500:                 var cylinder = hitTestResult.VisualHit as Cylinder;
//000501:                 if (!m_ghostPieces.ContainsKey(cylinder)) return false;
//000502:                 ghostPosition = m_ghostPieces[cylinder];
//000503:                 return true;
//000504:             }
//000505:             else
//000506:             {
//000507: 
//000508:                 return false;
//000509:             }
//000510:         }
//000511: 
//000512: 
//000513:         private void ui_startStopButton_Click(object sender, RoutedEventArgs e)
//000514:         {
//000515:             if (!m_isAuto)
//000516:             {
//000517:                 ui_dopSlider.IsEnabled = false;
//000518:                 ui_depthSlider.IsEnabled = false;
//000519:                 ui_timeoutSlider.IsEnabled = false;
//000520: 
//000521:                 ui_startStopButton.Content = "Stop Sequential vs. Parallel";
//000522: 
//000523:                 m_game.SetMinimaxKnobs((int)ui_depthSlider.Value, TimeSpan.FromSeconds((int)ui_timeoutSlider.Value), (int)ui_dopSlider.Value);
//000524:                 m_progBarDuration = new Duration(m_game.TimeLimit);
//000525:                 m_isAuto = true;
//000526:                 m_isAIParallel = false;
//000527: 
//000528:                 ui_seqPlayerLabel.Content = "Sequential Player";
//000529:                 GoAI();
//000530:             }
//000531:             else
//000532:             {
//000533:                 m_game.Cancel();
//000534:                 m_aiUICts.Cancel();
//000535:                 ui_seqProgBar.Visibility = Visibility.Hidden;
//000536:                 ui_parProgBar.Visibility = Visibility.Hidden;
//000537: 
//000538:                 ui_dopSlider.IsEnabled = true;
//000539:                 ui_depthSlider.IsEnabled = true;
//000540:                 ui_timeoutSlider.IsEnabled = true;
//000541: 
//000542:                 ui_startStopButton.Content = "Start Sequential vs. Parallel";
//000543: 
//000544:                 m_isAuto = false;
//000545:                 m_isAIMoving = false;
//000546:                 m_isAIParallel = true;
//000547: 
//000548:                 ui_seqPlayerLabel.Content = "You";
//000549:             }
//000550:             ui_settings.Focus(); // stop the button from blinking due to it having focus
//000551:         }
//000552: 
//000553:         private void Animation_Toggled(object sender, RoutedEventArgs e)
//000554:         {
//000555:             m_useAnimation = !m_useAnimation;
//000556:         }
//000557: 
//000558:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000559:         {
//000560:             // add piece icons to the player badges
//000561:             seqPlayerViewport.Children.Add( new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_DARK_COLOR))));
//000562:             parPlayerViewport.Children.Add(new Cylinder(S_CYLINDER_WIDTH, S_CYLINDER_HEIGHT, CYLINDER_RESOLUTION, new DiffuseMaterial(new SolidColorBrush(S_LIGHT_COLOR))));
//000563:         }
//000564:     }
//000565: }
    IL_0015:  ldloc.0
    IL_0016:  ret
  } // end of method Window1::'<GoAI>b__1'

} // end of class Reversi.Window1

.class public auto ansi beforefieldinit Reversi.App
       extends [PresentationFramework]System.Windows.Application
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .method public hidebysig instance void 
          InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       20 (0x14)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\obj\Debug\App.g.cs' 
//000047:         public void InitializeComponent() {
    IL_0000:  nop
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\App.xaml' 
//000004:              StartupUri="Window1.xaml">
    IL_0001:  ldarg.0
    IL_0002:  ldstr      "Window1.xaml"
    IL_0007:  ldc.i4.2
    IL_0008:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_000d:  call       instance void [PresentationFramework]System.Windows.Application::set_StartupUri(class [System]System.Uri)
    IL_0012:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\obj\Debug\App.g.cs' 
    IL_0013:  ret
  } // end of method App::InitializeComponent

  .method public hidebysig static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       22 (0x16)
    .maxstack  1
    .locals init ([0] class Reversi.App app)
    IL_0000:  nop
    IL_0001:  newobj     instance void Reversi.App::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  callvirt   instance void Reversi.App::InitializeComponent()
    IL_000d:  nop
    IL_000e:  ldloc.0
    IL_000f:  callvirt   instance int32 [PresentationFramework]System.Windows.Application::Run()
    IL_0014:  pop
    IL_0015:  ret
  } // end of method App::Main

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationFramework]System.Windows.Application::.ctor()
    IL_0006:  ret
  } // end of method App::.ctor

} // end of class Reversi.App

.class private auto ansi sealed beforefieldinit Reversi.Properties.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .field private static class Reversi.Properties.Settings defaultInstance
  .method public hidebysig specialname static 
          class Reversi.Properties.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class Reversi.Properties.Settings CS$1$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\Properties\Settings.Designer.cs' 
//000025:             {
    IL_0000:  nop
//000026:                 return defaultInstance;
    IL_0001:  ldsfld     class Reversi.Properties.Settings Reversi.Properties.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000027:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  ret
  } // end of method Settings::.ctor

  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       21 (0x15)
    .maxstack  8
//000020:         private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
    IL_0000:  newobj     instance void Reversi.Properties.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  Reversi.Properties.Settings
    IL_000f:  stsfld     class Reversi.Properties.Settings Reversi.Properties.Settings::defaultInstance
//000021: 
//000022:         public static Settings Default
//000023:         {
//000024:             get
//000025:             {
//000026:                 return defaultInstance;
//000027:             }
//000028:         }
//000029:     }
//000030: }
    IL_0014:  ret
  } // end of method Settings::.cctor

  .property class Reversi.Properties.Settings
          Default()
  {
    .get class Reversi.Properties.Settings Reversi.Properties.Settings::get_Default()
  } // end of property Settings::Default
} // end of class Reversi.Properties.Settings

.class private auto ansi beforefieldinit Reversi.ReversiGame
       extends Reversi.Minimax
{
  .class auto ansi sealed nested private beforefieldinit '<GetValidMoves>d__0'
         extends [mscorlib]System.Object
         implements class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove>,
                    [mscorlib]System.Collections.IEnumerable,
                    class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove>,
                    [mscorlib]System.Collections.IEnumerator,
                    [mscorlib]System.IDisposable
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field private valuetype Reversi.MinimaxMove '<>2__current'
    .field private int32 '<>1__state'
    .field private int32 '<>l__initialThreadId'
    .field public class Reversi.ReversiGame '<>4__this'
    .field public valuetype Reversi.MinimaxSpot[0...,0...] state
    .field public valuetype Reversi.MinimaxSpot[0...,0...] '<>3__state'
    .field public bool isLightPlayer
    .field public bool '<>3__isLightPlayer'
    .field public int32 '<i>5__1'
    .field public int32 '<j>5__2'
    .method private hidebysig newslot virtual final 
            instance class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove> 
            'System.Collections.Generic.IEnumerable<Reversi.MinimaxMove>.GetEnumerator'() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .override  method instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove>::GetEnumerator()
      // Code size       98 (0x62)
      .maxstack  2
      .locals init (class Reversi.ReversiGame/'<GetValidMoves>d__0' V_0,
               class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove> V_1,
               bool V_2)
      IL_0000:  call       class [mscorlib]System.Threading.Thread [mscorlib]System.Threading.Thread::get_CurrentThread()
      IL_0005:  callvirt   instance int32 [mscorlib]System.Threading.Thread::get_ManagedThreadId()
      IL_000a:  ldarg.0
      IL_000b:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>l__initialThreadId'
      IL_0010:  bne.un.s   IL_0021

      IL_0012:  ldarg.0
      IL_0013:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>1__state'
      IL_0018:  ldc.i4.s   -2
      IL_001a:  ceq
      IL_001c:  ldc.i4.0
      IL_001d:  ceq
      IL_001f:  br.s       IL_0022

      IL_0021:  ldc.i4.1
      IL_0022:  stloc.2
      IL_0023:  ldloc.2
      IL_0024:  brtrue.s   IL_0031

      IL_0026:  ldarg.0
      IL_0027:  ldc.i4.0
      IL_0028:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>1__state'
      IL_002d:  ldarg.0
      IL_002e:  stloc.0
      IL_002f:  br.s       IL_0044

      IL_0031:  ldc.i4.0
      IL_0032:  newobj     instance void Reversi.ReversiGame/'<GetValidMoves>d__0'::.ctor(int32)
      IL_0037:  stloc.0
      IL_0038:  ldloc.0
      IL_0039:  ldarg.0
      IL_003a:  ldfld      class Reversi.ReversiGame Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>4__this'
      IL_003f:  stfld      class Reversi.ReversiGame Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>4__this'
      IL_0044:  ldloc.0
      IL_0045:  ldarg.0
      IL_0046:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>3__state'
      IL_004b:  stfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame/'<GetValidMoves>d__0'::state
      IL_0050:  ldloc.0
      IL_0051:  ldarg.0
      IL_0052:  ldfld      bool Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>3__isLightPlayer'
      IL_0057:  stfld      bool Reversi.ReversiGame/'<GetValidMoves>d__0'::isLightPlayer
      IL_005c:  ldloc.0
      IL_005d:  stloc.1
      IL_005e:  br.s       IL_0060

      IL_0060:  ldloc.1
      IL_0061:  ret
    } // end of method '<GetValidMoves>d__0'::'System.Collections.Generic.IEnumerable<Reversi.MinimaxMove>.GetEnumerator'

    .method private hidebysig newslot virtual final 
            instance class [mscorlib]System.Collections.IEnumerator 
            System.Collections.IEnumerable.GetEnumerator() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .override [mscorlib]System.Collections.IEnumerable::GetEnumerator
      // Code size       11 (0xb)
      .maxstack  1
      .locals init (class [mscorlib]System.Collections.IEnumerator V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove> Reversi.ReversiGame/'<GetValidMoves>d__0'::'System.Collections.Generic.IEnumerable<Reversi.MinimaxMove>.GetEnumerator'()
      IL_0006:  stloc.0
      IL_0007:  br.s       IL_0009

      IL_0009:  ldloc.0
      IL_000a:  ret
    } // end of method '<GetValidMoves>d__0'::System.Collections.IEnumerable.GetEnumerator

    .method private hidebysig newslot virtual final 
            instance bool  MoveNext() cil managed
    {
      .override [mscorlib]System.Collections.IEnumerator::MoveNext
      // Code size       232 (0xe8)
      .maxstack  5
      .locals init ([0] bool CS$1$0000,
               [1] int32 CS$4$0001,
               [2] bool CS$4$0002)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Reversi\Reversi\ReversiGame.cs' 
      IL_0000:  ldarg.0
      IL_0001:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>1__state'
      IL_0006:  stloc.1
      IL_0007:  ldloc.1
      IL_0008:  switch     ( 
                            IL_0019,
                            IL_0017)
      IL_0015:  br.s       IL_001b

      IL_0017:  br.s       IL_008b

      IL_0019:  br.s       IL_0020

      IL_001b:  br         IL_00e2

      IL_0020:  ldarg.0
      IL_0021:  ldc.i4.m1
      IL_0022:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>1__state'
//000476:         {
      IL_0027:  nop
//000477:             for (int i = 0; i < m_numRows; i++)
      IL_0028:  ldarg.0
      IL_0029:  ldc.i4.0
      IL_002a:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<i>5__1'
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
      IL_002f:  br         IL_00c7

//000478:             {
      IL_0034:  nop
//000479:                 for (int j = 0; j < m_numCols; j++)
      IL_0035:  ldarg.0
      IL_0036:  ldc.i4.0
      IL_0037:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<j>5__2'
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
      IL_003c:  br.s       IL_00a1

//000480:                 {
      IL_003e:  nop
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
      IL_003f:  ldarg.0
      IL_0040:  ldfld      class Reversi.ReversiGame Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>4__this'
      IL_0045:  ldarg.0
      IL_0046:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame/'<GetValidMoves>d__0'::state
      IL_004b:  ldarg.0
      IL_004c:  ldfld      bool Reversi.ReversiGame/'<GetValidMoves>d__0'::isLightPlayer
      IL_0051:  ldarg.0
      IL_0052:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<i>5__1'
      IL_0057:  ldarg.0
      IL_0058:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<j>5__2'
      IL_005d:  callvirt   instance bool Reversi.ReversiGame::IsValidMove(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                          bool,
                                                                          int32,
                                                                          int32)
      IL_0062:  ldc.i4.0
      IL_0063:  ceq
      IL_0065:  stloc.2
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
      IL_0066:  ldloc.2
      IL_0067:  brtrue.s   IL_0092

//000482:                         yield return new MinimaxMove(i, j);
      IL_0069:  ldarg.0
      IL_006a:  ldarg.0
      IL_006b:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<i>5__1'
      IL_0070:  ldarg.0
      IL_0071:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<j>5__2'
      IL_0076:  newobj     instance void Reversi.MinimaxMove::.ctor(int32,
                                                                    int32)
      IL_007b:  stfld      valuetype Reversi.MinimaxMove Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>2__current'
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
      IL_0080:  ldarg.0
      IL_0081:  ldc.i4.1
      IL_0082:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>1__state'
      IL_0087:  ldc.i4.1
      IL_0088:  stloc.0
      IL_0089:  br.s       IL_00e6

      IL_008b:  ldarg.0
      IL_008c:  ldc.i4.m1
      IL_008d:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>1__state'
//000483:                 }
      IL_0092:  nop
//000479:                 for (int j = 0; j < m_numCols; j++)
      IL_0093:  ldarg.0
      IL_0094:  dup
      IL_0095:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<j>5__2'
      IL_009a:  ldc.i4.1
      IL_009b:  add
      IL_009c:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<j>5__2'
      IL_00a1:  ldarg.0
      IL_00a2:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<j>5__2'
      IL_00a7:  ldarg.0
      IL_00a8:  ldfld      class Reversi.ReversiGame Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>4__this'
      IL_00ad:  ldfld      int32 Reversi.ReversiGame::m_numCols
      IL_00b2:  clt
      IL_00b4:  stloc.2
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
      IL_00b5:  ldloc.2
      IL_00b6:  brtrue.s   IL_003e

//000484:             }
      IL_00b8:  nop
//000477:             for (int i = 0; i < m_numRows; i++)
      IL_00b9:  ldarg.0
      IL_00ba:  dup
      IL_00bb:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<i>5__1'
      IL_00c0:  ldc.i4.1
      IL_00c1:  add
      IL_00c2:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<i>5__1'
      IL_00c7:  ldarg.0
      IL_00c8:  ldfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<i>5__1'
      IL_00cd:  ldarg.0
      IL_00ce:  ldfld      class Reversi.ReversiGame Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>4__this'
      IL_00d3:  ldfld      int32 Reversi.ReversiGame::m_numRows
      IL_00d8:  clt
      IL_00da:  stloc.2
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
      IL_00db:  ldloc.2
      IL_00dc:  brtrue     IL_0034

//000485:         }
      IL_00e1:  nop
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
      IL_00e2:  ldc.i4.0
      IL_00e3:  stloc.0
      IL_00e4:  br.s       IL_00e6

      IL_00e6:  ldloc.0
      IL_00e7:  ret
    } // end of method '<GetValidMoves>d__0'::MoveNext

    .method private hidebysig newslot specialname virtual final 
            instance valuetype Reversi.MinimaxMove 
            'System.Collections.Generic.IEnumerator<Reversi.MinimaxMove>.get_Current'() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .override  method instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<valuetype Reversi.MinimaxMove>::get_Current()
      // Code size       11 (0xb)
      .maxstack  1
      .locals init (valuetype Reversi.MinimaxMove V_0)
      IL_0000:  ldarg.0
      IL_0001:  ldfld      valuetype Reversi.MinimaxMove Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>2__current'
      IL_0006:  stloc.0
      IL_0007:  br.s       IL_0009

      IL_0009:  ldloc.0
      IL_000a:  ret
    } // end of method '<GetValidMoves>d__0'::'System.Collections.Generic.IEnumerator<Reversi.MinimaxMove>.get_Current'

    .method private hidebysig newslot virtual final 
            instance void  System.Collections.IEnumerator.Reset() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .override [mscorlib]System.Collections.IEnumerator::Reset
      // Code size       6 (0x6)
      .maxstack  8
      IL_0000:  newobj     instance void [mscorlib]System.NotSupportedException::.ctor()
      IL_0005:  throw
    } // end of method '<GetValidMoves>d__0'::System.Collections.IEnumerator.Reset

    .method private hidebysig newslot virtual final 
            instance void  System.IDisposable.Dispose() cil managed
    {
      .override [mscorlib]System.IDisposable::Dispose
      // Code size       2 (0x2)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ret
    } // end of method '<GetValidMoves>d__0'::System.IDisposable.Dispose

    .method private hidebysig newslot specialname virtual final 
            instance object  System.Collections.IEnumerator.get_Current() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .override [mscorlib]System.Collections.IEnumerator::get_Current
      // Code size       16 (0x10)
      .maxstack  1
      .locals init (object V_0)
      IL_0000:  ldarg.0
      IL_0001:  ldfld      valuetype Reversi.MinimaxMove Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>2__current'
      IL_0006:  box        Reversi.MinimaxMove
      IL_000b:  stloc.0
      IL_000c:  br.s       IL_000e

      IL_000e:  ldloc.0
      IL_000f:  ret
    } // end of method '<GetValidMoves>d__0'::System.Collections.IEnumerator.get_Current

    .method public hidebysig specialname rtspecialname 
            instance void  .ctor(int32 '<>1__state') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       30 (0x1e)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ldarg.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>1__state'
      IL_000d:  ldarg.0
      IL_000e:  call       class [mscorlib]System.Threading.Thread [mscorlib]System.Threading.Thread::get_CurrentThread()
      IL_0013:  callvirt   instance int32 [mscorlib]System.Threading.Thread::get_ManagedThreadId()
      IL_0018:  stfld      int32 Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>l__initialThreadId'
      IL_001d:  ret
    } // end of method '<GetValidMoves>d__0'::.ctor

    .property instance valuetype Reversi.MinimaxMove
            'System.Collections.Generic.IEnumerator<Reversi.MinimaxMove>.Current'()
    {
      .get instance valuetype Reversi.MinimaxMove Reversi.ReversiGame/'<GetValidMoves>d__0'::'System.Collections.Generic.IEnumerator<Reversi.MinimaxMove>.get_Current'()
    } // end of property '<GetValidMoves>d__0'::'System.Collections.Generic.IEnumerator<Reversi.MinimaxMove>.Current'
    .property instance object System.Collections.IEnumerator.Current()
    {
      .get instance object Reversi.ReversiGame/'<GetValidMoves>d__0'::System.Collections.IEnumerator.get_Current()
    } // end of property '<GetValidMoves>d__0'::System.Collections.IEnumerator.Current
  } // end of class '<GetValidMoves>d__0'

  .field private int32 m_numRows
  .field private int32 m_numCols
  .field private valuetype Reversi.MinimaxSpot[0...,0...] m_board
  .field private int32 m_depth
  .field private int32 m_degPar
  .field private valuetype [mscorlib]System.TimeSpan m_time
  .field private bool m_isLightMove
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(int32 numRows,
                               int32 numCols) cil managed
  {
    // Code size       146 (0x92)
    .maxstack  4
    .locals init ([0] int32 i,
             [1] int32 j,
             [2] bool CS$4$0000)
//000018:         public ReversiGame(int numRows, int numCols)
    IL_0000:  ldarg.0
    IL_0001:  call       instance void Reversi.Minimax::.ctor()
    IL_0006:  nop
//000019:         {
    IL_0007:  nop
//000020:             m_numRows = numRows;
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      int32 Reversi.ReversiGame::m_numRows
//000021:             m_numCols = numCols;
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      int32 Reversi.ReversiGame::m_numCols
//000022:             m_board = new MinimaxSpot[numRows, numCols];
    IL_0016:  ldarg.0
    IL_0017:  ldarg.1
    IL_0018:  ldarg.2
    IL_0019:  newobj     instance void valuetype Reversi.MinimaxSpot[0...,0...]::.ctor(int32,
                                                                                       int32)
    IL_001e:  stfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
//000023:             for (int i = 0; i < numRows; i++)
    IL_0023:  ldc.i4.0
    IL_0024:  stloc.0
//000024:                 for (int j = 0; j < numCols; j++)
//000025:                     m_board[i, j] = MinimaxSpot.Empty;
//000026: 
//000027:             m_board[3, 3] = MinimaxSpot.Light;
//000028:             m_board[4, 4] = MinimaxSpot.Light;
//000029:             m_board[4, 3] = MinimaxSpot.Dark;
//000030:             m_board[3, 4] = MinimaxSpot.Dark;
//000031: 
//000032:             m_isLightMove = false;
//000033:         }
//000034: 
//000035:         public void SetMinimaxKnobs(int maxDepth, TimeSpan timeLimit, int degOfParallelism)
//000036:         {
//000037:             m_depth = maxDepth;
//000038:             m_time = timeLimit;
//000039:             m_degPar = degOfParallelism;
//000040:         }
//000041: 
//000042:         /// <summary>
//000043:         /// Returns whether a move on the given row and column on the given state by the given player
//000044:         /// is valid.
//000045:         /// </summary>
//000046:         /// <param name="state">The state to consider.</param>
//000047:         /// <param name="isLightPlayer">The player ot move.</param>
//000048:         /// <param name="row">The move row.</param>
//000049:         /// <param name="col">The move column.</param>
//000050:         /// <returns></returns>
//000051:         private bool IsValidMove(MinimaxSpot[,] state, bool isLightPlayer, int row, int col)
//000052:         {
//000053:             if (state[row, col] != MinimaxSpot.Empty)
//000054:                 return false;
//000055: 
//000056:             MinimaxSpot you = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000057:             MinimaxSpot enemy = isLightPlayer ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000058: 
//000059:             // Check above.
//000060:             if (row + 1 < m_numRows && state[row + 1, col] == enemy)
//000061:             {
//000062:                 for (int r = row + 2; r < m_numRows; r++)
//000063:                 {
//000064:                     if (state[r, col] == you)
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0025:  br.s       IL_0049

//000024:                 for (int j = 0; j < numCols; j++)
    IL_0027:  ldc.i4.0
    IL_0028:  stloc.1
//000025:                     m_board[i, j] = MinimaxSpot.Empty;
//000026: 
//000027:             m_board[3, 3] = MinimaxSpot.Light;
//000028:             m_board[4, 4] = MinimaxSpot.Light;
//000029:             m_board[4, 3] = MinimaxSpot.Dark;
//000030:             m_board[3, 4] = MinimaxSpot.Dark;
//000031: 
//000032:             m_isLightMove = false;
//000033:         }
//000034: 
//000035:         public void SetMinimaxKnobs(int maxDepth, TimeSpan timeLimit, int degOfParallelism)
//000036:         {
//000037:             m_depth = maxDepth;
//000038:             m_time = timeLimit;
//000039:             m_degPar = degOfParallelism;
//000040:         }
//000041: 
//000042:         /// <summary>
//000043:         /// Returns whether a move on the given row and column on the given state by the given player
//000044:         /// is valid.
//000045:         /// </summary>
//000046:         /// <param name="state">The state to consider.</param>
//000047:         /// <param name="isLightPlayer">The player ot move.</param>
//000048:         /// <param name="row">The move row.</param>
//000049:         /// <param name="col">The move column.</param>
//000050:         /// <returns></returns>
//000051:         private bool IsValidMove(MinimaxSpot[,] state, bool isLightPlayer, int row, int col)
//000052:         {
//000053:             if (state[row, col] != MinimaxSpot.Empty)
//000054:                 return false;
//000055: 
//000056:             MinimaxSpot you = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000057:             MinimaxSpot enemy = isLightPlayer ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000058: 
//000059:             // Check above.
//000060:             if (row + 1 < m_numRows && state[row + 1, col] == enemy)
//000061:             {
//000062:                 for (int r = row + 2; r < m_numRows; r++)
//000063:                 {
//000064:                     if (state[r, col] == you)
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0029:  br.s       IL_003d

//000025:                     m_board[i, j] = MinimaxSpot.Empty;
    IL_002b:  ldarg.0
    IL_002c:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0031:  ldloc.0
    IL_0032:  ldloc.1
    IL_0033:  ldc.i4.0
    IL_0034:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000024:                 for (int j = 0; j < numCols; j++)
    IL_0039:  ldloc.1
    IL_003a:  ldc.i4.1
    IL_003b:  add
    IL_003c:  stloc.1
    IL_003d:  ldloc.1
    IL_003e:  ldarg.2
    IL_003f:  clt
    IL_0041:  stloc.2
//000025:                     m_board[i, j] = MinimaxSpot.Empty;
//000026: 
//000027:             m_board[3, 3] = MinimaxSpot.Light;
//000028:             m_board[4, 4] = MinimaxSpot.Light;
//000029:             m_board[4, 3] = MinimaxSpot.Dark;
//000030:             m_board[3, 4] = MinimaxSpot.Dark;
//000031: 
//000032:             m_isLightMove = false;
//000033:         }
//000034: 
//000035:         public void SetMinimaxKnobs(int maxDepth, TimeSpan timeLimit, int degOfParallelism)
//000036:         {
//000037:             m_depth = maxDepth;
//000038:             m_time = timeLimit;
//000039:             m_degPar = degOfParallelism;
//000040:         }
//000041: 
//000042:         /// <summary>
//000043:         /// Returns whether a move on the given row and column on the given state by the given player
//000044:         /// is valid.
//000045:         /// </summary>
//000046:         /// <param name="state">The state to consider.</param>
//000047:         /// <param name="isLightPlayer">The player ot move.</param>
//000048:         /// <param name="row">The move row.</param>
//000049:         /// <param name="col">The move column.</param>
//000050:         /// <returns></returns>
//000051:         private bool IsValidMove(MinimaxSpot[,] state, bool isLightPlayer, int row, int col)
//000052:         {
//000053:             if (state[row, col] != MinimaxSpot.Empty)
//000054:                 return false;
//000055: 
//000056:             MinimaxSpot you = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000057:             MinimaxSpot enemy = isLightPlayer ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000058: 
//000059:             // Check above.
//000060:             if (row + 1 < m_numRows && state[row + 1, col] == enemy)
//000061:             {
//000062:                 for (int r = row + 2; r < m_numRows; r++)
//000063:                 {
//000064:                     if (state[r, col] == you)
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0042:  ldloc.2
    IL_0043:  brtrue.s   IL_002b

//000023:             for (int i = 0; i < numRows; i++)
    IL_0045:  ldloc.0
    IL_0046:  ldc.i4.1
    IL_0047:  add
    IL_0048:  stloc.0
    IL_0049:  ldloc.0
    IL_004a:  ldarg.1
    IL_004b:  clt
    IL_004d:  stloc.2
//000024:                 for (int j = 0; j < numCols; j++)
//000025:                     m_board[i, j] = MinimaxSpot.Empty;
//000026: 
//000027:             m_board[3, 3] = MinimaxSpot.Light;
//000028:             m_board[4, 4] = MinimaxSpot.Light;
//000029:             m_board[4, 3] = MinimaxSpot.Dark;
//000030:             m_board[3, 4] = MinimaxSpot.Dark;
//000031: 
//000032:             m_isLightMove = false;
//000033:         }
//000034: 
//000035:         public void SetMinimaxKnobs(int maxDepth, TimeSpan timeLimit, int degOfParallelism)
//000036:         {
//000037:             m_depth = maxDepth;
//000038:             m_time = timeLimit;
//000039:             m_degPar = degOfParallelism;
//000040:         }
//000041: 
//000042:         /// <summary>
//000043:         /// Returns whether a move on the given row and column on the given state by the given player
//000044:         /// is valid.
//000045:         /// </summary>
//000046:         /// <param name="state">The state to consider.</param>
//000047:         /// <param name="isLightPlayer">The player ot move.</param>
//000048:         /// <param name="row">The move row.</param>
//000049:         /// <param name="col">The move column.</param>
//000050:         /// <returns></returns>
//000051:         private bool IsValidMove(MinimaxSpot[,] state, bool isLightPlayer, int row, int col)
//000052:         {
//000053:             if (state[row, col] != MinimaxSpot.Empty)
//000054:                 return false;
//000055: 
//000056:             MinimaxSpot you = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000057:             MinimaxSpot enemy = isLightPlayer ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000058: 
//000059:             // Check above.
//000060:             if (row + 1 < m_numRows && state[row + 1, col] == enemy)
//000061:             {
//000062:                 for (int r = row + 2; r < m_numRows; r++)
//000063:                 {
//000064:                     if (state[r, col] == you)
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_004e:  ldloc.2
    IL_004f:  brtrue.s   IL_0027

//000027:             m_board[3, 3] = MinimaxSpot.Light;
    IL_0051:  ldarg.0
    IL_0052:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0057:  ldc.i4.3
    IL_0058:  ldc.i4.3
    IL_0059:  ldc.i4.1
    IL_005a:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000028:             m_board[4, 4] = MinimaxSpot.Light;
    IL_005f:  ldarg.0
    IL_0060:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0065:  ldc.i4.4
    IL_0066:  ldc.i4.4
    IL_0067:  ldc.i4.1
    IL_0068:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000029:             m_board[4, 3] = MinimaxSpot.Dark;
    IL_006d:  ldarg.0
    IL_006e:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0073:  ldc.i4.4
    IL_0074:  ldc.i4.3
    IL_0075:  ldc.i4.m1
    IL_0076:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000030:             m_board[3, 4] = MinimaxSpot.Dark;
    IL_007b:  ldarg.0
    IL_007c:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0081:  ldc.i4.3
    IL_0082:  ldc.i4.4
    IL_0083:  ldc.i4.m1
    IL_0084:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000031: 
//000032:             m_isLightMove = false;
    IL_0089:  ldarg.0
    IL_008a:  ldc.i4.0
    IL_008b:  stfld      bool Reversi.ReversiGame::m_isLightMove
//000033:         }
    IL_0090:  nop
    IL_0091:  ret
  } // end of method ReversiGame::.ctor

  .method public hidebysig instance void 
          SetMinimaxKnobs(int32 maxDepth,
                          valuetype [mscorlib]System.TimeSpan timeLimit,
                          int32 degOfParallelism) cil managed
  {
    // Code size       23 (0x17)
    .maxstack  8
//000034: 
//000035:         public void SetMinimaxKnobs(int maxDepth, TimeSpan timeLimit, int degOfParallelism)
//000036:         {
    IL_0000:  nop
//000037:             m_depth = maxDepth;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  stfld      int32 Reversi.ReversiGame::m_depth
//000038:             m_time = timeLimit;
    IL_0008:  ldarg.0
    IL_0009:  ldarg.2
    IL_000a:  stfld      valuetype [mscorlib]System.TimeSpan Reversi.ReversiGame::m_time
//000039:             m_degPar = degOfParallelism;
    IL_000f:  ldarg.0
    IL_0010:  ldarg.3
    IL_0011:  stfld      int32 Reversi.ReversiGame::m_degPar
//000040:         }
    IL_0016:  ret
  } // end of method ReversiGame::SetMinimaxKnobs

  .method private hidebysig instance bool 
          IsValidMove(valuetype Reversi.MinimaxSpot[0...,0...] state,
                      bool isLightPlayer,
                      int32 row,
                      int32 col) cil managed
  {
    // Code size       1076 (0x434)
    .maxstack  4
    .locals init ([0] valuetype Reversi.MinimaxSpot you,
             [1] valuetype Reversi.MinimaxSpot enemy,
             [2] int32 r,
             [3] int32 c,
             [4] bool CS$1$0000,
             [5] bool CS$4$0001)
//000041: 
//000042:         /// <summary>
//000043:         /// Returns whether a move on the given row and column on the given state by the given player
//000044:         /// is valid.
//000045:         /// </summary>
//000046:         /// <param name="state">The state to consider.</param>
//000047:         /// <param name="isLightPlayer">The player ot move.</param>
//000048:         /// <param name="row">The move row.</param>
//000049:         /// <param name="col">The move column.</param>
//000050:         /// <returns></returns>
//000051:         private bool IsValidMove(MinimaxSpot[,] state, bool isLightPlayer, int row, int col)
//000052:         {
    IL_0000:  nop
//000053:             if (state[row, col] != MinimaxSpot.Empty)
    IL_0001:  ldarg.1
    IL_0002:  ldarg.3
    IL_0003:  ldarg.s    col
    IL_0005:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_000a:  ldc.i4.0
    IL_000b:  ceq
    IL_000d:  stloc.s    CS$4$0001
//000054:                 return false;
//000055: 
//000056:             MinimaxSpot you = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000057:             MinimaxSpot enemy = isLightPlayer ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000058: 
//000059:             // Check above.
//000060:             if (row + 1 < m_numRows && state[row + 1, col] == enemy)
//000061:             {
//000062:                 for (int r = row + 2; r < m_numRows; r++)
//000063:                 {
//000064:                     if (state[r, col] == you)
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_000f:  ldloc.s    CS$4$0001
    IL_0011:  brtrue.s   IL_001b

//000054:                 return false;
    IL_0013:  ldc.i4.0
    IL_0014:  stloc.s    CS$1$0000
    IL_0016:  br         IL_0431

//000055: 
//000056:             MinimaxSpot you = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
    IL_001b:  ldarg.2
    IL_001c:  brtrue.s   IL_0021

    IL_001e:  ldc.i4.m1
    IL_001f:  br.s       IL_0022

    IL_0021:  ldc.i4.1
    IL_0022:  stloc.0
//000057:             MinimaxSpot enemy = isLightPlayer ? MinimaxSpot.Dark : MinimaxSpot.Light;
    IL_0023:  ldarg.2
    IL_0024:  brtrue.s   IL_0029

    IL_0026:  ldc.i4.1
    IL_0027:  br.s       IL_002a

    IL_0029:  ldc.i4.m1
    IL_002a:  stloc.1
//000058: 
//000059:             // Check above.
//000060:             if (row + 1 < m_numRows && state[row + 1, col] == enemy)
    IL_002b:  ldarg.3
    IL_002c:  ldc.i4.1
    IL_002d:  add
    IL_002e:  ldarg.0
    IL_002f:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0034:  bge.s      IL_0049

    IL_0036:  ldarg.1
    IL_0037:  ldarg.3
    IL_0038:  ldc.i4.1
    IL_0039:  add
    IL_003a:  ldarg.s    col
    IL_003c:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0041:  ldloc.1
    IL_0042:  ceq
    IL_0044:  ldc.i4.0
    IL_0045:  ceq
    IL_0047:  br.s       IL_004a

    IL_0049:  ldc.i4.1
    IL_004a:  stloc.s    CS$4$0001
//000061:             {
//000062:                 for (int r = row + 2; r < m_numRows; r++)
//000063:                 {
//000064:                     if (state[r, col] == you)
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_004c:  ldloc.s    CS$4$0001
    IL_004e:  brtrue.s   IL_00a1

//000061:             {
    IL_0050:  nop
//000062:                 for (int r = row + 2; r < m_numRows; r++)
    IL_0051:  ldarg.3
    IL_0052:  ldc.i4.2
    IL_0053:  add
    IL_0054:  stloc.2
//000063:                 {
//000064:                     if (state[r, col] == you)
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0055:  br.s       IL_0091

//000063:                 {
    IL_0057:  nop
//000064:                     if (state[r, col] == you)
    IL_0058:  ldarg.1
    IL_0059:  ldloc.2
    IL_005a:  ldarg.s    col
    IL_005c:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0061:  ldloc.0
    IL_0062:  ceq
    IL_0064:  ldc.i4.0
    IL_0065:  ceq
    IL_0067:  stloc.s    CS$4$0001
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0069:  ldloc.s    CS$4$0001
    IL_006b:  brtrue.s   IL_0075

//000065:                         return true;
    IL_006d:  ldc.i4.1
    IL_006e:  stloc.s    CS$1$0000
    IL_0070:  br         IL_0431

//000066:                     if (state[r, col] == MinimaxSpot.Empty)
    IL_0075:  ldarg.1
    IL_0076:  ldloc.2
    IL_0077:  ldarg.s    col
    IL_0079:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_007e:  ldc.i4.0
    IL_007f:  ceq
    IL_0081:  ldc.i4.0
    IL_0082:  ceq
    IL_0084:  stloc.s    CS$4$0001
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0086:  ldloc.s    CS$4$0001
    IL_0088:  brtrue.s   IL_008c

//000067:                         break;
    IL_008a:  br.s       IL_00a0

//000068:                 }
    IL_008c:  nop
//000062:                 for (int r = row + 2; r < m_numRows; r++)
    IL_008d:  ldloc.2
    IL_008e:  ldc.i4.1
    IL_008f:  add
    IL_0090:  stloc.2
    IL_0091:  ldloc.2
    IL_0092:  ldarg.0
    IL_0093:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0098:  clt
    IL_009a:  stloc.s    CS$4$0001
//000063:                 {
//000064:                     if (state[r, col] == you)
//000065:                         return true;
//000066:                     if (state[r, col] == MinimaxSpot.Empty)
//000067:                         break;
//000068:                 }
//000069:             }
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_009c:  ldloc.s    CS$4$0001
    IL_009e:  brtrue.s   IL_0057

//000069:             }
    IL_00a0:  nop
//000070: 
//000071:             // Check below.
//000072:             if (row - 1 >= 0 && state[row - 1, col] == enemy)
    IL_00a1:  ldarg.3
    IL_00a2:  ldc.i4.1
    IL_00a3:  sub
    IL_00a4:  ldc.i4.0
    IL_00a5:  blt.s      IL_00ba

    IL_00a7:  ldarg.1
    IL_00a8:  ldarg.3
    IL_00a9:  ldc.i4.1
    IL_00aa:  sub
    IL_00ab:  ldarg.s    col
    IL_00ad:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00b2:  ldloc.1
    IL_00b3:  ceq
    IL_00b5:  ldc.i4.0
    IL_00b6:  ceq
    IL_00b8:  br.s       IL_00bb

    IL_00ba:  ldc.i4.1
    IL_00bb:  stloc.s    CS$4$0001
//000073:             {
//000074:                 for (int r = row - 2; r >= 0; r--)
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00bd:  ldloc.s    CS$4$0001
    IL_00bf:  brtrue.s   IL_0110

//000073:             {
    IL_00c1:  nop
//000074:                 for (int r = row - 2; r >= 0; r--)
    IL_00c2:  ldarg.3
    IL_00c3:  ldc.i4.2
    IL_00c4:  sub
    IL_00c5:  stloc.2
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00c6:  br.s       IL_0102

//000075:                 {
    IL_00c8:  nop
//000076:                     if (state[r, col] == you)
    IL_00c9:  ldarg.1
    IL_00ca:  ldloc.2
    IL_00cb:  ldarg.s    col
    IL_00cd:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00d2:  ldloc.0
    IL_00d3:  ceq
    IL_00d5:  ldc.i4.0
    IL_00d6:  ceq
    IL_00d8:  stloc.s    CS$4$0001
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00da:  ldloc.s    CS$4$0001
    IL_00dc:  brtrue.s   IL_00e6

//000077:                         return true;
    IL_00de:  ldc.i4.1
    IL_00df:  stloc.s    CS$1$0000
    IL_00e1:  br         IL_0431

//000078:                     if (state[r, col] == MinimaxSpot.Empty)
    IL_00e6:  ldarg.1
    IL_00e7:  ldloc.2
    IL_00e8:  ldarg.s    col
    IL_00ea:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00ef:  ldc.i4.0
    IL_00f0:  ceq
    IL_00f2:  ldc.i4.0
    IL_00f3:  ceq
    IL_00f5:  stloc.s    CS$4$0001
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00f7:  ldloc.s    CS$4$0001
    IL_00f9:  brtrue.s   IL_00fd

//000079:                         break;
    IL_00fb:  br.s       IL_010f

//000080:                 }
    IL_00fd:  nop
//000074:                 for (int r = row - 2; r >= 0; r--)
    IL_00fe:  ldloc.2
    IL_00ff:  ldc.i4.1
    IL_0100:  sub
    IL_0101:  stloc.2
    IL_0102:  ldloc.2
    IL_0103:  ldc.i4.0
    IL_0104:  clt
    IL_0106:  ldc.i4.0
    IL_0107:  ceq
    IL_0109:  stloc.s    CS$4$0001
//000075:                 {
//000076:                     if (state[r, col] == you)
//000077:                         return true;
//000078:                     if (state[r, col] == MinimaxSpot.Empty)
//000079:                         break;
//000080:                 }
//000081:             }
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_010b:  ldloc.s    CS$4$0001
    IL_010d:  brtrue.s   IL_00c8

//000081:             }
    IL_010f:  nop
//000082: 
//000083:             // Check right.
//000084:             if (col + 1 < m_numCols && state[row, col + 1] == enemy)
    IL_0110:  ldarg.s    col
    IL_0112:  ldc.i4.1
    IL_0113:  add
    IL_0114:  ldarg.0
    IL_0115:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_011a:  bge.s      IL_012f

    IL_011c:  ldarg.1
    IL_011d:  ldarg.3
    IL_011e:  ldarg.s    col
    IL_0120:  ldc.i4.1
    IL_0121:  add
    IL_0122:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0127:  ldloc.1
    IL_0128:  ceq
    IL_012a:  ldc.i4.0
    IL_012b:  ceq
    IL_012d:  br.s       IL_0130

    IL_012f:  ldc.i4.1
    IL_0130:  stloc.s    CS$4$0001
//000085:             {
//000086:                 for (int c = col + 2; c < m_numCols; c++)
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0132:  ldloc.s    CS$4$0001
    IL_0134:  brtrue.s   IL_0186

//000085:             {
    IL_0136:  nop
//000086:                 for (int c = col + 2; c < m_numCols; c++)
    IL_0137:  ldarg.s    col
    IL_0139:  ldc.i4.2
    IL_013a:  add
    IL_013b:  stloc.3
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_013c:  br.s       IL_0176

//000087:                 {
    IL_013e:  nop
//000088:                     if (state[row, c] == you)
    IL_013f:  ldarg.1
    IL_0140:  ldarg.3
    IL_0141:  ldloc.3
    IL_0142:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0147:  ldloc.0
    IL_0148:  ceq
    IL_014a:  ldc.i4.0
    IL_014b:  ceq
    IL_014d:  stloc.s    CS$4$0001
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_014f:  ldloc.s    CS$4$0001
    IL_0151:  brtrue.s   IL_015b

//000089:                         return true;
    IL_0153:  ldc.i4.1
    IL_0154:  stloc.s    CS$1$0000
    IL_0156:  br         IL_0431

//000090:                     if (state[row, c] == MinimaxSpot.Empty)
    IL_015b:  ldarg.1
    IL_015c:  ldarg.3
    IL_015d:  ldloc.3
    IL_015e:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0163:  ldc.i4.0
    IL_0164:  ceq
    IL_0166:  ldc.i4.0
    IL_0167:  ceq
    IL_0169:  stloc.s    CS$4$0001
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_016b:  ldloc.s    CS$4$0001
    IL_016d:  brtrue.s   IL_0171

//000091:                         break;
    IL_016f:  br.s       IL_0185

//000092:                 }
    IL_0171:  nop
//000086:                 for (int c = col + 2; c < m_numCols; c++)
    IL_0172:  ldloc.3
    IL_0173:  ldc.i4.1
    IL_0174:  add
    IL_0175:  stloc.3
    IL_0176:  ldloc.3
    IL_0177:  ldarg.0
    IL_0178:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_017d:  clt
    IL_017f:  stloc.s    CS$4$0001
//000087:                 {
//000088:                     if (state[row, c] == you)
//000089:                         return true;
//000090:                     if (state[row, c] == MinimaxSpot.Empty)
//000091:                         break;
//000092:                 }
//000093:             }
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0181:  ldloc.s    CS$4$0001
    IL_0183:  brtrue.s   IL_013e

//000093:             }
    IL_0185:  nop
//000094: 
//000095:             // Check left.
//000096:             if (col - 1 >= 0 && state[row, col - 1] == enemy)
    IL_0186:  ldarg.s    col
    IL_0188:  ldc.i4.1
    IL_0189:  sub
    IL_018a:  ldc.i4.0
    IL_018b:  blt.s      IL_01a0

    IL_018d:  ldarg.1
    IL_018e:  ldarg.3
    IL_018f:  ldarg.s    col
    IL_0191:  ldc.i4.1
    IL_0192:  sub
    IL_0193:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0198:  ldloc.1
    IL_0199:  ceq
    IL_019b:  ldc.i4.0
    IL_019c:  ceq
    IL_019e:  br.s       IL_01a1

    IL_01a0:  ldc.i4.1
    IL_01a1:  stloc.s    CS$4$0001
//000097:             {
//000098:                 for (int c = col - 2; c >= 0; c--)
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01a3:  ldloc.s    CS$4$0001
    IL_01a5:  brtrue.s   IL_01f5

//000097:             {
    IL_01a7:  nop
//000098:                 for (int c = col - 2; c >= 0; c--)
    IL_01a8:  ldarg.s    col
    IL_01aa:  ldc.i4.2
    IL_01ab:  sub
    IL_01ac:  stloc.3
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01ad:  br.s       IL_01e7

//000099:                 {
    IL_01af:  nop
//000100:                     if (state[row, c] == you)
    IL_01b0:  ldarg.1
    IL_01b1:  ldarg.3
    IL_01b2:  ldloc.3
    IL_01b3:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_01b8:  ldloc.0
    IL_01b9:  ceq
    IL_01bb:  ldc.i4.0
    IL_01bc:  ceq
    IL_01be:  stloc.s    CS$4$0001
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01c0:  ldloc.s    CS$4$0001
    IL_01c2:  brtrue.s   IL_01cc

//000101:                         return true;
    IL_01c4:  ldc.i4.1
    IL_01c5:  stloc.s    CS$1$0000
    IL_01c7:  br         IL_0431

//000102:                     if (state[row, c] == MinimaxSpot.Empty)
    IL_01cc:  ldarg.1
    IL_01cd:  ldarg.3
    IL_01ce:  ldloc.3
    IL_01cf:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_01d4:  ldc.i4.0
    IL_01d5:  ceq
    IL_01d7:  ldc.i4.0
    IL_01d8:  ceq
    IL_01da:  stloc.s    CS$4$0001
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01dc:  ldloc.s    CS$4$0001
    IL_01de:  brtrue.s   IL_01e2

//000103:                         break;
    IL_01e0:  br.s       IL_01f4

//000104:                 }
    IL_01e2:  nop
//000098:                 for (int c = col - 2; c >= 0; c--)
    IL_01e3:  ldloc.3
    IL_01e4:  ldc.i4.1
    IL_01e5:  sub
    IL_01e6:  stloc.3
    IL_01e7:  ldloc.3
    IL_01e8:  ldc.i4.0
    IL_01e9:  clt
    IL_01eb:  ldc.i4.0
    IL_01ec:  ceq
    IL_01ee:  stloc.s    CS$4$0001
//000099:                 {
//000100:                     if (state[row, c] == you)
//000101:                         return true;
//000102:                     if (state[row, c] == MinimaxSpot.Empty)
//000103:                         break;
//000104:                 }
//000105:             }
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01f0:  ldloc.s    CS$4$0001
    IL_01f2:  brtrue.s   IL_01af

//000105:             }
    IL_01f4:  nop
//000106: 
//000107:             // Check above-right
//000108:             if (row + 1 < m_numRows && col + 1 < m_numCols && state[row + 1, col + 1] == enemy)
    IL_01f5:  ldarg.3
    IL_01f6:  ldc.i4.1
    IL_01f7:  add
    IL_01f8:  ldarg.0
    IL_01f9:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_01fe:  bge.s      IL_0221

    IL_0200:  ldarg.s    col
    IL_0202:  ldc.i4.1
    IL_0203:  add
    IL_0204:  ldarg.0
    IL_0205:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_020a:  bge.s      IL_0221

    IL_020c:  ldarg.1
    IL_020d:  ldarg.3
    IL_020e:  ldc.i4.1
    IL_020f:  add
    IL_0210:  ldarg.s    col
    IL_0212:  ldc.i4.1
    IL_0213:  add
    IL_0214:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0219:  ldloc.1
    IL_021a:  ceq
    IL_021c:  ldc.i4.0
    IL_021d:  ceq
    IL_021f:  br.s       IL_0222

    IL_0221:  ldc.i4.1
    IL_0222:  stloc.s    CS$4$0001
//000109:             {
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0224:  ldloc.s    CS$4$0001
    IL_0226:  brtrue.s   IL_028c

//000109:             {
    IL_0228:  nop
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
    IL_0229:  ldarg.3
    IL_022a:  ldc.i4.2
    IL_022b:  add
    IL_022c:  stloc.2
    IL_022d:  ldarg.s    col
    IL_022f:  ldc.i4.2
    IL_0230:  add
    IL_0231:  stloc.3
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0232:  br.s       IL_0270

//000111:                 {
    IL_0234:  nop
//000112:                     if (state[r, c] == you)
    IL_0235:  ldarg.1
    IL_0236:  ldloc.2
    IL_0237:  ldloc.3
    IL_0238:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_023d:  ldloc.0
    IL_023e:  ceq
    IL_0240:  ldc.i4.0
    IL_0241:  ceq
    IL_0243:  stloc.s    CS$4$0001
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0245:  ldloc.s    CS$4$0001
    IL_0247:  brtrue.s   IL_0251

//000113:                         return true;
    IL_0249:  ldc.i4.1
    IL_024a:  stloc.s    CS$1$0000
    IL_024c:  br         IL_0431

//000114:                     if (state[r, c] == MinimaxSpot.Empty)
    IL_0251:  ldarg.1
    IL_0252:  ldloc.2
    IL_0253:  ldloc.3
    IL_0254:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0259:  ldc.i4.0
    IL_025a:  ceq
    IL_025c:  ldc.i4.0
    IL_025d:  ceq
    IL_025f:  stloc.s    CS$4$0001
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0261:  ldloc.s    CS$4$0001
    IL_0263:  brtrue.s   IL_0267

//000115:                         break;
    IL_0265:  br.s       IL_028b

//000116:                 }
    IL_0267:  nop
//000110:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
    IL_0268:  ldloc.2
    IL_0269:  ldc.i4.1
    IL_026a:  add
    IL_026b:  stloc.2
    IL_026c:  ldloc.3
    IL_026d:  ldc.i4.1
    IL_026e:  add
    IL_026f:  stloc.3
    IL_0270:  ldloc.2
    IL_0271:  ldarg.0
    IL_0272:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0277:  bge.s      IL_0284

    IL_0279:  ldloc.3
    IL_027a:  ldarg.0
    IL_027b:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_0280:  clt
    IL_0282:  br.s       IL_0285

    IL_0284:  ldc.i4.0
    IL_0285:  stloc.s    CS$4$0001
//000111:                 {
//000112:                     if (state[r, c] == you)
//000113:                         return true;
//000114:                     if (state[r, c] == MinimaxSpot.Empty)
//000115:                         break;
//000116:                 }
//000117:             }
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0287:  ldloc.s    CS$4$0001
    IL_0289:  brtrue.s   IL_0234

//000117:             }
    IL_028b:  nop
//000118: 
//000119:             // Check above-left
//000120:             if (row + 1 < m_numRows && col - 1 >= 0 && state[row + 1, col - 1] == enemy)
    IL_028c:  ldarg.3
    IL_028d:  ldc.i4.1
    IL_028e:  add
    IL_028f:  ldarg.0
    IL_0290:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0295:  bge.s      IL_02b3

    IL_0297:  ldarg.s    col
    IL_0299:  ldc.i4.1
    IL_029a:  sub
    IL_029b:  ldc.i4.0
    IL_029c:  blt.s      IL_02b3

    IL_029e:  ldarg.1
    IL_029f:  ldarg.3
    IL_02a0:  ldc.i4.1
    IL_02a1:  add
    IL_02a2:  ldarg.s    col
    IL_02a4:  ldc.i4.1
    IL_02a5:  sub
    IL_02a6:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_02ab:  ldloc.1
    IL_02ac:  ceq
    IL_02ae:  ldc.i4.0
    IL_02af:  ceq
    IL_02b1:  br.s       IL_02b4

    IL_02b3:  ldc.i4.1
    IL_02b4:  stloc.s    CS$4$0001
//000121:             {
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_02b6:  ldloc.s    CS$4$0001
    IL_02b8:  brtrue.s   IL_031c

//000121:             {
    IL_02ba:  nop
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
    IL_02bb:  ldarg.3
    IL_02bc:  ldc.i4.2
    IL_02bd:  add
    IL_02be:  stloc.2
    IL_02bf:  ldarg.s    col
    IL_02c1:  ldc.i4.2
    IL_02c2:  sub
    IL_02c3:  stloc.3
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_02c4:  br.s       IL_0302

//000123:                 {
    IL_02c6:  nop
//000124:                     if (state[r, c] == you)
    IL_02c7:  ldarg.1
    IL_02c8:  ldloc.2
    IL_02c9:  ldloc.3
    IL_02ca:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_02cf:  ldloc.0
    IL_02d0:  ceq
    IL_02d2:  ldc.i4.0
    IL_02d3:  ceq
    IL_02d5:  stloc.s    CS$4$0001
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_02d7:  ldloc.s    CS$4$0001
    IL_02d9:  brtrue.s   IL_02e3

//000125:                         return true;
    IL_02db:  ldc.i4.1
    IL_02dc:  stloc.s    CS$1$0000
    IL_02de:  br         IL_0431

//000126:                     if (state[r, c] == MinimaxSpot.Empty)
    IL_02e3:  ldarg.1
    IL_02e4:  ldloc.2
    IL_02e5:  ldloc.3
    IL_02e6:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_02eb:  ldc.i4.0
    IL_02ec:  ceq
    IL_02ee:  ldc.i4.0
    IL_02ef:  ceq
    IL_02f1:  stloc.s    CS$4$0001
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_02f3:  ldloc.s    CS$4$0001
    IL_02f5:  brtrue.s   IL_02f9

//000127:                         break;
    IL_02f7:  br.s       IL_031b

//000128:                 }
    IL_02f9:  nop
//000122:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
    IL_02fa:  ldloc.2
    IL_02fb:  ldc.i4.1
    IL_02fc:  add
    IL_02fd:  stloc.2
    IL_02fe:  ldloc.3
    IL_02ff:  ldc.i4.1
    IL_0300:  sub
    IL_0301:  stloc.3
    IL_0302:  ldloc.2
    IL_0303:  ldarg.0
    IL_0304:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0309:  bge.s      IL_0314

    IL_030b:  ldloc.3
    IL_030c:  ldc.i4.0
    IL_030d:  clt
    IL_030f:  ldc.i4.0
    IL_0310:  ceq
    IL_0312:  br.s       IL_0315

    IL_0314:  ldc.i4.0
    IL_0315:  stloc.s    CS$4$0001
//000123:                 {
//000124:                     if (state[r, c] == you)
//000125:                         return true;
//000126:                     if (state[r, c] == MinimaxSpot.Empty)
//000127:                         break;
//000128:                 }
//000129:             }
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0317:  ldloc.s    CS$4$0001
    IL_0319:  brtrue.s   IL_02c6

//000129:             }
    IL_031b:  nop
//000130: 
//000131:             // Check below-right
//000132:             if (row - 1 >= 0 && col + 1 < m_numCols && state[row - 1, col + 1] == enemy)
    IL_031c:  ldarg.3
    IL_031d:  ldc.i4.1
    IL_031e:  sub
    IL_031f:  ldc.i4.0
    IL_0320:  blt.s      IL_0343

    IL_0322:  ldarg.s    col
    IL_0324:  ldc.i4.1
    IL_0325:  add
    IL_0326:  ldarg.0
    IL_0327:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_032c:  bge.s      IL_0343

    IL_032e:  ldarg.1
    IL_032f:  ldarg.3
    IL_0330:  ldc.i4.1
    IL_0331:  sub
    IL_0332:  ldarg.s    col
    IL_0334:  ldc.i4.1
    IL_0335:  add
    IL_0336:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_033b:  ldloc.1
    IL_033c:  ceq
    IL_033e:  ldc.i4.0
    IL_033f:  ceq
    IL_0341:  br.s       IL_0344

    IL_0343:  ldc.i4.1
    IL_0344:  stloc.s    CS$4$0001
//000133:             {
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0346:  ldloc.s    CS$4$0001
    IL_0348:  brtrue.s   IL_03a9

//000133:             {
    IL_034a:  nop
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
    IL_034b:  ldarg.3
    IL_034c:  ldc.i4.2
    IL_034d:  sub
    IL_034e:  stloc.2
    IL_034f:  ldarg.s    col
    IL_0351:  ldc.i4.2
    IL_0352:  add
    IL_0353:  stloc.3
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0354:  br.s       IL_0392

//000135:                 {
    IL_0356:  nop
//000136:                     if (state[r, c] == you)
    IL_0357:  ldarg.1
    IL_0358:  ldloc.2
    IL_0359:  ldloc.3
    IL_035a:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_035f:  ldloc.0
    IL_0360:  ceq
    IL_0362:  ldc.i4.0
    IL_0363:  ceq
    IL_0365:  stloc.s    CS$4$0001
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0367:  ldloc.s    CS$4$0001
    IL_0369:  brtrue.s   IL_0373

//000137:                         return true;
    IL_036b:  ldc.i4.1
    IL_036c:  stloc.s    CS$1$0000
    IL_036e:  br         IL_0431

//000138:                     if (state[r, c] == MinimaxSpot.Empty)
    IL_0373:  ldarg.1
    IL_0374:  ldloc.2
    IL_0375:  ldloc.3
    IL_0376:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_037b:  ldc.i4.0
    IL_037c:  ceq
    IL_037e:  ldc.i4.0
    IL_037f:  ceq
    IL_0381:  stloc.s    CS$4$0001
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0383:  ldloc.s    CS$4$0001
    IL_0385:  brtrue.s   IL_0389

//000139:                         break;
    IL_0387:  br.s       IL_03a8

//000140:                 }
    IL_0389:  nop
//000134:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
    IL_038a:  ldloc.2
    IL_038b:  ldc.i4.1
    IL_038c:  sub
    IL_038d:  stloc.2
    IL_038e:  ldloc.3
    IL_038f:  ldc.i4.1
    IL_0390:  add
    IL_0391:  stloc.3
    IL_0392:  ldloc.2
    IL_0393:  ldc.i4.0
    IL_0394:  blt.s      IL_03a1

    IL_0396:  ldloc.3
    IL_0397:  ldarg.0
    IL_0398:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_039d:  clt
    IL_039f:  br.s       IL_03a2

    IL_03a1:  ldc.i4.0
    IL_03a2:  stloc.s    CS$4$0001
//000135:                 {
//000136:                     if (state[r, c] == you)
//000137:                         return true;
//000138:                     if (state[r, c] == MinimaxSpot.Empty)
//000139:                         break;
//000140:                 }
//000141:             }
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_03a4:  ldloc.s    CS$4$0001
    IL_03a6:  brtrue.s   IL_0356

//000141:             }
    IL_03a8:  nop
//000142: 
//000143:             // Check below-left
//000144:             if (row - 1 >= 0 && col - 1 >= 0 && state[row - 1, col - 1] == enemy)
    IL_03a9:  ldarg.3
    IL_03aa:  ldc.i4.1
    IL_03ab:  sub
    IL_03ac:  ldc.i4.0
    IL_03ad:  blt.s      IL_03cb

    IL_03af:  ldarg.s    col
    IL_03b1:  ldc.i4.1
    IL_03b2:  sub
    IL_03b3:  ldc.i4.0
    IL_03b4:  blt.s      IL_03cb

    IL_03b6:  ldarg.1
    IL_03b7:  ldarg.3
    IL_03b8:  ldc.i4.1
    IL_03b9:  sub
    IL_03ba:  ldarg.s    col
    IL_03bc:  ldc.i4.1
    IL_03bd:  sub
    IL_03be:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_03c3:  ldloc.1
    IL_03c4:  ceq
    IL_03c6:  ldc.i4.0
    IL_03c7:  ceq
    IL_03c9:  br.s       IL_03cc

    IL_03cb:  ldc.i4.1
    IL_03cc:  stloc.s    CS$4$0001
//000145:             {
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_03ce:  ldloc.s    CS$4$0001
    IL_03d0:  brtrue.s   IL_042c

//000145:             {
    IL_03d2:  nop
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
    IL_03d3:  ldarg.3
    IL_03d4:  ldc.i4.2
    IL_03d5:  sub
    IL_03d6:  stloc.2
    IL_03d7:  ldarg.s    col
    IL_03d9:  ldc.i4.2
    IL_03da:  sub
    IL_03db:  stloc.3
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_03dc:  br.s       IL_0417

//000147:                 {
    IL_03de:  nop
//000148:                     if (state[r, c] == you)
    IL_03df:  ldarg.1
    IL_03e0:  ldloc.2
    IL_03e1:  ldloc.3
    IL_03e2:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_03e7:  ldloc.0
    IL_03e8:  ceq
    IL_03ea:  ldc.i4.0
    IL_03eb:  ceq
    IL_03ed:  stloc.s    CS$4$0001
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_03ef:  ldloc.s    CS$4$0001
    IL_03f1:  brtrue.s   IL_03f8

//000149:                         return true;
    IL_03f3:  ldc.i4.1
    IL_03f4:  stloc.s    CS$1$0000
    IL_03f6:  br.s       IL_0431

//000150:                     if (state[r, c] == MinimaxSpot.Empty)
    IL_03f8:  ldarg.1
    IL_03f9:  ldloc.2
    IL_03fa:  ldloc.3
    IL_03fb:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0400:  ldc.i4.0
    IL_0401:  ceq
    IL_0403:  ldc.i4.0
    IL_0404:  ceq
    IL_0406:  stloc.s    CS$4$0001
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0408:  ldloc.s    CS$4$0001
    IL_040a:  brtrue.s   IL_040e

//000151:                         break;
    IL_040c:  br.s       IL_042b

//000152:                 }
    IL_040e:  nop
//000146:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
    IL_040f:  ldloc.2
    IL_0410:  ldc.i4.1
    IL_0411:  sub
    IL_0412:  stloc.2
    IL_0413:  ldloc.3
    IL_0414:  ldc.i4.1
    IL_0415:  sub
    IL_0416:  stloc.3
    IL_0417:  ldloc.2
    IL_0418:  ldc.i4.0
    IL_0419:  blt.s      IL_0424

    IL_041b:  ldloc.3
    IL_041c:  ldc.i4.0
    IL_041d:  clt
    IL_041f:  ldc.i4.0
    IL_0420:  ceq
    IL_0422:  br.s       IL_0425

    IL_0424:  ldc.i4.0
    IL_0425:  stloc.s    CS$4$0001
//000147:                 {
//000148:                     if (state[r, c] == you)
//000149:                         return true;
//000150:                     if (state[r, c] == MinimaxSpot.Empty)
//000151:                         break;
//000152:                 }
//000153:             }
//000154: 
//000155:             return false;
//000156:         }
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
//000165:             return GetValidMoves(m_board, m_isLightMove);
//000166:         }
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0427:  ldloc.s    CS$4$0001
    IL_0429:  brtrue.s   IL_03de

//000153:             }
    IL_042b:  nop
//000154: 
//000155:             return false;
    IL_042c:  ldc.i4.0
    IL_042d:  stloc.s    CS$1$0000
    IL_042f:  br.s       IL_0431

//000156:         }
    IL_0431:  ldloc.s    CS$1$0000
    IL_0433:  ret
  } // end of method ReversiGame::IsValidMove

  .method public hidebysig instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> 
          GetValidMoves() cil managed
  {
    // Code size       24 (0x18)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> CS$1$0000)
//000157: 
//000158:         /// <summary>
//000159:         /// Returns the valid moves for the state maintained by this ReversiGame
//000160:         /// (delegates to another overload).
//000161:         /// </summary>
//000162:         /// <returns>The valid moves.</returns>
//000163:         public IEnumerable<MinimaxMove> GetValidMoves()
//000164:         {
    IL_0000:  nop
//000165:             return GetValidMoves(m_board, m_isLightMove);
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0008:  ldarg.0
    IL_0009:  ldfld      bool Reversi.ReversiGame::m_isLightMove
    IL_000e:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> Reversi.Minimax::GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                                                                         bool)
    IL_0013:  stloc.0
    IL_0014:  br.s       IL_0016

//000166:         }
    IL_0016:  ldloc.0
    IL_0017:  ret
  } // end of method ReversiGame::GetValidMoves

  .method public hidebysig instance bool 
          MakeMove(int32 row,
                   int32 col) cil managed
  {
    // Code size       1962 (0x7aa)
    .maxstack  6
    .locals init ([0] valuetype Reversi.MinimaxSpot you,
             [1] valuetype Reversi.MinimaxSpot enemy,
             [2] valuetype Reversi.MinimaxSpot[0...,0...] backup,
             [3] int32 i,
             [4] int32 j,
             [5] bool b,
             [6] int32 r,
             [7] int32 c,
             [8] bool CS$1$0000,
             [9] bool CS$4$0001)
//000167: 
//000168:         /// <summary>
//000169:         /// Makes a move on the given row and column.
//000170:         /// </summary>
//000171:         /// <param name="row">The move row</param>
//000172:         /// <param name="col">The move column</param>
//000173:         /// <returns>Whether or not the operation succeeded.</returns>
//000174:         public bool MakeMove(int row, int col)
//000175:         {
    IL_0000:  nop
//000176:             if (!IsValidMove(m_board, m_isLightMove, row, col))
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0008:  ldarg.0
    IL_0009:  ldfld      bool Reversi.ReversiGame::m_isLightMove
    IL_000e:  ldarg.1
    IL_000f:  ldarg.2
    IL_0010:  call       instance bool Reversi.ReversiGame::IsValidMove(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                        bool,
                                                                        int32,
                                                                        int32)
    IL_0015:  stloc.s    CS$4$0001
//000177:             {
//000178:                 return false;
//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
//000185:             for (int i = 0; i < 8; i++)
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0017:  ldloc.s    CS$4$0001
    IL_0019:  brtrue.s   IL_0024

//000177:             {
    IL_001b:  nop
//000178:                 return false;
    IL_001c:  ldc.i4.0
    IL_001d:  stloc.s    CS$1$0000
    IL_001f:  br         IL_07a7

//000179:             }
//000180: 
//000181:             MinimaxSpot you = m_isLightMove ? MinimaxSpot.Light : MinimaxSpot.Dark;
    IL_0024:  ldarg.0
    IL_0025:  ldfld      bool Reversi.ReversiGame::m_isLightMove
    IL_002a:  brtrue.s   IL_002f

    IL_002c:  ldc.i4.m1
    IL_002d:  br.s       IL_0030

    IL_002f:  ldc.i4.1
    IL_0030:  stloc.0
//000182:             MinimaxSpot enemy = m_isLightMove ? MinimaxSpot.Dark : MinimaxSpot.Light;
    IL_0031:  ldarg.0
    IL_0032:  ldfld      bool Reversi.ReversiGame::m_isLightMove
    IL_0037:  brtrue.s   IL_003c

    IL_0039:  ldc.i4.1
    IL_003a:  br.s       IL_003d

    IL_003c:  ldc.i4.m1
    IL_003d:  stloc.1
//000183: 
//000184:             var backup = new MinimaxSpot[8, 8];
    IL_003e:  ldc.i4.8
    IL_003f:  ldc.i4.8
    IL_0040:  newobj     instance void valuetype Reversi.MinimaxSpot[0...,0...]::.ctor(int32,
                                                                                       int32)
    IL_0045:  stloc.2
//000185:             for (int i = 0; i < 8; i++)
    IL_0046:  ldc.i4.0
    IL_0047:  stloc.3
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0048:  br.s       IL_007b

//000186:                 for (int j = 0; j < 8; j++)
    IL_004a:  ldc.i4.0
    IL_004b:  stloc.s    j
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_004d:  br.s       IL_006c

//000187:                     backup[i, j] = m_board[i, j];
    IL_004f:  ldloc.2
    IL_0050:  ldloc.3
    IL_0051:  ldloc.s    j
    IL_0053:  ldarg.0
    IL_0054:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0059:  ldloc.3
    IL_005a:  ldloc.s    j
    IL_005c:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0061:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000186:                 for (int j = 0; j < 8; j++)
    IL_0066:  ldloc.s    j
    IL_0068:  ldc.i4.1
    IL_0069:  add
    IL_006a:  stloc.s    j
    IL_006c:  ldloc.s    j
    IL_006e:  ldc.i4.8
    IL_006f:  clt
    IL_0071:  stloc.s    CS$4$0001
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0073:  ldloc.s    CS$4$0001
    IL_0075:  brtrue.s   IL_004f

//000185:             for (int i = 0; i < 8; i++)
    IL_0077:  ldloc.3
    IL_0078:  ldc.i4.1
    IL_0079:  add
    IL_007a:  stloc.3
    IL_007b:  ldloc.3
    IL_007c:  ldc.i4.8
    IL_007d:  clt
    IL_007f:  stloc.s    CS$4$0001
//000186:                 for (int j = 0; j < 8; j++)
//000187:                     backup[i, j] = m_board[i, j];
//000188: 
//000189:             m_board[row, col] = you;
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0081:  ldloc.s    CS$4$0001
    IL_0083:  brtrue.s   IL_004a

//000189:             m_board[row, col] = you;
    IL_0085:  ldarg.0
    IL_0086:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_008b:  ldarg.1
    IL_008c:  ldarg.2
    IL_008d:  ldloc.0
    IL_008e:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000190: 
//000191:             // Conquer above.
//000192:             if (row + 1 < m_numRows && m_board[row + 1, col] == enemy)
    IL_0093:  ldarg.1
    IL_0094:  ldc.i4.1
    IL_0095:  add
    IL_0096:  ldarg.0
    IL_0097:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_009c:  bge.s      IL_00b5

    IL_009e:  ldarg.0
    IL_009f:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_00a4:  ldarg.1
    IL_00a5:  ldc.i4.1
    IL_00a6:  add
    IL_00a7:  ldarg.2
    IL_00a8:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00ad:  ldloc.1
    IL_00ae:  ceq
    IL_00b0:  ldc.i4.0
    IL_00b1:  ceq
    IL_00b3:  br.s       IL_00b6

    IL_00b5:  ldc.i4.1
    IL_00b6:  stloc.s    CS$4$0001
//000193:             {
//000194:                 bool b = false;
//000195:                 for (int r = row + 2; r < m_numRows; r++)
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00b8:  ldloc.s    CS$4$0001
    IL_00ba:  brtrue     IL_015f

//000193:             {
    IL_00bf:  nop
//000194:                 bool b = false;
    IL_00c0:  ldc.i4.0
    IL_00c1:  stloc.s    b
//000195:                 for (int r = row + 2; r < m_numRows; r++)
    IL_00c3:  ldarg.1
    IL_00c4:  ldc.i4.2
    IL_00c5:  add
    IL_00c6:  stloc.s    r
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00c8:  br.s       IL_010b

//000196:                 {
    IL_00ca:  nop
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
    IL_00cb:  ldarg.0
    IL_00cc:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_00d1:  ldloc.s    r
    IL_00d3:  ldarg.2
    IL_00d4:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00d9:  ldc.i4.0
    IL_00da:  ceq
    IL_00dc:  ldc.i4.0
    IL_00dd:  ceq
    IL_00df:  stloc.s    CS$4$0001
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00e1:  ldloc.s    CS$4$0001
    IL_00e3:  brtrue.s   IL_00e7

//000198:                         break;
    IL_00e5:  br.s       IL_011b

//000199:                     if (m_board[r, col] == you)
    IL_00e7:  ldarg.0
    IL_00e8:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_00ed:  ldloc.s    r
    IL_00ef:  ldarg.2
    IL_00f0:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00f5:  ldloc.0
    IL_00f6:  ceq
    IL_00f8:  ldc.i4.0
    IL_00f9:  ceq
    IL_00fb:  stloc.s    CS$4$0001
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00fd:  ldloc.s    CS$4$0001
    IL_00ff:  brtrue.s   IL_0104

//000200:                         b = true;
    IL_0101:  ldc.i4.1
    IL_0102:  stloc.s    b
//000201:                 }
    IL_0104:  nop
//000195:                 for (int r = row + 2; r < m_numRows; r++)
    IL_0105:  ldloc.s    r
    IL_0107:  ldc.i4.1
    IL_0108:  add
    IL_0109:  stloc.s    r
    IL_010b:  ldloc.s    r
    IL_010d:  ldarg.0
    IL_010e:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0113:  clt
    IL_0115:  stloc.s    CS$4$0001
//000196:                 {
//000197:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000198:                         break;
//000199:                     if (m_board[r, col] == you)
//000200:                         b = true;
//000201:                 }
//000202:                 if (b)
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0117:  ldloc.s    CS$4$0001
    IL_0119:  brtrue.s   IL_00ca

//000202:                 if (b)
    IL_011b:  ldloc.s    b
    IL_011d:  ldc.i4.0
    IL_011e:  ceq
    IL_0120:  stloc.s    CS$4$0001
//000203:                 {
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0122:  ldloc.s    CS$4$0001
    IL_0124:  brtrue.s   IL_015e

//000203:                 {
    IL_0126:  nop
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
    IL_0127:  ldarg.1
    IL_0128:  ldc.i4.1
    IL_0129:  add
    IL_012a:  stloc.s    r
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_012c:  br.s       IL_0143

//000205:                         m_board[r, col] = you;
    IL_012e:  ldarg.0
    IL_012f:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0134:  ldloc.s    r
    IL_0136:  ldarg.2
    IL_0137:  ldloc.0
    IL_0138:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000204:                     for (int r = row + 1; m_board[r, col] != you; r++)
    IL_013d:  ldloc.s    r
    IL_013f:  ldc.i4.1
    IL_0140:  add
    IL_0141:  stloc.s    r
    IL_0143:  ldarg.0
    IL_0144:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0149:  ldloc.s    r
    IL_014b:  ldarg.2
    IL_014c:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0151:  ldloc.0
    IL_0152:  ceq
    IL_0154:  ldc.i4.0
    IL_0155:  ceq
    IL_0157:  stloc.s    CS$4$0001
//000205:                         m_board[r, col] = you;
//000206:                 }
//000207:             }
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0159:  ldloc.s    CS$4$0001
    IL_015b:  brtrue.s   IL_012e

//000206:                 }
    IL_015d:  nop
//000207:             }
    IL_015e:  nop
//000208: 
//000209:             // Conquer below.
//000210:             if (row - 1 >= 0 && m_board[row - 1, col] == enemy)
    IL_015f:  ldarg.1
    IL_0160:  ldc.i4.1
    IL_0161:  sub
    IL_0162:  ldc.i4.0
    IL_0163:  blt.s      IL_017c

    IL_0165:  ldarg.0
    IL_0166:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_016b:  ldarg.1
    IL_016c:  ldc.i4.1
    IL_016d:  sub
    IL_016e:  ldarg.2
    IL_016f:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0174:  ldloc.1
    IL_0175:  ceq
    IL_0177:  ldc.i4.0
    IL_0178:  ceq
    IL_017a:  br.s       IL_017d

    IL_017c:  ldc.i4.1
    IL_017d:  stloc.s    CS$4$0001
//000211:             {
//000212:                 bool b = false;
//000213:                 for (int r = row - 2; r >= 0; r--)
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_017f:  ldloc.s    CS$4$0001
    IL_0181:  brtrue     IL_0224

//000211:             {
    IL_0186:  nop
//000212:                 bool b = false;
    IL_0187:  ldc.i4.0
    IL_0188:  stloc.s    b
//000213:                 for (int r = row - 2; r >= 0; r--)
    IL_018a:  ldarg.1
    IL_018b:  ldc.i4.2
    IL_018c:  sub
    IL_018d:  stloc.s    r
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_018f:  br.s       IL_01d2

//000214:                 {
    IL_0191:  nop
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
    IL_0192:  ldarg.0
    IL_0193:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0198:  ldloc.s    r
    IL_019a:  ldarg.2
    IL_019b:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_01a0:  ldc.i4.0
    IL_01a1:  ceq
    IL_01a3:  ldc.i4.0
    IL_01a4:  ceq
    IL_01a6:  stloc.s    CS$4$0001
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01a8:  ldloc.s    CS$4$0001
    IL_01aa:  brtrue.s   IL_01ae

//000216:                         break;
    IL_01ac:  br.s       IL_01e0

//000217:                     if (m_board[r, col] == you)
    IL_01ae:  ldarg.0
    IL_01af:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_01b4:  ldloc.s    r
    IL_01b6:  ldarg.2
    IL_01b7:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_01bc:  ldloc.0
    IL_01bd:  ceq
    IL_01bf:  ldc.i4.0
    IL_01c0:  ceq
    IL_01c2:  stloc.s    CS$4$0001
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01c4:  ldloc.s    CS$4$0001
    IL_01c6:  brtrue.s   IL_01cb

//000218:                         b = true;
    IL_01c8:  ldc.i4.1
    IL_01c9:  stloc.s    b
//000219:                 }
    IL_01cb:  nop
//000213:                 for (int r = row - 2; r >= 0; r--)
    IL_01cc:  ldloc.s    r
    IL_01ce:  ldc.i4.1
    IL_01cf:  sub
    IL_01d0:  stloc.s    r
    IL_01d2:  ldloc.s    r
    IL_01d4:  ldc.i4.0
    IL_01d5:  clt
    IL_01d7:  ldc.i4.0
    IL_01d8:  ceq
    IL_01da:  stloc.s    CS$4$0001
//000214:                 {
//000215:                     if (m_board[r, col] == MinimaxSpot.Empty)
//000216:                         break;
//000217:                     if (m_board[r, col] == you)
//000218:                         b = true;
//000219:                 }
//000220:                 if (b)
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01dc:  ldloc.s    CS$4$0001
    IL_01de:  brtrue.s   IL_0191

//000220:                 if (b)
    IL_01e0:  ldloc.s    b
    IL_01e2:  ldc.i4.0
    IL_01e3:  ceq
    IL_01e5:  stloc.s    CS$4$0001
//000221:                 {
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01e7:  ldloc.s    CS$4$0001
    IL_01e9:  brtrue.s   IL_0223

//000221:                 {
    IL_01eb:  nop
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
    IL_01ec:  ldarg.1
    IL_01ed:  ldc.i4.1
    IL_01ee:  sub
    IL_01ef:  stloc.s    r
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01f1:  br.s       IL_0208

//000223:                         m_board[r, col] = you;
    IL_01f3:  ldarg.0
    IL_01f4:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_01f9:  ldloc.s    r
    IL_01fb:  ldarg.2
    IL_01fc:  ldloc.0
    IL_01fd:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000222:                     for (int r = row - 1; m_board[r, col] != you; r--)
    IL_0202:  ldloc.s    r
    IL_0204:  ldc.i4.1
    IL_0205:  sub
    IL_0206:  stloc.s    r
    IL_0208:  ldarg.0
    IL_0209:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_020e:  ldloc.s    r
    IL_0210:  ldarg.2
    IL_0211:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0216:  ldloc.0
    IL_0217:  ceq
    IL_0219:  ldc.i4.0
    IL_021a:  ceq
    IL_021c:  stloc.s    CS$4$0001
//000223:                         m_board[r, col] = you;
//000224:                 }
//000225:             }
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_021e:  ldloc.s    CS$4$0001
    IL_0220:  brtrue.s   IL_01f3

//000224:                 }
    IL_0222:  nop
//000225:             }
    IL_0223:  nop
//000226: 
//000227:             // Conquer right.
//000228:             if (col + 1 < m_numCols && m_board[row, col + 1] == enemy)
    IL_0224:  ldarg.2
    IL_0225:  ldc.i4.1
    IL_0226:  add
    IL_0227:  ldarg.0
    IL_0228:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_022d:  bge.s      IL_0246

    IL_022f:  ldarg.0
    IL_0230:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0235:  ldarg.1
    IL_0236:  ldarg.2
    IL_0237:  ldc.i4.1
    IL_0238:  add
    IL_0239:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_023e:  ldloc.1
    IL_023f:  ceq
    IL_0241:  ldc.i4.0
    IL_0242:  ceq
    IL_0244:  br.s       IL_0247

    IL_0246:  ldc.i4.1
    IL_0247:  stloc.s    CS$4$0001
//000229:             {
//000230:                 bool b = false;
//000231:                 for (int c = col + 2; c < m_numCols; c++)
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0249:  ldloc.s    CS$4$0001
    IL_024b:  brtrue     IL_02f0

//000229:             {
    IL_0250:  nop
//000230:                 bool b = false;
    IL_0251:  ldc.i4.0
    IL_0252:  stloc.s    b
//000231:                 for (int c = col + 2; c < m_numCols; c++)
    IL_0254:  ldarg.2
    IL_0255:  ldc.i4.2
    IL_0256:  add
    IL_0257:  stloc.s    c
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0259:  br.s       IL_029c

//000232:                 {
    IL_025b:  nop
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
    IL_025c:  ldarg.0
    IL_025d:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0262:  ldarg.1
    IL_0263:  ldloc.s    c
    IL_0265:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_026a:  ldc.i4.0
    IL_026b:  ceq
    IL_026d:  ldc.i4.0
    IL_026e:  ceq
    IL_0270:  stloc.s    CS$4$0001
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0272:  ldloc.s    CS$4$0001
    IL_0274:  brtrue.s   IL_0278

//000234:                         break;
    IL_0276:  br.s       IL_02ac

//000235:                     if (m_board[row, c] == you)
    IL_0278:  ldarg.0
    IL_0279:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_027e:  ldarg.1
    IL_027f:  ldloc.s    c
    IL_0281:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0286:  ldloc.0
    IL_0287:  ceq
    IL_0289:  ldc.i4.0
    IL_028a:  ceq
    IL_028c:  stloc.s    CS$4$0001
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_028e:  ldloc.s    CS$4$0001
    IL_0290:  brtrue.s   IL_0295

//000236:                         b = true;
    IL_0292:  ldc.i4.1
    IL_0293:  stloc.s    b
//000237:                 }
    IL_0295:  nop
//000231:                 for (int c = col + 2; c < m_numCols; c++)
    IL_0296:  ldloc.s    c
    IL_0298:  ldc.i4.1
    IL_0299:  add
    IL_029a:  stloc.s    c
    IL_029c:  ldloc.s    c
    IL_029e:  ldarg.0
    IL_029f:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_02a4:  clt
    IL_02a6:  stloc.s    CS$4$0001
//000232:                 {
//000233:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000234:                         break;
//000235:                     if (m_board[row, c] == you)
//000236:                         b = true;
//000237:                 }
//000238:                 if (b)
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_02a8:  ldloc.s    CS$4$0001
    IL_02aa:  brtrue.s   IL_025b

//000238:                 if (b)
    IL_02ac:  ldloc.s    b
    IL_02ae:  ldc.i4.0
    IL_02af:  ceq
    IL_02b1:  stloc.s    CS$4$0001
//000239:                 {
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_02b3:  ldloc.s    CS$4$0001
    IL_02b5:  brtrue.s   IL_02ef

//000239:                 {
    IL_02b7:  nop
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
    IL_02b8:  ldarg.2
    IL_02b9:  ldc.i4.1
    IL_02ba:  add
    IL_02bb:  stloc.s    c
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_02bd:  br.s       IL_02d4

//000241:                         m_board[row, c] = you;
    IL_02bf:  ldarg.0
    IL_02c0:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_02c5:  ldarg.1
    IL_02c6:  ldloc.s    c
    IL_02c8:  ldloc.0
    IL_02c9:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000240:                     for (int c = col + 1; m_board[row, c] != you; c++)
    IL_02ce:  ldloc.s    c
    IL_02d0:  ldc.i4.1
    IL_02d1:  add
    IL_02d2:  stloc.s    c
    IL_02d4:  ldarg.0
    IL_02d5:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_02da:  ldarg.1
    IL_02db:  ldloc.s    c
    IL_02dd:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_02e2:  ldloc.0
    IL_02e3:  ceq
    IL_02e5:  ldc.i4.0
    IL_02e6:  ceq
    IL_02e8:  stloc.s    CS$4$0001
//000241:                         m_board[row, c] = you;
//000242:                 }
//000243:             }
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_02ea:  ldloc.s    CS$4$0001
    IL_02ec:  brtrue.s   IL_02bf

//000242:                 }
    IL_02ee:  nop
//000243:             }
    IL_02ef:  nop
//000244: 
//000245:             // Conquer left.
//000246:             if (col - 1 >= 0 && m_board[row, col - 1] == enemy)
    IL_02f0:  ldarg.2
    IL_02f1:  ldc.i4.1
    IL_02f2:  sub
    IL_02f3:  ldc.i4.0
    IL_02f4:  blt.s      IL_030d

    IL_02f6:  ldarg.0
    IL_02f7:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_02fc:  ldarg.1
    IL_02fd:  ldarg.2
    IL_02fe:  ldc.i4.1
    IL_02ff:  sub
    IL_0300:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0305:  ldloc.1
    IL_0306:  ceq
    IL_0308:  ldc.i4.0
    IL_0309:  ceq
    IL_030b:  br.s       IL_030e

    IL_030d:  ldc.i4.1
    IL_030e:  stloc.s    CS$4$0001
//000247:             {
//000248:                 bool b = false;
//000249:                 for (int c = col - 2; c >= 0; c--)
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0310:  ldloc.s    CS$4$0001
    IL_0312:  brtrue     IL_03b5

//000247:             {
    IL_0317:  nop
//000248:                 bool b = false;
    IL_0318:  ldc.i4.0
    IL_0319:  stloc.s    b
//000249:                 for (int c = col - 2; c >= 0; c--)
    IL_031b:  ldarg.2
    IL_031c:  ldc.i4.2
    IL_031d:  sub
    IL_031e:  stloc.s    c
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0320:  br.s       IL_0363

//000250:                 {
    IL_0322:  nop
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
    IL_0323:  ldarg.0
    IL_0324:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0329:  ldarg.1
    IL_032a:  ldloc.s    c
    IL_032c:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0331:  ldc.i4.0
    IL_0332:  ceq
    IL_0334:  ldc.i4.0
    IL_0335:  ceq
    IL_0337:  stloc.s    CS$4$0001
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0339:  ldloc.s    CS$4$0001
    IL_033b:  brtrue.s   IL_033f

//000252:                         break;
    IL_033d:  br.s       IL_0371

//000253:                     if (m_board[row, c] == you)
    IL_033f:  ldarg.0
    IL_0340:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0345:  ldarg.1
    IL_0346:  ldloc.s    c
    IL_0348:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_034d:  ldloc.0
    IL_034e:  ceq
    IL_0350:  ldc.i4.0
    IL_0351:  ceq
    IL_0353:  stloc.s    CS$4$0001
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0355:  ldloc.s    CS$4$0001
    IL_0357:  brtrue.s   IL_035c

//000254:                         b = true;
    IL_0359:  ldc.i4.1
    IL_035a:  stloc.s    b
//000255:                 }
    IL_035c:  nop
//000249:                 for (int c = col - 2; c >= 0; c--)
    IL_035d:  ldloc.s    c
    IL_035f:  ldc.i4.1
    IL_0360:  sub
    IL_0361:  stloc.s    c
    IL_0363:  ldloc.s    c
    IL_0365:  ldc.i4.0
    IL_0366:  clt
    IL_0368:  ldc.i4.0
    IL_0369:  ceq
    IL_036b:  stloc.s    CS$4$0001
//000250:                 {
//000251:                     if (m_board[row, c] == MinimaxSpot.Empty)
//000252:                         break;
//000253:                     if (m_board[row, c] == you)
//000254:                         b = true;
//000255:                 }
//000256:                 if (b)
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_036d:  ldloc.s    CS$4$0001
    IL_036f:  brtrue.s   IL_0322

//000256:                 if (b)
    IL_0371:  ldloc.s    b
    IL_0373:  ldc.i4.0
    IL_0374:  ceq
    IL_0376:  stloc.s    CS$4$0001
//000257:                 {
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0378:  ldloc.s    CS$4$0001
    IL_037a:  brtrue.s   IL_03b4

//000257:                 {
    IL_037c:  nop
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
    IL_037d:  ldarg.2
    IL_037e:  ldc.i4.1
    IL_037f:  sub
    IL_0380:  stloc.s    c
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0382:  br.s       IL_0399

//000259:                         m_board[row, c] = you;
    IL_0384:  ldarg.0
    IL_0385:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_038a:  ldarg.1
    IL_038b:  ldloc.s    c
    IL_038d:  ldloc.0
    IL_038e:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000258:                     for (int c = col - 1; m_board[row, c] != you; c--)
    IL_0393:  ldloc.s    c
    IL_0395:  ldc.i4.1
    IL_0396:  sub
    IL_0397:  stloc.s    c
    IL_0399:  ldarg.0
    IL_039a:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_039f:  ldarg.1
    IL_03a0:  ldloc.s    c
    IL_03a2:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_03a7:  ldloc.0
    IL_03a8:  ceq
    IL_03aa:  ldc.i4.0
    IL_03ab:  ceq
    IL_03ad:  stloc.s    CS$4$0001
//000259:                         m_board[row, c] = you;
//000260:                 }
//000261:             }
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_03af:  ldloc.s    CS$4$0001
    IL_03b1:  brtrue.s   IL_0384

//000260:                 }
    IL_03b3:  nop
//000261:             }
    IL_03b4:  nop
//000262: 
//000263:             // Conquer above-right
//000264:             if (row + 1 < m_numRows && col + 1 < m_numCols && m_board[row + 1, col + 1] == enemy)
    IL_03b5:  ldarg.1
    IL_03b6:  ldc.i4.1
    IL_03b7:  add
    IL_03b8:  ldarg.0
    IL_03b9:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_03be:  bge.s      IL_03e4

    IL_03c0:  ldarg.2
    IL_03c1:  ldc.i4.1
    IL_03c2:  add
    IL_03c3:  ldarg.0
    IL_03c4:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_03c9:  bge.s      IL_03e4

    IL_03cb:  ldarg.0
    IL_03cc:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_03d1:  ldarg.1
    IL_03d2:  ldc.i4.1
    IL_03d3:  add
    IL_03d4:  ldarg.2
    IL_03d5:  ldc.i4.1
    IL_03d6:  add
    IL_03d7:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_03dc:  ldloc.1
    IL_03dd:  ceq
    IL_03df:  ldc.i4.0
    IL_03e0:  ceq
    IL_03e2:  br.s       IL_03e5

    IL_03e4:  ldc.i4.1
    IL_03e5:  stloc.s    CS$4$0001
//000265:             {
//000266:                 bool b = false;
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_03e7:  ldloc.s    CS$4$0001
    IL_03e9:  brtrue     IL_04b5

//000265:             {
    IL_03ee:  nop
//000266:                 bool b = false;
    IL_03ef:  ldc.i4.0
    IL_03f0:  stloc.s    b
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
    IL_03f2:  ldarg.1
    IL_03f3:  ldc.i4.2
    IL_03f4:  add
    IL_03f5:  stloc.s    r
    IL_03f7:  ldarg.2
    IL_03f8:  ldc.i4.2
    IL_03f9:  add
    IL_03fa:  stloc.s    c
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_03fc:  br.s       IL_0447

//000268:                 {
    IL_03fe:  nop
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
    IL_03ff:  ldarg.0
    IL_0400:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0405:  ldloc.s    r
    IL_0407:  ldloc.s    c
    IL_0409:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_040e:  ldc.i4.0
    IL_040f:  ceq
    IL_0411:  ldc.i4.0
    IL_0412:  ceq
    IL_0414:  stloc.s    CS$4$0001
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0416:  ldloc.s    CS$4$0001
    IL_0418:  brtrue.s   IL_041c

//000270:                         break;
    IL_041a:  br.s       IL_0464

//000271:                     if (m_board[r, c] == you)
    IL_041c:  ldarg.0
    IL_041d:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0422:  ldloc.s    r
    IL_0424:  ldloc.s    c
    IL_0426:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_042b:  ldloc.0
    IL_042c:  ceq
    IL_042e:  ldc.i4.0
    IL_042f:  ceq
    IL_0431:  stloc.s    CS$4$0001
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0433:  ldloc.s    CS$4$0001
    IL_0435:  brtrue.s   IL_043a

//000272:                         b = true;
    IL_0437:  ldc.i4.1
    IL_0438:  stloc.s    b
//000273:                 }
    IL_043a:  nop
//000267:                 for (int r = row + 2, c = col + 2; r < m_numRows && c < m_numCols; r++, c++)
    IL_043b:  ldloc.s    r
    IL_043d:  ldc.i4.1
    IL_043e:  add
    IL_043f:  stloc.s    r
    IL_0441:  ldloc.s    c
    IL_0443:  ldc.i4.1
    IL_0444:  add
    IL_0445:  stloc.s    c
    IL_0447:  ldloc.s    r
    IL_0449:  ldarg.0
    IL_044a:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_044f:  bge.s      IL_045d

    IL_0451:  ldloc.s    c
    IL_0453:  ldarg.0
    IL_0454:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_0459:  clt
    IL_045b:  br.s       IL_045e

    IL_045d:  ldc.i4.0
    IL_045e:  stloc.s    CS$4$0001
//000268:                 {
//000269:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000270:                         break;
//000271:                     if (m_board[r, c] == you)
//000272:                         b = true;
//000273:                 }
//000274:                 if (b)
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0460:  ldloc.s    CS$4$0001
    IL_0462:  brtrue.s   IL_03fe

//000274:                 if (b)
    IL_0464:  ldloc.s    b
    IL_0466:  ldc.i4.0
    IL_0467:  ceq
    IL_0469:  stloc.s    CS$4$0001
//000275:                 {
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_046b:  ldloc.s    CS$4$0001
    IL_046d:  brtrue.s   IL_04b4

//000275:                 {
    IL_046f:  nop
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
    IL_0470:  ldarg.1
    IL_0471:  ldc.i4.1
    IL_0472:  add
    IL_0473:  stloc.s    r
    IL_0475:  ldarg.2
    IL_0476:  ldc.i4.1
    IL_0477:  add
    IL_0478:  stloc.s    c
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_047a:  br.s       IL_0498

//000277:                         m_board[r, c] = you;
    IL_047c:  ldarg.0
    IL_047d:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0482:  ldloc.s    r
    IL_0484:  ldloc.s    c
    IL_0486:  ldloc.0
    IL_0487:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000276:                     for (int r = row + 1, c = col + 1; m_board[r, c] != you; r++, c++)
    IL_048c:  ldloc.s    r
    IL_048e:  ldc.i4.1
    IL_048f:  add
    IL_0490:  stloc.s    r
    IL_0492:  ldloc.s    c
    IL_0494:  ldc.i4.1
    IL_0495:  add
    IL_0496:  stloc.s    c
    IL_0498:  ldarg.0
    IL_0499:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_049e:  ldloc.s    r
    IL_04a0:  ldloc.s    c
    IL_04a2:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_04a7:  ldloc.0
    IL_04a8:  ceq
    IL_04aa:  ldc.i4.0
    IL_04ab:  ceq
    IL_04ad:  stloc.s    CS$4$0001
//000277:                         m_board[r, c] = you;
//000278:                 }
//000279:             }
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_04af:  ldloc.s    CS$4$0001
    IL_04b1:  brtrue.s   IL_047c

//000278:                 }
    IL_04b3:  nop
//000279:             }
    IL_04b4:  nop
//000280: 
//000281:             // Conquer above-left
//000282:             if (row + 1 < m_numRows && col - 1 >= 0 && m_board[row + 1, col - 1] == enemy)
    IL_04b5:  ldarg.1
    IL_04b6:  ldc.i4.1
    IL_04b7:  add
    IL_04b8:  ldarg.0
    IL_04b9:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_04be:  bge.s      IL_04df

    IL_04c0:  ldarg.2
    IL_04c1:  ldc.i4.1
    IL_04c2:  sub
    IL_04c3:  ldc.i4.0
    IL_04c4:  blt.s      IL_04df

    IL_04c6:  ldarg.0
    IL_04c7:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_04cc:  ldarg.1
    IL_04cd:  ldc.i4.1
    IL_04ce:  add
    IL_04cf:  ldarg.2
    IL_04d0:  ldc.i4.1
    IL_04d1:  sub
    IL_04d2:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_04d7:  ldloc.1
    IL_04d8:  ceq
    IL_04da:  ldc.i4.0
    IL_04db:  ceq
    IL_04dd:  br.s       IL_04e0

    IL_04df:  ldc.i4.1
    IL_04e0:  stloc.s    CS$4$0001
//000283:             {
//000284:                 bool b = false;
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_04e2:  ldloc.s    CS$4$0001
    IL_04e4:  brtrue     IL_05ae

//000283:             {
    IL_04e9:  nop
//000284:                 bool b = false;
    IL_04ea:  ldc.i4.0
    IL_04eb:  stloc.s    b
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
    IL_04ed:  ldarg.1
    IL_04ee:  ldc.i4.2
    IL_04ef:  add
    IL_04f0:  stloc.s    r
    IL_04f2:  ldarg.2
    IL_04f3:  ldc.i4.2
    IL_04f4:  sub
    IL_04f5:  stloc.s    c
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_04f7:  br.s       IL_0542

//000286:                 {
    IL_04f9:  nop
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
    IL_04fa:  ldarg.0
    IL_04fb:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0500:  ldloc.s    r
    IL_0502:  ldloc.s    c
    IL_0504:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0509:  ldc.i4.0
    IL_050a:  ceq
    IL_050c:  ldc.i4.0
    IL_050d:  ceq
    IL_050f:  stloc.s    CS$4$0001
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0511:  ldloc.s    CS$4$0001
    IL_0513:  brtrue.s   IL_0517

//000288:                         break;
    IL_0515:  br.s       IL_055d

//000289:                     if (m_board[r, c] == you)
    IL_0517:  ldarg.0
    IL_0518:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_051d:  ldloc.s    r
    IL_051f:  ldloc.s    c
    IL_0521:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0526:  ldloc.0
    IL_0527:  ceq
    IL_0529:  ldc.i4.0
    IL_052a:  ceq
    IL_052c:  stloc.s    CS$4$0001
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_052e:  ldloc.s    CS$4$0001
    IL_0530:  brtrue.s   IL_0535

//000290:                         b = true;
    IL_0532:  ldc.i4.1
    IL_0533:  stloc.s    b
//000291:                 }
    IL_0535:  nop
//000285:                 for (int r = row + 2, c = col - 2; r < m_numRows && c >= 0; r++, c--)
    IL_0536:  ldloc.s    r
    IL_0538:  ldc.i4.1
    IL_0539:  add
    IL_053a:  stloc.s    r
    IL_053c:  ldloc.s    c
    IL_053e:  ldc.i4.1
    IL_053f:  sub
    IL_0540:  stloc.s    c
    IL_0542:  ldloc.s    r
    IL_0544:  ldarg.0
    IL_0545:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_054a:  bge.s      IL_0556

    IL_054c:  ldloc.s    c
    IL_054e:  ldc.i4.0
    IL_054f:  clt
    IL_0551:  ldc.i4.0
    IL_0552:  ceq
    IL_0554:  br.s       IL_0557

    IL_0556:  ldc.i4.0
    IL_0557:  stloc.s    CS$4$0001
//000286:                 {
//000287:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000288:                         break;
//000289:                     if (m_board[r, c] == you)
//000290:                         b = true;
//000291:                 }
//000292:                 if (b)
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0559:  ldloc.s    CS$4$0001
    IL_055b:  brtrue.s   IL_04f9

//000292:                 if (b)
    IL_055d:  ldloc.s    b
    IL_055f:  ldc.i4.0
    IL_0560:  ceq
    IL_0562:  stloc.s    CS$4$0001
//000293:                 {
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0564:  ldloc.s    CS$4$0001
    IL_0566:  brtrue.s   IL_05ad

//000293:                 {
    IL_0568:  nop
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
    IL_0569:  ldarg.1
    IL_056a:  ldc.i4.1
    IL_056b:  add
    IL_056c:  stloc.s    r
    IL_056e:  ldarg.2
    IL_056f:  ldc.i4.1
    IL_0570:  sub
    IL_0571:  stloc.s    c
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0573:  br.s       IL_0591

//000295:                         m_board[r, c] = you;
    IL_0575:  ldarg.0
    IL_0576:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_057b:  ldloc.s    r
    IL_057d:  ldloc.s    c
    IL_057f:  ldloc.0
    IL_0580:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000294:                     for (int r = row + 1, c = col - 1; m_board[r, c] != you; r++, c--)
    IL_0585:  ldloc.s    r
    IL_0587:  ldc.i4.1
    IL_0588:  add
    IL_0589:  stloc.s    r
    IL_058b:  ldloc.s    c
    IL_058d:  ldc.i4.1
    IL_058e:  sub
    IL_058f:  stloc.s    c
    IL_0591:  ldarg.0
    IL_0592:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0597:  ldloc.s    r
    IL_0599:  ldloc.s    c
    IL_059b:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_05a0:  ldloc.0
    IL_05a1:  ceq
    IL_05a3:  ldc.i4.0
    IL_05a4:  ceq
    IL_05a6:  stloc.s    CS$4$0001
//000295:                         m_board[r, c] = you;
//000296:                 }
//000297:             }
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_05a8:  ldloc.s    CS$4$0001
    IL_05aa:  brtrue.s   IL_0575

//000296:                 }
    IL_05ac:  nop
//000297:             }
    IL_05ad:  nop
//000298: 
//000299:             // Conquer below-right
//000300:             if (row - 1 >= 0 && col + 1 < m_numCols && m_board[row - 1, col + 1] == enemy)
    IL_05ae:  ldarg.1
    IL_05af:  ldc.i4.1
    IL_05b0:  sub
    IL_05b1:  ldc.i4.0
    IL_05b2:  blt.s      IL_05d8

    IL_05b4:  ldarg.2
    IL_05b5:  ldc.i4.1
    IL_05b6:  add
    IL_05b7:  ldarg.0
    IL_05b8:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_05bd:  bge.s      IL_05d8

    IL_05bf:  ldarg.0
    IL_05c0:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_05c5:  ldarg.1
    IL_05c6:  ldc.i4.1
    IL_05c7:  sub
    IL_05c8:  ldarg.2
    IL_05c9:  ldc.i4.1
    IL_05ca:  add
    IL_05cb:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_05d0:  ldloc.1
    IL_05d1:  ceq
    IL_05d3:  ldc.i4.0
    IL_05d4:  ceq
    IL_05d6:  br.s       IL_05d9

    IL_05d8:  ldc.i4.1
    IL_05d9:  stloc.s    CS$4$0001
//000301:             {
//000302:                 bool b = false;
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_05db:  ldloc.s    CS$4$0001
    IL_05dd:  brtrue     IL_06a4

//000301:             {
    IL_05e2:  nop
//000302:                 bool b = false;
    IL_05e3:  ldc.i4.0
    IL_05e4:  stloc.s    b
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
    IL_05e6:  ldarg.1
    IL_05e7:  ldc.i4.2
    IL_05e8:  sub
    IL_05e9:  stloc.s    r
    IL_05eb:  ldarg.2
    IL_05ec:  ldc.i4.2
    IL_05ed:  add
    IL_05ee:  stloc.s    c
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_05f0:  br.s       IL_063b

//000304:                 {
    IL_05f2:  nop
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
    IL_05f3:  ldarg.0
    IL_05f4:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_05f9:  ldloc.s    r
    IL_05fb:  ldloc.s    c
    IL_05fd:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0602:  ldc.i4.0
    IL_0603:  ceq
    IL_0605:  ldc.i4.0
    IL_0606:  ceq
    IL_0608:  stloc.s    CS$4$0001
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_060a:  ldloc.s    CS$4$0001
    IL_060c:  brtrue.s   IL_0610

//000306:                         break;
    IL_060e:  br.s       IL_0653

//000307:                     if (m_board[r, c] == you)
    IL_0610:  ldarg.0
    IL_0611:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0616:  ldloc.s    r
    IL_0618:  ldloc.s    c
    IL_061a:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_061f:  ldloc.0
    IL_0620:  ceq
    IL_0622:  ldc.i4.0
    IL_0623:  ceq
    IL_0625:  stloc.s    CS$4$0001
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0627:  ldloc.s    CS$4$0001
    IL_0629:  brtrue.s   IL_062e

//000308:                         b = true;
    IL_062b:  ldc.i4.1
    IL_062c:  stloc.s    b
//000309:                 }
    IL_062e:  nop
//000303:                 for (int r = row - 2, c = col + 2; r >= 0 && c < m_numCols; r--, c++)
    IL_062f:  ldloc.s    r
    IL_0631:  ldc.i4.1
    IL_0632:  sub
    IL_0633:  stloc.s    r
    IL_0635:  ldloc.s    c
    IL_0637:  ldc.i4.1
    IL_0638:  add
    IL_0639:  stloc.s    c
    IL_063b:  ldloc.s    r
    IL_063d:  ldc.i4.0
    IL_063e:  blt.s      IL_064c

    IL_0640:  ldloc.s    c
    IL_0642:  ldarg.0
    IL_0643:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_0648:  clt
    IL_064a:  br.s       IL_064d

    IL_064c:  ldc.i4.0
    IL_064d:  stloc.s    CS$4$0001
//000304:                 {
//000305:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000306:                         break;
//000307:                     if (m_board[r, c] == you)
//000308:                         b = true;
//000309:                 }
//000310:                 if (b)
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_064f:  ldloc.s    CS$4$0001
    IL_0651:  brtrue.s   IL_05f2

//000310:                 if (b)
    IL_0653:  ldloc.s    b
    IL_0655:  ldc.i4.0
    IL_0656:  ceq
    IL_0658:  stloc.s    CS$4$0001
//000311:                 {
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_065a:  ldloc.s    CS$4$0001
    IL_065c:  brtrue.s   IL_06a3

//000311:                 {
    IL_065e:  nop
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
    IL_065f:  ldarg.1
    IL_0660:  ldc.i4.1
    IL_0661:  sub
    IL_0662:  stloc.s    r
    IL_0664:  ldarg.2
    IL_0665:  ldc.i4.1
    IL_0666:  add
    IL_0667:  stloc.s    c
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0669:  br.s       IL_0687

//000313:                         m_board[r, c] = you;
    IL_066b:  ldarg.0
    IL_066c:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0671:  ldloc.s    r
    IL_0673:  ldloc.s    c
    IL_0675:  ldloc.0
    IL_0676:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000312:                     for (int r = row - 1, c = col + 1; m_board[r, c] != you; r--, c++)
    IL_067b:  ldloc.s    r
    IL_067d:  ldc.i4.1
    IL_067e:  sub
    IL_067f:  stloc.s    r
    IL_0681:  ldloc.s    c
    IL_0683:  ldc.i4.1
    IL_0684:  add
    IL_0685:  stloc.s    c
    IL_0687:  ldarg.0
    IL_0688:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_068d:  ldloc.s    r
    IL_068f:  ldloc.s    c
    IL_0691:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0696:  ldloc.0
    IL_0697:  ceq
    IL_0699:  ldc.i4.0
    IL_069a:  ceq
    IL_069c:  stloc.s    CS$4$0001
//000313:                         m_board[r, c] = you;
//000314:                 }
//000315:             }
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_069e:  ldloc.s    CS$4$0001
    IL_06a0:  brtrue.s   IL_066b

//000314:                 }
    IL_06a2:  nop
//000315:             }
    IL_06a3:  nop
//000316: 
//000317:             // Conquer below-left
//000318:             if (row - 1 >= 0 && col - 1 >= 0 && m_board[row - 1, col - 1] == enemy)
    IL_06a4:  ldarg.1
    IL_06a5:  ldc.i4.1
    IL_06a6:  sub
    IL_06a7:  ldc.i4.0
    IL_06a8:  blt.s      IL_06c9

    IL_06aa:  ldarg.2
    IL_06ab:  ldc.i4.1
    IL_06ac:  sub
    IL_06ad:  ldc.i4.0
    IL_06ae:  blt.s      IL_06c9

    IL_06b0:  ldarg.0
    IL_06b1:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_06b6:  ldarg.1
    IL_06b7:  ldc.i4.1
    IL_06b8:  sub
    IL_06b9:  ldarg.2
    IL_06ba:  ldc.i4.1
    IL_06bb:  sub
    IL_06bc:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_06c1:  ldloc.1
    IL_06c2:  ceq
    IL_06c4:  ldc.i4.0
    IL_06c5:  ceq
    IL_06c7:  br.s       IL_06ca

    IL_06c9:  ldc.i4.1
    IL_06ca:  stloc.s    CS$4$0001
//000319:             {
//000320:                 bool b = false;
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_06cc:  ldloc.s    CS$4$0001
    IL_06ce:  brtrue     IL_0793

//000319:             {
    IL_06d3:  nop
//000320:                 bool b = false;
    IL_06d4:  ldc.i4.0
    IL_06d5:  stloc.s    b
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
    IL_06d7:  ldarg.1
    IL_06d8:  ldc.i4.2
    IL_06d9:  sub
    IL_06da:  stloc.s    r
    IL_06dc:  ldarg.2
    IL_06dd:  ldc.i4.2
    IL_06de:  sub
    IL_06df:  stloc.s    c
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_06e1:  br.s       IL_072c

//000322:                 {
    IL_06e3:  nop
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
    IL_06e4:  ldarg.0
    IL_06e5:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_06ea:  ldloc.s    r
    IL_06ec:  ldloc.s    c
    IL_06ee:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_06f3:  ldc.i4.0
    IL_06f4:  ceq
    IL_06f6:  ldc.i4.0
    IL_06f7:  ceq
    IL_06f9:  stloc.s    CS$4$0001
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_06fb:  ldloc.s    CS$4$0001
    IL_06fd:  brtrue.s   IL_0701

//000324:                         break;
    IL_06ff:  br.s       IL_0742

//000325:                     if (m_board[r, c] == you)
    IL_0701:  ldarg.0
    IL_0702:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0707:  ldloc.s    r
    IL_0709:  ldloc.s    c
    IL_070b:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0710:  ldloc.0
    IL_0711:  ceq
    IL_0713:  ldc.i4.0
    IL_0714:  ceq
    IL_0716:  stloc.s    CS$4$0001
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0718:  ldloc.s    CS$4$0001
    IL_071a:  brtrue.s   IL_071f

//000326:                         b = true;
    IL_071c:  ldc.i4.1
    IL_071d:  stloc.s    b
//000327:                 }
    IL_071f:  nop
//000321:                 for (int r = row - 2, c = col - 2; r >= 0 && c >= 0; r--, c--)
    IL_0720:  ldloc.s    r
    IL_0722:  ldc.i4.1
    IL_0723:  sub
    IL_0724:  stloc.s    r
    IL_0726:  ldloc.s    c
    IL_0728:  ldc.i4.1
    IL_0729:  sub
    IL_072a:  stloc.s    c
    IL_072c:  ldloc.s    r
    IL_072e:  ldc.i4.0
    IL_072f:  blt.s      IL_073b

    IL_0731:  ldloc.s    c
    IL_0733:  ldc.i4.0
    IL_0734:  clt
    IL_0736:  ldc.i4.0
    IL_0737:  ceq
    IL_0739:  br.s       IL_073c

    IL_073b:  ldc.i4.0
    IL_073c:  stloc.s    CS$4$0001
//000322:                 {
//000323:                     if (m_board[r, c] == MinimaxSpot.Empty)
//000324:                         break;
//000325:                     if (m_board[r, c] == you)
//000326:                         b = true;
//000327:                 }
//000328:                 if (b)
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_073e:  ldloc.s    CS$4$0001
    IL_0740:  brtrue.s   IL_06e3

//000328:                 if (b)
    IL_0742:  ldloc.s    b
    IL_0744:  ldc.i4.0
    IL_0745:  ceq
    IL_0747:  stloc.s    CS$4$0001
//000329:                 {
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0749:  ldloc.s    CS$4$0001
    IL_074b:  brtrue.s   IL_0792

//000329:                 {
    IL_074d:  nop
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
    IL_074e:  ldarg.1
    IL_074f:  ldc.i4.1
    IL_0750:  sub
    IL_0751:  stloc.s    r
    IL_0753:  ldarg.2
    IL_0754:  ldc.i4.1
    IL_0755:  sub
    IL_0756:  stloc.s    c
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0758:  br.s       IL_0776

//000331:                         m_board[r, c] = you;
    IL_075a:  ldarg.0
    IL_075b:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0760:  ldloc.s    r
    IL_0762:  ldloc.s    c
    IL_0764:  ldloc.0
    IL_0765:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000330:                     for (int r = row - 1, c = col - 1; m_board[r, c] != you; r--, c--)
    IL_076a:  ldloc.s    r
    IL_076c:  ldc.i4.1
    IL_076d:  sub
    IL_076e:  stloc.s    r
    IL_0770:  ldloc.s    c
    IL_0772:  ldc.i4.1
    IL_0773:  sub
    IL_0774:  stloc.s    c
    IL_0776:  ldarg.0
    IL_0777:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_077c:  ldloc.s    r
    IL_077e:  ldloc.s    c
    IL_0780:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0785:  ldloc.0
    IL_0786:  ceq
    IL_0788:  ldc.i4.0
    IL_0789:  ceq
    IL_078b:  stloc.s    CS$4$0001
//000331:                         m_board[r, c] = you;
//000332:                 }
//000333:             }
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
//000336: 
//000337:             return true;
//000338:         }
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
//000345:             m_isLightMove = !m_isLightMove;
//000346:         }
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
//000354:             ReversiGameResult gr = new ReversiGameResult();
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_078d:  ldloc.s    CS$4$0001
    IL_078f:  brtrue.s   IL_075a

//000332:                 }
    IL_0791:  nop
//000333:             }
    IL_0792:  nop
//000334: 
//000335:             m_isLightMove = !m_isLightMove;
    IL_0793:  ldarg.0
    IL_0794:  ldarg.0
    IL_0795:  ldfld      bool Reversi.ReversiGame::m_isLightMove
    IL_079a:  ldc.i4.0
    IL_079b:  ceq
    IL_079d:  stfld      bool Reversi.ReversiGame::m_isLightMove
//000336: 
//000337:             return true;
    IL_07a2:  ldc.i4.1
    IL_07a3:  stloc.s    CS$1$0000
    IL_07a5:  br.s       IL_07a7

//000338:         }
    IL_07a7:  ldloc.s    CS$1$0000
    IL_07a9:  ret
  } // end of method ReversiGame::MakeMove

  .method public hidebysig instance void 
          PassMove() cil managed
  {
    // Code size       17 (0x11)
    .maxstack  8
//000339: 
//000340:         /// <summary>
//000341:         /// Passes on the current player's move.
//000342:         /// </summary>
//000343:         public void PassMove()
//000344:         {
    IL_0000:  nop
//000345:             m_isLightMove = !m_isLightMove;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      bool Reversi.ReversiGame::m_isLightMove
    IL_0008:  ldc.i4.0
    IL_0009:  ceq
    IL_000b:  stfld      bool Reversi.ReversiGame::m_isLightMove
//000346:         }
    IL_0010:  ret
  } // end of method ReversiGame::PassMove

  .method public hidebysig instance valuetype Reversi.ReversiGameResult 
          GetGameResult() cil managed
  {
    // Code size       257 (0x101)
    .maxstack  3
    .locals init ([0] valuetype Reversi.ReversiGameResult gr,
             [1] int32 i,
             [2] int32 j,
             [3] valuetype Reversi.ReversiGameResult CS$1$0000,
             [4] bool CS$4$0001)
//000347: 
//000348:         /// <summary>
//000349:         /// Returns the game result.
//000350:         /// </summary>
//000351:         /// <returns>The game result</returns>
//000352:         public ReversiGameResult GetGameResult()
//000353:         {
    IL_0000:  nop
//000354:             ReversiGameResult gr = new ReversiGameResult();
    IL_0001:  ldloca.s   gr
    IL_0003:  initobj    Reversi.ReversiGameResult
//000355: 
//000356:             for (int i = 0; i < m_numRows; i++)
    IL_0009:  ldc.i4.0
    IL_000a:  stloc.1
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_000b:  br.s       IL_007c

//000357:             {
    IL_000d:  nop
//000358:                 for (int j = 0; j < m_numCols; j++)
    IL_000e:  ldc.i4.0
    IL_000f:  stloc.2
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0010:  br.s       IL_0068

//000359:                 {
    IL_0012:  nop
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
    IL_0013:  ldarg.0
    IL_0014:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0019:  ldloc.1
    IL_001a:  ldloc.2
    IL_001b:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0020:  ldc.i4.1
    IL_0021:  ceq
    IL_0023:  ldc.i4.0
    IL_0024:  ceq
    IL_0026:  stloc.s    CS$4$0001
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0028:  ldloc.s    CS$4$0001
    IL_002a:  brtrue.s   IL_003b

//000361:                         gr.NumLightPieces++;
    IL_002c:  ldloca.s   gr
    IL_002e:  dup
    IL_002f:  ldfld      int32 Reversi.ReversiGameResult::NumLightPieces
    IL_0034:  ldc.i4.1
    IL_0035:  add
    IL_0036:  stfld      int32 Reversi.ReversiGameResult::NumLightPieces
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
    IL_003b:  ldarg.0
    IL_003c:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0041:  ldloc.1
    IL_0042:  ldloc.2
    IL_0043:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0048:  ldc.i4.m1
    IL_0049:  ceq
    IL_004b:  ldc.i4.0
    IL_004c:  ceq
    IL_004e:  stloc.s    CS$4$0001
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0050:  ldloc.s    CS$4$0001
    IL_0052:  brtrue.s   IL_0063

//000363:                         gr.NumDarkPieces++;
    IL_0054:  ldloca.s   gr
    IL_0056:  dup
    IL_0057:  ldfld      int32 Reversi.ReversiGameResult::NumDarkPieces
    IL_005c:  ldc.i4.1
    IL_005d:  add
    IL_005e:  stfld      int32 Reversi.ReversiGameResult::NumDarkPieces
//000364:                 }
    IL_0063:  nop
//000358:                 for (int j = 0; j < m_numCols; j++)
    IL_0064:  ldloc.2
    IL_0065:  ldc.i4.1
    IL_0066:  add
    IL_0067:  stloc.2
    IL_0068:  ldloc.2
    IL_0069:  ldarg.0
    IL_006a:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_006f:  clt
    IL_0071:  stloc.s    CS$4$0001
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0073:  ldloc.s    CS$4$0001
    IL_0075:  brtrue.s   IL_0012

//000365:             }
    IL_0077:  nop
//000356:             for (int i = 0; i < m_numRows; i++)
    IL_0078:  ldloc.1
    IL_0079:  ldc.i4.1
    IL_007a:  add
    IL_007b:  stloc.1
    IL_007c:  ldloc.1
    IL_007d:  ldarg.0
    IL_007e:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0083:  clt
    IL_0085:  stloc.s    CS$4$0001
//000357:             {
//000358:                 for (int j = 0; j < m_numCols; j++)
//000359:                 {
//000360:                     if (m_board[i, j] == MinimaxSpot.Light)
//000361:                         gr.NumLightPieces++;
//000362:                     if (m_board[i, j] == MinimaxSpot.Dark)
//000363:                         gr.NumDarkPieces++;
//000364:                 }
//000365:             }
//000366: 
//000367:             if (TerminalTest(m_board))
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0087:  ldloc.s    CS$4$0001
    IL_0089:  brtrue.s   IL_000d

//000367:             if (TerminalTest(m_board))
    IL_008b:  ldarg.0
    IL_008c:  ldarg.0
    IL_008d:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0092:  callvirt   instance bool Reversi.Minimax::TerminalTest(valuetype Reversi.MinimaxSpot[0...,0...])
    IL_0097:  ldc.i4.0
    IL_0098:  ceq
    IL_009a:  stloc.s    CS$4$0001
//000368:             {
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_009c:  ldloc.s    CS$4$0001
    IL_009e:  brtrue.s   IL_00f2

//000368:             {
    IL_00a0:  nop
//000369:                 if (gr.NumLightPieces > gr.NumDarkPieces)
    IL_00a1:  ldloca.s   gr
    IL_00a3:  ldfld      int32 Reversi.ReversiGameResult::NumLightPieces
    IL_00a8:  ldloca.s   gr
    IL_00aa:  ldfld      int32 Reversi.ReversiGameResult::NumDarkPieces
    IL_00af:  cgt
    IL_00b1:  ldc.i4.0
    IL_00b2:  ceq
    IL_00b4:  stloc.s    CS$4$0001
//000370:                     gr.GameState = ReversiGameState.LightWon;
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00b6:  ldloc.s    CS$4$0001
    IL_00b8:  brtrue.s   IL_00c4

//000370:                     gr.GameState = ReversiGameState.LightWon;
    IL_00ba:  ldloca.s   gr
    IL_00bc:  ldc.i4.1
    IL_00bd:  stfld      valuetype Reversi.ReversiGameState Reversi.ReversiGameResult::GameState
//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00c2:  br.s       IL_00ef

//000371:                 else if (gr.NumLightPieces < gr.NumDarkPieces)
    IL_00c4:  ldloca.s   gr
    IL_00c6:  ldfld      int32 Reversi.ReversiGameResult::NumLightPieces
    IL_00cb:  ldloca.s   gr
    IL_00cd:  ldfld      int32 Reversi.ReversiGameResult::NumDarkPieces
    IL_00d2:  clt
    IL_00d4:  ldc.i4.0
    IL_00d5:  ceq
    IL_00d7:  stloc.s    CS$4$0001
//000372:                     gr.GameState = ReversiGameState.DarkWon;
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00d9:  ldloc.s    CS$4$0001
    IL_00db:  brtrue.s   IL_00e7

//000372:                     gr.GameState = ReversiGameState.DarkWon;
    IL_00dd:  ldloca.s   gr
    IL_00df:  ldc.i4.m1
    IL_00e0:  stfld      valuetype Reversi.ReversiGameState Reversi.ReversiGameResult::GameState
//000373:                 else
//000374:                     gr.GameState = ReversiGameState.Draw;
//000375:             }
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00e5:  br.s       IL_00ef

//000374:                     gr.GameState = ReversiGameState.Draw;
    IL_00e7:  ldloca.s   gr
    IL_00e9:  ldc.i4.0
    IL_00ea:  stfld      valuetype Reversi.ReversiGameState Reversi.ReversiGameResult::GameState
//000375:             }
    IL_00ef:  nop
//000376:             else
//000377:                 gr.GameState = ReversiGameState.Ongoing;
//000378: 
//000379:             return gr;
//000380:         }
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
//000384:             return Search(m_board, m_isLightMove, inParallel);
//000385:         }
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
//000405:             int n = GetValidMoves(state, true).Count();
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00f0:  br.s       IL_00fb

//000377:                 gr.GameState = ReversiGameState.Ongoing;
    IL_00f2:  ldloca.s   gr
    IL_00f4:  ldc.i4.s   42
    IL_00f6:  stfld      valuetype Reversi.ReversiGameState Reversi.ReversiGameResult::GameState
//000378: 
//000379:             return gr;
    IL_00fb:  ldloc.0
    IL_00fc:  stloc.3
    IL_00fd:  br.s       IL_00ff

//000380:         }
    IL_00ff:  ldloc.3
    IL_0100:  ret
  } // end of method ReversiGame::GetGameResult

  .method public hidebysig instance valuetype Reversi.MinimaxMove 
          GetAIMove(bool inParallel) cil managed
  {
    // Code size       25 (0x19)
    .maxstack  4
    .locals init ([0] valuetype Reversi.MinimaxMove CS$1$0000)
//000381: 
//000382:         public MinimaxMove GetAIMove(bool inParallel)
//000383:         {
    IL_0000:  nop
//000384:             return Search(m_board, m_isLightMove, inParallel);
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0008:  ldarg.0
    IL_0009:  ldfld      bool Reversi.ReversiGame::m_isLightMove
    IL_000e:  ldarg.1
    IL_000f:  call       instance valuetype Reversi.MinimaxMove Reversi.Minimax::Search(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                        bool,
                                                                                        bool)
    IL_0014:  stloc.0
    IL_0015:  br.s       IL_0017

//000385:         }
    IL_0017:  ldloc.0
    IL_0018:  ret
  } // end of method ReversiGame::GetAIMove

  .method public hidebysig specialname virtual 
          instance int32  get_MaxDepth() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 CS$1$0000)
//000386: 
//000387:         #region Minimax_routines
//000388:         public override int MaxDepth
//000389:         {
//000390:             get { return m_depth; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 Reversi.ReversiGame::m_depth
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method ReversiGame::get_MaxDepth

  .method public hidebysig specialname virtual 
          instance valuetype [mscorlib]System.TimeSpan 
          get_TimeLimit() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] valuetype [mscorlib]System.TimeSpan CS$1$0000)
//000391:         }
//000392: 
//000393:         public override TimeSpan TimeLimit
//000394:         {
//000395:             get { return m_time; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype [mscorlib]System.TimeSpan Reversi.ReversiGame::m_time
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method ReversiGame::get_TimeLimit

  .method public hidebysig specialname virtual 
          instance int32  get_DegreeOfParallelism() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] int32 CS$1$0000)
//000396:         }
//000397: 
//000398:         public override int DegreeOfParallelism
//000399:         {
//000400:             get { return m_degPar; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 Reversi.ReversiGame::m_degPar
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method ReversiGame::get_DegreeOfParallelism

  .method family hidebysig virtual instance bool 
          TerminalTest(valuetype Reversi.MinimaxSpot[0...,0...] state) cil managed
  {
    // Code size       66 (0x42)
    .maxstack  3
    .locals init ([0] int32 n,
             [1] bool CS$1$0000,
             [2] bool CS$4$0001)
//000401:         }
//000402: 
//000403:         protected override bool TerminalTest(MinimaxSpot[,] state)
//000404:         {
    IL_0000:  nop
//000405:             int n = GetValidMoves(state, true).Count();
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  ldc.i4.1
    IL_0004:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> Reversi.Minimax::GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                                                                         bool)
    IL_0009:  call       int32 [System.Core]System.Linq.Enumerable::Count<valuetype Reversi.MinimaxMove>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_000e:  stloc.0
//000406:             // Can either player move?
//000407:             if (GetValidMoves(state, true).Count() == 0 && GetValidMoves(state, false).Count() == 0)
    IL_000f:  ldarg.0
    IL_0010:  ldarg.1
    IL_0011:  ldc.i4.1
    IL_0012:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> Reversi.Minimax::GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                                                                         bool)
    IL_0017:  call       int32 [System.Core]System.Linq.Enumerable::Count<valuetype Reversi.MinimaxMove>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_001c:  brtrue.s   IL_0033

    IL_001e:  ldarg.0
    IL_001f:  ldarg.1
    IL_0020:  ldc.i4.0
    IL_0021:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> Reversi.Minimax::GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...],
                                                                                                                                                         bool)
    IL_0026:  call       int32 [System.Core]System.Linq.Enumerable::Count<valuetype Reversi.MinimaxMove>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_002b:  ldc.i4.0
    IL_002c:  ceq
    IL_002e:  ldc.i4.0
    IL_002f:  ceq
    IL_0031:  br.s       IL_0034

    IL_0033:  ldc.i4.1
    IL_0034:  stloc.2
//000408:                 return true;
//000409:             return false;
//000410:         }
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
//000414:             int boardValue = 0;
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0035:  ldloc.2
    IL_0036:  brtrue.s   IL_003c

//000408:                 return true;
    IL_0038:  ldc.i4.1
    IL_0039:  stloc.1
    IL_003a:  br.s       IL_0040

//000409:             return false;
    IL_003c:  ldc.i4.0
    IL_003d:  stloc.1
    IL_003e:  br.s       IL_0040

//000410:         }
    IL_0040:  ldloc.1
    IL_0041:  ret
  } // end of method ReversiGame::TerminalTest

  .method family hidebysig virtual instance int32 
          EvaluateHeuristic(valuetype Reversi.MinimaxSpot[0...,0...] state) cil managed
  {
    // Code size       592 (0x250)
    .maxstack  4
    .locals init ([0] int32 boardValue,
             [1] int32 i,
             [2] int32 j,
             [3] int32 cornerPieceValue,
             [4] int32 edgePieceValue,
             [5] int32 CS$1$0000,
             [6] bool CS$4$0001)
//000411: 
//000412:         protected override int EvaluateHeuristic(MinimaxSpot[,] state)
//000413:         {
    IL_0000:  nop
//000414:             int boardValue = 0;
    IL_0001:  ldc.i4.0
    IL_0002:  stloc.0
//000415: 
//000416:             // +1 for light pieces, -1 for dark pieces
//000417:             for (int i = 0; i < m_numRows; i++)
    IL_0003:  ldc.i4.0
    IL_0004:  stloc.1
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0005:  br.s       IL_0056

//000418:             {
    IL_0007:  nop
//000419:                 for (int j = 0; j < m_numCols; j++)
    IL_0008:  ldc.i4.0
    IL_0009:  stloc.2
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_000a:  br.s       IL_0042

//000420:                 {
    IL_000c:  nop
//000421:                     if (state[i, j] == MinimaxSpot.Light)
    IL_000d:  ldarg.1
    IL_000e:  ldloc.1
    IL_000f:  ldloc.2
    IL_0010:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0015:  ldc.i4.1
    IL_0016:  ceq
    IL_0018:  ldc.i4.0
    IL_0019:  ceq
    IL_001b:  stloc.s    CS$4$0001
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_001d:  ldloc.s    CS$4$0001
    IL_001f:  brtrue.s   IL_0025

//000422:                         boardValue++;
    IL_0021:  ldloc.0
    IL_0022:  ldc.i4.1
    IL_0023:  add
    IL_0024:  stloc.0
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
    IL_0025:  ldarg.1
    IL_0026:  ldloc.1
    IL_0027:  ldloc.2
    IL_0028:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_002d:  ldc.i4.m1
    IL_002e:  ceq
    IL_0030:  ldc.i4.0
    IL_0031:  ceq
    IL_0033:  stloc.s    CS$4$0001
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0035:  ldloc.s    CS$4$0001
    IL_0037:  brtrue.s   IL_003d

//000424:                         boardValue--;
    IL_0039:  ldloc.0
    IL_003a:  ldc.i4.1
    IL_003b:  sub
    IL_003c:  stloc.0
//000425:                 }
    IL_003d:  nop
//000419:                 for (int j = 0; j < m_numCols; j++)
    IL_003e:  ldloc.2
    IL_003f:  ldc.i4.1
    IL_0040:  add
    IL_0041:  stloc.2
    IL_0042:  ldloc.2
    IL_0043:  ldarg.0
    IL_0044:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_0049:  clt
    IL_004b:  stloc.s    CS$4$0001
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_004d:  ldloc.s    CS$4$0001
    IL_004f:  brtrue.s   IL_000c

//000426:             }
    IL_0051:  nop
//000417:             for (int i = 0; i < m_numRows; i++)
    IL_0052:  ldloc.1
    IL_0053:  ldc.i4.1
    IL_0054:  add
    IL_0055:  stloc.1
    IL_0056:  ldloc.1
    IL_0057:  ldarg.0
    IL_0058:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_005d:  clt
    IL_005f:  stloc.s    CS$4$0001
//000418:             {
//000419:                 for (int j = 0; j < m_numCols; j++)
//000420:                 {
//000421:                     if (state[i, j] == MinimaxSpot.Light)
//000422:                         boardValue++;
//000423:                     if (state[i, j] == MinimaxSpot.Dark)
//000424:                         boardValue--;
//000425:                 }
//000426:             }
//000427: 
//000428:             // +-X for corner pieces
//000429:             int cornerPieceValue = 13;
//000430:             if (state[0, 0] == MinimaxSpot.Light)
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0061:  ldloc.s    CS$4$0001
    IL_0063:  brtrue.s   IL_0007

//000429:             int cornerPieceValue = 13;
    IL_0065:  ldc.i4.s   13
    IL_0067:  stloc.3
//000430:             if (state[0, 0] == MinimaxSpot.Light)
    IL_0068:  ldarg.1
    IL_0069:  ldc.i4.0
    IL_006a:  ldc.i4.0
    IL_006b:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0070:  ldc.i4.1
    IL_0071:  ceq
    IL_0073:  ldc.i4.0
    IL_0074:  ceq
    IL_0076:  stloc.s    CS$4$0001
//000431:                 boardValue += cornerPieceValue;
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0078:  ldloc.s    CS$4$0001
    IL_007a:  brtrue.s   IL_0080

//000431:                 boardValue += cornerPieceValue;
    IL_007c:  ldloc.0
    IL_007d:  ldloc.3
    IL_007e:  add
    IL_007f:  stloc.0
//000432:             if (state[0, 0] == MinimaxSpot.Dark)
    IL_0080:  ldarg.1
    IL_0081:  ldc.i4.0
    IL_0082:  ldc.i4.0
    IL_0083:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0088:  ldc.i4.m1
    IL_0089:  ceq
    IL_008b:  ldc.i4.0
    IL_008c:  ceq
    IL_008e:  stloc.s    CS$4$0001
//000433:                 boardValue -= cornerPieceValue;
//000434:             if (state[0, 7] == MinimaxSpot.Light)
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0090:  ldloc.s    CS$4$0001
    IL_0092:  brtrue.s   IL_0098

//000433:                 boardValue -= cornerPieceValue;
    IL_0094:  ldloc.0
    IL_0095:  ldloc.3
    IL_0096:  sub
    IL_0097:  stloc.0
//000434:             if (state[0, 7] == MinimaxSpot.Light)
    IL_0098:  ldarg.1
    IL_0099:  ldc.i4.0
    IL_009a:  ldc.i4.7
    IL_009b:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00a0:  ldc.i4.1
    IL_00a1:  ceq
    IL_00a3:  ldc.i4.0
    IL_00a4:  ceq
    IL_00a6:  stloc.s    CS$4$0001
//000435:                 boardValue += cornerPieceValue;
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00a8:  ldloc.s    CS$4$0001
    IL_00aa:  brtrue.s   IL_00b0

//000435:                 boardValue += cornerPieceValue;
    IL_00ac:  ldloc.0
    IL_00ad:  ldloc.3
    IL_00ae:  add
    IL_00af:  stloc.0
//000436:             if (state[0, 7] == MinimaxSpot.Dark)
    IL_00b0:  ldarg.1
    IL_00b1:  ldc.i4.0
    IL_00b2:  ldc.i4.7
    IL_00b3:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00b8:  ldc.i4.m1
    IL_00b9:  ceq
    IL_00bb:  ldc.i4.0
    IL_00bc:  ceq
    IL_00be:  stloc.s    CS$4$0001
//000437:                 boardValue -= cornerPieceValue;
//000438:             if (state[7, 0] == MinimaxSpot.Light)
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00c0:  ldloc.s    CS$4$0001
    IL_00c2:  brtrue.s   IL_00c8

//000437:                 boardValue -= cornerPieceValue;
    IL_00c4:  ldloc.0
    IL_00c5:  ldloc.3
    IL_00c6:  sub
    IL_00c7:  stloc.0
//000438:             if (state[7, 0] == MinimaxSpot.Light)
    IL_00c8:  ldarg.1
    IL_00c9:  ldc.i4.7
    IL_00ca:  ldc.i4.0
    IL_00cb:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00d0:  ldc.i4.1
    IL_00d1:  ceq
    IL_00d3:  ldc.i4.0
    IL_00d4:  ceq
    IL_00d6:  stloc.s    CS$4$0001
//000439:                 boardValue += cornerPieceValue;
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00d8:  ldloc.s    CS$4$0001
    IL_00da:  brtrue.s   IL_00e0

//000439:                 boardValue += cornerPieceValue;
    IL_00dc:  ldloc.0
    IL_00dd:  ldloc.3
    IL_00de:  add
    IL_00df:  stloc.0
//000440:             if (state[7, 0] == MinimaxSpot.Dark)
    IL_00e0:  ldarg.1
    IL_00e1:  ldc.i4.7
    IL_00e2:  ldc.i4.0
    IL_00e3:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_00e8:  ldc.i4.m1
    IL_00e9:  ceq
    IL_00eb:  ldc.i4.0
    IL_00ec:  ceq
    IL_00ee:  stloc.s    CS$4$0001
//000441:                 boardValue -= cornerPieceValue;
//000442:             if (state[7, 7] == MinimaxSpot.Light)
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_00f0:  ldloc.s    CS$4$0001
    IL_00f2:  brtrue.s   IL_00f8

//000441:                 boardValue -= cornerPieceValue;
    IL_00f4:  ldloc.0
    IL_00f5:  ldloc.3
    IL_00f6:  sub
    IL_00f7:  stloc.0
//000442:             if (state[7, 7] == MinimaxSpot.Light)
    IL_00f8:  ldarg.1
    IL_00f9:  ldc.i4.7
    IL_00fa:  ldc.i4.7
    IL_00fb:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0100:  ldc.i4.1
    IL_0101:  ceq
    IL_0103:  ldc.i4.0
    IL_0104:  ceq
    IL_0106:  stloc.s    CS$4$0001
//000443:                 boardValue += cornerPieceValue;
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0108:  ldloc.s    CS$4$0001
    IL_010a:  brtrue.s   IL_0110

//000443:                 boardValue += cornerPieceValue;
    IL_010c:  ldloc.0
    IL_010d:  ldloc.3
    IL_010e:  add
    IL_010f:  stloc.0
//000444:             if (state[7, 7] == MinimaxSpot.Dark)
    IL_0110:  ldarg.1
    IL_0111:  ldc.i4.7
    IL_0112:  ldc.i4.7
    IL_0113:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0118:  ldc.i4.m1
    IL_0119:  ceq
    IL_011b:  ldc.i4.0
    IL_011c:  ceq
    IL_011e:  stloc.s    CS$4$0001
//000445:                 boardValue -= cornerPieceValue;
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
//000449:             for (int i = 0; i < m_numRows; i++)
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0120:  ldloc.s    CS$4$0001
    IL_0122:  brtrue.s   IL_0128

//000445:                 boardValue -= cornerPieceValue;
    IL_0124:  ldloc.0
    IL_0125:  ldloc.3
    IL_0126:  sub
    IL_0127:  stloc.0
//000446: 
//000447:             // +-X for edge pieces
//000448:             int edgePieceValue = 9;
    IL_0128:  ldc.i4.s   9
    IL_012a:  stloc.s    edgePieceValue
//000449:             for (int i = 0; i < m_numRows; i++)
    IL_012c:  ldc.i4.0
    IL_012d:  stloc.1
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_012e:  br.s       IL_01a8

//000450:             {
    IL_0130:  nop
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
    IL_0131:  ldarg.1
    IL_0132:  ldloc.1
    IL_0133:  ldc.i4.0
    IL_0134:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0139:  ldc.i4.1
    IL_013a:  ceq
    IL_013c:  ldc.i4.0
    IL_013d:  ceq
    IL_013f:  stloc.s    CS$4$0001
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0141:  ldloc.s    CS$4$0001
    IL_0143:  brtrue.s   IL_014a

//000452:                     boardValue += edgePieceValue;
    IL_0145:  ldloc.0
    IL_0146:  ldloc.s    edgePieceValue
    IL_0148:  add
    IL_0149:  stloc.0
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
    IL_014a:  ldarg.1
    IL_014b:  ldloc.1
    IL_014c:  ldc.i4.0
    IL_014d:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0152:  ldc.i4.m1
    IL_0153:  ceq
    IL_0155:  ldc.i4.0
    IL_0156:  ceq
    IL_0158:  stloc.s    CS$4$0001
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_015a:  ldloc.s    CS$4$0001
    IL_015c:  brtrue.s   IL_0163

//000454:                     boardValue -= edgePieceValue;
    IL_015e:  ldloc.0
    IL_015f:  ldloc.s    edgePieceValue
    IL_0161:  sub
    IL_0162:  stloc.0
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
    IL_0163:  ldarg.1
    IL_0164:  ldloc.1
    IL_0165:  ldarg.0
    IL_0166:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_016b:  ldc.i4.1
    IL_016c:  sub
    IL_016d:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0172:  ldc.i4.1
    IL_0173:  ceq
    IL_0175:  ldc.i4.0
    IL_0176:  ceq
    IL_0178:  stloc.s    CS$4$0001
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_017a:  ldloc.s    CS$4$0001
    IL_017c:  brtrue.s   IL_0183

//000456:                     boardValue += edgePieceValue;
    IL_017e:  ldloc.0
    IL_017f:  ldloc.s    edgePieceValue
    IL_0181:  add
    IL_0182:  stloc.0
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
    IL_0183:  ldarg.1
    IL_0184:  ldloc.1
    IL_0185:  ldarg.0
    IL_0186:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_018b:  ldc.i4.1
    IL_018c:  sub
    IL_018d:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0192:  ldc.i4.m1
    IL_0193:  ceq
    IL_0195:  ldc.i4.0
    IL_0196:  ceq
    IL_0198:  stloc.s    CS$4$0001
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_019a:  ldloc.s    CS$4$0001
    IL_019c:  brtrue.s   IL_01a3

//000458:                     boardValue -= edgePieceValue;
    IL_019e:  ldloc.0
    IL_019f:  ldloc.s    edgePieceValue
    IL_01a1:  sub
    IL_01a2:  stloc.0
//000459:             }
    IL_01a3:  nop
//000449:             for (int i = 0; i < m_numRows; i++)
    IL_01a4:  ldloc.1
    IL_01a5:  ldc.i4.1
    IL_01a6:  add
    IL_01a7:  stloc.1
    IL_01a8:  ldloc.1
    IL_01a9:  ldarg.0
    IL_01aa:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_01af:  clt
    IL_01b1:  stloc.s    CS$4$0001
//000450:             {
//000451:                 if (state[i, 0] == MinimaxSpot.Light)
//000452:                     boardValue += edgePieceValue;
//000453:                 if (state[i, 0] == MinimaxSpot.Dark)
//000454:                     boardValue -= edgePieceValue;
//000455:                 if (state[i, m_numCols - 1] == MinimaxSpot.Light)
//000456:                     boardValue += edgePieceValue;
//000457:                 if (state[i, m_numCols - 1] == MinimaxSpot.Dark)
//000458:                     boardValue -= edgePieceValue;
//000459:             }
//000460:             for (int i = 0; i < m_numCols; i++)
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01b3:  ldloc.s    CS$4$0001
    IL_01b5:  brtrue     IL_0130

//000460:             for (int i = 0; i < m_numCols; i++)
    IL_01ba:  ldc.i4.0
    IL_01bb:  stloc.1
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01bc:  br.s       IL_0236

//000461:             {
    IL_01be:  nop
//000462:                 if (state[0, i] == MinimaxSpot.Light)
    IL_01bf:  ldarg.1
    IL_01c0:  ldc.i4.0
    IL_01c1:  ldloc.1
    IL_01c2:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_01c7:  ldc.i4.1
    IL_01c8:  ceq
    IL_01ca:  ldc.i4.0
    IL_01cb:  ceq
    IL_01cd:  stloc.s    CS$4$0001
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01cf:  ldloc.s    CS$4$0001
    IL_01d1:  brtrue.s   IL_01d8

//000463:                     boardValue += edgePieceValue;
    IL_01d3:  ldloc.0
    IL_01d4:  ldloc.s    edgePieceValue
    IL_01d6:  add
    IL_01d7:  stloc.0
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
    IL_01d8:  ldarg.1
    IL_01d9:  ldc.i4.0
    IL_01da:  ldc.i4.0
    IL_01db:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_01e0:  ldc.i4.m1
    IL_01e1:  ceq
    IL_01e3:  ldc.i4.0
    IL_01e4:  ceq
    IL_01e6:  stloc.s    CS$4$0001
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_01e8:  ldloc.s    CS$4$0001
    IL_01ea:  brtrue.s   IL_01f1

//000465:                     boardValue -= edgePieceValue;
    IL_01ec:  ldloc.0
    IL_01ed:  ldloc.s    edgePieceValue
    IL_01ef:  sub
    IL_01f0:  stloc.0
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
    IL_01f1:  ldarg.1
    IL_01f2:  ldarg.0
    IL_01f3:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_01f8:  ldc.i4.1
    IL_01f9:  sub
    IL_01fa:  ldloc.1
    IL_01fb:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0200:  ldc.i4.1
    IL_0201:  ceq
    IL_0203:  ldc.i4.0
    IL_0204:  ceq
    IL_0206:  stloc.s    CS$4$0001
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0208:  ldloc.s    CS$4$0001
    IL_020a:  brtrue.s   IL_0211

//000467:                     boardValue += edgePieceValue;
    IL_020c:  ldloc.0
    IL_020d:  ldloc.s    edgePieceValue
    IL_020f:  add
    IL_0210:  stloc.0
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
    IL_0211:  ldarg.1
    IL_0212:  ldarg.0
    IL_0213:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0218:  ldc.i4.1
    IL_0219:  sub
    IL_021a:  ldloc.1
    IL_021b:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0220:  ldc.i4.m1
    IL_0221:  ceq
    IL_0223:  ldc.i4.0
    IL_0224:  ceq
    IL_0226:  stloc.s    CS$4$0001
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0228:  ldloc.s    CS$4$0001
    IL_022a:  brtrue.s   IL_0231

//000469:                     boardValue -= edgePieceValue;
    IL_022c:  ldloc.0
    IL_022d:  ldloc.s    edgePieceValue
    IL_022f:  sub
    IL_0230:  stloc.0
//000470:             }
    IL_0231:  nop
//000460:             for (int i = 0; i < m_numCols; i++)
    IL_0232:  ldloc.1
    IL_0233:  ldc.i4.1
    IL_0234:  add
    IL_0235:  stloc.1
    IL_0236:  ldloc.1
    IL_0237:  ldarg.0
    IL_0238:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_023d:  clt
    IL_023f:  stloc.s    CS$4$0001
//000461:             {
//000462:                 if (state[0, i] == MinimaxSpot.Light)
//000463:                     boardValue += edgePieceValue;
//000464:                 if (state[0, 0] == MinimaxSpot.Dark)
//000465:                     boardValue -= edgePieceValue;
//000466:                 if (state[m_numRows - 1, i] == MinimaxSpot.Light)
//000467:                     boardValue += edgePieceValue;
//000468:                 if (state[m_numRows - 1, i] == MinimaxSpot.Dark)
//000469:                     boardValue -= edgePieceValue;
//000470:             }
//000471: 
//000472:             return boardValue;
//000473:         }
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
//000490:             for (int i = 0; i < m_numRows; i++)
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0241:  ldloc.s    CS$4$0001
    IL_0243:  brtrue     IL_01be

//000472:             return boardValue;
    IL_0248:  ldloc.0
    IL_0249:  stloc.s    CS$1$0000
    IL_024b:  br.s       IL_024d

//000473:         }
    IL_024d:  ldloc.s    CS$1$0000
    IL_024f:  ret
  } // end of method ReversiGame::EvaluateHeuristic

  .method family hidebysig virtual instance class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> 
          GetValidMoves(valuetype Reversi.MinimaxSpot[0...,0...] state,
                        bool isLightPlayer) cil managed
  {
    // Code size       35 (0x23)
    .maxstack  2
    .locals init ([0] class Reversi.ReversiGame/'<GetValidMoves>d__0' V_0,
             [1] class [mscorlib]System.Collections.Generic.IEnumerable`1<valuetype Reversi.MinimaxMove> V_1)
    IL_0000:  ldc.i4.s   -2
    IL_0002:  newobj     instance void Reversi.ReversiGame/'<GetValidMoves>d__0'::.ctor(int32)
    IL_0007:  stloc.0
    IL_0008:  ldloc.0
    IL_0009:  ldarg.0
    IL_000a:  stfld      class Reversi.ReversiGame Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>4__this'
    IL_000f:  ldloc.0
    IL_0010:  ldarg.1
    IL_0011:  stfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>3__state'
    IL_0016:  ldloc.0
    IL_0017:  ldarg.2
    IL_0018:  stfld      bool Reversi.ReversiGame/'<GetValidMoves>d__0'::'<>3__isLightPlayer'
    IL_001d:  ldloc.0
    IL_001e:  stloc.1
    IL_001f:  br.s       IL_0021

    IL_0021:  ldloc.1
    IL_0022:  ret
  } // end of method ReversiGame::GetValidMoves

  .method family hidebysig virtual instance valuetype Reversi.MinimaxSpot[0...,0...] 
          GetInsight(valuetype Reversi.MinimaxSpot[0...,0...] state,
                     valuetype Reversi.MinimaxMove move,
                     bool isLightPlayer) cil managed
  {
    // Code size       114 (0x72)
    .maxstack  6
    .locals init ([0] valuetype Reversi.MinimaxSpot[0...,0...] insightState,
             [1] int32 i,
             [2] int32 j,
             [3] valuetype Reversi.MinimaxSpot[0...,0...] CS$1$0000,
             [4] bool CS$4$0001)
//000474: 
//000475:         protected override IEnumerable<MinimaxMove> GetValidMoves(MinimaxSpot[,] state, bool isLightPlayer)
//000476:         {
//000477:             for (int i = 0; i < m_numRows; i++)
//000478:             {
//000479:                 for (int j = 0; j < m_numCols; j++)
//000480:                 {
//000481:                     if (IsValidMove(state, isLightPlayer, i, j))
//000482:                         yield return new MinimaxMove(i, j);
//000483:                 }
//000484:             }
//000485:         }
//000486: 
//000487:         protected override MinimaxSpot[,] GetInsight(MinimaxSpot[,] state, MinimaxMove move, bool isLightPlayer)
//000488:         {
    IL_0000:  nop
//000489:             MinimaxSpot[,] insightState = new MinimaxSpot[m_numRows, m_numCols];
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0007:  ldarg.0
    IL_0008:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_000d:  newobj     instance void valuetype Reversi.MinimaxSpot[0...,0...]::.ctor(int32,
                                                                                       int32)
    IL_0012:  stloc.0
//000490:             for (int i = 0; i < m_numRows; i++)
    IL_0013:  ldc.i4.0
    IL_0014:  stloc.1
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0015:  br.s       IL_0042

//000491:                 for (int j = 0; j < m_numCols; j++)
    IL_0017:  ldc.i4.0
    IL_0018:  stloc.2
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0019:  br.s       IL_002f

//000492:                     insightState[i, j] = state[i, j];
    IL_001b:  ldloc.0
    IL_001c:  ldloc.1
    IL_001d:  ldloc.2
    IL_001e:  ldarg.1
    IL_001f:  ldloc.1
    IL_0020:  ldloc.2
    IL_0021:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0026:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000491:                 for (int j = 0; j < m_numCols; j++)
    IL_002b:  ldloc.2
    IL_002c:  ldc.i4.1
    IL_002d:  add
    IL_002e:  stloc.2
    IL_002f:  ldloc.2
    IL_0030:  ldarg.0
    IL_0031:  ldfld      int32 Reversi.ReversiGame::m_numCols
    IL_0036:  clt
    IL_0038:  stloc.s    CS$4$0001
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_003a:  ldloc.s    CS$4$0001
    IL_003c:  brtrue.s   IL_001b

//000490:             for (int i = 0; i < m_numRows; i++)
    IL_003e:  ldloc.1
    IL_003f:  ldc.i4.1
    IL_0040:  add
    IL_0041:  stloc.1
    IL_0042:  ldloc.1
    IL_0043:  ldarg.0
    IL_0044:  ldfld      int32 Reversi.ReversiGame::m_numRows
    IL_0049:  clt
    IL_004b:  stloc.s    CS$4$0001
//000491:                 for (int j = 0; j < m_numCols; j++)
//000492:                     insightState[i, j] = state[i, j];
//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
//000494:             return insightState;
//000495:         }
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
//000501:             var sr = new StreamReader("./dump.txt");
//000502: 
//000503:             string s = sr.ReadLine();
//000504:             int r = 7;
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_004d:  ldloc.s    CS$4$0001
    IL_004f:  brtrue.s   IL_0017

//000493:             insightState[move.Row, move.Col] = isLightPlayer ? MinimaxSpot.Light : MinimaxSpot.Dark;
    IL_0051:  ldloc.0
    IL_0052:  ldarga.s   move
    IL_0054:  ldfld      int32 Reversi.MinimaxMove::Row
    IL_0059:  ldarga.s   move
    IL_005b:  ldfld      int32 Reversi.MinimaxMove::Col
    IL_0060:  ldarg.3
    IL_0061:  brtrue.s   IL_0066

    IL_0063:  ldc.i4.m1
    IL_0064:  br.s       IL_0067

    IL_0066:  ldc.i4.1
    IL_0067:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000494:             return insightState;
    IL_006c:  ldloc.0
    IL_006d:  stloc.3
    IL_006e:  br.s       IL_0070

//000495:         }
    IL_0070:  ldloc.3
    IL_0071:  ret
  } // end of method ReversiGame::GetInsight

  .method private hidebysig instance void 
          ReadDump() cil managed
  {
    // Code size       152 (0x98)
    .maxstack  4
    .locals init ([0] class [mscorlib]System.IO.StreamReader sr,
             [1] string s,
             [2] int32 r,
             [3] char[] line,
             [4] int32 c,
             [5] bool CS$4$0000)
//000496:         #endregion
//000497: 
//000498:         #region DEBUG_ROUTINES
//000499:         private void ReadDump()
//000500:         {
    IL_0000:  nop
//000501:             var sr = new StreamReader("./dump.txt");
    IL_0001:  ldstr      "./dump.txt"
    IL_0006:  newobj     instance void [mscorlib]System.IO.StreamReader::.ctor(string)
    IL_000b:  stloc.0
//000502: 
//000503:             string s = sr.ReadLine();
    IL_000c:  ldloc.0
    IL_000d:  callvirt   instance string [mscorlib]System.IO.TextReader::ReadLine()
    IL_0012:  stloc.1
//000504:             int r = 7;
    IL_0013:  ldc.i4.7
    IL_0014:  stloc.2
//000505:             while (s != null)
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0015:  br.s       IL_0083

//000506:             {
    IL_0017:  nop
//000507:                 char[] line = s.ToCharArray();
    IL_0018:  ldloc.1
    IL_0019:  callvirt   instance char[] [mscorlib]System.String::ToCharArray()
    IL_001e:  stloc.3
//000508:                 for (int c = 0; c < 8; c++)
    IL_001f:  ldc.i4.0
    IL_0020:  stloc.s    c
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0022:  br.s       IL_006c

//000509:                 {
    IL_0024:  nop
//000510:                     if (line[c] == 'w')
    IL_0025:  ldloc.3
    IL_0026:  ldloc.s    c
    IL_0028:  ldelem.u2
    IL_0029:  ldc.i4.s   119
    IL_002b:  ceq
    IL_002d:  ldc.i4.0
    IL_002e:  ceq
    IL_0030:  stloc.s    CS$4$0000
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0032:  ldloc.s    CS$4$0000
    IL_0034:  brtrue.s   IL_0045

//000511:                         m_board[r, c] = MinimaxSpot.Light;
    IL_0036:  ldarg.0
    IL_0037:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_003c:  ldloc.2
    IL_003d:  ldloc.s    c
    IL_003f:  ldc.i4.1
    IL_0040:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000512:                     if (line[c] == 'b')
    IL_0045:  ldloc.3
    IL_0046:  ldloc.s    c
    IL_0048:  ldelem.u2
    IL_0049:  ldc.i4.s   98
    IL_004b:  ceq
    IL_004d:  ldc.i4.0
    IL_004e:  ceq
    IL_0050:  stloc.s    CS$4$0000
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0052:  ldloc.s    CS$4$0000
    IL_0054:  brtrue.s   IL_0065

//000513:                         m_board[r, c] = MinimaxSpot.Dark;
    IL_0056:  ldarg.0
    IL_0057:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_005c:  ldloc.2
    IL_005d:  ldloc.s    c
    IL_005f:  ldc.i4.m1
    IL_0060:  call       instance void valuetype Reversi.MinimaxSpot[0...,0...]::Set(int32,
                                                                                     int32,
                                                                                     valuetype Reversi.MinimaxSpot)
//000514:                 }
    IL_0065:  nop
//000508:                 for (int c = 0; c < 8; c++)
    IL_0066:  ldloc.s    c
    IL_0068:  ldc.i4.1
    IL_0069:  add
    IL_006a:  stloc.s    c
    IL_006c:  ldloc.s    c
    IL_006e:  ldc.i4.8
    IL_006f:  clt
    IL_0071:  stloc.s    CS$4$0000
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0073:  ldloc.s    CS$4$0000
    IL_0075:  brtrue.s   IL_0024

//000515:                 r--;
    IL_0077:  ldloc.2
    IL_0078:  ldc.i4.1
    IL_0079:  sub
    IL_007a:  stloc.2
//000516:                 s = sr.ReadLine();
    IL_007b:  ldloc.0
    IL_007c:  callvirt   instance string [mscorlib]System.IO.TextReader::ReadLine()
    IL_0081:  stloc.1
//000517:             }
    IL_0082:  nop
//000505:             while (s != null)
    IL_0083:  ldloc.1
    IL_0084:  ldnull
    IL_0085:  ceq
    IL_0087:  ldc.i4.0
    IL_0088:  ceq
    IL_008a:  stloc.s    CS$4$0000
//000506:             {
//000507:                 char[] line = s.ToCharArray();
//000508:                 for (int c = 0; c < 8; c++)
//000509:                 {
//000510:                     if (line[c] == 'w')
//000511:                         m_board[r, c] = MinimaxSpot.Light;
//000512:                     if (line[c] == 'b')
//000513:                         m_board[r, c] = MinimaxSpot.Dark;
//000514:                 }
//000515:                 r--;
//000516:                 s = sr.ReadLine();
//000517:             }
//000518:             sr.Close();
//000519:         }
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
//000523:             var sw = new StreamWriter("./dump.txt");
//000524:             for (int i = 7; i >= 0; i--)
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_008c:  ldloc.s    CS$4$0000
    IL_008e:  brtrue.s   IL_0017

//000518:             sr.Close();
    IL_0090:  ldloc.0
    IL_0091:  callvirt   instance void [mscorlib]System.IO.TextReader::Close()
    IL_0096:  nop
//000519:         }
    IL_0097:  ret
  } // end of method ReversiGame::ReadDump

  .method public hidebysig instance void 
          Dump(string msg) cil managed
  {
    // Code size       151 (0x97)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.IO.StreamWriter sw,
             [1] int32 i,
             [2] int32 j,
             [3] bool CS$4$0000)
//000520: 
//000521:         public void Dump(string msg)
//000522:         {
    IL_0000:  nop
//000523:             var sw = new StreamWriter("./dump.txt");
    IL_0001:  ldstr      "./dump.txt"
    IL_0006:  newobj     instance void [mscorlib]System.IO.StreamWriter::.ctor(string)
    IL_000b:  stloc.0
//000524:             for (int i = 7; i >= 0; i--)
    IL_000c:  ldc.i4.7
    IL_000d:  stloc.1
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_000e:  br.s       IL_007c

//000525:             {
    IL_0010:  nop
//000526:                 for (int j = 0; j < 8; j++)
    IL_0011:  ldc.i4.0
    IL_0012:  stloc.2
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0013:  br.s       IL_0068

//000527:                 {
    IL_0015:  nop
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
    IL_0016:  ldarg.0
    IL_0017:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_001c:  ldloc.1
    IL_001d:  ldloc.2
    IL_001e:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0023:  ldc.i4.1
    IL_0024:  ceq
    IL_0026:  ldc.i4.0
    IL_0027:  ceq
    IL_0029:  stloc.3
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_002a:  ldloc.3
    IL_002b:  brtrue.s   IL_0038

//000529:                         sw.Write('w');
    IL_002d:  ldloc.0
    IL_002e:  ldc.i4.s   119
    IL_0030:  callvirt   instance void [mscorlib]System.IO.TextWriter::Write(char)
    IL_0035:  nop
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0036:  br.s       IL_0063

//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
    IL_0038:  ldarg.0
    IL_0039:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_003e:  ldloc.1
    IL_003f:  ldloc.2
    IL_0040:  call       instance valuetype Reversi.MinimaxSpot valuetype Reversi.MinimaxSpot[0...,0...]::Get(int32,
                                                                                                              int32)
    IL_0045:  ldc.i4.m1
    IL_0046:  ceq
    IL_0048:  ldc.i4.0
    IL_0049:  ceq
    IL_004b:  stloc.3
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_004c:  ldloc.3
    IL_004d:  brtrue.s   IL_005a

//000531:                         sw.Write('b');
    IL_004f:  ldloc.0
    IL_0050:  ldc.i4.s   98
    IL_0052:  callvirt   instance void [mscorlib]System.IO.TextWriter::Write(char)
    IL_0057:  nop
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0058:  br.s       IL_0063

//000533:                         sw.Write('-');
    IL_005a:  ldloc.0
    IL_005b:  ldc.i4.s   45
    IL_005d:  callvirt   instance void [mscorlib]System.IO.TextWriter::Write(char)
    IL_0062:  nop
//000534:                 }
    IL_0063:  nop
//000526:                 for (int j = 0; j < 8; j++)
    IL_0064:  ldloc.2
    IL_0065:  ldc.i4.1
    IL_0066:  add
    IL_0067:  stloc.2
    IL_0068:  ldloc.2
    IL_0069:  ldc.i4.8
    IL_006a:  clt
    IL_006c:  stloc.3
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_006d:  ldloc.3
    IL_006e:  brtrue.s   IL_0015

//000535:                 sw.WriteLine();
    IL_0070:  ldloc.0
    IL_0071:  callvirt   instance void [mscorlib]System.IO.TextWriter::WriteLine()
    IL_0076:  nop
//000536:             }
    IL_0077:  nop
//000524:             for (int i = 7; i >= 0; i--)
    IL_0078:  ldloc.1
    IL_0079:  ldc.i4.1
    IL_007a:  sub
    IL_007b:  stloc.1
    IL_007c:  ldloc.1
    IL_007d:  ldc.i4.0
    IL_007e:  clt
    IL_0080:  ldc.i4.0
    IL_0081:  ceq
    IL_0083:  stloc.3
//000525:             {
//000526:                 for (int j = 0; j < 8; j++)
//000527:                 {
//000528:                     if (m_board[i, j] == MinimaxSpot.Light)
//000529:                         sw.Write('w');
//000530:                     else if (m_board[i, j] == MinimaxSpot.Dark)
//000531:                         sw.Write('b');
//000532:                     else
//000533:                         sw.Write('-');
//000534:                 }
//000535:                 sw.WriteLine();
//000536:             }
//000537:             sw.WriteLine(msg);
//000538:             sw.Close();
//000539:         }
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
//000556:         }
//000557:     }
//000558: 
//000559:     public struct ReversiGameResult
//000560:     {
//000561:         public ReversiGameState GameState;
//000562:         public int NumLightPieces, NumDarkPieces;
//000563:     }
//000564: 
//000565:     public enum ReversiGameState
//000566:     {
//000567:         Ongoing = 42,
//000568:         LightWon = 1,
//000569:         DarkWon = -1,
//000570:         Draw = 0
//000571:     }
//000572: }
    IL_0084:  ldloc.3
    IL_0085:  brtrue.s   IL_0010

//000537:             sw.WriteLine(msg);
    IL_0087:  ldloc.0
    IL_0088:  ldarg.1
    IL_0089:  callvirt   instance void [mscorlib]System.IO.TextWriter::WriteLine(string)
    IL_008e:  nop
//000538:             sw.Close();
    IL_008f:  ldloc.0
    IL_0090:  callvirt   instance void [mscorlib]System.IO.TextWriter::Close()
    IL_0095:  nop
//000539:         }
    IL_0096:  ret
  } // end of method ReversiGame::Dump

  .method public hidebysig specialname instance valuetype Reversi.MinimaxSpot[0...,0...] 
          get_Board() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] valuetype Reversi.MinimaxSpot[0...,0...] CS$1$0000)
//000540:         #endregion
//000541: 
//000542:         private int m_numRows, m_numCols;
//000543:         private MinimaxSpot[,] m_board;
//000544:         private int m_depth, m_degPar;
//000545:         private TimeSpan m_time;
//000546:         private bool m_isLightMove;
//000547: 
//000548:         public MinimaxSpot[,] Board
//000549:         {
//000550:             get { return m_board; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::m_board
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method ReversiGame::get_Board

  .method public hidebysig specialname instance bool 
          get_IsLightMove() cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] bool CS$1$0000)
//000551:         }
//000552: 
//000553:         public bool IsLightMove
//000554:         {
//000555:             get { return m_isLightMove; }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool Reversi.ReversiGame::m_isLightMove
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method ReversiGame::get_IsLightMove

  .property instance int32 MaxDepth()
  {
    .get instance int32 Reversi.ReversiGame::get_MaxDepth()
  } // end of property ReversiGame::MaxDepth
  .property instance valuetype [mscorlib]System.TimeSpan
          TimeLimit()
  {
    .get instance valuetype [mscorlib]System.TimeSpan Reversi.ReversiGame::get_TimeLimit()
  } // end of property ReversiGame::TimeLimit
  .property instance int32 DegreeOfParallelism()
  {
    .get instance int32 Reversi.ReversiGame::get_DegreeOfParallelism()
  } // end of property ReversiGame::DegreeOfParallelism
  .property instance valuetype Reversi.MinimaxSpot[0...,0...]
          Board()
  {
    .get instance valuetype Reversi.MinimaxSpot[0...,0...] Reversi.ReversiGame::get_Board()
  } // end of property ReversiGame::Board
  .property instance bool IsLightMove()
  {
    .get instance bool Reversi.ReversiGame::get_IsLightMove()
  } // end of property ReversiGame::IsLightMove
} // end of class Reversi.ReversiGame

.class public sequential ansi sealed beforefieldinit Reversi.ReversiGameResult
       extends [mscorlib]System.ValueType
{
  .field public valuetype Reversi.ReversiGameState GameState
  .field public int32 NumLightPieces
  .field public int32 NumDarkPieces
} // end of class Reversi.ReversiGameResult

.class public auto ansi sealed Reversi.ReversiGameState
       extends [mscorlib]System.Enum
{
  .field public specialname rtspecialname int32 value__
  .field public static literal valuetype Reversi.ReversiGameState Ongoing = int32(0x0000002A)
  .field public static literal valuetype Reversi.ReversiGameState LightWon = int32(0x00000001)
  .field public static literal valuetype Reversi.ReversiGameState DarkWon = int32(0xFFFFFFFF)
  .field public static literal valuetype Reversi.ReversiGameState Draw = int32(0x00000000)
} // end of class Reversi.ReversiGameState


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
