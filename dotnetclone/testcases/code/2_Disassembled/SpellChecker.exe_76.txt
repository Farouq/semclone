
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern PresentationFramework
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Xaml
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern PresentationCore
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern ParallelExtensionsExtras
{
  .ver 1:2:0:0
}
.assembly SpellChecker
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 0C 53 70 65 6C 6C 43 68 65 63 6B 65 72 00   // ...SpellChecker.
                                                                                                00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 0C 53 70 65 6C 6C 43 68 65 63 6B 65 72 00   // ...SpellChecker.
                                                                                              00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [PresentationFramework]System.Windows.ThemeInfoAttribute::.ctor(valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation,
                                                                                        valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation) = ( 01 00 00 00 00 00 01 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public SpellChecker.g.resources
{
  // Offset: 0x00000000 Length: 0x000007E1
}
.mresource public SpellChecker.Properties.Resources.resources
{
  // Offset: 0x000007E8 Length: 0x000000B4
}
.module SpellChecker.exe
// MVID: {4283A93F-7AD3-4C3D-80A0-D0C994143099}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x004C0000


// =============== CLASS MEMBERS DECLARATION ===================

.class public auto ansi beforefieldinit SpellChecker.Window1
       extends [PresentationFramework]System.Windows.Window
       implements [System.Xaml]System.Windows.Markup.IComponentConnector
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass4'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class [PresentationFramework]Microsoft.Win32.OpenFileDialog ofd
    .field public class SpellChecker.Window1 '<>4__this'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass4'::.ctor

    .method public hidebysig instance void 
            '<btnLoad_Click>b__1'() cil managed
    {
      // Code size       168 (0xa8)
      .maxstack  3
      .locals init ([0] class [mscorlib]System.IO.StreamReader reader,
               [1] string line,
               [2] string word,
               [3] bool CS$4$0000)
      .language '{3F5162F8-07C6-11D3-9053-00C04FA302A1}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\Window1.xaml.cs' 
//000044:                 {
      IL_0000:  nop
//000045:                     // Read in all of the words
//000046:                     _words = new List<string>(200000);
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass4'::'<>4__this'
      IL_0007:  ldc.i4     0x30d40
      IL_000c:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<string>::.ctor(int32)
      IL_0011:  stfld      class [mscorlib]System.Collections.Generic.List`1<string> SpellChecker.Window1::_words
//000047:                     using (StreamReader reader = new StreamReader(ofd.FileName))
      IL_0016:  ldarg.0
      IL_0017:  ldfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/'<>c__DisplayClass4'::ofd
      IL_001c:  callvirt   instance string [PresentationFramework]Microsoft.Win32.FileDialog::get_FileName()
      IL_0021:  newobj     instance void [mscorlib]System.IO.StreamReader::.ctor(string)
      IL_0026:  stloc.0
//000048:                     {
      .try
      {
        IL_0027:  nop
//000049:                         string line;
//000050:                         while ((line = reader.ReadLine()) != null)
//000051:                         {
//000052:                             string word = line.Trim().ToLower();
//000053:                             if (!String.IsNullOrEmpty(word))
//000054:                             {
//000055:                                 _words.Add(word);
//000056:                                 if (word.Length > _maxWordLength) _maxWordLength = word.Length;
//000057:                             }
//000058:                         }
//000059:                     }
//000060: 
//000061:                     // When we're done, enable the UI
//000062:                 }).ContinueWith(t =>
//000063:                 {
//000064:                     txtInput.IsEnabled = true;
//000065:                     chkParallel.IsEnabled = true;
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
        IL_0028:  br.s       IL_0081

//000051:                         {
        IL_002a:  nop
//000052:                             string word = line.Trim().ToLower();
        IL_002b:  ldloc.1
        IL_002c:  callvirt   instance string [mscorlib]System.String::Trim()
        IL_0031:  callvirt   instance string [mscorlib]System.String::ToLower()
        IL_0036:  stloc.2
//000053:                             if (!String.IsNullOrEmpty(word))
        IL_0037:  ldloc.2
        IL_0038:  call       bool [mscorlib]System.String::IsNullOrEmpty(string)
        IL_003d:  stloc.3
//000054:                             {
//000055:                                 _words.Add(word);
//000056:                                 if (word.Length > _maxWordLength) _maxWordLength = word.Length;
//000057:                             }
//000058:                         }
//000059:                     }
//000060: 
//000061:                     // When we're done, enable the UI
//000062:                 }).ContinueWith(t =>
//000063:                 {
//000064:                     txtInput.IsEnabled = true;
//000065:                     chkParallel.IsEnabled = true;
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
        IL_003e:  ldloc.3
        IL_003f:  brtrue.s   IL_0080

//000054:                             {
        IL_0041:  nop
//000055:                                 _words.Add(word);
        IL_0042:  ldarg.0
        IL_0043:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass4'::'<>4__this'
        IL_0048:  ldfld      class [mscorlib]System.Collections.Generic.List`1<string> SpellChecker.Window1::_words
        IL_004d:  ldloc.2
        IL_004e:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<string>::Add(!0)
        IL_0053:  nop
//000056:                                 if (word.Length > _maxWordLength) _maxWordLength = word.Length;
        IL_0054:  ldloc.2
        IL_0055:  callvirt   instance int32 [mscorlib]System.String::get_Length()
        IL_005a:  ldarg.0
        IL_005b:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass4'::'<>4__this'
        IL_0060:  ldfld      int32 SpellChecker.Window1::_maxWordLength
        IL_0065:  cgt
        IL_0067:  ldc.i4.0
        IL_0068:  ceq
        IL_006a:  stloc.3
//000057:                             }
//000058:                         }
//000059:                     }
//000060: 
//000061:                     // When we're done, enable the UI
//000062:                 }).ContinueWith(t =>
//000063:                 {
//000064:                     txtInput.IsEnabled = true;
//000065:                     chkParallel.IsEnabled = true;
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
        IL_006b:  ldloc.3
        IL_006c:  brtrue.s   IL_007f

//000056:                                 if (word.Length > _maxWordLength) _maxWordLength = word.Length;
        IL_006e:  ldarg.0
        IL_006f:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass4'::'<>4__this'
        IL_0074:  ldloc.2
        IL_0075:  callvirt   instance int32 [mscorlib]System.String::get_Length()
        IL_007a:  stfld      int32 SpellChecker.Window1::_maxWordLength
//000057:                             }
        IL_007f:  nop
//000058:                         }
        IL_0080:  nop
//000050:                         while ((line = reader.ReadLine()) != null)
        IL_0081:  ldloc.0
        IL_0082:  callvirt   instance string [mscorlib]System.IO.TextReader::ReadLine()
        IL_0087:  dup
        IL_0088:  stloc.1
        IL_0089:  ldnull
        IL_008a:  ceq
        IL_008c:  ldc.i4.0
        IL_008d:  ceq
        IL_008f:  stloc.3
//000051:                         {
//000052:                             string word = line.Trim().ToLower();
//000053:                             if (!String.IsNullOrEmpty(word))
//000054:                             {
//000055:                                 _words.Add(word);
//000056:                                 if (word.Length > _maxWordLength) _maxWordLength = word.Length;
//000057:                             }
//000058:                         }
//000059:                     }
//000060: 
//000061:                     // When we're done, enable the UI
//000062:                 }).ContinueWith(t =>
//000063:                 {
//000064:                     txtInput.IsEnabled = true;
//000065:                     chkParallel.IsEnabled = true;
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
        IL_0090:  ldloc.3
        IL_0091:  brtrue.s   IL_002a

//000059:                     }
        IL_0093:  nop
//000060: 
//000061:                     // When we're done, enable the UI
//000062:                 }).ContinueWith(t =>
//000063:                 {
//000064:                     txtInput.IsEnabled = true;
//000065:                     chkParallel.IsEnabled = true;
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
        IL_0094:  leave.s    IL_00a6

      }  // end .try
      finally
      {
        IL_0096:  ldloc.0
        IL_0097:  ldnull
        IL_0098:  ceq
        IL_009a:  stloc.3
        IL_009b:  ldloc.3
        IL_009c:  brtrue.s   IL_00a5

        IL_009e:  ldloc.0
        IL_009f:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
        IL_00a4:  nop
        IL_00a5:  endfinally
      }  // end handler
      IL_00a6:  nop
      IL_00a7:  ret
    } // end of method '<>c__DisplayClass4'::'<btnLoad_Click>b__1'

  } // end of class '<>c__DisplayClass4'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass10'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass18'
           extends [mscorlib]System.Object
    {
      .field public class SpellChecker.Window1/'<>c__DisplayClass10' 'CS$<>8__locals11'
      .field public int32[0...,0...] distanceMatrix
      .method public hidebysig specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        // Code size       7 (0x7)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ret
      } // end of method '<>c__DisplayClass18'::.ctor

      .method public hidebysig instance class '<>f__AnonymousType0`2'<string,int32> 
              '<MakeSuggestions>b__9'(string word) cil managed
      {
        // Code size       34 (0x22)
        .maxstack  4
        .locals init ([0] class '<>f__AnonymousType0`2'<string,int32> CS$1$0000)
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
        IL_0000:  ldarg.1
        IL_0001:  ldarg.1
        IL_0002:  ldarg.0
        IL_0003:  ldfld      class SpellChecker.Window1/'<>c__DisplayClass10' SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass18'::'CS$<>8__locals11'
        IL_0008:  ldfld      string SpellChecker.Window1/'<>c__DisplayClass10'::text
        IL_000d:  ldarg.0
        IL_000e:  ldfld      int32[0...,0...] SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass18'::distanceMatrix
        IL_0013:  call       int32 SpellChecker.Window1::LevenshteinDistance(string,
                                                                             string,
                                                                             int32[0...,0...])
        IL_0018:  newobj     instance void class '<>f__AnonymousType0`2'<string,int32>::.ctor(!0,
                                                                                              !1)
        IL_001d:  stloc.0
        IL_001e:  br.s       IL_0020

//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
        IL_0020:  ldloc.0
        IL_0021:  ret
      } // end of method '<>c__DisplayClass18'::'<MakeSuggestions>b__9'

    } // end of class '<>c__DisplayClass18'

    .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass1b'
           extends [mscorlib]System.Object
    {
      .field public class SpellChecker.Window1/'<>c__DisplayClass10' 'CS$<>8__locals11'
      .field public class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> distanceMatrix
      .method public hidebysig specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        // Code size       7 (0x7)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ret
      } // end of method '<>c__DisplayClass1b'::.ctor

      .method public hidebysig instance class '<>f__AnonymousType0`2'<string,int32> 
              '<MakeSuggestions>b__d'(string word) cil managed
      {
        // Code size       39 (0x27)
        .maxstack  4
        .locals init ([0] class '<>f__AnonymousType0`2'<string,int32> CS$1$0000)
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
        IL_0000:  ldarg.1
        IL_0001:  ldarg.1
        IL_0002:  ldarg.0
        IL_0003:  ldfld      class SpellChecker.Window1/'<>c__DisplayClass10' SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b'::'CS$<>8__locals11'
        IL_0008:  ldfld      string SpellChecker.Window1/'<>c__DisplayClass10'::text
        IL_000d:  ldarg.0
        IL_000e:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b'::distanceMatrix
        IL_0013:  callvirt   instance !0 class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]>::get_Value()
        IL_0018:  call       int32 SpellChecker.Window1::LevenshteinDistance(string,
                                                                             string,
                                                                             int32[0...,0...])
        IL_001d:  newobj     instance void class '<>f__AnonymousType0`2'<string,int32>::.ctor(!0,
                                                                                              !1)
        IL_0022:  stloc.0
        IL_0023:  br.s       IL_0025

//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
        IL_0025:  ldloc.0
        IL_0026:  ret
      } // end of method '<>c__DisplayClass1b'::'<MakeSuggestions>b__d'

    } // end of class '<>c__DisplayClass1b'

    .field public bool 'sequential'
    .field public string text
    .field public valuetype [mscorlib]System.Threading.CancellationToken token
    .field public class [System]System.Diagnostics.Stopwatch sw
    .field public class SpellChecker.Window1 '<>4__this'
    .field private static class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32> 'CS$<>9__CachedAnonymousMethodDelegate13'
    .field private static class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string> 'CS$<>9__CachedAnonymousMethodDelegate14'
    .field private static class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32> 'CS$<>9__CachedAnonymousMethodDelegate16'
    .field private static class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string> 'CS$<>9__CachedAnonymousMethodDelegate17'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass10'::.ctor

    .method public hidebysig instance class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan> 
            '<MakeSuggestions>b__8'() cil managed
    {
      // Code size       444 (0x1bc)
      .maxstack  4
      .locals init ([0] class [mscorlib]System.Collections.Generic.List`1<string> results,
               [1] class SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass18' 'CS$<>8__locals19',
               [2] class [mscorlib]System.Func`2<string,class '<>f__AnonymousType0`2'<string,int32>> 'CS$<>9__CachedAnonymousMethodDelegate1a',
               [3] class SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b' 'CS$<>8__locals1c',
               [4] class [mscorlib]System.Func`1<int32[0...,0...]> 'CS$<>9__CachedAnonymousMethodDelegate15',
               [5] class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan> CS$1$0000,
               [6] bool CS$4$0001)
      IL_0000:  ldnull
      IL_0001:  stloc.s    'CS$<>9__CachedAnonymousMethodDelegate15'
//000104:             {
      IL_0003:  nop
//000105:                 List<string> results = null;
      IL_0004:  ldnull
      IL_0005:  stloc.0
//000106:                 if (sequential)
      IL_0006:  ldarg.0
      IL_0007:  ldfld      bool SpellChecker.Window1/'<>c__DisplayClass10'::'sequential'
      IL_000c:  ldc.i4.0
      IL_000d:  ceq
      IL_000f:  stloc.s    CS$4$0001
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_0011:  ldloc.s    CS$4$0001
      IL_0013:  brtrue     IL_00c2

      IL_0018:  newobj     instance void SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass18'::.ctor()
      IL_001d:  stloc.1
      IL_001e:  ldloc.1
      IL_001f:  ldarg.0
      IL_0020:  stfld      class SpellChecker.Window1/'<>c__DisplayClass10' SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass18'::'CS$<>8__locals11'
//000107:                 {
      IL_0025:  nop
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
      IL_0026:  ldloc.1
      IL_0027:  ldarg.0
      IL_0028:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass10'::'<>4__this'
      IL_002d:  ldfld      int32 SpellChecker.Window1::_maxWordLength
      IL_0032:  ldc.i4.1
      IL_0033:  add
      IL_0034:  ldarg.0
      IL_0035:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass10'::'<>4__this'
      IL_003a:  ldfld      int32 SpellChecker.Window1::_maxWordLength
      IL_003f:  ldc.i4.1
      IL_0040:  add
      IL_0041:  newobj     instance void int32[0...,0...]::.ctor(int32,
                                                                 int32)
      IL_0046:  stfld      int32[0...,0...] SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass18'::distanceMatrix
//000109:                     results = _words
      IL_004b:  ldarg.0
      IL_004c:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass10'::'<>4__this'
      IL_0051:  ldfld      class [mscorlib]System.Collections.Generic.List`1<string> SpellChecker.Window1::_words
      IL_0056:  ldloc.1
      IL_0057:  ldftn      instance class '<>f__AnonymousType0`2'<string,int32> SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass18'::'<MakeSuggestions>b__9'(string)
      IL_005d:  newobj     instance void class [mscorlib]System.Func`2<string,class '<>f__AnonymousType0`2'<string,int32>>::.ctor(object,
                                                                                                                                  native int)
      IL_0062:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<string,class '<>f__AnonymousType0`2'<string,int32>>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                         class [mscorlib]System.Func`2<!!0,!!1>)
      IL_0067:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate13'
      IL_006c:  brtrue.s   IL_0081

      IL_006e:  ldnull
      IL_006f:  ldftn      int32 SpellChecker.Window1/'<>c__DisplayClass10'::'<MakeSuggestions>b__a'(class '<>f__AnonymousType0`2'<string,int32>)
      IL_0075:  newobj     instance void class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32>::.ctor(object,
                                                                                                                                 native int)
      IL_007a:  stsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate13'
      IL_007f:  br.s       IL_0081

      IL_0081:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate13'
      IL_0086:  call       class [System.Core]System.Linq.IOrderedEnumerable`1<!!0> [System.Core]System.Linq.Enumerable::OrderBy<class '<>f__AnonymousType0`2'<string,int32>,int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                    class [mscorlib]System.Func`2<!!0,!!1>)
      IL_008b:  ldc.i4.s   25
      IL_008d:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0> [System.Core]System.Linq.Enumerable::Take<class '<>f__AnonymousType0`2'<string,int32>>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                int32)
      IL_0092:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate14'
      IL_0097:  brtrue.s   IL_00ac

      IL_0099:  ldnull
      IL_009a:  ldftn      string SpellChecker.Window1/'<>c__DisplayClass10'::'<MakeSuggestions>b__b'(class '<>f__AnonymousType0`2'<string,int32>)
      IL_00a0:  newobj     instance void class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string>::.ctor(object,
                                                                                                                                  native int)
      IL_00a5:  stsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate14'
      IL_00aa:  br.s       IL_00ac

      IL_00ac:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate14'
      IL_00b1:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<class '<>f__AnonymousType0`2'<string,int32>,string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                         class [mscorlib]System.Func`2<!!0,!!1>)
      IL_00b6:  call       class [mscorlib]System.Collections.Generic.List`1<!!0> [System.Core]System.Linq.Enumerable::ToList<string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
      IL_00bb:  stloc.0
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
      IL_00bc:  nop
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_00bd:  br         IL_0198

//000117:                 {
      IL_00c2:  nop
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_00c3:  ldnull
      IL_00c4:  stloc.2
      IL_00c5:  newobj     instance void SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b'::.ctor()
      IL_00ca:  stloc.3
      IL_00cb:  ldloc.3
      IL_00cc:  ldarg.0
      IL_00cd:  stfld      class SpellChecker.Window1/'<>c__DisplayClass10' SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b'::'CS$<>8__locals11'
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
      IL_00d2:  ldloc.3
      IL_00d3:  ldloc.s    'CS$<>9__CachedAnonymousMethodDelegate15'
      IL_00d5:  brtrue.s   IL_00e7

      IL_00d7:  ldarg.0
      IL_00d8:  ldftn      instance int32[0...,0...] SpellChecker.Window1/'<>c__DisplayClass10'::'<MakeSuggestions>b__c'()
      IL_00de:  newobj     instance void class [mscorlib]System.Func`1<int32[0...,0...]>::.ctor(object,
                                                                                                native int)
      IL_00e3:  stloc.s    'CS$<>9__CachedAnonymousMethodDelegate15'
      IL_00e5:  br.s       IL_00e7

      IL_00e7:  ldloc.s    'CS$<>9__CachedAnonymousMethodDelegate15'
      IL_00e9:  newobj     instance void class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]>::.ctor(class [mscorlib]System.Func`1<!0>)
      IL_00ee:  stfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b'::distanceMatrix
//000119:                     {
      .try
      {
        IL_00f3:  nop
//000120:                         results = _words
        IL_00f4:  ldarg.0
        IL_00f5:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass10'::'<>4__this'
        IL_00fa:  ldfld      class [mscorlib]System.Collections.Generic.List`1<string> SpellChecker.Window1::_words
        IL_00ff:  call       class [System.Core]System.Linq.ParallelQuery`1<!!0> [System.Core]System.Linq.ParallelEnumerable::AsParallel<string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
        IL_0104:  ldarg.0
        IL_0105:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken SpellChecker.Window1/'<>c__DisplayClass10'::token
        IL_010a:  call       class [System.Core]System.Linq.ParallelQuery`1<!!0> [System.Core]System.Linq.ParallelEnumerable::WithCancellation<string>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                       valuetype [mscorlib]System.Threading.CancellationToken)
        IL_010f:  ldloc.2
        IL_0110:  brtrue.s   IL_0121

        IL_0112:  ldloc.3
        IL_0113:  ldftn      instance class '<>f__AnonymousType0`2'<string,int32> SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b'::'<MakeSuggestions>b__d'(string)
        IL_0119:  newobj     instance void class [mscorlib]System.Func`2<string,class '<>f__AnonymousType0`2'<string,int32>>::.ctor(object,
                                                                                                                                    native int)
        IL_011e:  stloc.2
        IL_011f:  br.s       IL_0121

        IL_0121:  ldloc.2
        IL_0122:  call       class [System.Core]System.Linq.ParallelQuery`1<!!1> [System.Core]System.Linq.ParallelEnumerable::Select<string,class '<>f__AnonymousType0`2'<string,int32>>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                                                         class [mscorlib]System.Func`2<!!0,!!1>)
        IL_0127:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate16'
        IL_012c:  brtrue.s   IL_0141

        IL_012e:  ldnull
        IL_012f:  ldftn      int32 SpellChecker.Window1/'<>c__DisplayClass10'::'<MakeSuggestions>b__e'(class '<>f__AnonymousType0`2'<string,int32>)
        IL_0135:  newobj     instance void class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32>::.ctor(object,
                                                                                                                                   native int)
        IL_013a:  stsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate16'
        IL_013f:  br.s       IL_0141

        IL_0141:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,int32> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate16'
        IL_0146:  ldc.i4.s   25
        IL_0148:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0> [ParallelExtensionsExtras]System.Linq.ParallelLinqExtensions::TakeTop<class '<>f__AnonymousType0`2'<string,int32>,int32>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                                                                                    class [mscorlib]System.Func`2<!!0,!!1>,
                                                                                                                                                                                                                    int32)
        IL_014d:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate17'
        IL_0152:  brtrue.s   IL_0167

        IL_0154:  ldnull
        IL_0155:  ldftn      string SpellChecker.Window1/'<>c__DisplayClass10'::'<MakeSuggestions>b__f'(class '<>f__AnonymousType0`2'<string,int32>)
        IL_015b:  newobj     instance void class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string>::.ctor(object,
                                                                                                                                    native int)
        IL_0160:  stsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate17'
        IL_0165:  br.s       IL_0167

        IL_0167:  ldsfld     class [mscorlib]System.Func`2<class '<>f__AnonymousType0`2'<string,int32>,string> SpellChecker.Window1/'<>c__DisplayClass10'::'CS$<>9__CachedAnonymousMethodDelegate17'
        IL_016c:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<class '<>f__AnonymousType0`2'<string,int32>,string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                           class [mscorlib]System.Func`2<!!0,!!1>)
        IL_0171:  call       class [mscorlib]System.Collections.Generic.List`1<!!0> [System.Core]System.Linq.Enumerable::ToList<string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
        IL_0176:  stloc.0
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
        IL_0177:  nop
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
        IL_0178:  leave.s    IL_0196

      }  // end .try
      finally
      {
        IL_017a:  ldloc.3
        IL_017b:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b'::distanceMatrix
        IL_0180:  ldnull
        IL_0181:  ceq
        IL_0183:  stloc.s    CS$4$0001
        IL_0185:  ldloc.s    CS$4$0001
        IL_0187:  brtrue.s   IL_0195

        IL_0189:  ldloc.3
        IL_018a:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/'<>c__DisplayClass10'/'<>c__DisplayClass1b'::distanceMatrix
        IL_018f:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
        IL_0194:  nop
        IL_0195:  endfinally
      }  // end handler
      IL_0196:  nop
//000127:                 }
      IL_0197:  nop
//000128:                 sw.Stop();
      IL_0198:  ldarg.0
      IL_0199:  ldfld      class [System]System.Diagnostics.Stopwatch SpellChecker.Window1/'<>c__DisplayClass10'::sw
      IL_019e:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Stop()
      IL_01a3:  nop
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
      IL_01a4:  ldloc.0
      IL_01a5:  ldarg.0
      IL_01a6:  ldfld      class [System]System.Diagnostics.Stopwatch SpellChecker.Window1/'<>c__DisplayClass10'::sw
      IL_01ab:  callvirt   instance valuetype [mscorlib]System.TimeSpan [System]System.Diagnostics.Stopwatch::get_Elapsed()
      IL_01b0:  newobj     instance void class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>::.ctor(!0,
                                                                                                                                                                             !1)
      IL_01b5:  stloc.s    CS$1$0000
      IL_01b7:  br.s       IL_01b9

//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_01b9:  ldloc.s    CS$1$0000
      IL_01bb:  ret
    } // end of method '<>c__DisplayClass10'::'<MakeSuggestions>b__8'

    .method private hidebysig static int32 
            '<MakeSuggestions>b__a'(class '<>f__AnonymousType0`2'<string,int32> p) cil managed
    {
      // Code size       11 (0xb)
      .maxstack  1
      .locals init ([0] int32 CS$1$0000)
//000111:                         .OrderBy(p => p.Distance)
      IL_0000:  ldarg.0
      IL_0001:  callvirt   instance !1 class '<>f__AnonymousType0`2'<string,int32>::get_Distance()
      IL_0006:  stloc.0
      IL_0007:  br.s       IL_0009

//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_0009:  ldloc.0
      IL_000a:  ret
    } // end of method '<>c__DisplayClass10'::'<MakeSuggestions>b__a'

    .method private hidebysig static string 
            '<MakeSuggestions>b__b'(class '<>f__AnonymousType0`2'<string,int32> p) cil managed
    {
      // Code size       11 (0xb)
      .maxstack  1
      .locals init ([0] string CS$1$0000)
//000113:                         .Select(p => p.Word)
      IL_0000:  ldarg.0
      IL_0001:  callvirt   instance !0 class '<>f__AnonymousType0`2'<string,int32>::get_Word()
      IL_0006:  stloc.0
      IL_0007:  br.s       IL_0009

//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_0009:  ldloc.0
      IL_000a:  ret
    } // end of method '<>c__DisplayClass10'::'<MakeSuggestions>b__b'

    .method private hidebysig instance int32[0...,0...] 
            '<MakeSuggestions>b__c'() cil managed
    {
      // Code size       36 (0x24)
      .maxstack  3
      .locals init ([0] int32[0...,0...] CS$1$0000)
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass10'::'<>4__this'
      IL_0006:  ldfld      int32 SpellChecker.Window1::_maxWordLength
      IL_000b:  ldc.i4.1
      IL_000c:  add
      IL_000d:  ldarg.0
      IL_000e:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass10'::'<>4__this'
      IL_0013:  ldfld      int32 SpellChecker.Window1::_maxWordLength
      IL_0018:  ldc.i4.1
      IL_0019:  add
      IL_001a:  newobj     instance void int32[0...,0...]::.ctor(int32,
                                                                 int32)
      IL_001f:  stloc.0
      IL_0020:  br.s       IL_0022

//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_0022:  ldloc.0
      IL_0023:  ret
    } // end of method '<>c__DisplayClass10'::'<MakeSuggestions>b__c'

    .method private hidebysig static int32 
            '<MakeSuggestions>b__e'(class '<>f__AnonymousType0`2'<string,int32> p) cil managed
    {
      // Code size       11 (0xb)
      .maxstack  1
      .locals init ([0] int32 CS$1$0000)
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
      IL_0000:  ldarg.0
      IL_0001:  callvirt   instance !1 class '<>f__AnonymousType0`2'<string,int32>::get_Distance()
      IL_0006:  stloc.0
      IL_0007:  br.s       IL_0009

//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_0009:  ldloc.0
      IL_000a:  ret
    } // end of method '<>c__DisplayClass10'::'<MakeSuggestions>b__e'

    .method private hidebysig static string 
            '<MakeSuggestions>b__f'(class '<>f__AnonymousType0`2'<string,int32> p) cil managed
    {
      // Code size       11 (0xb)
      .maxstack  1
      .locals init ([0] string CS$1$0000)
//000124:                             .Select(p => p.Word)
      IL_0000:  ldarg.0
      IL_0001:  callvirt   instance !0 class '<>f__AnonymousType0`2'<string,int32>::get_Word()
      IL_0006:  stloc.0
      IL_0007:  br.s       IL_0009

//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
      IL_0009:  ldloc.0
      IL_000a:  ret
    } // end of method '<>c__DisplayClass10'::'<MakeSuggestions>b__f'

  } // end of class '<>c__DisplayClass10'

  .field private class [mscorlib]System.Collections.Generic.List`1<string> _words
  .field private int32 _maxWordLength
  .field private class [mscorlib]System.Threading.CancellationTokenSource _cancellation
  .field assembly class [PresentationFramework]System.Windows.Controls.ListBox listBox1
  .field assembly class [PresentationFramework]System.Windows.Controls.TextBox txtInput
  .field assembly class [PresentationFramework]System.Windows.Controls.Label lblTime
  .field assembly class [PresentationFramework]System.Windows.Controls.CheckBox chkParallel
  .field assembly class [PresentationFramework]System.Windows.Controls.Button btnLoad
  .field private bool _contentLoaded
  .field private static class [mscorlib]System.Func`3<string,int32,string> 'CS$<>9__CachedAnonymousMethodDelegate12'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       17 (0x11)
    .maxstack  8
//000029:         public Window1() { InitializeComponent(); }
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationFramework]System.Windows.Window::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ldarg.0
    IL_0009:  call       instance void SpellChecker.Window1::InitializeComponent()
    IL_000e:  nop
    IL_000f:  nop
    IL_0010:  ret
  } // end of method Window1::.ctor

  .method private hidebysig instance void 
          btnLoad_Click(object sender,
                        class [PresentationCore]System.Windows.RoutedEventArgs e) cil managed
  {
    // Code size       185 (0xb9)
    .maxstack  4
    .locals init ([0] class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task> 'CS$<>9__CachedAnonymousMethodDelegate2',
             [1] class [mscorlib]System.Action 'CS$<>9__CachedAnonymousMethodDelegate3',
             [2] class SpellChecker.Window1/'<>c__DisplayClass4' 'CS$<>8__locals5',
             [3] valuetype [mscorlib]System.Nullable`1<bool> CS$0$0000,
             [4] bool CS$4$0001)
//000030: 
//000031:         private void btnLoad_Click(object sender, RoutedEventArgs e)
//000032:         {
//000033:             listBox1.ItemsSource = null;
//000034:             txtInput.IsEnabled = false;
//000035:             chkParallel.IsEnabled = false;
//000036: 
//000037:             // Ask the user for a file containing a word list, one word per line
//000038:             OpenFileDialog ofd = new OpenFileDialog();
//000039:             ofd.Multiselect = false;
//000040:             if (ofd.ShowDialog(this) == true)
//000041:             {
//000042:                 // If a file was provided, try to load it
//000043:                 Task.Factory.StartNew(() =>
//000044:                 {
//000045:                     // Read in all of the words
//000046:                     _words = new List<string>(200000);
//000047:                     using (StreamReader reader = new StreamReader(ofd.FileName))
//000048:                     {
//000049:                         string line;
//000050:                         while ((line = reader.ReadLine()) != null)
//000051:                         {
//000052:                             string word = line.Trim().ToLower();
//000053:                             if (!String.IsNullOrEmpty(word))
//000054:                             {
//000055:                                 _words.Add(word);
//000056:                                 if (word.Length > _maxWordLength) _maxWordLength = word.Length;
//000057:                             }
//000058:                         }
//000059:                     }
//000060: 
//000061:                     // When we're done, enable the UI
//000062:                 }).ContinueWith(t =>
//000063:                 {
//000064:                     txtInput.IsEnabled = true;
//000065:                     chkParallel.IsEnabled = true;
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0000:  ldnull
    IL_0001:  stloc.0
    IL_0002:  ldnull
    IL_0003:  stloc.1
    IL_0004:  newobj     instance void SpellChecker.Window1/'<>c__DisplayClass4'::.ctor()
    IL_0009:  stloc.2
    IL_000a:  ldloc.2
    IL_000b:  ldarg.0
    IL_000c:  stfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass4'::'<>4__this'
//000032:         {
    IL_0011:  nop
//000033:             listBox1.ItemsSource = null;
    IL_0012:  ldarg.0
    IL_0013:  ldfld      class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::listBox1
    IL_0018:  ldnull
    IL_0019:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ItemsControl::set_ItemsSource(class [mscorlib]System.Collections.IEnumerable)
    IL_001e:  nop
//000034:             txtInput.IsEnabled = false;
    IL_001f:  ldarg.0
    IL_0020:  ldfld      class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::txtInput
    IL_0025:  ldc.i4.0
    IL_0026:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_002b:  nop
//000035:             chkParallel.IsEnabled = false;
    IL_002c:  ldarg.0
    IL_002d:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::chkParallel
    IL_0032:  ldc.i4.0
    IL_0033:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_0038:  nop
//000036: 
//000037:             // Ask the user for a file containing a word list, one word per line
//000038:             OpenFileDialog ofd = new OpenFileDialog();
    IL_0039:  ldloc.2
    IL_003a:  newobj     instance void [PresentationFramework]Microsoft.Win32.OpenFileDialog::.ctor()
    IL_003f:  stfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/'<>c__DisplayClass4'::ofd
//000039:             ofd.Multiselect = false;
    IL_0044:  ldloc.2
    IL_0045:  ldfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/'<>c__DisplayClass4'::ofd
    IL_004a:  ldc.i4.0
    IL_004b:  callvirt   instance void [PresentationFramework]Microsoft.Win32.OpenFileDialog::set_Multiselect(bool)
    IL_0050:  nop
//000040:             if (ofd.ShowDialog(this) == true)
    IL_0051:  ldloc.2
    IL_0052:  ldfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/'<>c__DisplayClass4'::ofd
    IL_0057:  ldarg.0
    IL_0058:  callvirt   instance valuetype [mscorlib]System.Nullable`1<bool> [PresentationFramework]Microsoft.Win32.CommonDialog::ShowDialog(class [PresentationFramework]System.Windows.Window)
    IL_005d:  stloc.3
    IL_005e:  ldloca.s   CS$0$0000
    IL_0060:  call       instance !0 valuetype [mscorlib]System.Nullable`1<bool>::GetValueOrDefault()
    IL_0065:  brfalse.s  IL_0070

    IL_0067:  ldloca.s   CS$0$0000
    IL_0069:  call       instance bool valuetype [mscorlib]System.Nullable`1<bool>::get_HasValue()
    IL_006e:  br.s       IL_0071

    IL_0070:  ldc.i4.0
    IL_0071:  ldc.i4.0
    IL_0072:  ceq
    IL_0074:  stloc.s    CS$4$0001
//000041:             {
//000042:                 // If a file was provided, try to load it
//000043:                 Task.Factory.StartNew(() =>
//000044:                 {
//000045:                     // Read in all of the words
//000046:                     _words = new List<string>(200000);
//000047:                     using (StreamReader reader = new StreamReader(ofd.FileName))
//000048:                     {
//000049:                         string line;
//000050:                         while ((line = reader.ReadLine()) != null)
//000051:                         {
//000052:                             string word = line.Trim().ToLower();
//000053:                             if (!String.IsNullOrEmpty(word))
//000054:                             {
//000055:                                 _words.Add(word);
//000056:                                 if (word.Length > _maxWordLength) _maxWordLength = word.Length;
//000057:                             }
//000058:                         }
//000059:                     }
//000060: 
//000061:                     // When we're done, enable the UI
//000062:                 }).ContinueWith(t =>
//000063:                 {
//000064:                     txtInput.IsEnabled = true;
//000065:                     chkParallel.IsEnabled = true;
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0076:  ldloc.s    CS$4$0001
    IL_0078:  brtrue.s   IL_00b7

//000041:             {
    IL_007a:  nop
//000042:                 // If a file was provided, try to load it
//000043:                 Task.Factory.StartNew(() =>
    IL_007b:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0080:  ldloc.1
    IL_0081:  brtrue.s   IL_0092

    IL_0083:  ldloc.2
    IL_0084:  ldftn      instance void SpellChecker.Window1/'<>c__DisplayClass4'::'<btnLoad_Click>b__1'()
    IL_008a:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_008f:  stloc.1
    IL_0090:  br.s       IL_0092

    IL_0092:  ldloc.1
    IL_0093:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_0098:  ldloc.0
    IL_0099:  brtrue.s   IL_00aa

    IL_009b:  ldarg.0
    IL_009c:  ldftn      instance void SpellChecker.Window1::'<btnLoad_Click>b__0'(class [mscorlib]System.Threading.Tasks.Task)
    IL_00a2:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>::.ctor(object,
                                                                                                                           native int)
    IL_00a7:  stloc.0
    IL_00a8:  br.s       IL_00aa

    IL_00aa:  ldloc.0
    IL_00ab:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_00b0:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>,
                                                                                                                                  class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_00b5:  pop
//000044:                 {
//000045:                     // Read in all of the words
//000046:                     _words = new List<string>(200000);
//000047:                     using (StreamReader reader = new StreamReader(ofd.FileName))
//000048:                     {
//000049:                         string line;
//000050:                         while ((line = reader.ReadLine()) != null)
//000051:                         {
//000052:                             string word = line.Trim().ToLower();
//000053:                             if (!String.IsNullOrEmpty(word))
//000054:                             {
//000055:                                 _words.Add(word);
//000056:                                 if (word.Length > _maxWordLength) _maxWordLength = word.Length;
//000057:                             }
//000058:                         }
//000059:                     }
//000060: 
//000061:                     // When we're done, enable the UI
//000062:                 }).ContinueWith(t =>
//000063:                 {
//000064:                     txtInput.IsEnabled = true;
//000065:                     chkParallel.IsEnabled = true;
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
    IL_00b6:  nop
//000070: 
//000071:         }
    IL_00b7:  nop
    IL_00b8:  ret
  } // end of method Window1::btnLoad_Click

  .method private hidebysig instance void 
          txtInput_TextChanged(object sender,
                               class [PresentationFramework]System.Windows.Controls.TextChangedEventArgs e) cil managed
  {
    // Code size       9 (0x9)
    .maxstack  8
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void SpellChecker.Window1::MakeSuggestions()
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Window1::txtInput_TextChanged

  .method private hidebysig instance void 
          chkParallel_CheckedChanged(object sender,
                                     class [PresentationCore]System.Windows.RoutedEventArgs e) cil managed
  {
    // Code size       9 (0x9)
    .maxstack  8
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void SpellChecker.Window1::MakeSuggestions()
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Window1::chkParallel_CheckedChanged

  .method private hidebysig instance void 
          MakeSuggestions() cil managed
  {
    // Code size       244 (0xf4)
    .maxstack  5
    .locals init ([0] class SpellChecker.Window1/'<>c__DisplayClass10' 'CS$<>8__locals11',
             [1] valuetype [mscorlib]System.Nullable`1<bool> CS$0$0000,
             [2] bool CS$4$0001)
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0000:  newobj     instance void SpellChecker.Window1/'<>c__DisplayClass10'::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldarg.0
    IL_0008:  stfld      class SpellChecker.Window1 SpellChecker.Window1/'<>c__DisplayClass10'::'<>4__this'
//000081:         {
    IL_000d:  nop
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
    IL_000e:  ldloc.0
    IL_000f:  ldarg.0
    IL_0010:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::chkParallel
    IL_0015:  callvirt   instance valuetype [mscorlib]System.Nullable`1<bool> [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::get_IsChecked()
    IL_001a:  stloc.1
    IL_001b:  ldloca.s   CS$0$0000
    IL_001d:  call       instance bool valuetype [mscorlib]System.Nullable`1<bool>::get_HasValue()
    IL_0022:  brfalse.s  IL_003c

    IL_0024:  ldarg.0
    IL_0025:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::chkParallel
    IL_002a:  callvirt   instance valuetype [mscorlib]System.Nullable`1<bool> [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::get_IsChecked()
    IL_002f:  stloc.1
    IL_0030:  ldloca.s   CS$0$0000
    IL_0032:  call       instance !0 valuetype [mscorlib]System.Nullable`1<bool>::get_Value()
    IL_0037:  ldc.i4.0
    IL_0038:  ceq
    IL_003a:  br.s       IL_003d

    IL_003c:  ldc.i4.1
    IL_003d:  stfld      bool SpellChecker.Window1/'<>c__DisplayClass10'::'sequential'
//000087:             string text = txtInput.Text;
    IL_0042:  ldloc.0
    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::txtInput
    IL_0049:  callvirt   instance string [PresentationFramework]System.Windows.Controls.TextBox::get_Text()
    IL_004e:  stfld      string SpellChecker.Window1/'<>c__DisplayClass10'::text
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
    IL_0053:  ldloc.0
    IL_0054:  ldfld      string SpellChecker.Window1/'<>c__DisplayClass10'::text
    IL_0059:  call       bool [mscorlib]System.String::IsNullOrEmpty(string)
    IL_005e:  ldc.i4.0
    IL_005f:  ceq
    IL_0061:  stloc.2
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0062:  ldloc.2
    IL_0063:  brtrue.s   IL_0075

//000091:             {
    IL_0065:  nop
//000092:                 listBox1.ItemsSource = null;
    IL_0066:  ldarg.0
    IL_0067:  ldfld      class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::listBox1
    IL_006c:  ldnull
    IL_006d:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ItemsControl::set_ItemsSource(class [mscorlib]System.Collections.IEnumerable)
    IL_0072:  nop
//000093:                 return;
    IL_0073:  br.s       IL_00f3

//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
    IL_0075:  ldarg.0
    IL_0076:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource SpellChecker.Window1::_cancellation
    IL_007b:  ldnull
    IL_007c:  ceq
    IL_007e:  stloc.2
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_007f:  ldloc.2
    IL_0080:  brtrue.s   IL_008e

//000097:             if (_cancellation != null) _cancellation.Cancel();
    IL_0082:  ldarg.0
    IL_0083:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource SpellChecker.Window1::_cancellation
    IL_0088:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_008d:  nop
//000098:             _cancellation = new CancellationTokenSource();
    IL_008e:  ldarg.0
    IL_008f:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_0094:  stfld      class [mscorlib]System.Threading.CancellationTokenSource SpellChecker.Window1::_cancellation
//000099:             var token = _cancellation.Token;
    IL_0099:  ldloc.0
    IL_009a:  ldarg.0
    IL_009b:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource SpellChecker.Window1::_cancellation
    IL_00a0:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_00a5:  stfld      valuetype [mscorlib]System.Threading.CancellationToken SpellChecker.Window1/'<>c__DisplayClass10'::token
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
    IL_00aa:  ldloc.0
    IL_00ab:  call       class [System]System.Diagnostics.Stopwatch [System]System.Diagnostics.Stopwatch::StartNew()
    IL_00b0:  stfld      class [System]System.Diagnostics.Stopwatch SpellChecker.Window1/'<>c__DisplayClass10'::sw
//000103:             Task.Factory.StartNew(() =>
    IL_00b5:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_00ba:  ldloc.0
    IL_00bb:  ldftn      instance class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan> SpellChecker.Window1/'<>c__DisplayClass10'::'<MakeSuggestions>b__8'()
    IL_00c1:  newobj     instance void class [mscorlib]System.Func`1<class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>::.ctor(object,
                                                                                                                                                                                                          native int)
    IL_00c6:  ldloc.0
    IL_00c7:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken SpellChecker.Window1/'<>c__DisplayClass10'::token
    IL_00cc:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task`1<!!0> [mscorlib]System.Threading.Tasks.TaskFactory::StartNew<class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>(class [mscorlib]System.Func`1<!!0>,
                                                                                                                                                                                                                                                                          valuetype [mscorlib]System.Threading.CancellationToken)
    IL_00d1:  ldarg.0
    IL_00d2:  ldftn      instance void SpellChecker.Window1::'<MakeSuggestions>b__6'(class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>)
    IL_00d8:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>>::.ctor(object,
                                                                                                                                                                                                                                                           native int)
    IL_00dd:  call       valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationToken::get_None()
    IL_00e2:  ldc.i4     0x40000
    IL_00e7:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_00ec:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<!0>>,
                                                                                                                                                                                                                                                                        valuetype [mscorlib]System.Threading.CancellationToken,
                                                                                                                                                                                                                                                                        valuetype [mscorlib]System.Threading.Tasks.TaskContinuationOptions,
                                                                                                                                                                                                                                                                        class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_00f1:  pop
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
    IL_00f2:  nop
    IL_00f3:  ret
  } // end of method Window1::MakeSuggestions

  .method private hidebysig static int32 
          LevenshteinDistance(string str1,
                              string str2,
                              int32[0...,0...] scratchDistanceMatrix) cil managed
  {
    // Code size       379 (0x17b)
    .maxstack  8
    .locals init ([0] int32 i,
             [1] int32 j,
             [2] int32 str1Index,
             [3] int32 str2Index,
             [4] int32 cost,
             [5] int32 deletion,
             [6] int32 insertion,
             [7] int32 substitution,
             [8] int32 CS$1$0000,
             [9] bool CS$4$0001)
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
    IL_0000:  nop
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
    IL_0001:  ldc.i4.0
    IL_0002:  stloc.0
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0003:  br.s       IL_0012

//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
    IL_0005:  ldarg.2
    IL_0006:  ldloc.0
    IL_0007:  ldc.i4.0
    IL_0008:  ldloc.0
    IL_0009:  call       instance void int32[0...,0...]::Set(int32,
                                                             int32,
                                                             int32)
    IL_000e:  ldloc.0
    IL_000f:  ldc.i4.1
    IL_0010:  add
    IL_0011:  stloc.0
    IL_0012:  ldloc.0
    IL_0013:  ldarg.0
    IL_0014:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0019:  cgt
    IL_001b:  ldc.i4.0
    IL_001c:  ceq
    IL_001e:  stloc.s    CS$4$0001
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0020:  ldloc.s    CS$4$0001
    IL_0022:  brtrue.s   IL_0005

//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
    IL_0024:  ldc.i4.0
    IL_0025:  stloc.1
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0026:  br.s       IL_0035

//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
    IL_0028:  ldarg.2
    IL_0029:  ldc.i4.0
    IL_002a:  ldloc.1
    IL_002b:  ldloc.1
    IL_002c:  call       instance void int32[0...,0...]::Set(int32,
                                                             int32,
                                                             int32)
    IL_0031:  ldloc.1
    IL_0032:  ldc.i4.1
    IL_0033:  add
    IL_0034:  stloc.1
    IL_0035:  ldloc.1
    IL_0036:  ldarg.1
    IL_0037:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_003c:  cgt
    IL_003e:  ldc.i4.0
    IL_003f:  ceq
    IL_0041:  stloc.s    CS$4$0001
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0043:  ldloc.s    CS$4$0001
    IL_0045:  brtrue.s   IL_0028

//000149:             for (int i = 1; i <= str1.Length; i++)
    IL_0047:  ldc.i4.1
    IL_0048:  stloc.0
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0049:  br         IL_014d

//000150:             {
    IL_004e:  nop
//000151:                 int str1Index = i - 1;
    IL_004f:  ldloc.0
    IL_0050:  ldc.i4.1
    IL_0051:  sub
    IL_0052:  stloc.2
//000152:                 for (int j = 1; j <= str2.Length; j++)
    IL_0053:  ldc.i4.1
    IL_0054:  stloc.1
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0055:  br         IL_0133

//000153:                 {
    IL_005a:  nop
//000154:                     int str2Index = j - 1;
    IL_005b:  ldloc.1
    IL_005c:  ldc.i4.1
    IL_005d:  sub
    IL_005e:  stloc.3
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
    IL_005f:  ldarg.0
    IL_0060:  ldloc.2
    IL_0061:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_0066:  ldarg.1
    IL_0067:  ldloc.3
    IL_0068:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_006d:  beq.s      IL_0072

    IL_006f:  ldc.i4.1
    IL_0070:  br.s       IL_0073

    IL_0072:  ldc.i4.0
    IL_0073:  stloc.s    cost
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
    IL_0075:  ldloc.0
    IL_0076:  brfalse.s  IL_0086

    IL_0078:  ldarg.2
    IL_0079:  ldloc.0
    IL_007a:  ldc.i4.1
    IL_007b:  sub
    IL_007c:  ldloc.1
    IL_007d:  call       instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0082:  ldc.i4.1
    IL_0083:  add
    IL_0084:  br.s       IL_0087

    IL_0086:  ldc.i4.1
    IL_0087:  stloc.s    deletion
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
    IL_0089:  ldloc.1
    IL_008a:  brfalse.s  IL_009a

    IL_008c:  ldarg.2
    IL_008d:  ldloc.0
    IL_008e:  ldloc.1
    IL_008f:  ldc.i4.1
    IL_0090:  sub
    IL_0091:  call       instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0096:  ldc.i4.1
    IL_0097:  add
    IL_0098:  br.s       IL_009b

    IL_009a:  ldc.i4.1
    IL_009b:  stloc.s    insertion
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
    IL_009d:  ldloc.0
    IL_009e:  brfalse.s  IL_00b4

    IL_00a0:  ldloc.1
    IL_00a1:  brfalse.s  IL_00b4

    IL_00a3:  ldarg.2
    IL_00a4:  ldloc.0
    IL_00a5:  ldc.i4.1
    IL_00a6:  sub
    IL_00a7:  ldloc.1
    IL_00a8:  ldc.i4.1
    IL_00a9:  sub
    IL_00aa:  call       instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_00af:  ldloc.s    cost
    IL_00b1:  add
    IL_00b2:  br.s       IL_00b6

    IL_00b4:  ldloc.s    cost
    IL_00b6:  stloc.s    substitution
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
    IL_00b8:  ldarg.2
    IL_00b9:  ldloc.0
    IL_00ba:  ldloc.1
    IL_00bb:  ldloc.s    deletion
    IL_00bd:  ldloc.s    insertion
    IL_00bf:  call       int32 [mscorlib]System.Math::Min(int32,
                                                          int32)
    IL_00c4:  ldloc.s    substitution
    IL_00c6:  call       int32 [mscorlib]System.Math::Min(int32,
                                                          int32)
    IL_00cb:  call       instance void int32[0...,0...]::Set(int32,
                                                             int32,
                                                             int32)
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
    IL_00d0:  ldloc.0
    IL_00d1:  ldc.i4.1
    IL_00d2:  ble.s      IL_0101

    IL_00d4:  ldloc.1
    IL_00d5:  ldc.i4.1
    IL_00d6:  ble.s      IL_0101

    IL_00d8:  ldarg.0
    IL_00d9:  ldloc.2
    IL_00da:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_00df:  ldarg.1
    IL_00e0:  ldloc.3
    IL_00e1:  ldc.i4.1
    IL_00e2:  sub
    IL_00e3:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_00e8:  bne.un.s   IL_0101

    IL_00ea:  ldarg.0
    IL_00eb:  ldloc.2
    IL_00ec:  ldc.i4.1
    IL_00ed:  sub
    IL_00ee:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_00f3:  ldarg.1
    IL_00f4:  ldloc.3
    IL_00f5:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_00fa:  ceq
    IL_00fc:  ldc.i4.0
    IL_00fd:  ceq
    IL_00ff:  br.s       IL_0102

    IL_0101:  ldc.i4.1
    IL_0102:  stloc.s    CS$4$0001
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0104:  ldloc.s    CS$4$0001
    IL_0106:  brtrue.s   IL_012e

//000165:                     {
    IL_0108:  nop
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
    IL_0109:  ldarg.2
    IL_010a:  ldloc.0
    IL_010b:  ldloc.1
    IL_010c:  ldarg.2
    IL_010d:  ldloc.0
    IL_010e:  ldloc.1
    IL_010f:  call       instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0114:  ldarg.2
    IL_0115:  ldloc.0
    IL_0116:  ldc.i4.2
    IL_0117:  sub
    IL_0118:  ldloc.1
    IL_0119:  ldc.i4.2
    IL_011a:  sub
    IL_011b:  call       instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0120:  ldloc.s    cost
    IL_0122:  add
    IL_0123:  call       int32 [mscorlib]System.Math::Min(int32,
                                                          int32)
    IL_0128:  call       instance void int32[0...,0...]::Set(int32,
                                                             int32,
                                                             int32)
//000167:                     }
    IL_012d:  nop
//000168:                 }
    IL_012e:  nop
//000152:                 for (int j = 1; j <= str2.Length; j++)
    IL_012f:  ldloc.1
    IL_0130:  ldc.i4.1
    IL_0131:  add
    IL_0132:  stloc.1
    IL_0133:  ldloc.1
    IL_0134:  ldarg.1
    IL_0135:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_013a:  cgt
    IL_013c:  ldc.i4.0
    IL_013d:  ceq
    IL_013f:  stloc.s    CS$4$0001
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0141:  ldloc.s    CS$4$0001
    IL_0143:  brtrue     IL_005a

//000169:             }         
    IL_0148:  nop
//000149:             for (int i = 1; i <= str1.Length; i++)
    IL_0149:  ldloc.0
    IL_014a:  ldc.i4.1
    IL_014b:  add
    IL_014c:  stloc.0
    IL_014d:  ldloc.0
    IL_014e:  ldarg.0
    IL_014f:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0154:  cgt
    IL_0156:  ldc.i4.0
    IL_0157:  ceq
    IL_0159:  stloc.s    CS$4$0001
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_015b:  ldloc.s    CS$4$0001
    IL_015d:  brtrue     IL_004e

//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
    IL_0162:  ldarg.2
    IL_0163:  ldarg.0
    IL_0164:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0169:  ldarg.1
    IL_016a:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_016f:  call       instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0174:  stloc.s    CS$1$0000
    IL_0176:  br.s       IL_0178

//000173:         }
    IL_0178:  ldloc.s    CS$1$0000
    IL_017a:  ret
  } // end of method Window1::LevenshteinDistance

  .method public hidebysig newslot virtual final 
          instance void  InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       45 (0x2d)
    .maxstack  3
    .locals init ([0] class [System]System.Uri resourceLocater,
             [1] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\obj\Debug\Window1.g.cs' 
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool SpellChecker.Window1::_contentLoaded
    IL_0007:  ldc.i4.0
    IL_0008:  ceq
    IL_000a:  stloc.1
    IL_000b:  ldloc.1
    IL_000c:  brtrue.s   IL_0011

    IL_000e:  nop
    IL_000f:  br.s       IL_002c

    IL_0011:  ldarg.0
    IL_0012:  ldc.i4.1
    IL_0013:  stfld      bool SpellChecker.Window1::_contentLoaded
    IL_0018:  ldstr      "/SpellChecker;component/window1.xaml"
    IL_001d:  ldc.i4.2
    IL_001e:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_0023:  stloc.0
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\Window1.xaml' 
//000001: ?<Window x:Class="SpellChecker.Window1"
    IL_0024:  ldarg.0
    IL_0025:  ldloc.0
    IL_0026:  call       void [PresentationFramework]System.Windows.Application::LoadComponent(object,
                                                                                               class [System]System.Uri)
    IL_002b:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\obj\Debug\Window1.g.cs' 
    IL_002c:  ret
  } // end of method Window1::InitializeComponent

  .method private hidebysig newslot virtual final 
          instance void  System.Windows.Markup.IComponentConnector.Connect(int32 connectionId,
                                                                           object target) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .override [System.Xaml]System.Windows.Markup.IComponentConnector::Connect
    // Code size       213 (0xd5)
    .maxstack  4
    .locals init ([0] int32 CS$4$0000)
    IL_0000:  nop
    IL_0001:  ldarg.1
    IL_0002:  stloc.0
    IL_0003:  ldloc.0
    IL_0004:  ldc.i4.1
    IL_0005:  sub
    IL_0006:  switch     ( 
                          IL_0024,
                          IL_0035,
                          IL_005b,
                          IL_0069,
                          IL_00a7)
    IL_001f:  br         IL_00cd

    IL_0024:  ldarg.0
    IL_0025:  ldarg.2
    IL_0026:  castclass  [PresentationFramework]System.Windows.Controls.ListBox
    IL_002b:  stfld      class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::listBox1
    IL_0030:  br         IL_00d4

    IL_0035:  ldarg.0
    IL_0036:  ldarg.2
    IL_0037:  castclass  [PresentationFramework]System.Windows.Controls.TextBox
    IL_003c:  stfld      class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::txtInput
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\Window1.xaml' 
//000007:         <TextBox Height="23" Margin="163,11,0,0" Name="txtInput" VerticalAlignment="Top" TextChanged="txtInput_TextChanged" ToolTip="The word to spell check" IsEnabled="False" HorizontalAlignment="Left" Width="155" />
    IL_0041:  ldarg.0
    IL_0042:  ldfld      class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::txtInput
    IL_0047:  ldarg.0
    IL_0048:  ldftn      instance void SpellChecker.Window1::txtInput_TextChanged(object,
                                                                                  class [PresentationFramework]System.Windows.Controls.TextChangedEventArgs)
    IL_004e:  newobj     instance void [PresentationFramework]System.Windows.Controls.TextChangedEventHandler::.ctor(object,
                                                                                                                     native int)
    IL_0053:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.TextBoxBase::add_TextChanged(class [PresentationFramework]System.Windows.Controls.TextChangedEventHandler)
    IL_0058:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\obj\Debug\Window1.g.cs' 
    IL_0059:  br.s       IL_00d4

    IL_005b:  ldarg.0
    IL_005c:  ldarg.2
    IL_005d:  castclass  [PresentationFramework]System.Windows.Controls.Label
    IL_0062:  stfld      class [PresentationFramework]System.Windows.Controls.Label SpellChecker.Window1::lblTime
    IL_0067:  br.s       IL_00d4

    IL_0069:  ldarg.0
    IL_006a:  ldarg.2
    IL_006b:  castclass  [PresentationFramework]System.Windows.Controls.CheckBox
    IL_0070:  stfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::chkParallel
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\Window1.xaml' 
//000009:         <CheckBox Content="Parallel" Height="18.161" HorizontalAlignment="Left" Margin="95,15,0,0" Name="chkParallel" VerticalAlignment="Top" Width="62.475" Checked="chkParallel_CheckedChanged" Unchecked="chkParallel_CheckedChanged" IsEnabled="False" />
    IL_0075:  ldarg.0
    IL_0076:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::chkParallel
    IL_007b:  ldarg.0
    IL_007c:  ldftn      instance void SpellChecker.Window1::chkParallel_CheckedChanged(object,
                                                                                        class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_0082:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_0087:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::add_Checked(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_008c:  nop
    IL_008d:  ldarg.0
    IL_008e:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::chkParallel
    IL_0093:  ldarg.0
    IL_0094:  ldftn      instance void SpellChecker.Window1::chkParallel_CheckedChanged(object,
                                                                                        class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_009a:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_009f:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::add_Unchecked(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_00a4:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\obj\Debug\Window1.g.cs' 
    IL_00a5:  br.s       IL_00d4

    IL_00a7:  ldarg.0
    IL_00a8:  ldarg.2
    IL_00a9:  castclass  [PresentationFramework]System.Windows.Controls.Button
    IL_00ae:  stfld      class [PresentationFramework]System.Windows.Controls.Button SpellChecker.Window1::btnLoad
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\Window1.xaml' 
//000010:         <Button Content="Load Words" Height="23" HorizontalAlignment="Left" Margin="12,11,0,0" Name="btnLoad" VerticalAlignment="Top" Width="75" Click="btnLoad_Click" />
    IL_00b3:  ldarg.0
    IL_00b4:  ldfld      class [PresentationFramework]System.Windows.Controls.Button SpellChecker.Window1::btnLoad
    IL_00b9:  ldarg.0
    IL_00ba:  ldftn      instance void SpellChecker.Window1::btnLoad_Click(object,
                                                                           class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_00c0:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_00c5:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ButtonBase::add_Click(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_00ca:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\obj\Debug\Window1.g.cs' 
    IL_00cb:  br.s       IL_00d4

    IL_00cd:  ldarg.0
    IL_00ce:  ldc.i4.1
    IL_00cf:  stfld      bool SpellChecker.Window1::_contentLoaded
    IL_00d4:  ret
  } // end of method Window1::System.Windows.Markup.IComponentConnector.Connect

  .method private hidebysig instance void 
          '<btnLoad_Click>b__0'(class [mscorlib]System.Threading.Tasks.Task t) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       67 (0x43)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\Window1.xaml.cs' 
//000063:                 {
    IL_0000:  nop
//000064:                     txtInput.IsEnabled = true;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::txtInput
    IL_0007:  ldc.i4.1
    IL_0008:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_000d:  nop
//000065:                     chkParallel.IsEnabled = true;
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::chkParallel
    IL_0014:  ldc.i4.1
    IL_0015:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_001a:  nop
//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
    IL_001b:  ldarg.1
    IL_001c:  callvirt   instance bool [mscorlib]System.Threading.Tasks.Task::get_IsFaulted()
    IL_0021:  ldc.i4.0
    IL_0022:  ceq
    IL_0024:  stloc.0
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0025:  ldloc.0
    IL_0026:  brtrue.s   IL_003b

//000066:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
    IL_0028:  ldarg.1
    IL_0029:  callvirt   instance class [mscorlib]System.AggregateException [mscorlib]System.Threading.Tasks.Task::get_Exception()
    IL_002e:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0033:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(string)
    IL_0038:  pop
//000067:                     else MakeSuggestions();
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0039:  br.s       IL_0042

//000067:                     else MakeSuggestions();
    IL_003b:  ldarg.0
    IL_003c:  call       instance void SpellChecker.Window1::MakeSuggestions()
    IL_0041:  nop
//000068:                 },  TaskScheduler.FromCurrentSynchronizationContext());
//000069:             }
//000070: 
//000071:         }
//000072: 
//000073:         /// <summary>Redo the suggestions when the text changes.</summary>
//000074:         private void txtInput_TextChanged(object sender, TextChangedEventArgs e) { MakeSuggestions(); }
//000075: 
//000076:         /// <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000077:         private void chkParallel_CheckedChanged(object sender, RoutedEventArgs e) { MakeSuggestions(); }
//000078: 
//000079:         /// <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080:         private void MakeSuggestions()
//000081:         {
//000082:             // Limit the number of suggestions
//000083:             const int NUM_SUGGESTIONS = 25;
//000084: 
//000085:             // Run serially or in parallel
//000086:             var sequential = !(chkParallel.IsChecked.HasValue && chkParallel.IsChecked.Value);
//000087:             string text = txtInput.Text;
//000088: 
//000089:             // If there's no text to evaluate, just bail
//000090:             if (String.IsNullOrEmpty(text))
//000091:             {
//000092:                 listBox1.ItemsSource = null;
//000093:                 return;
//000094:             }
//000095: 
//000096:             // Every time the text is changed, we want to cancel the previous operation
//000097:             if (_cancellation != null) _cancellation.Cancel();
//000098:             _cancellation = new CancellationTokenSource();
//000099:             var token = _cancellation.Token;
//000100: 
//000101:             // Time the operation and kick it off
//000102:             Stopwatch sw = Stopwatch.StartNew();
//000103:             Task.Factory.StartNew(() =>
//000104:             {
//000105:                 List<string> results = null;
//000106:                 if (sequential)
//000107:                 {
//000108:                     var distanceMatrix = new int[_maxWordLength + 1, _maxWordLength + 1];
//000109:                     results = _words
//000110:                         .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix) })
//000111:                         .OrderBy(p => p.Distance)
//000112:                         .Take(NUM_SUGGESTIONS)
//000113:                         .Select(p => p.Word)
//000114:                         .ToList();
//000115:                 }
//000116:                 else
//000117:                 {
//000118:                     using (var distanceMatrix = new ThreadLocal<int[,]>(() => new int[_maxWordLength + 1, _maxWordLength + 1]))
//000119:                     {
//000120:                         results = _words
//000121:                             .AsParallel().WithCancellation(token) // parallel with cancellation
//000122:                             .Select(word => new { Word = word, Distance = LevenshteinDistance(word, text, distanceMatrix.Value) })
//000123:                             .TakeTop(p => p.Distance, NUM_SUGGESTIONS) // Or .OrderBy(p => p.Distance).Take(NUM_SUGGESTIONS)
//000124:                             .Select(p => p.Word)
//000125:                             .ToList();
//000126:                     }
//000127:                 }
//000128:                 sw.Stop();
//000129:                 return new { Results = results, Time = sw.Elapsed }; // Return both the spelling suggestions and the elapsed time
//000130:             }, token).ContinueWith(t =>
//000131:             {
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0042:  ret
  } // end of method Window1::'<btnLoad_Click>b__0'

  .method private hidebysig instance void 
          '<MakeSuggestions>b__6'(class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>> t) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       99 (0x63)
    .maxstack  5
//000131:             {
    IL_0000:  nop
//000132:                 // Display the results
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::listBox1
    IL_0007:  ldarg.1
    IL_0008:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>::get_Result()
    IL_000d:  callvirt   instance !0 class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>::get_Results()
    IL_0012:  ldsfld     class [mscorlib]System.Func`3<string,int32,string> SpellChecker.Window1::'CS$<>9__CachedAnonymousMethodDelegate12'
    IL_0017:  brtrue.s   IL_002c

    IL_0019:  ldnull
    IL_001a:  ldftn      string SpellChecker.Window1::'<MakeSuggestions>b__7'(string,
                                                                              int32)
    IL_0020:  newobj     instance void class [mscorlib]System.Func`3<string,int32,string>::.ctor(object,
                                                                                                 native int)
    IL_0025:  stsfld     class [mscorlib]System.Func`3<string,int32,string> SpellChecker.Window1::'CS$<>9__CachedAnonymousMethodDelegate12'
    IL_002a:  br.s       IL_002c

    IL_002c:  ldsfld     class [mscorlib]System.Func`3<string,int32,string> SpellChecker.Window1::'CS$<>9__CachedAnonymousMethodDelegate12'
    IL_0031:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<string,string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                  class [mscorlib]System.Func`3<!!0,int32,!!1>)
    IL_0036:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ItemsControl::set_ItemsSource(class [mscorlib]System.Collections.IEnumerable)
    IL_003b:  nop
//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
    IL_003c:  ldarg.0
    IL_003d:  ldfld      class [PresentationFramework]System.Windows.Controls.Label SpellChecker.Window1::lblTime
    IL_0042:  ldstr      "Sec: "
    IL_0047:  ldarg.1
    IL_0048:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>::get_Result()
    IL_004d:  callvirt   instance !1 class '<>f__AnonymousType1`2'<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>::get_Time()
    IL_0052:  box        [mscorlib]System.TimeSpan
    IL_0057:  call       string [mscorlib]System.String::Concat(object,
                                                                object)
    IL_005c:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ContentControl::set_Content(object)
    IL_0061:  nop
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0062:  ret
  } // end of method Window1::'<MakeSuggestions>b__6'

  .method private hidebysig static string 
          '<MakeSuggestions>b__7'(string str,
                                  int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       24 (0x18)
    .maxstack  3
    .locals init ([0] string CS$1$0000)
//000133:                 listBox1.ItemsSource = t.Result.Results.Select((str, i) => string.Format("{0,2}. {1}", i+1, str));
    IL_0000:  ldstr      "{0,2}. {1}"
    IL_0005:  ldarg.1
    IL_0006:  ldc.i4.1
    IL_0007:  add
    IL_0008:  box        [mscorlib]System.Int32
    IL_000d:  ldarg.0
    IL_000e:  call       string [mscorlib]System.String::Format(string,
                                                                object,
                                                                object)
    IL_0013:  stloc.0
    IL_0014:  br.s       IL_0016

//000134:                 lblTime.Content = "Sec: " + t.Result.Time;
//000135:             }, CancellationToken.None, TaskContinuationOptions.NotOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());
//000136:         }
//000137: 
//000138:         /// <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000139:         /// <param name="str1">The first string.</param>
//000140:         /// <param name="str2">The second string.</param>
//000141:         /// <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000142:         /// <returns>The computed edit distance.</returns>
//000143:         private static int LevenshteinDistance(string str1, string str2, int[,] scratchDistanceMatrix)
//000144:         {
//000145:             // distance matrix contains one extra row and column for the seed values            
//000146:             for (int i = 0; i <= str1.Length; i++) scratchDistanceMatrix[i,0] = i;
//000147:             for (int j = 0; j <= str2.Length; j++) scratchDistanceMatrix[0,j] = j;
//000148: 
//000149:             for (int i = 1; i <= str1.Length; i++)
//000150:             {
//000151:                 int str1Index = i - 1;
//000152:                 for (int j = 1; j <= str2.Length; j++)
//000153:                 {
//000154:                     int str2Index = j - 1;
//000155:                     var cost = (str1[str1Index] == str2[str2Index]) ? 0 : 1;
//000156: 
//000157:                     int deletion = (i == 0) ? 1 : scratchDistanceMatrix[i - 1, j] + 1;
//000158:                     int insertion = (j == 0) ? 1 : scratchDistanceMatrix[i, j - 1] + 1;
//000159:                     int substitution = (i == 0 || j == 0) ? cost : scratchDistanceMatrix[i - 1, j - 1] + cost;
//000160: 
//000161:                     scratchDistanceMatrix[i, j] = Math.Min(Math.Min(deletion, insertion), substitution);
//000162: 
//000163:                     // Check for Transposition
//000164:                     if (i > 1 && j > 1 && (str1[str1Index] == str2[str2Index - 1]) && (str1[str1Index - 1] == str2[str2Index]))
//000165:                     {
//000166:                         scratchDistanceMatrix[i, j] = Math.Min(scratchDistanceMatrix[i,j], scratchDistanceMatrix[i-2, j-2] + cost);
//000167:                     }
//000168:                 }
//000169:             }         
//000170: 
//000171:             // Levenshtein distance is the bottom right element
//000172:             return scratchDistanceMatrix[str1.Length, str2.Length];
//000173:         }
//000174:     }
//000175: }
    IL_0016:  ldloc.0
    IL_0017:  ret
  } // end of method Window1::'<MakeSuggestions>b__7'

} // end of class SpellChecker.Window1

.class private auto ansi beforefieldinit SpellChecker.Properties.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\Properties\Resources.Designer.cs' 
//000031:         [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000032:         internal Resources() {
    IL_0007:  nop
//000033:         }
    IL_0008:  nop
    IL_0009:  ret
  } // end of method Resources::.ctor

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       63 (0x3f)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager temp,
             [1] class [mscorlib]System.Resources.ResourceManager CS$1$0000,
             [2] bool CS$4$0001)
//000034:         
//000035:         /// <summary>
//000036:         ///   Returns the cached ResourceManager instance used by this class.
//000037:         /// </summary>
//000038:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000039:         internal static global::System.Resources.ResourceManager ResourceManager {
//000040:             get {
    IL_0000:  nop
//000041:                 if (object.ReferenceEquals(resourceMan, null)) {
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager SpellChecker.Properties.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  call       bool [mscorlib]System.Object::ReferenceEquals(object,
                                                                       object)
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.2
//000042:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SpellChecker.Properties.Resources", typeof(Resources).Assembly);
//000043:                     resourceMan = temp;
//000044:                 }
//000045:                 return resourceMan;
//000046:             }
//000047:         }
//000048:         
//000049:         /// <summary>
//000050:         ///   Overrides the current thread's CurrentUICulture property for all
//000051:         ///   resource lookups using this strongly typed resource class.
//000052:         /// </summary>
//000053:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000054:         internal static global::System.Globalization.CultureInfo Culture {
//000055:             get {
//000056:                 return resourceCulture;
//000057:             }
//000058:             set {
//000059:                 resourceCulture = value;
//000060:             }
//000061:         }
//000062:     }
//000063: }
    IL_0010:  ldloc.2
    IL_0011:  brtrue.s   IL_0035

//000041:                 if (object.ReferenceEquals(resourceMan, null)) {
    IL_0013:  nop
//000042:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SpellChecker.Properties.Resources", typeof(Resources).Assembly);
    IL_0014:  ldstr      "SpellChecker.Properties.Resources"
    IL_0019:  ldtoken    SpellChecker.Properties.Resources
    IL_001e:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_0023:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0028:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_002d:  stloc.0
//000043:                     resourceMan = temp;
    IL_002e:  ldloc.0
    IL_002f:  stsfld     class [mscorlib]System.Resources.ResourceManager SpellChecker.Properties.Resources::resourceMan
//000044:                 }
    IL_0034:  nop
//000045:                 return resourceMan;
    IL_0035:  ldsfld     class [mscorlib]System.Resources.ResourceManager SpellChecker.Properties.Resources::resourceMan
    IL_003a:  stloc.1
    IL_003b:  br.s       IL_003d

//000046:             }
    IL_003d:  ldloc.1
    IL_003e:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo CS$1$0000)
//000047:         }
//000048:         
//000049:         /// <summary>
//000050:         ///   Overrides the current thread's CurrentUICulture property for all
//000051:         ///   resource lookups using this strongly typed resource class.
//000052:         /// </summary>
//000053:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000054:         internal static global::System.Globalization.CultureInfo Culture {
//000055:             get {
    IL_0000:  nop
//000056:                 return resourceCulture;
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo SpellChecker.Properties.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000057:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly hidebysig specialname static 
          void  set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
//000058:             set {
    IL_0000:  nop
//000059:                 resourceCulture = value;
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo SpellChecker.Properties.Resources::resourceCulture
//000060:             }
    IL_0007:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager SpellChecker.Properties.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo SpellChecker.Properties.Resources::get_Culture()
    .set void SpellChecker.Properties.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
} // end of class SpellChecker.Properties.Resources

.class public auto ansi beforefieldinit SpellChecker.App
       extends [PresentationFramework]System.Windows.Application
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .method public hidebysig instance void 
          InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       20 (0x14)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\obj\Debug\App.g.cs' 
//000047:         public void InitializeComponent() {
    IL_0000:  nop
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\App.xaml' 
//000004:              StartupUri="Window1.xaml">
    IL_0001:  ldarg.0
    IL_0002:  ldstr      "Window1.xaml"
    IL_0007:  ldc.i4.2
    IL_0008:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_000d:  call       instance void [PresentationFramework]System.Windows.Application::set_StartupUri(class [System]System.Uri)
    IL_0012:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\obj\Debug\App.g.cs' 
    IL_0013:  ret
  } // end of method App::InitializeComponent

  .method public hidebysig static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       22 (0x16)
    .maxstack  1
    .locals init ([0] class SpellChecker.App app)
    IL_0000:  nop
    IL_0001:  newobj     instance void SpellChecker.App::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  callvirt   instance void SpellChecker.App::InitializeComponent()
    IL_000d:  nop
    IL_000e:  ldloc.0
    IL_000f:  callvirt   instance int32 [PresentationFramework]System.Windows.Application::Run()
    IL_0014:  pop
    IL_0015:  ret
  } // end of method App::Main

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationFramework]System.Windows.Application::.ctor()
    IL_0006:  ret
  } // end of method App::.ctor

} // end of class SpellChecker.App

.class private auto ansi sealed beforefieldinit SpellChecker.Properties.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .field private static class SpellChecker.Properties.Settings defaultInstance
  .method public hidebysig specialname static 
          class SpellChecker.Properties.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class SpellChecker.Properties.Settings CS$1$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_CSharp\Properties\Settings.Designer.cs' 
//000025:             {
    IL_0000:  nop
//000026:                 return defaultInstance;
    IL_0001:  ldsfld     class SpellChecker.Properties.Settings SpellChecker.Properties.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000027:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  ret
  } // end of method Settings::.ctor

  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       21 (0x15)
    .maxstack  8
//000020:         private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
    IL_0000:  newobj     instance void SpellChecker.Properties.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  SpellChecker.Properties.Settings
    IL_000f:  stsfld     class SpellChecker.Properties.Settings SpellChecker.Properties.Settings::defaultInstance
//000021: 
//000022:         public static Settings Default
//000023:         {
//000024:             get
//000025:             {
//000026:                 return defaultInstance;
//000027:             }
//000028:         }
//000029:     }
//000030: }
    IL_0014:  ret
  } // end of method Settings::.cctor

  .property class SpellChecker.Properties.Settings
          Default()
  {
    .get class SpellChecker.Properties.Settings SpellChecker.Properties.Settings::get_Default()
  } // end of property Settings::Default
} // end of class SpellChecker.Properties.Settings

.class private auto ansi sealed beforefieldinit '<>f__AnonymousType0`2'<'<Word>j__TPar','<Distance>j__TPar'>
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 29 5C 7B 20 57 6F 72 64 20 3D 20 7B 57 6F   // ..)\{ Word = {Wo
                                                                                                 72 64 7D 2C 20 44 69 73 74 61 6E 63 65 20 3D 20   // rd}, Distance = 
                                                                                                 7B 44 69 73 74 61 6E 63 65 7D 20 7D 01 00 54 0E   // {Distance} }..T.
                                                                                                 04 54 79 70 65 10 3C 41 6E 6F 6E 79 6D 6F 75 73   // .Type.<Anonymous
                                                                                                 20 54 79 70 65 3E )                               //  Type>
  .field private initonly !'<Word>j__TPar' '<Word>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field private initonly !'<Distance>j__TPar' '<Distance>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(!'<Word>j__TPar' Word,
                               !'<Distance>j__TPar' Distance) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       21 (0x15)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  ldarg.0
    IL_0007:  ldarg.1
    IL_0008:  stfld      !0 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Word>i__Field'
    IL_000d:  ldarg.0
    IL_000e:  ldarg.2
    IL_000f:  stfld      !1 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Distance>i__Field'
    IL_0014:  ret
  } // end of method '<>f__AnonymousType0`2'::.ctor

  .method public hidebysig specialname instance !'<Word>j__TPar' 
          get_Word() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<Word>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Word>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType0`2'::get_Word

  .method public hidebysig specialname instance !'<Distance>j__TPar' 
          get_Distance() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<Distance>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Distance>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType0`2'::get_Distance

  .method public hidebysig virtual instance string 
          ToString() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       89 (0x59)
    .maxstack  2
    .locals init (class [mscorlib]System.Text.StringBuilder V_0,
             string V_1)
    IL_0000:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldstr      "{ Word = "
    IL_000c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0011:  pop
    IL_0012:  ldloc.0
    IL_0013:  ldarg.0
    IL_0014:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Word>i__Field'
    IL_0019:  box        !'<Word>j__TPar'
    IL_001e:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_0023:  pop
    IL_0024:  ldloc.0
    IL_0025:  ldstr      ", Distance = "
    IL_002a:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_002f:  pop
    IL_0030:  ldloc.0
    IL_0031:  ldarg.0
    IL_0032:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Distance>i__Field'
    IL_0037:  box        !'<Distance>j__TPar'
    IL_003c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_0041:  pop
    IL_0042:  ldloc.0
    IL_0043:  ldstr      " }"
    IL_0048:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_004d:  pop
    IL_004e:  ldloc.0
    IL_004f:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0054:  stloc.1
    IL_0055:  br.s       IL_0057

    IL_0057:  ldloc.1
    IL_0058:  ret
  } // end of method '<>f__AnonymousType0`2'::ToString

  .method public hidebysig virtual instance bool 
          Equals(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       64 (0x40)
    .maxstack  3
    .locals init (class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'> V_0,
             bool V_1)
    IL_0000:  ldarg.1
    IL_0001:  isinst     class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  brfalse.s  IL_003a

    IL_000a:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Word>j__TPar'>::get_Default()
    IL_000f:  ldarg.0
    IL_0010:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Word>i__Field'
    IL_0015:  ldloc.0
    IL_0016:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Word>i__Field'
    IL_001b:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Word>j__TPar'>::Equals(!0,
                                                                                                                               !0)
    IL_0020:  brfalse.s  IL_003a

    IL_0022:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Distance>j__TPar'>::get_Default()
    IL_0027:  ldarg.0
    IL_0028:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Distance>i__Field'
    IL_002d:  ldloc.0
    IL_002e:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Distance>i__Field'
    IL_0033:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Distance>j__TPar'>::Equals(!0,
                                                                                                                                   !0)
    IL_0038:  br.s       IL_003b

    IL_003a:  ldc.i4.0
    IL_003b:  stloc.1
    IL_003c:  br.s       IL_003e

    IL_003e:  ldloc.1
    IL_003f:  ret
  } // end of method '<>f__AnonymousType0`2'::Equals

  .method public hidebysig virtual instance int32 
          GetHashCode() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       62 (0x3e)
    .maxstack  3
    .locals init (int32 V_0,
             int32 V_1)
    IL_0000:  ldc.i4     0xac373593
    IL_0005:  stloc.0
    IL_0006:  ldc.i4     0xa5555529
    IL_000b:  ldloc.0
    IL_000c:  mul
    IL_000d:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Word>j__TPar'>::get_Default()
    IL_0012:  ldarg.0
    IL_0013:  ldfld      !0 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Word>i__Field'
    IL_0018:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Word>j__TPar'>::GetHashCode(!0)
    IL_001d:  add
    IL_001e:  stloc.0
    IL_001f:  ldc.i4     0xa5555529
    IL_0024:  ldloc.0
    IL_0025:  mul
    IL_0026:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Distance>j__TPar'>::get_Default()
    IL_002b:  ldarg.0
    IL_002c:  ldfld      !1 class '<>f__AnonymousType0`2'<!'<Word>j__TPar',!'<Distance>j__TPar'>::'<Distance>i__Field'
    IL_0031:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Distance>j__TPar'>::GetHashCode(!0)
    IL_0036:  add
    IL_0037:  stloc.0
    IL_0038:  ldloc.0
    IL_0039:  stloc.1
    IL_003a:  br.s       IL_003c

    IL_003c:  ldloc.1
    IL_003d:  ret
  } // end of method '<>f__AnonymousType0`2'::GetHashCode

  .property instance !'<Word>j__TPar' Word()
  {
    .get instance !'<Word>j__TPar' '<>f__AnonymousType0`2'::get_Word()
  } // end of property '<>f__AnonymousType0`2'::Word
  .property instance !'<Distance>j__TPar'
          Distance()
  {
    .get instance !'<Distance>j__TPar' '<>f__AnonymousType0`2'::get_Distance()
  } // end of property '<>f__AnonymousType0`2'::Distance
} // end of class '<>f__AnonymousType0`2'

.class private auto ansi sealed beforefieldinit '<>f__AnonymousType1`2'<'<Results>j__TPar','<Time>j__TPar'>
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 27 5C 7B 20 52 65 73 75 6C 74 73 20 3D 20   // ..'\{ Results = 
                                                                                                 7B 52 65 73 75 6C 74 73 7D 2C 20 54 69 6D 65 20   // {Results}, Time 
                                                                                                 3D 20 7B 54 69 6D 65 7D 20 7D 01 00 54 0E 04 54   // = {Time} }..T..T
                                                                                                 79 70 65 10 3C 41 6E 6F 6E 79 6D 6F 75 73 20 54   // ype.<Anonymous T
                                                                                                 79 70 65 3E )                                     // ype>
  .field private initonly !'<Results>j__TPar' '<Results>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .field private initonly !'<Time>j__TPar' '<Time>i__Field'
  .custom instance void [mscorlib]System.Diagnostics.DebuggerBrowsableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggerBrowsableState) = ( 01 00 00 00 00 00 00 00 ) 
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(!'<Results>j__TPar' Results,
                               !'<Time>j__TPar' Time) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       21 (0x15)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  ldarg.0
    IL_0007:  ldarg.1
    IL_0008:  stfld      !0 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Results>i__Field'
    IL_000d:  ldarg.0
    IL_000e:  ldarg.2
    IL_000f:  stfld      !1 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Time>i__Field'
    IL_0014:  ret
  } // end of method '<>f__AnonymousType1`2'::.ctor

  .method public hidebysig specialname instance !'<Results>j__TPar' 
          get_Results() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<Results>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !0 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Results>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType1`2'::get_Results

  .method public hidebysig specialname instance !'<Time>j__TPar' 
          get_Time() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!'<Time>j__TPar' V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !1 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Time>i__Field'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method '<>f__AnonymousType1`2'::get_Time

  .method public hidebysig virtual instance string 
          ToString() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       89 (0x59)
    .maxstack  2
    .locals init (class [mscorlib]System.Text.StringBuilder V_0,
             string V_1)
    IL_0000:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldstr      "{ Results = "
    IL_000c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0011:  pop
    IL_0012:  ldloc.0
    IL_0013:  ldarg.0
    IL_0014:  ldfld      !0 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Results>i__Field'
    IL_0019:  box        !'<Results>j__TPar'
    IL_001e:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_0023:  pop
    IL_0024:  ldloc.0
    IL_0025:  ldstr      ", Time = "
    IL_002a:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_002f:  pop
    IL_0030:  ldloc.0
    IL_0031:  ldarg.0
    IL_0032:  ldfld      !1 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Time>i__Field'
    IL_0037:  box        !'<Time>j__TPar'
    IL_003c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(object)
    IL_0041:  pop
    IL_0042:  ldloc.0
    IL_0043:  ldstr      " }"
    IL_0048:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_004d:  pop
    IL_004e:  ldloc.0
    IL_004f:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_0054:  stloc.1
    IL_0055:  br.s       IL_0057

    IL_0057:  ldloc.1
    IL_0058:  ret
  } // end of method '<>f__AnonymousType1`2'::ToString

  .method public hidebysig virtual instance bool 
          Equals(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       64 (0x40)
    .maxstack  3
    .locals init (class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'> V_0,
             bool V_1)
    IL_0000:  ldarg.1
    IL_0001:  isinst     class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  brfalse.s  IL_003a

    IL_000a:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Results>j__TPar'>::get_Default()
    IL_000f:  ldarg.0
    IL_0010:  ldfld      !0 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Results>i__Field'
    IL_0015:  ldloc.0
    IL_0016:  ldfld      !0 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Results>i__Field'
    IL_001b:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Results>j__TPar'>::Equals(!0,
                                                                                                                                  !0)
    IL_0020:  brfalse.s  IL_003a

    IL_0022:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Time>j__TPar'>::get_Default()
    IL_0027:  ldarg.0
    IL_0028:  ldfld      !1 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Time>i__Field'
    IL_002d:  ldloc.0
    IL_002e:  ldfld      !1 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Time>i__Field'
    IL_0033:  callvirt   instance bool class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Time>j__TPar'>::Equals(!0,
                                                                                                                               !0)
    IL_0038:  br.s       IL_003b

    IL_003a:  ldc.i4.0
    IL_003b:  stloc.1
    IL_003c:  br.s       IL_003e

    IL_003e:  ldloc.1
    IL_003f:  ret
  } // end of method '<>f__AnonymousType1`2'::Equals

  .method public hidebysig virtual instance int32 
          GetHashCode() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       62 (0x3e)
    .maxstack  3
    .locals init (int32 V_0,
             int32 V_1)
    IL_0000:  ldc.i4     0x82216e2
    IL_0005:  stloc.0
    IL_0006:  ldc.i4     0xa5555529
    IL_000b:  ldloc.0
    IL_000c:  mul
    IL_000d:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Results>j__TPar'>::get_Default()
    IL_0012:  ldarg.0
    IL_0013:  ldfld      !0 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Results>i__Field'
    IL_0018:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Results>j__TPar'>::GetHashCode(!0)
    IL_001d:  add
    IL_001e:  stloc.0
    IL_001f:  ldc.i4     0xa5555529
    IL_0024:  ldloc.0
    IL_0025:  mul
    IL_0026:  call       class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0> class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Time>j__TPar'>::get_Default()
    IL_002b:  ldarg.0
    IL_002c:  ldfld      !1 class '<>f__AnonymousType1`2'<!'<Results>j__TPar',!'<Time>j__TPar'>::'<Time>i__Field'
    IL_0031:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.EqualityComparer`1<!'<Time>j__TPar'>::GetHashCode(!0)
    IL_0036:  add
    IL_0037:  stloc.0
    IL_0038:  ldloc.0
    IL_0039:  stloc.1
    IL_003a:  br.s       IL_003c

    IL_003c:  ldloc.1
    IL_003d:  ret
  } // end of method '<>f__AnonymousType1`2'::GetHashCode

  .property instance !'<Results>j__TPar' Results()
  {
    .get instance !'<Results>j__TPar' '<>f__AnonymousType1`2'::get_Results()
  } // end of property '<>f__AnonymousType1`2'::Results
  .property instance !'<Time>j__TPar' Time()
  {
    .get instance !'<Time>j__TPar' '<>f__AnonymousType1`2'::get_Time()
  } // end of property '<>f__AnonymousType1`2'::Time
} // end of class '<>f__AnonymousType1`2'


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
