<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_CSharp\Graph.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="49" endline="55"><![CDATA[
         Public Sub InitializeComponent()
             
             #ExternalSource("..\..\Application.xaml",4)
             Me.StartupUri = New System.Uri("MainWindow.xaml", System.UriKind.Relative)
             
             #End ExternalSource
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="56" endline="66"><![CDATA[
         
         '''<summary>
         '''Application Entry Point.
         '''</summary>
         <System.STAThreadAttribute(),  _
          System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
         Public Shared Sub Main()
             Dim app As BabyNames.App = New BabyNames.App()
             app.InitializeComponent
             app.Run
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\Application.g.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\DataLoader.vb" startline="35" endline="53"><![CDATA[
 
 			' Return a subset of size numRecords as a list
 			Return allCombinations.Take(numRecords).ToList()
 		End Function
 
 		''' <summary>An array of state identifiers (plus Washington, DC).</summary>
         Private Shared _stateIdentifiers() As String =
             {
                 "AK", "AL", "AR", "AZ", "CA", "CO", "CT",
                 "DC", "DE", "FL", "GA", "HI", "IA", "ID",
                 "IL", "IN", "KS", "KY", "LA", "MA", "MD",
                 "ME", "MI", "MN", "MO", "MS", "MT", "NC",
                 "ND", "NE", "NH", "NJ", "NM", "NV", "NY",
                 "OH", "OK", "OR", "PA", "RI", "SC", "SD",
                 "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY"
             }
 
 		''' <summary>An array of common names given to babies.</summary>
         Private Shared _commonPeopleNames() As String =
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\DataLoader.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\DataLoader.vb" startline="28" endline="38"><![CDATA[
 		Public Shared Function GenerateRandom(ByVal numRecords As Integer, ByVal minYear As Integer, ByVal maxYear As Integer) As List(Of BabyInfo)
 			Dim rand As New Random()
 
 			' Enumerate all possible combinations of year, state, name, in a random-ish order
 			Dim allCombinations = From year In Enumerable.Range(minYear, maxYear - minYear + 1) , state In _stateIdentifiers , name In _commonPeopleNames
 			                      Order By rand.Next()
 			                      Select New BabyInfo With {.Name = name, .State = state, .Year = year, .Count = rand.Next(200, 1000)}
 
 			' Return a subset of size numRecords as a list
 			Return allCombinations.Take(numRecords).ToList()
 		End Function
 
 		''' <summary>An array of state identifiers (plus Washington, DC).</summary>
         Private Shared _stateIdentifiers() As String =
             {
                 "AK", "AL", "AR", "AZ", "CA", "CO", "CT",
                 "DC", "DE", "FL", "GA", "HI", "IA", "ID",
                 "IL", "IN", "KS", "KY", "LA", "MA", "MD",
                 "ME", "MI", "MN", "MO", "MS", "MT", "NC",
                 "ND", "NE", "NH", "NJ", "NM", "NV", "NY",
                 "OH", "OK", "OR", "PA", "RI", "SC", "SD",
                 "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY"
             }
 
 		''' <summary>An array of common names given to babies.</summary>
         Private Shared _commonPeopleNames() As String =
              {
                   "Aaliyah", "Aaron", "Abbey", "Abbie", "Abby", "Abigail", "Abigale",
                   "Abigayle", "Abraham", "Adam", "Addison", "Aden", "Adrian", "Adriana",
                   "Adrianna", "Adrienne", "Agnes", "Aidan", "Aiden", "Aimee", "Aisha",
                   "Alaina", "Alan", "Alana", "Albert", "Alberto", "Alec", "Alejandra",
                   "Alejandro", "Alex", "Alexa", "Alexande", "Alexander", "Alexandr", "Alexandra",
                   "Alexandria", "Alexia", "Alexis", "Alexus", "Alfred", "Ali", "Alice",
                   "Alicia", "Alika", "Alisha", "Alison", "Alissa", "Alivia", "Aliyah",
                   "Allan", "Allen", "Allie", "Allison", "Allyson", "Alondra", "Alvin",
                   "Alyson", "Alyssa", "Amanda", "Amari", "Amaya", "Amber", "Amelia",
                   "Amie", "Amir", "Amy", "Amya", "Ana", "Anahi", "Anastasia",
                   "Andre", "Andrea", "Andres", "Andrew", "Andy", "Anela", "Angel",
                   "Angela", "Angelia", "Angelica", "Angelina", "Angelique", "Angelo", "Angie",
                   "Anita", "Aniya", "Aniyah", "Ann", "Anna", "Annabelle", "Anne",
                   "Annette", "Annie", "Annika", "Annmarie", "Ansley", "Anthony", "Antoine",
                   "Antoinette", "Antonio", "Antwan", "April", "Ariana", "Arianna", "Ariel",
                   "Arielle", "Arlene", "Armando", "Arnold", "Aron", "Arthur", "Arturo",
                   "Ashanti", "Ashlee", "Ashleigh", "Ashley", "Ashlyn", "Ashlynn", "Ashton",
                   "Asia", "Aspen", "Aubrey", "Audra", "Audrey", "Aurora", "Austin",
                   "Autumn", "Ava", "Avery", "Ayanna", "Ayden", "Ayla", "Baby",
                   "Babyboy", "Babygirl", "Bailee", "Bailey", "Barbara", "Barry", "Bart",
                   "Baylee", "Beau", "Becky", "Belinda", "Benjamin", "Bernadette", "Bernard",
                   "Bertha", "Beth", "Bethany", "Betsy", "Betty", "Beverly", "Bianca",
                   "Bill", "Billie", "Billy", "Blaine", "Blake", "Blaze", "Bob",
                   "Bobbi", "Bobbie", "Bobby", "Bonnie", "Boston", "Boyd", "Brad",
                   "Braden", "Bradford", "Bradley", "Brady", "Branden", "Brandi", "Brandie",
                   "Brandon", "Brandy", "Braxton", "Brayden", "Breanna", "Breanne", "Brenda",
                   "Brendan", "Brenden", "Brendon", "Brenna", "Brennan", "Brent", "Brenton",
                   "Bret", "Brett", "Bria", "Brian", "Briana", "Brianna", "Brianne",
                   "Bridger", "Bridget", "Brinley", "Britney", "Brittany", "Brittney", "Brock",
                   "Brodie", "Brody", "Bronson", "Brooke", "Brooklyn", "Brooklynn", "Bruce",
                   "Bryan", "Bryanna", "Bryant", "Bryce", "Brynlee", "Brynn", "Bryon",
                   "Bryson", "Byron", "Cade", "Caden", "Cadence", "Cael", "Caitlin",
                   "Caitlyn", "Caleb", "Callie", "Calvin", "Camden", "Cameron", "Cami",
                   "Camila", "Camille", "Camryn", "Candace", "Candice", "Cara", "Carissa",
                   "Carl", "Carla", "Carlos", "Carlton", "Carly", "Carmen", "Carol",
                   "Carole", "Caroline", "Carolyn", "Carrie", "Carson", "Carter", "Casey",
                   "Cassandra", "Cassidy", "Cassie", "Catherine", "Cathy", "Catina", "Cayden",
                   "Cecilia", "Cedric", "Celeste", "Cesar", "Chad", "Chance", "Chandler",
                   "Chanel", "Chantel", "Chantelle", "Charity", "Charlene", "Charles", "Charlie",
                   "Charlotte", "Charmaine", "Chase", "Chasity", "Chaya", "Chelsea", "Chelsey",
                   "Chelsie", "Cheri", "Cherie", "Cheryl", "Cheyanne", "Cheyenne", "Chiquita",
                   "Chloe", "Chris", "Christa", "Christi", "Christian", "Christie", "Christin",
                   "Christina", "Christine", "Christopher", "Christy", "Chuck", "Ciara", "Cierra",
                   "Cindy", "Claire", "Clara", "Clarence", "Clarissa", "Clark", "Claudia",
                   "Clay", "Clayton", "Clifford", "Clifton", "Clint", "Clinton", "Clyde",
                   "Cody", "Colby", "Cole", "Colin", "Colleen", "Collin", "Colten",
                   "Colter", "Colton", "Conner", "Connie", "Connor", "Conor", "Constance",
                   "Cooper", "Cora", "Corbin", "Corey", "Corinne", "Cornelius", "Cortney",
                   "Cory", "Coty", "Courtney", "Craig", "Cristian", "Cristina", "Crystal",
                   "Curt", "Curtis", "Cynthia", "Cyrus", "Daisy", "Dakota", "Dale",
                   "Dallas", "Dallin", "Dalton", "Damari", "Damian", "Damien", "Damon",
                   "Dan", "Dana", "Dane", "Dangelo", "Daniel", "Daniela", "Danielle",
                   "Danny", "Dante", "Daquan", "Darcy", "Daren", "Darian", "Darin",
                   "Darius", "Darla", "Darlene", "Darnell", "Darrell", "Darren", "Darrin",
                   "Darryl", "Darwin", "Daryl", "Dave", "David", "Davon", "Dawn",
                   "Dawson", "Dayna", "Dean", "Deandre", "Deangelo", "Deann", "Deanna",
                   "Debbie", "Debora", "Deborah", "Debra", "Declan", "Deja", "Delaney",
                   "Delonte", "Demarcus", "Demetrius", "Denali", "Deneen", "Denis", "Denise",
                   "Dennis", "Denzel", "Derek", "Derrick", "Desiree", "Desmond", "Destinee",
                   "Destiny", "Devante", "Devin", "Devon", "Devonte", "Dexter", "Diamond",
                   "Diana", "Diane", "Dianna", "Dianne", "Diego", "Dillon", "Dina",
                   "Dionne", "Dixie", "Dolores", "Domenic", "Dominic", "Dominick", "Dominique",
                   "Don", "Donald", "Donna", "Donnell", "Donnie", "Donovan", "Donte",
                   "Dora", "Doreen", "Doris", "Dorothy", "Doug", "Douglas", "Drake",
                   "Drew", "Duane", "Duke", "Dustin", "Dusty", "Dwayne", "Dwight",
                   "Dylan", "Earl", "Earnest", "Easton", "Ebony", "Ed", "Eddie", "Eden",
                   "Edgar", "Edmund", "Edna", "Eduardo", "Edward", "Edwin", "Eileen",
                   "Elaine", "Eleanor", "Elena", "Eli", "Elias", "Elijah", "Elise",
                   "Eliza", "Elizabet", "Elizabeth", "Ella", "Ellen", "Ellie", "Elton",
                   "Emilee", "Emilio", "Emily", "Emma", "Emmanuel", "Enrique", "Eric",
                   "Erica", "Erick", "Erik", "Erika", "Erin", "Ernest", "Esmeralda",
                   "Esperanza", "Estevan", "Esther", "Estrella", "Ethan", "Eugene", "Eva",
                   "Evan", "Evelyn", "Everett", "Ezekiel", "Ezra", "Fabian", "Faith",
                   "Farrah", "Felicia", "Female", "Fernando", "Finn", "Fiona", "Floyd",
                   "Forrest", "Frances", "Francesca", "Francine", "Francis", "Francisco", "Frank",
                   "Franklin", "Fred", "Freddie", "Frederick", "Fredrick", "Gabriel", "Gabriela",
                   "Gabriella", "Gabrielle", "Gage", "Gail", "Garrett", "Gary", "Gavin",
                   "Gayla", "Gayle", "Gene", "Genesis", "Geoffrey", "George", "Gerald",
                   "Geraldine", "Gerard", "Gerardo", "Gianna", "Gilbert", "Gillian", "Gina",
                   "Ginger", "Giovanni", "Giselle", "Glen", "Glenda", "Glenn", "Gloria",
                   "Gordon", "Grace", "Gracie", "Graham", "Grant", "Grayson", "Greg",
                   "Gregg", "Gregory", "Greta", "Gretchen", "Griffin", "Guadalupe", "Guy",
                   "Gwen", "Gwendolyn", "Hailee", "Hailey", "Haleigh", "Haley", "Halle",
                   "Hallie", "Hanna", "Hannah", "Harley", "Harmony", "Harold", "Harrison",
                   "Harry", "Hayden", "Haylee", "Hayley", "Heath", "Heather", "Heaven",
                   "Hector", "Heidi", "Helen", "Henry", "Herbert", "Hilary", "Hillary",
                   "Holly", "Hope", "Howard", "Hudson", "Hunter", "Ian", "Iesha", "Igor",
                   "Ikaika", "Imani", "India", "Infant", "Ira", "Irene", "Iris",
                   "Irma", "Isaac", "Isabel", "Isabella", "Isabelle", "Isaiah", "Isiah",
                   "Israel", "Ivan", "Ivy", "Jace", "Jack", "Jackie", "Jackson",
                   "Jaclyn", "Jacob", "Jacqueline", "Jada", "Jade", "Jaden", "Jadyn",
                   "Jaheim", "Jaime", "Jakayla", "Jake", "Jakob", "Jalen", "Jamaal",
                   "Jamal", "Jamar", "Jamarion", "James", "Jami", "Jamia", "Jamie",
                   "Jan", "Jana", "Janae", "Janay", "Jane", "Janelle", "Janet",
                   "Janice", "Janiya", "Jaquan", "Jaqueline", "Jared", "Jarrod", "Jarvis",
                   "Jasmin", "Jasmine", "Jason", "Javier", "Javon", "Jaxon", "Jay",
                   "Jayden", "Jayla", "Jaylen", "Jaylon", "Jayme", "Jayson", "Jazmin",
                   "Jazmine", "Jean", "Jeanette", "Jeanne", "Jeannine", "Jeff", "Jeffery",
                   "Jeffrey", "Jenifer", "Jenna", "Jennie", "Jennifer", "Jenny", "Jeremiah",
                   "Jeremy", "Jermaine", "Jerome", "Jerry", "Jess", "Jesse", "Jessica",
                   "Jessie", "Jesus", "Jill", "Jillian", "Jim", "Jimmie", "Jimmy",
                   "Jo", "Joan", "Joann", "Joanna", "Joanne", "Jocelyn", "Jodi",
                   "Jodie", "Jody", "Joe", "Joel", "Joey", "Johanna", "John",
                   "Johnathan", "Johnathon", "Johnnie", "Johnny", "Jolene", "Jon", "Jonah",
                   "Jonathan", "Jonathon", "Joni", "Jordan", "Jordyn", "Jorge", "Jory",
                   "Jose", "Joseph", "Josephine", "Josette", "Joshua", "Josiah", "Josie",
                   "Joy", "Joyce", "Juan", "Juanita", "Judith", "Judy", "Julia",
                   "Julian", "Juliana", "Julianna", "Julie", "Julio", "Julissa", "Julius",
                   "June", "Justice", "Justin", "Justine", "Juwan", "Kade", "Kaden",
                   "Kadence", "Kadijah", "Kahealani", "Kai", "Kaila", "Kailee", "Kailey",
                   "Kaimana", "Kainalu", "Kainoa", "Kaitlin", "Kaitlyn", "Kalani", "Kaleb",
                   "Kalena", "Kamalani", "Kameron", "Kamryn", "Kanani", "Kapena", "Kara",
                   "Karen", "Kari", "Karin", "Karina", "Karissa", "Karl", "Karla",
                   "Karlee", "Kasey", "Kassandra", "Kassidy", "Kate", "Katelyn", "Katelynn",
                   "Katharine", "Katherin", "Katherine", "Kathleen", "Kathryn", "Kathy", "Katie",
                   "Katina", "Katlyn", "Katrina", "Kawena", "Kawika", "Kay", "Kaya",
                   "Kaycee", "Kayden", "Kaydence", "Kayla", "Kaylee", "Kayleigh", "Keanu",
                   "Keaton", "Keegan", "Keenan", "Kehaulani", "Keira", "Keisha", "Keith",
                   "Kekoa", "Kelley", "Kelli", "Kellie", "Kelly", "Kelsey", "Kelsie",
                   "Kelvin", "Ken", "Kendall", "Kendra", "Kendrick", "Kennedy", "Kenneth",
                   "Kenny", "Kent", "Kenya", "Keola", "Keoni", "Keri", "Kerri",
                   "Kerry", "Kevin", "Kevon", "Khadijah", "Khalil", "Kia", "Kiana",
                   "Kiani", "Kiara", "Kierra", "Kim", "Kimberlee", "Kimberley", "Kimberly",
                   "Kira", "Kirk", "Kirsten", "Kisha", "Kizzy", "Kobe", "Kody",
                   "Kory", "Kris", "Krista", "Kristen", "Kristi", "Kristie", "Kristin",
                   "Kristina", "Kristine", "Kristopher", "Kristy", "Krystal", "Krystle", "Kurt",
                   "Kyla", "Kyle", "Kylee", "Kyleigh", "Kyler", "Kylie", "Kyra",
                   "Lacey", "Laci", "Lacy", "Ladarius", "Ladonna", "Laila", "Lakeisha",
                   "Lakesha", "Lakisha", "Lamar", "Lamont", "Lana", "Lance", "Landen",
                   "Landon", "Lane", "Lani", "Larry", "Lashawn", "Lashonda", "Latasha",
                   "Latisha", "Latonya", "Latoya", "Laura", "Laurel", "Lauren", "Laurie",
                   "Lauryn", "Lawanda", "Lawrence", "Layla", "Leah", "Leann", "Lee",
                   "Leigh", "Leila", "Leilani", "Lena", "Leo", "Leon", "Leona",
                   "Leonard", "Leonardo", "Leroy", "Lesley", "Leslie", "Leticia", "Levi",
                   "Lewis", "Lexi", "Liam", "Liana", "Liliana", "Lillian", "Lillie",
                   "Lilly", "Lily", "Linda", "Lindsay", "Lindsey", "Lisa", "Liza",
                   "Lizbeth", "Lloyd", "Logan", "Lois", "London", "Lonnie", "Lora",
                   "Loren", "Lorena", "Lorenzo", "Loretta", "Lori", "Loriann", "Lorna",
                   "Lorraine", "Lorrie", "Louis", "Louise", "Lucas", "Lucia", "Lucy",
                   "Luis", "Luke", "Lydia", "Lyle", "Lynda", "Lynette", "Lynn",
                   "Lynne", "Mackenzie", "Macy", "Maddison", "Madeleine", "Madeline", "Madelyn",
                   "Madison", "Madisyn", "Maeve", "Maggie", "Mahealani", "Mahina", "Maia",
                   "Maile", "Makana", "Makayla", "Makenna", "Makenzie", "Makoa", "Malachi",
                   "Malcolm", "Male", "Malia", "Malik", "Mallory", "Mandi", "Mandy",
                   "Manuel", "Marc", "Marcel", "Marcella", "Marci", "Marcia", "Marco",
                   "Marcos", "Marcus", "Marcy", "Margaret", "Mari", "Maria", "Mariah",
                   "Mariana", "Marianne", "Maribel", "Marie", "Marilyn", "Marina", "Mario",
                   "Marion", "Marisa", "Marisol", "Marissa", "Mark", "Marlene", "Marlon",
                   "Marquis", "Marquise", "Marquita", "Marsha", "Marshall", "Martha", "Martin",
                   "Marty", "Marvin", "Mary", "Maryann", "Mason", "Mathew", "Matt",
                   "Matthew", "Maureen", "Maurice", "Max", "Maxwell", "Maya", "Mayra",
                   "Mckay", "Mckayla", "Mckenna", "Mckenzie", "Meagan", "Meaghan", "Megan",
                   "Meghan", "Mekhi", "Melanie", "Melia", "Melinda", "Melissa", "Melody",
                   "Melvin", "Mercedes", "Meredith", "Mia", "Micah", "Michael", "Michaela",
                   "Micheal", "Michele", "Michelle", "Miguel", "Mikaela", "Mikayla", "Mike",
                   "Miles", "Milton", "Mindy", "Miracle", "Miranda", "Misti", "Misty",
                   "Mitchell", "Molly", "Monica", "Monique", "Monte", "Morgan", "Moshe",
                   "Mya", "Myles", "Myra", "Myron", "Nadia", "Nadine", "Nainoa",
                   "Nakia", "Nalani", "Nancy", "Nanea", "Naomi", "Nasir", "Natalia",
                   "Natalie", "Natasha", "Nathan", "Nathaniel", "Nayeli", "Neal", "Neil",
                   "Nelson", "Nevaeh", "Nia", "Nicholas", "Nichole", "Nick", "Nickolas",
                   "Nicolas", "Nicole", "Nikita", "Nikki", "Nina", "Noa", "Noah",
                   "Nolan", "Nora", "Norma", "Norman", "Normand", "Notnamed", "Nyasia",
                   "Oliver", "Olivia", "Omar", "Omarion", "Orlando", "Oscar", "Owen",
                   "Paige", "Pam", "Pamela", "Paris", "Parker", "Pat", "Patrice",
                   "Patricia", "Patrick", "Patti", "Patty", "Paul", "Paula", "Pauline",
                   "Payton", "Pedro", "Peggy", "Penny", "Perry", "Peter", "Peyton",
                   "Philip", "Phillip", "Phoebe", "Phyllis", "Piper", "Pooja", "Porter", "Precious",
                   "Preston", "Priscilla", "Quentin", "Quinn", "Quinton", "Rachael", "Rachel",
                   "Rachelle", "Raekwon", "Rafael", "Raheem", "Ralph", "Ramon", "Ramona",
                   "Randal", "Randall", "Randi", "Randy", "Raquel", "Rashad", "Raul",
                   "Raven", "Ray", "Raymond", "Reagan", "Rebecca", "Rebekah", "Reed",
                   "Reese", "Regina", "Reginald", "Reid", "Renae", "Renata", "Rene",
                   "Renee", "Rex", "Rhonda", "Ricardo", "Richard", "Rick", "Rickey",
                   "Ricky", "Riley", "Rita", "Robert", "Roberta", "Roberto", "Robin",
                   "Robyn", "Rochelle", "Roderick", "Rodney", "Roger", "Roland", "Ron",
                   "Ronald", "Ronda", "Ronnie", "Roosevelt", "Rory", "Rosa", "Rose",
                   "Rosemary", "Rosie", "Ross", "Rowena", "Roxanne", "Roy", "Royce",
                   "Ruben", "Ruby", "Rudy", "Russell", "Ruth", "Ryan", "Ryder",
                   "Ryker", "Rylan", "Rylee", "Rylie", "Sabrina", "Sade", "Sadie",
                   "Sage", "Sally", "Salvador", "Salvatore", "Sam", "Samantha", "Sammy",
                   "Samuel", "Sandra", "Sandy", "Saniya", "Santana", "Santiago", "Sara",
                   "Sarah", "Sasha", "Savanna", "Savannah", "Sawyer", "Scott", "Scottie",
                   "Scotty", "Sean", "Sebastian", "Selena", "Serena", "Serenity", "Sergio",
                   "Seth", "Shana", "Shane", "Shania", "Shanice", "Shaniqua", "Shanna",
                   "Shannon", "Shantel", "Shaquille", "Shari", "Sharon", "Shaun", "Shauna",
                   "Shawn", "Shawna", "Shayden", "Shayla", "Shaylee", "Shayna", "Sheena",
                   "Sheila", "Shelbi", "Shelby", "Sheldon", "Shelia", "Shelley", "Shelly",
                   "Sheri", "Sherri", "Sherrie", "Sherry", "Sheryl", "Shirley", "Shyla",
                   "Sidney", "Sienna", "Sierra", "Silas", "Simone", "Skylar", "Skyler",
                   "Sofia", "Sonia", "Sonja", "Sonya", "Sophia", "Sophie", "Spencer",
                   "Stacey", "Staci", "Stacie", "Stacy", "Stanley", "Stefanie", "Stella",
                   "Stephani", "Stephanie", "Stephen", "Stephon", "Steve", "Steven", "Stuart",
                   "Sue", "Summer", "Susan", "Suzanne", "Sydney", "Sylvia", "Tabitha",
                   "Talia", "Tamara", "Tameka", "Tami", "Tamia", "Tamika", "Tammie",
                   "Tammy", "Tania", "Tanner", "Tanya", "Tara", "Taryn", "Tasha",
                   "Tate", "Tatiana", "Tatum", "Tatyana", "Tavon", "Tayla", "Taylor",
                   "Teagan", "Ted", "Teddy", "Tehani", "Teresa", "Teri", "Terrance",
                   "Terrell", "Terrence", "Terri", "Terry", "Tessa", "Tevin", "Thad",
                   "Theodore", "Theresa", "Thomas", "Tia", "Tiana", "Tiara", "Tiare",
                   "Tierra", "Tiffany", "Tim", "Timmy", "Timothy", "Tina", "Toby",
                   "Todd", "Tom", "Tommie", "Tommy", "Toni", "Tonia", "Tony",
                   "Tonya", "Tori", "Tracey", "Traci", "Tracie", "Tracy", "Travis",
                   "Trent", "Trenton", "Trevon", "Trevor", "Trey", "Tricia", "Trina",
                   "Trinity", "Trisha", "Trista", "Tristan", "Tristen", "Troy", "Tucker",
                   "Ty", "Tyler", "Tyra", "Tyree", "Tyrel", "Tyrell", "Tyrese",
                   "Tyrone", "Tyson", "Unknown", "Unnamed", "Valeria", "Valerie", "Vanessa",
                   "Vera", "Vernon", "Veronica", "Vicki", "Vickie", "Vicky", "Victor",
                   "Victoria", "Vincent", "Virginia", "Vivian", "Wade", "Walker", "Walter",
                   "Wanda", "Warren", "Wassillie", "Wayne", "Wendell", "Wendy", "Wesley",
                   "Weston", "Whitney", "Willa", "William", "Willie", "Willow", "Wyatt",
                   "Xander", "Xavier", "Yesenia", "Yolanda", "Yvette", "Yvonne", "Zachariah",
                   "Zachary", "Zachery", "Zackary", "Zander", "Zane", "Zion", "Zoe", "Zoey"
               }
 	End Class
 End Namespace
 			Dim rand As New Random()
 
 			' Enumerate all possible combinations of year, state, name, in a random-ish order
 			Dim allCombinations = From year In Enumerable.Range(minYear, maxYear - minYear + 1) , state In _stateIdentifiers , name In _commonPeopleNames
 			                      Order By rand.Next()
 			                      Select New BabyInfo With {.Name = name, .State = state, .Year = year, .Count = rand.Next(200, 1000)}
 
 			' Return a subset of size numRecords as a list
 			Return allCombinations.Take(numRecords).ToList()
 		End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\DataLoader.vb" startline="32" endline="32"><![CDATA[
 			Dim allCombinations = From year In Enumerable.Range(minYear, maxYear - minYear + 1) , state In _stateIdentifiers , name In _commonPeopleNames
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\DataLoader.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\DataLoader.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\DataLoader.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="18" endline="18"><![CDATA[
         Private _minYear As Integer = -1, _maxYear As Integer = -1, _maxValue As Integer = -1
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="13" endline="15"><![CDATA[
 		Shared Sub New()
 			DefaultStyleKeyProperty.OverrideMetadata(GetType(Graph), New FrameworkPropertyMetadata(GetType(Graph)))
 		End Sub
 
 		Private _babyResults As List(Of BabyInfo)
         Private _minYear As Integer = -1, _maxYear As Integer = -1, _maxValue As Integer = -1
 
 		Friend Sub Configure(ByVal babyResults As List(Of BabyInfo))
 			_babyResults = babyResults
 			If _babyResults IsNot Nothing AndAlso _babyResults.Count > 0 Then
 				_maxValue = _babyResults.Max(Function(b) b.Count)
 				_minYear = _babyResults.Min(Function(b) b.Year)
 				_maxYear = _babyResults.Max(Function(b) b.Year)
 			End If
 		End Sub
 
 		Protected Overrides Sub OnInitialized(ByVal e As EventArgs)
 			MyBase.OnInitialized(e)
 			ToolTip = New ToolTip With {.Content = "Results"}
 		End Sub
 
 		Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
 			MyBase.OnMouseMove(e)
 			If _minYear >= 0 AndAlso _maxYear >= 0 AndAlso _maxValue >= 0 Then
                 Dim s = RenderSize
                 Dim p = e.GetPosition(Me)
                 Dim year = _minYear + CInt(Fix((CType((p.X), Long) \ CType((s.Width), Long)) * (_maxYear - _minYear)))
 
                 Dim tt = CType(Me.ToolTip, ToolTip)
 				tt.Content = "Year
 				tt.Visibility = Visibility.Visible
 			End If
 		End Sub
 
 		Protected Overrides Sub OnRender(ByVal drawingContext As DrawingContext)
 			MyBase.OnRender(drawingContext)
 
 			' Draw the babies
 			If _babyResults IsNot Nothing AndAlso _babyResults.Count > 0 Then
                 Dim width = CInt(Fix(RenderSize.Width)), height As Integer = CInt(Fix(RenderSize.Height))
 
 				If _minYear <> _maxYear Then
 					' Note
 					' These are the dimensions everything will be scaled to.
                     Dim per_x = CSng(width) / (_maxYear - _minYear), per_y As Single = CSng(height) / _maxValue
 
 					' Draw axis lines
 					Dim paxis As New Pen(New SolidColorBrush(Color.FromArgb(128, 128, 128, 128)), 1)
                     For i = (height \ 10) To height - 1 Step (height \ 10)
                         drawingContext.DrawLine(paxis, New Point(0, i), New Point(width, i))
                     Next i
                     Dim xvalues = (_maxYear - _minYear)
                     Dim xincrement = CSng(width) / xvalues
                     For i = xincrement To width - 1 Step xincrement
                         drawingContext.DrawLine(paxis, New Point(i, 0), New Point(i, height))
                     Next i
 
 					' Draw data
 					Dim p As New Pen(New SolidColorBrush(Colors.White), 4)
                     Dim curr_x = 0.0F, curr_y = 0.0F, last_x As Single = -1, last_y As Single = -1
                     Dim last_year = -1
 
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
 			DefaultStyleKeyProperty.OverrideMetadata(GetType(Graph), New FrameworkPropertyMetadata(GetType(Graph)))
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="16" endline="27"><![CDATA[
 
 		Private _babyResults As List(Of BabyInfo)
         Private _minYear As Integer = -1, _maxYear As Integer = -1, _maxValue As Integer = -1
 
 		Friend Sub Configure(ByVal babyResults As List(Of BabyInfo))
 			_babyResults = babyResults
 			If _babyResults IsNot Nothing AndAlso _babyResults.Count > 0 Then
 				_maxValue = _babyResults.Max(Function(b) b.Count)
 				_minYear = _babyResults.Min(Function(b) b.Year)
 				_maxYear = _babyResults.Max(Function(b) b.Year)
 			End If
 		End Sub
 
 		Protected Overrides Sub OnInitialized(ByVal e As EventArgs)
 			MyBase.OnInitialized(e)
 			ToolTip = New ToolTip With {.Content = "Results"}
 		End Sub
 
 		Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
 			MyBase.OnMouseMove(e)
 			If _minYear >= 0 AndAlso _maxYear >= 0 AndAlso _maxValue >= 0 Then
                 Dim s = RenderSize
                 Dim p = e.GetPosition(Me)
                 Dim year = _minYear + CInt(Fix((CType((p.X), Long) \ CType((s.Width), Long)) * (_maxYear - _minYear)))
 
                 Dim tt = CType(Me.ToolTip, ToolTip)
 				tt.Content = "Year
 				tt.Visibility = Visibility.Visible
 			End If
 		End Sub
 
 		Protected Overrides Sub OnRender(ByVal drawingContext As DrawingContext)
 			MyBase.OnRender(drawingContext)
 
 			' Draw the babies
 			If _babyResults IsNot Nothing AndAlso _babyResults.Count > 0 Then
                 Dim width = CInt(Fix(RenderSize.Width)), height As Integer = CInt(Fix(RenderSize.Height))
 
 				If _minYear <> _maxYear Then
 					' Note
 					' These are the dimensions everything will be scaled to.
                     Dim per_x = CSng(width) / (_maxYear - _minYear), per_y As Single = CSng(height) / _maxValue
 
 					' Draw axis lines
 					Dim paxis As New Pen(New SolidColorBrush(Color.FromArgb(128, 128, 128, 128)), 1)
                     For i = (height \ 10) To height - 1 Step (height \ 10)
                         drawingContext.DrawLine(paxis, New Point(0, i), New Point(width, i))
                     Next i
                     Dim xvalues = (_maxYear - _minYear)
                     Dim xincrement = CSng(width) / xvalues
                     For i = xincrement To width - 1 Step xincrement
                         drawingContext.DrawLine(paxis, New Point(i, 0), New Point(i, height))
                     Next i
 
 					' Draw data
 					Dim p As New Pen(New SolidColorBrush(Colors.White), 4)
                     Dim curr_x = 0.0F, curr_y = 0.0F, last_x As Single = -1, last_y As Single = -1
                     Dim last_year = -1
 
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
 				_maxValue = _babyResults.Max(Function(b) b.Count)
 				_minYear = _babyResults.Min(Function(b) b.Year)
 				_maxYear = _babyResults.Max(Function(b) b.Year)
 			End If
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="28" endline="32"><![CDATA[
 
 		Protected Overrides Sub OnInitialized(ByVal e As EventArgs)
 			MyBase.OnInitialized(e)
 			ToolTip = New ToolTip With {.Content = "Results"}
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="33" endline="45"><![CDATA[
 
 		Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
 			MyBase.OnMouseMove(e)
 			If _minYear >= 0 AndAlso _maxYear >= 0 AndAlso _maxValue >= 0 Then
                 Dim s = RenderSize
                 Dim p = e.GetPosition(Me)
                 Dim year = _minYear + CInt(Fix((CType((p.X), Long) \ CType((s.Width), Long)) * (_maxYear - _minYear)))
 
                 Dim tt = CType(Me.ToolTip, ToolTip)
 				tt.Content = "Year
 				tt.Visibility = Visibility.Visible
 			End If
 		End Sub
 
 		Protected Overrides Sub OnRender(ByVal drawingContext As DrawingContext)
 			MyBase.OnRender(drawingContext)
 
 			' Draw the babies
 			If _babyResults IsNot Nothing AndAlso _babyResults.Count > 0 Then
                 Dim width = CInt(Fix(RenderSize.Width)), height As Integer = CInt(Fix(RenderSize.Height))
 
 				If _minYear <> _maxYear Then
 					' Note
 					' These are the dimensions everything will be scaled to.
                     Dim per_x = CSng(width) / (_maxYear - _minYear), per_y As Single = CSng(height) / _maxValue
 
 					' Draw axis lines
 					Dim paxis As New Pen(New SolidColorBrush(Color.FromArgb(128, 128, 128, 128)), 1)
                     For i = (height \ 10) To height - 1 Step (height \ 10)
                         drawingContext.DrawLine(paxis, New Point(0, i), New Point(width, i))
                     Next i
                     Dim xvalues = (_maxYear - _minYear)
                     Dim xincrement = CSng(width) / xvalues
                     For i = xincrement To width - 1 Step xincrement
                         drawingContext.DrawLine(paxis, New Point(i, 0), New Point(i, height))
                     Next i
 
 					' Draw data
 					Dim p As New Pen(New SolidColorBrush(Colors.White), 4)
                     Dim curr_x = 0.0F, curr_y = 0.0F, last_x As Single = -1, last_y As Single = -1
                     Dim last_year = -1
 
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
                 Dim s = RenderSize
                 Dim p = e.GetPosition(Me)
                 Dim year = _minYear + CInt(Fix((CType((p.X), Long) \ CType((s.Width), Long)) * (_maxYear - _minYear)))
 
                 Dim tt = CType(Me.ToolTip, ToolTip)
 				tt.Content = "Year
 				tt.Visibility = Visibility.Visible
 			End If
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="46" endline="89"><![CDATA[
 
 		Protected Overrides Sub OnRender(ByVal drawingContext As DrawingContext)
 			MyBase.OnRender(drawingContext)
 
 			' Draw the babies
 			If _babyResults IsNot Nothing AndAlso _babyResults.Count > 0 Then
                 Dim width = CInt(Fix(RenderSize.Width)), height As Integer = CInt(Fix(RenderSize.Height))
 
 				If _minYear <> _maxYear Then
 					' Note
 					' These are the dimensions everything will be scaled to.
                     Dim per_x = CSng(width) / (_maxYear - _minYear), per_y As Single = CSng(height) / _maxValue
 
 					' Draw axis lines
 					Dim paxis As New Pen(New SolidColorBrush(Color.FromArgb(128, 128, 128, 128)), 1)
                     For i = (height \ 10) To height - 1 Step (height \ 10)
                         drawingContext.DrawLine(paxis, New Point(0, i), New Point(width, i))
                     Next i
                     Dim xvalues = (_maxYear - _minYear)
                     Dim xincrement = CSng(width) / xvalues
                     For i = xincrement To width - 1 Step xincrement
                         drawingContext.DrawLine(paxis, New Point(i, 0), New Point(i, height))
                     Next i
 
 					' Draw data
 					Dim p As New Pen(New SolidColorBrush(Colors.White), 4)
                     Dim curr_x = 0.0F, curr_y = 0.0F, last_x As Single = -1, last_y As Single = -1
                     Dim last_year = -1
 
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
                 Dim width = CInt(Fix(RenderSize.Width)), height As Integer = CInt(Fix(RenderSize.Height))
 
 				If _minYear <> _maxYear Then
 					' Note
 					' These are the dimensions everything will be scaled to.
                     Dim per_x = CSng(width) / (_maxYear - _minYear), per_y As Single = CSng(height) / _maxValue
 
 					' Draw axis lines
 					Dim paxis As New Pen(New SolidColorBrush(Color.FromArgb(128, 128, 128, 128)), 1)
                     For i = (height \ 10) To height - 1 Step (height \ 10)
                         drawingContext.DrawLine(paxis, New Point(0, i), New Point(width, i))
                     Next i
                     Dim xvalues = (_maxYear - _minYear)
                     Dim xincrement = CSng(width) / xvalues
                     For i = xincrement To width - 1 Step xincrement
                         drawingContext.DrawLine(paxis, New Point(i, 0), New Point(i, height))
                     Next i
 
 					' Draw data
 					Dim p As New Pen(New SolidColorBrush(Colors.White), 4)
                     Dim curr_x = 0.0F, curr_y = 0.0F, last_x As Single = -1, last_y As Single = -1
                     Dim last_year = -1
 
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
                     Dim per_x = CSng(width) / (_maxYear - _minYear), per_y As Single = CSng(height) / _maxValue
 
 					' Draw axis lines
 					Dim paxis As New Pen(New SolidColorBrush(Color.FromArgb(128, 128, 128, 128)), 1)
                     For i = (height \ 10) To height - 1 Step (height \ 10)
                         drawingContext.DrawLine(paxis, New Point(0, i), New Point(width, i))
                     Next i
                     Dim xvalues = (_maxYear - _minYear)
                     Dim xincrement = CSng(width) / xvalues
                     For i = xincrement To width - 1 Step xincrement
                         drawingContext.DrawLine(paxis, New Point(i, 0), New Point(i, height))
                     Next i
 
 					' Draw data
 					Dim p As New Pen(New SolidColorBrush(Colors.White), 4)
                     Dim curr_x = 0.0F, curr_y = 0.0F, last_x As Single = -1, last_y As Single = -1
                     Dim last_year = -1
 
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
                     Dim xvalues = (_maxYear - _minYear)
                     Dim xincrement = CSng(width) / xvalues
                     For i = xincrement To width - 1 Step xincrement
                         drawingContext.DrawLine(paxis, New Point(i, 0), New Point(i, height))
                     Next i
 
 					' Draw data
 					Dim p As New Pen(New SolidColorBrush(Colors.White), 4)
                     Dim curr_x = 0.0F, curr_y = 0.0F, last_x As Single = -1, last_y As Single = -1
                     Dim last_year = -1
 
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
 					Dim p As New Pen(New SolidColorBrush(Colors.White), 4)
                     Dim curr_x = 0.0F, curr_y = 0.0F, last_x As Single = -1, last_y As Single = -1
                     Dim last_year = -1
 
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
                     For Each b In _babyResults
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
                         If b.Year <> last_year Then
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
                             curr_x = (b.Year - _minYear) * per_x
                             curr_y = height - (b.Count * per_y)
                             If last_x <> -1 AndAlso last_y <> -1 Then
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
                                 drawingContext.DrawLine(p, New Point(curr_x, height), New Point(curr_x, curr_y))
                             End If
                             last_x = curr_x
                             last_y = curr_y
                             last_year = b.Year
                         End If
                     Next b
 				End If
 			End If
 		End Sub
 	End Class
 End Namespace
 				End If
 			End If
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="23" endline="23"><![CDATA[
 				_maxValue = _babyResults.Max(Function(b) b.Count)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="24" endline="24"><![CDATA[
 				_minYear = _babyResults.Min(Function(b) b.Year)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Graph.vb" startline="25" endline="25"><![CDATA[
 				_maxYear = _babyResults.Max(Function(b) b.Year)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="30" endline="40"><![CDATA[
 		Public Sub New()
 			' Initialize controls
 			InitializeComponent()
 
 			' Setup a timer for the slider control so that we don't load for every single tick change
 			_sizeChangedTimer = New DispatcherTimer With {.Interval = TimeSpan.FromSeconds(.5)}
 			AddHandler _sizeChangedTimer.Tick, Sub(sender, e)
 				CType(sender, DispatcherTimer).Stop()
 				LoadAsync(CInt(Fix(slNumRecords.Value)))
 			End Sub
 		End Sub
 
 		Private Sub MainWindow_Loaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Create a UI task factory
 			_uiTasks = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
 
 			' Set up the processors slider
 			slProcessorsToUse.Minimum = 1
 			slProcessorsToUse.Value = Environment.ProcessorCount
 			slProcessorsToUse.Maximum = slProcessorsToUse.Value
 
 			' Setup the label controls for the sliders
 			lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 			lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 
 			' Load the data for the app
 			LoadAsync(CInt(Fix(slNumRecords.Value)))
 		End Sub
 
 		Private Sub btnRunLinq_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Run sequentially
 			RunQuery(Function() _sequentialQuery.ToList(), graphLinq, lblLinqTime)
 		End Sub
 
 		Private Sub btnRunPlinq_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Run in parallel
 			RunQuery(Function() _parallelQuery.ToList(), graphPlinq, lblPlinqTime)
 		End Sub
 
 		Friend Class QueryData
 			Public Name, State As String
 		End Class
 
 		Private Sub RunQuery(ByVal query As Func(Of List(Of BabyInfo)), ByVal targetGraph As Graph, ByVal targetLabel As Label)
 			' Get query info values from the text box.
 			_userQuery.Name = txtQueryName.Text.Trim()
 			_userQuery.State = txtQueryState.Text.Trim()
 			If _userQuery.Name.Length = 0 OrElse _userQuery.State.Length = 0 Then
 				Return
 			End If
 
 			' Disable UI interaction
 			lblSpeedup.Visibility = Visibility.Hidden
 			targetLabel.Visibility = Visibility.Hidden
 			targetGraph.Visibility = Visibility.Hidden
 			ConfigureUiControls(False)
 
 			' Do query asynchronously
 				
             Task.Factory.StartNew(Sub()
                                       'Execute and time the query
                                       Dim results As List(Of BabyInfo) = Nothing
                                       Dim sw = Stopwatch.StartNew()
 
                                       For i = 0 To RUN_MULTIPLIER - 1
                                           results = query()
                                       Next i
                                       sw.Stop()
 
                                       'Update the UI
                                       _uiTasks.StartNew(Sub()
                                                             'Update the run time
                                                             If targetLabel.Equals(lblLinqTime) Then
                                                                 _lastSeqRun = sw.ElapsedTicks
                                                             End If
 
                                                             'Update the graph
                                                             targetGraph.Configure(results)
                                                             targetGraph.Visibility = Windows.Visibility.Visible
                                                             targetGraph.InvalidateVisual()
 
                                                             'Display the execution time
                                                             targetLabel.Content = String.Format("{0
                                                             targetLabel.Visibility = Windows.Visibility.Visible
 
                                                             'Show any speedup
                                                             If _lastSeqRun <> 0 AndAlso _lastParRun <> 0 Then
                                                                 lblSpeedup.Content = String.Format("{0
                                                                 lblSpeedup.Visibility = Visibility.Visible
                                                             End If
 
                                                             'Allow the user to interact again
                                                             ConfigureUiControls(True)
 
                                                         End Sub)
                                   End Sub)
 
 		End Sub
 
 		Private Sub LoadAsync(ByVal numRecords As Integer)
 			' Loading new data, so hide and reset old timings
 			lblSpeedup.Visibility = Visibility.Hidden
 			lblPlinqTime.Visibility = lblSpeedup.Visibility
 			lblLinqTime.Visibility = lblPlinqTime.Visibility
 			_lastParRun = 0
 			_lastSeqRun = _lastParRun
 
 			' Clear the screen
 			graphPlinq.Visibility = Visibility.Hidden
 			graphLinq.Visibility = graphPlinq.Visibility
 			ConfigureUiControls(False)
 
 			' Load all of the names asynchronously; when done, update the UI
 			Task.Factory.StartNew(Sub()
 				_babies = DataLoader.GenerateRandom(numRecords, YEAR_START, YEAR_END)
 				_uiTasks.StartNew(Sub()
 					InitializeQueries()
 					ConfigureUiControls(True)
 				End Sub)
 			End Sub)
 		End Sub
 
 		Private Sub ConfigureUiControls(ByVal allowUserInteraction As Boolean)
 			' Controls that the user can interact with
 			slNumRecords.IsEnabled = allowUserInteraction
 			slProcessorsToUse.IsEnabled = slNumRecords.IsEnabled
 			btnRunPlinq.IsEnabled = slProcessorsToUse.IsEnabled
 			btnRunLinq.IsEnabled = btnRunPlinq.IsEnabled
 			txtQueryState.IsEnabled = btnRunLinq.IsEnabled
 			txtQueryName.IsEnabled = txtQueryState.IsEnabled
 		End Sub
 
 
 		Private Sub slSize_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle data size slider updates
 			If slNumRecords.IsVisible Then
 				lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 				_sizeChangedTimer.Stop()
 				_sizeChangedTimer.Start()
 			End If
 		End Sub
 
 		Private Sub slProcessorsToUse_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle processors to use updates
 			If slProcessorsToUse.IsVisible Then
 				lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 				InitializeQueries()
 			End If
 		End Sub
 	End Class
 End Namespace
 		Private _userQuery As New QueryData()
 		Private _babies As New List(Of BabyInfo)()
 		Private _parallelQuery As ParallelQuery(Of BabyInfo)
 		Private _sequentialQuery As IEnumerable(Of BabyInfo)
 		Private _lastSeqRun As Long = 0, _lastParRun As Long = 0
 		Private _sizeChangedTimer As DispatcherTimer
 		Private _uiTasks As TaskFactory
 
 		Public Sub New()
 			' Initialize controls
 			InitializeComponent()
 
 			' Setup a timer for the slider control so that we don't load for every single tick change
 			_sizeChangedTimer = New DispatcherTimer With {.Interval = TimeSpan.FromSeconds(.5)}
 			AddHandler _sizeChangedTimer.Tick, Sub(sender, e)
 				CType(sender, DispatcherTimer).Stop()
 				LoadAsync(CInt(Fix(slNumRecords.Value)))
 			End Sub
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="41" endline="57"><![CDATA[
 
 		Private Sub MainWindow_Loaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Create a UI task factory
 			_uiTasks = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
 
 			' Set up the processors slider
 			slProcessorsToUse.Minimum = 1
 			slProcessorsToUse.Value = Environment.ProcessorCount
 			slProcessorsToUse.Maximum = slProcessorsToUse.Value
 
 			' Setup the label controls for the sliders
 			lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 			lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 
 			' Load the data for the app
 			LoadAsync(CInt(Fix(slNumRecords.Value)))
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="58" endline="62"><![CDATA[
 
 		Private Sub btnRunLinq_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Run sequentially
 			RunQuery(Function() _sequentialQuery.ToList(), graphLinq, lblLinqTime)
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="63" endline="67"><![CDATA[
 
 		Private Sub btnRunPlinq_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Run in parallel
 			RunQuery(Function() _parallelQuery.ToList(), graphPlinq, lblPlinqTime)
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="68" endline="127"><![CDATA[
 
 		Friend Class QueryData
 			Public Name, State As String
 		End Class
 
 		Private Sub RunQuery(ByVal query As Func(Of List(Of BabyInfo)), ByVal targetGraph As Graph, ByVal targetLabel As Label)
 			' Get query info values from the text box.
 			_userQuery.Name = txtQueryName.Text.Trim()
 			_userQuery.State = txtQueryState.Text.Trim()
 			If _userQuery.Name.Length = 0 OrElse _userQuery.State.Length = 0 Then
 				Return
 			End If
 
 			' Disable UI interaction
 			lblSpeedup.Visibility = Visibility.Hidden
 			targetLabel.Visibility = Visibility.Hidden
 			targetGraph.Visibility = Visibility.Hidden
 			ConfigureUiControls(False)
 
 			' Do query asynchronously
 				
             Task.Factory.StartNew(Sub()
                                       'Execute and time the query
                                       Dim results As List(Of BabyInfo) = Nothing
                                       Dim sw = Stopwatch.StartNew()
 
                                       For i = 0 To RUN_MULTIPLIER - 1
                                           results = query()
                                       Next i
                                       sw.Stop()
 
                                       'Update the UI
                                       _uiTasks.StartNew(Sub()
                                                             'Update the run time
                                                             If targetLabel.Equals(lblLinqTime) Then
                                                                 _lastSeqRun = sw.ElapsedTicks
                                                             End If
 
                                                             'Update the graph
                                                             targetGraph.Configure(results)
                                                             targetGraph.Visibility = Windows.Visibility.Visible
                                                             targetGraph.InvalidateVisual()
 
                                                             'Display the execution time
                                                             targetLabel.Content = String.Format("{0
                                                             targetLabel.Visibility = Windows.Visibility.Visible
 
                                                             'Show any speedup
                                                             If _lastSeqRun <> 0 AndAlso _lastParRun <> 0 Then
                                                                 lblSpeedup.Content = String.Format("{0
                                                                 lblSpeedup.Visibility = Visibility.Visible
                                                             End If
 
                                                             'Allow the user to interact again
                                                             ConfigureUiControls(True)
 
                                                         End Sub)
                                   End Sub)
 
 		End Sub
 
 		Private Sub LoadAsync(ByVal numRecords As Integer)
 			' Loading new data, so hide and reset old timings
 			lblSpeedup.Visibility = Visibility.Hidden
 			lblPlinqTime.Visibility = lblSpeedup.Visibility
 			lblLinqTime.Visibility = lblPlinqTime.Visibility
 			_lastParRun = 0
 			_lastSeqRun = _lastParRun
 
 			' Clear the screen
 			graphPlinq.Visibility = Visibility.Hidden
 			graphLinq.Visibility = graphPlinq.Visibility
 			ConfigureUiControls(False)
 
 			' Load all of the names asynchronously; when done, update the UI
 			Task.Factory.StartNew(Sub()
 				_babies = DataLoader.GenerateRandom(numRecords, YEAR_START, YEAR_END)
 				_uiTasks.StartNew(Sub()
 					InitializeQueries()
 					ConfigureUiControls(True)
 				End Sub)
 			End Sub)
 		End Sub
 
 		Private Sub ConfigureUiControls(ByVal allowUserInteraction As Boolean)
 			' Controls that the user can interact with
 			slNumRecords.IsEnabled = allowUserInteraction
 			slProcessorsToUse.IsEnabled = slNumRecords.IsEnabled
 			btnRunPlinq.IsEnabled = slProcessorsToUse.IsEnabled
 			btnRunLinq.IsEnabled = btnRunPlinq.IsEnabled
 			txtQueryState.IsEnabled = btnRunLinq.IsEnabled
 			txtQueryName.IsEnabled = txtQueryState.IsEnabled
 		End Sub
 
 
 		Private Sub slSize_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle data size slider updates
 			If slNumRecords.IsVisible Then
 				lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 				_sizeChangedTimer.Stop()
 				_sizeChangedTimer.Start()
 			End If
 		End Sub
 
 		Private Sub slProcessorsToUse_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle processors to use updates
 			If slProcessorsToUse.IsVisible Then
 				lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 				InitializeQueries()
 			End If
 		End Sub
 	End Class
 End Namespace
 			_userQuery.Name = txtQueryName.Text.Trim()
 			_userQuery.State = txtQueryState.Text.Trim()
 			If _userQuery.Name.Length = 0 OrElse _userQuery.State.Length = 0 Then
 				Return
 			End If
 
 			' Disable UI interaction
 			lblSpeedup.Visibility = Visibility.Hidden
 			targetLabel.Visibility = Visibility.Hidden
 			targetGraph.Visibility = Visibility.Hidden
 			ConfigureUiControls(False)
 
 			' Do query asynchronously
 				
             Task.Factory.StartNew(Sub()
                                       'Execute and time the query
                                       Dim results As List(Of BabyInfo) = Nothing
                                       Dim sw = Stopwatch.StartNew()
 
                                       For i = 0 To RUN_MULTIPLIER - 1
                                           results = query()
                                       Next i
                                       sw.Stop()
 
                                       'Update the UI
                                       _uiTasks.StartNew(Sub()
                                                             'Update the run time
                                                             If targetLabel.Equals(lblLinqTime) Then
                                                                 _lastSeqRun = sw.ElapsedTicks
                                                             End If
 
                                                             'Update the graph
                                                             targetGraph.Configure(results)
                                                             targetGraph.Visibility = Windows.Visibility.Visible
                                                             targetGraph.InvalidateVisual()
 
                                                             'Display the execution time
                                                             targetLabel.Content = String.Format("{0
                                                             targetLabel.Visibility = Windows.Visibility.Visible
 
                                                             'Show any speedup
                                                             If _lastSeqRun <> 0 AndAlso _lastParRun <> 0 Then
                                                                 lblSpeedup.Content = String.Format("{0
                                                                 lblSpeedup.Visibility = Visibility.Visible
                                                             End If
 
                                                             'Allow the user to interact again
                                                             ConfigureUiControls(True)
 
                                                         End Sub)
                                   End Sub)
 
 		End Sub
 
 		Private Sub LoadAsync(ByVal numRecords As Integer)
 			' Loading new data, so hide and reset old timings
 			lblSpeedup.Visibility = Visibility.Hidden
 			lblPlinqTime.Visibility = lblSpeedup.Visibility
 			lblLinqTime.Visibility = lblPlinqTime.Visibility
 			_lastParRun = 0
 			_lastSeqRun = _lastParRun
 
 			' Clear the screen
 			graphPlinq.Visibility = Visibility.Hidden
 			graphLinq.Visibility = graphPlinq.Visibility
 			ConfigureUiControls(False)
 
 			' Load all of the names asynchronously; when done, update the UI
 			Task.Factory.StartNew(Sub()
 				_babies = DataLoader.GenerateRandom(numRecords, YEAR_START, YEAR_END)
 				_uiTasks.StartNew(Sub()
 					InitializeQueries()
 					ConfigureUiControls(True)
 				End Sub)
 			End Sub)
 		End Sub
 
 		Private Sub ConfigureUiControls(ByVal allowUserInteraction As Boolean)
 			' Controls that the user can interact with
 			slNumRecords.IsEnabled = allowUserInteraction
 			slProcessorsToUse.IsEnabled = slNumRecords.IsEnabled
 			btnRunPlinq.IsEnabled = slProcessorsToUse.IsEnabled
 			btnRunLinq.IsEnabled = btnRunPlinq.IsEnabled
 			txtQueryState.IsEnabled = btnRunLinq.IsEnabled
 			txtQueryName.IsEnabled = txtQueryState.IsEnabled
 		End Sub
 
 
 		Private Sub slSize_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle data size slider updates
 			If slNumRecords.IsVisible Then
 				lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 				_sizeChangedTimer.Stop()
 				_sizeChangedTimer.Start()
 			End If
 		End Sub
 
 		Private Sub slProcessorsToUse_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle processors to use updates
 			If slProcessorsToUse.IsVisible Then
 				lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 				InitializeQueries()
 			End If
 		End Sub
 	End Class
 End Namespace
 				Return
 			End If
 
 			' Disable UI interaction
 			lblSpeedup.Visibility = Visibility.Hidden
 			targetLabel.Visibility = Visibility.Hidden
 			targetGraph.Visibility = Visibility.Hidden
 			ConfigureUiControls(False)
 
 			' Do query asynchronously
 				
             Task.Factory.StartNew(Sub()
                                       'Execute and time the query
                                       Dim results As List(Of BabyInfo) = Nothing
                                       Dim sw = Stopwatch.StartNew()
 
                                       For i = 0 To RUN_MULTIPLIER - 1
                                           results = query()
                                       Next i
                                       sw.Stop()
 
                                       'Update the UI
                                       _uiTasks.StartNew(Sub()
                                                             'Update the run time
                                                             If targetLabel.Equals(lblLinqTime) Then
                                                                 _lastSeqRun = sw.ElapsedTicks
                                                             End If
 
                                                             'Update the graph
                                                             targetGraph.Configure(results)
                                                             targetGraph.Visibility = Windows.Visibility.Visible
                                                             targetGraph.InvalidateVisual()
 
                                                             'Display the execution time
                                                             targetLabel.Content = String.Format("{0
                                                             targetLabel.Visibility = Windows.Visibility.Visible
 
                                                             'Show any speedup
                                                             If _lastSeqRun <> 0 AndAlso _lastParRun <> 0 Then
                                                                 lblSpeedup.Content = String.Format("{0
                                                                 lblSpeedup.Visibility = Visibility.Visible
                                                             End If
 
                                                             'Allow the user to interact again
                                                             ConfigureUiControls(True)
 
                                                         End Sub)
                                   End Sub)
 
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="128" endline="150"><![CDATA[
 
 		Private Sub LoadAsync(ByVal numRecords As Integer)
 			' Loading new data, so hide and reset old timings
 			lblSpeedup.Visibility = Visibility.Hidden
 			lblPlinqTime.Visibility = lblSpeedup.Visibility
 			lblLinqTime.Visibility = lblPlinqTime.Visibility
 			_lastParRun = 0
 			_lastSeqRun = _lastParRun
 
 			' Clear the screen
 			graphPlinq.Visibility = Visibility.Hidden
 			graphLinq.Visibility = graphPlinq.Visibility
 			ConfigureUiControls(False)
 
 			' Load all of the names asynchronously; when done, update the UI
 			Task.Factory.StartNew(Sub()
 				_babies = DataLoader.GenerateRandom(numRecords, YEAR_START, YEAR_END)
 				_uiTasks.StartNew(Sub()
 					InitializeQueries()
 					ConfigureUiControls(True)
 				End Sub)
 			End Sub)
 		End Sub
 
 		Private Sub ConfigureUiControls(ByVal allowUserInteraction As Boolean)
 			' Controls that the user can interact with
 			slNumRecords.IsEnabled = allowUserInteraction
 			slProcessorsToUse.IsEnabled = slNumRecords.IsEnabled
 			btnRunPlinq.IsEnabled = slProcessorsToUse.IsEnabled
 			btnRunLinq.IsEnabled = btnRunPlinq.IsEnabled
 			txtQueryState.IsEnabled = btnRunLinq.IsEnabled
 			txtQueryName.IsEnabled = txtQueryState.IsEnabled
 		End Sub
 
 
 		Private Sub slSize_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle data size slider updates
 			If slNumRecords.IsVisible Then
 				lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 				_sizeChangedTimer.Stop()
 				_sizeChangedTimer.Start()
 			End If
 		End Sub
 
 		Private Sub slProcessorsToUse_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle processors to use updates
 			If slProcessorsToUse.IsVisible Then
 				lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 				InitializeQueries()
 			End If
 		End Sub
 	End Class
 End Namespace
 			lblSpeedup.Visibility = Visibility.Hidden
 			lblPlinqTime.Visibility = lblSpeedup.Visibility
 			lblLinqTime.Visibility = lblPlinqTime.Visibility
 			_lastParRun = 0
 			_lastSeqRun = _lastParRun
 
 			' Clear the screen
 			graphPlinq.Visibility = Visibility.Hidden
 			graphLinq.Visibility = graphPlinq.Visibility
 			ConfigureUiControls(False)
 
 			' Load all of the names asynchronously; when done, update the UI
 			Task.Factory.StartNew(Sub()
 				_babies = DataLoader.GenerateRandom(numRecords, YEAR_START, YEAR_END)
 				_uiTasks.StartNew(Sub()
 					InitializeQueries()
 					ConfigureUiControls(True)
 				End Sub)
 			End Sub)
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="151" endline="160"><![CDATA[
 
 		Private Sub ConfigureUiControls(ByVal allowUserInteraction As Boolean)
 			' Controls that the user can interact with
 			slNumRecords.IsEnabled = allowUserInteraction
 			slProcessorsToUse.IsEnabled = slNumRecords.IsEnabled
 			btnRunPlinq.IsEnabled = slProcessorsToUse.IsEnabled
 			btnRunLinq.IsEnabled = btnRunPlinq.IsEnabled
 			txtQueryState.IsEnabled = btnRunLinq.IsEnabled
 			txtQueryName.IsEnabled = txtQueryState.IsEnabled
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="161" endline="170"><![CDATA[
 
 
 		Private Sub slSize_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle data size slider updates
 			If slNumRecords.IsVisible Then
 				lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 				_sizeChangedTimer.Stop()
 				_sizeChangedTimer.Start()
 			End If
 		End Sub
 
 		Private Sub slProcessorsToUse_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle processors to use updates
 			If slProcessorsToUse.IsVisible Then
 				lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 				InitializeQueries()
 			End If
 		End Sub
 	End Class
 End Namespace
 				lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 				_sizeChangedTimer.Stop()
 				_sizeChangedTimer.Start()
 			End If
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="171" endline="178"><![CDATA[
 
 		Private Sub slProcessorsToUse_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
 			' Handle processors to use updates
 			If slProcessorsToUse.IsVisible Then
 				lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 				InitializeQueries()
 			End If
 		End Sub
 	End Class
 End Namespace
 				lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 				InitializeQueries()
 			End If
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="12" endline="30"><![CDATA[
 		Private Sub InitializeQueries()
             Dim numProcs = CInt(Fix(slProcessorsToUse.Value))
 
 			' SEQUENTIAL QUERY
             _sequentialQuery = From b In _babies
                                Where b.Name.Equals(_userQuery.Name, StringComparison.InvariantCultureIgnoreCase) AndAlso
                                      b.State = _userQuery.State AndAlso
                                      b.Year >= YEAR_START AndAlso b.Year <= YEAR_END
                                Order By b.Year
                                Select b
 
 			' PARALLEL QUERY
             _parallelQuery = From b In _babies.AsParallel().WithDegreeOfParallelism(numProcs)
                              Where b.Name.Equals(_userQuery.Name, StringComparison.InvariantCultureIgnoreCase) AndAlso
                                    b.State = _userQuery.State AndAlso
                                    b.Year >= YEAR_START AndAlso b.Year <= YEAR_END
                              Order By b.Year
                              Select b
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\MainWindow.g.vb" startline="173" endline="184"><![CDATA[
         Public Sub InitializeComponent() Implements System.Windows.Markup.IComponentConnector.InitializeComponent
             If _contentLoaded Then
                 Return
             End If
             _contentLoaded = true
             Dim resourceLocater As System.Uri = New System.Uri("/BabyNames;component/mainwindow.xaml", System.UriKind.Relative)
             
             #ExternalSource("..\..\MainWindow.xaml",1)
             System.Windows.Application.LoadComponent(Me, resourceLocater)
             
             #End ExternalSource
         End Sub
         
         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811
         Friend Function _CreateDelegate(ByVal delegateType As System.Type, ByVal handler As String) As System.[Delegate]
             Return System.[Delegate].CreateDelegate(delegateType, Me, handler)
         End Function
         
         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
          System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800
         Sub System_Windows_Markup_IComponentConnector_Connect(ByVal connectionId As Integer, ByVal target As Object) Implements System.Windows.Markup.IComponentConnector.Connect
             If (connectionId = 1) Then
                 Me.MainWindow = CType(target,BabyNames.Window1)
                 
                 #ExternalSource("..\..\MainWindow.xaml",5)
                 AddHandler Me.MainWindow.Loaded, New System.Windows.RoutedEventHandler(AddressOf Me.MainWindow_Loaded)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 2) Then
                 Me.MainGrid = CType(target,System.Windows.Controls.Grid)
                 Return
             End If
             If (connectionId = 3) Then
                 Me.btnRunLinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",25)
                 AddHandler Me.btnRunLinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunLinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 4) Then
                 Me.btnRunPlinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",29)
                 AddHandler Me.btnRunPlinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunPlinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.lblSpeedup = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 6) Then
                 Me.txtQueryName = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 7) Then
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Return
             End If
             _contentLoaded = true
             Dim resourceLocater As System.Uri = New System.Uri("/BabyNames;component/mainwindow.xaml", System.UriKind.Relative)
             
             #ExternalSource("..\..\MainWindow.xaml",1)
             System.Windows.Application.LoadComponent(Me, resourceLocater)
             
             #End ExternalSource
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\MainWindow.g.vb" startline="185" endline="190"><![CDATA[
         
         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811
         Friend Function _CreateDelegate(ByVal delegateType As System.Type, ByVal handler As String) As System.[Delegate]
             Return System.[Delegate].CreateDelegate(delegateType, Me, handler)
         End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\obj\Debug\MainWindow.g.vb" startline="191" endline="292"><![CDATA[
         
         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
          System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502
          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800
         Sub System_Windows_Markup_IComponentConnector_Connect(ByVal connectionId As Integer, ByVal target As Object) Implements System.Windows.Markup.IComponentConnector.Connect
             If (connectionId = 1) Then
                 Me.MainWindow = CType(target,BabyNames.Window1)
                 
                 #ExternalSource("..\..\MainWindow.xaml",5)
                 AddHandler Me.MainWindow.Loaded, New System.Windows.RoutedEventHandler(AddressOf Me.MainWindow_Loaded)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 2) Then
                 Me.MainGrid = CType(target,System.Windows.Controls.Grid)
                 Return
             End If
             If (connectionId = 3) Then
                 Me.btnRunLinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",25)
                 AddHandler Me.btnRunLinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunLinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 4) Then
                 Me.btnRunPlinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",29)
                 AddHandler Me.btnRunPlinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunPlinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.lblSpeedup = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 6) Then
                 Me.txtQueryName = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 7) Then
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.MainWindow = CType(target,BabyNames.Window1)
                 
                 #ExternalSource("..\..\MainWindow.xaml",5)
                 AddHandler Me.MainWindow.Loaded, New System.Windows.RoutedEventHandler(AddressOf Me.MainWindow_Loaded)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 2) Then
                 Me.MainGrid = CType(target,System.Windows.Controls.Grid)
                 Return
             End If
             If (connectionId = 3) Then
                 Me.btnRunLinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",25)
                 AddHandler Me.btnRunLinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunLinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 4) Then
                 Me.btnRunPlinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",29)
                 AddHandler Me.btnRunPlinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunPlinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.lblSpeedup = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 6) Then
                 Me.txtQueryName = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 7) Then
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.MainGrid = CType(target,System.Windows.Controls.Grid)
                 Return
             End If
             If (connectionId = 3) Then
                 Me.btnRunLinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",25)
                 AddHandler Me.btnRunLinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunLinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 4) Then
                 Me.btnRunPlinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",29)
                 AddHandler Me.btnRunPlinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunPlinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.lblSpeedup = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 6) Then
                 Me.txtQueryName = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 7) Then
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.btnRunLinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",25)
                 AddHandler Me.btnRunLinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunLinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 4) Then
                 Me.btnRunPlinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",29)
                 AddHandler Me.btnRunPlinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunPlinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.lblSpeedup = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 6) Then
                 Me.txtQueryName = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 7) Then
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.btnRunPlinq = CType(target,System.Windows.Controls.Button)
                 
                 #ExternalSource("..\..\MainWindow.xaml",29)
                 AddHandler Me.btnRunPlinq.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnRunPlinq_Click)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 5) Then
                 Me.lblSpeedup = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 6) Then
                 Me.txtQueryName = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 7) Then
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.lblSpeedup = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 6) Then
                 Me.txtQueryName = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 7) Then
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.txtQueryName = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 7) Then
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.lblQueryName = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 8) Then
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.txtQueryState = CType(target,System.Windows.Controls.TextBox)
                 Return
             End If
             If (connectionId = 9) Then
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.lblQueryState = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 10) Then
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.slProcessorsToUse = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",42)
                 AddHandler Me.slProcessorsToUse.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slProcessorsToUse_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 11) Then
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.lblProcessorsToUse = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 12) Then
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.slNumRecords = CType(target,System.Windows.Controls.Slider)
                 
                 #ExternalSource("..\..\MainWindow.xaml",44)
                 AddHandler Me.slNumRecords.ValueChanged, New System.Windows.RoutedPropertyChangedEventHandler(Of Double)(AddressOf Me.slSize_ValueChanged)
                 
                 #End ExternalSource
                 Return
             End If
             If (connectionId = 13) Then
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.lblSize = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 14) Then
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.lblLinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 15) Then
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.lblPlinqTime = CType(target,System.Windows.Controls.Label)
                 Return
             End If
             If (connectionId = 16) Then
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.graphLinq = CType(target,BabyNames.Graph)
                 Return
             End If
             If (connectionId = 17) Then
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
     End Class
 End Namespace
 
                 Me.graphPlinq = CType(target,BabyNames.Graph)
                 Return
             End If
             Me._contentLoaded = true
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="36" endline="39"><![CDATA[
 			AddHandler _sizeChangedTimer.Tick, Sub(sender, e)
 				CType(sender, DispatcherTimer).Stop()
 				LoadAsync(CInt(Fix(slNumRecords.Value)))
 			End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="40" endline="61"><![CDATA[
 		End Sub
 
 		Private Sub MainWindow_Loaded(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Create a UI task factory
 			_uiTasks = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
 
 			' Set up the processors slider
 			slProcessorsToUse.Minimum = 1
 			slProcessorsToUse.Value = Environment.ProcessorCount
 			slProcessorsToUse.Maximum = slProcessorsToUse.Value
 
 			' Setup the label controls for the sliders
 			lblProcessorsToUse.Content = String.Format(PROCESSORS_TO_USE_FORMAT, CInt(Fix(slProcessorsToUse.Value)))
 			lblSize.Content = String.Format(DATA_TO_USE_FORMAT, CInt(Fix(slNumRecords.Value)))
 
 			' Load the data for the app
 			LoadAsync(CInt(Fix(slNumRecords.Value)))
 		End Sub
 
 		Private Sub btnRunLinq_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Run sequentially
 			RunQuery(Function() _sequentialQuery.ToList(), graphLinq, lblLinqTime)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="62" endline="66"><![CDATA[
 		End Sub
 
 		Private Sub btnRunPlinq_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
 			' Run in parallel
 			RunQuery(Function() _parallelQuery.ToList(), graphPlinq, lblPlinqTime)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\MainWindow.xaml.vb" startline="67" endline="148"><![CDATA[
 		End Sub
 
 		Friend Class QueryData
 			Public Name, State As String
 		End Class
 
 		Private Sub RunQuery(ByVal query As Func(Of List(Of BabyInfo)), ByVal targetGraph As Graph, ByVal targetLabel As Label)
 			' Get query info values from the text box.
 			_userQuery.Name = txtQueryName.Text.Trim()
 			_userQuery.State = txtQueryState.Text.Trim()
 			If _userQuery.Name.Length = 0 OrElse _userQuery.State.Length = 0 Then
 				Return
 			End If
 
 			' Disable UI interaction
 			lblSpeedup.Visibility = Visibility.Hidden
 			targetLabel.Visibility = Visibility.Hidden
 			targetGraph.Visibility = Visibility.Hidden
 			ConfigureUiControls(False)
 
 			' Do query asynchronously
 				
             Task.Factory.StartNew(Sub()
                                       'Execute and time the query
                                       Dim results As List(Of BabyInfo) = Nothing
                                       Dim sw = Stopwatch.StartNew()
 
                                       For i = 0 To RUN_MULTIPLIER - 1
                                           results = query()
                                       Next i
                                       sw.Stop()
 
                                       'Update the UI
                                       _uiTasks.StartNew(Sub()
                                                             'Update the run time
                                                             If targetLabel.Equals(lblLinqTime) Then
                                                                 _lastSeqRun = sw.ElapsedTicks
                                                             End If
 
                                                             'Update the graph
                                                             targetGraph.Configure(results)
                                                             targetGraph.Visibility = Windows.Visibility.Visible
                                                             targetGraph.InvalidateVisual()
 
                                                             'Display the execution time
                                                             targetLabel.Content = String.Format("{0
                                                             targetLabel.Visibility = Windows.Visibility.Visible
 
                                                             'Show any speedup
                                                             If _lastSeqRun <> 0 AndAlso _lastParRun <> 0 Then
                                                                 lblSpeedup.Content = String.Format("{0
                                                                 lblSpeedup.Visibility = Visibility.Visible
                                                             End If
 
                                                             'Allow the user to interact again
                                                             ConfigureUiControls(True)
 
                                                         End Sub)
                                   End Sub)
 
 		End Sub
 
 		Private Sub LoadAsync(ByVal numRecords As Integer)
 			' Loading new data, so hide and reset old timings
 			lblSpeedup.Visibility = Visibility.Hidden
 			lblPlinqTime.Visibility = lblSpeedup.Visibility
 			lblLinqTime.Visibility = lblPlinqTime.Visibility
 			_lastParRun = 0
 			_lastSeqRun = _lastParRun
 
 			' Clear the screen
 			graphPlinq.Visibility = Visibility.Hidden
 			graphLinq.Visibility = graphPlinq.Visibility
 			ConfigureUiControls(False)
 
 			' Load all of the names asynchronously; when done, update the UI
 			Task.Factory.StartNew(Sub()
 				_babies = DataLoader.GenerateRandom(numRecords, YEAR_START, YEAR_END)
 				_uiTasks.StartNew(Sub()
 					InitializeQueries()
 					ConfigureUiControls(True)
 				End Sub)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="17" endline="17"><![CDATA[
                                Where b.Name.Equals(_userQuery.Name, StringComparison.InvariantCultureIgnoreCase) AndAlso
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="18" endline="20"><![CDATA[
                                      b.State = _userQuery.State AndAlso
                                      b.Year >= YEAR_START AndAlso b.Year <= YEAR_END
                                Order By b.Year
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="21" endline="21"><![CDATA[
                                Select b
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="22" endline="25"><![CDATA[
 
 			' PARALLEL QUERY
             _parallelQuery = From b In _babies.AsParallel().WithDegreeOfParallelism(numProcs)
                              Where b.Name.Equals(_userQuery.Name, StringComparison.InvariantCultureIgnoreCase) AndAlso
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="26" endline="28"><![CDATA[
                                    b.State = _userQuery.State AndAlso
                                    b.Year >= YEAR_START AndAlso b.Year <= YEAR_END
                              Order By b.Year
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\Queries.vb" startline="29" endline="29"><![CDATA[
                              Select b
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Resources.Designer.vb" startline="40" endline="46"><![CDATA[
 			Get
 				If Object.ReferenceEquals(resourceMan, Nothing) Then
                     Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
 					resourceMan = temp
 				End If
 				Return resourceMan
 			End Get
 		End Property
 
 		''' <summary>
 		'''   Overrides the current thread's CurrentUICulture property for all
 		'''   resource lookups using this strongly typed resource class.
 		''' </summary>
 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
 		Friend Property Culture() As Global.System.Globalization.CultureInfo
 			Get
 				Return resourceCulture
 			End Get
 			Set(ByVal value As System.Globalization.CultureInfo)
 				resourceCulture = value
 			End Set
 		End Property
 	End Module
 End Namespace
                     Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
 					resourceMan = temp
 				End If
 				Return resourceMan
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Resources.Designer.vb" startline="47" endline="57"><![CDATA[
 		End Property
 
 		''' <summary>
 		'''   Overrides the current thread's CurrentUICulture property for all
 		'''   resource lookups using this strongly typed resource class.
 		''' </summary>
 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
 		Friend Property Culture() As Global.System.Globalization.CultureInfo
 			Get
 				Return resourceCulture
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Resources.Designer.vb" startline="58" endline="60"><![CDATA[
 			Set(ByVal value As System.Globalization.CultureInfo)
 				resourceCulture = value
 			End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="18" endline="18"><![CDATA[
 		Private Shared defaultInstance As Settings = (CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New Settings()), Settings))
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="19" endline="23"><![CDATA[
 
 		Public Shared ReadOnly Property [Default]() As Settings
 			Get
 				Return defaultInstance
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\BabyNames\BabyNames_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
</source_elements></project>
