<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.Designer.vb" startline="12" endline="17"><![CDATA[
 		Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 			If disposing AndAlso (components IsNot Nothing) Then
 				components.Dispose()
 			End If
 			MyBase.Dispose(disposing)
 		End Sub
 
 		#Region "Windows Form Designer generated code"
 
 		''' <summary>
 		''' Required method for Designer support - do not modify
 		''' the contents of this method with the code editor.
 		''' </summary>
 		Private Sub InitializeComponent()
 			Me.splitContainer1 = New SplitContainer()
 			Me.lblGenPerSec = New Label()
 			Me.label5 = New Label()
 			Me.lblElapsedTime = New Label()
 			Me.label4 = New Label()
 			Me.lblGenerations = New Label()
 			Me.label2 = New Label()
 			Me.splitContainer2 = New SplitContainer()
 			Me.txtBestMatch = New TextBox()
 			Me.txtTarget = New TextBox()
 			Me.btnRun = New Button()
 			Me.txtMonkeysPerGeneration = New TextBox()
 			Me.label1 = New Label()
 			Me.timerElapsedTime = New Timer()
 			Me.chkParallel = New CheckBox()
 			Me.pictureBox1 = New PictureBox()
 			CType(Me.splitContainer1, System.ComponentModel.ISupportInitialize).BeginInit()
 			Me.splitContainer1.Panel1.SuspendLayout()
 			Me.splitContainer1.Panel2.SuspendLayout()
 			Me.splitContainer1.SuspendLayout()
 			CType(Me.splitContainer2, System.ComponentModel.ISupportInitialize).BeginInit()
 			Me.splitContainer2.Panel1.SuspendLayout()
 			Me.splitContainer2.Panel2.SuspendLayout()
 			Me.splitContainer2.SuspendLayout()
 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).BeginInit()
 			Me.SuspendLayout()
 			' 
 			' splitContainer1
 			' 
 			Me.splitContainer1.Dock = DockStyle.Fill
 			Me.splitContainer1.Location = New Point(0, 0)
 			Me.splitContainer1.Name = "splitContainer1"
 			' 
 			' splitContainer1.Panel1
 			' 
 			Me.splitContainer1.Panel1.Controls.Add(Me.pictureBox1)
 			' 
 			' splitContainer1.Panel2
 			' 
 			Me.splitContainer1.Panel2.Controls.Add(Me.chkParallel)
 			Me.splitContainer1.Panel2.Controls.Add(Me.lblGenPerSec)
 			Me.splitContainer1.Panel2.Controls.Add(Me.label5)
 			Me.splitContainer1.Panel2.Controls.Add(Me.lblElapsedTime)
 			Me.splitContainer1.Panel2.Controls.Add(Me.label4)
 			Me.splitContainer1.Panel2.Controls.Add(Me.lblGenerations)
 			Me.splitContainer1.Panel2.Controls.Add(Me.label2)
 			Me.splitContainer1.Panel2.Controls.Add(Me.splitContainer2)
 			Me.splitContainer1.Panel2.Controls.Add(Me.btnRun)
 			Me.splitContainer1.Panel2.Controls.Add(Me.txtMonkeysPerGeneration)
 			Me.splitContainer1.Panel2.Controls.Add(Me.label1)
 			Me.splitContainer1.Size = New Size(973, 389)
 			Me.splitContainer1.SplitterDistance = 301
 			Me.splitContainer1.TabIndex = 1
 			' 
 			' lblGenPerSec
 			' 
 			Me.lblGenPerSec.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.lblGenPerSec.AutoSize = True
 			Me.lblGenPerSec.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.lblGenPerSec.Location = New Point(601, 48)
 			Me.lblGenPerSec.Name = "lblGenPerSec"
 			Me.lblGenPerSec.Size = New Size(13, 17)
 			Me.lblGenPerSec.TabIndex = 9
 			Me.lblGenPerSec.Text = "-"
 			' 
 			' label5
 			' 
 			Me.label5.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.label5.AutoSize = True
 			Me.label5.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.label5.Location = New Point(454, 48)
 			Me.label5.Name = "label5"
 			Me.label5.Size = New Size(144, 17)
 			Me.label5.TabIndex = 8
 			Me.label5.Text = "Generations / Sec
 			' 
 			' lblElapsedTime
 			' 
 			Me.lblElapsedTime.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.lblElapsedTime.AutoSize = True
 			Me.lblElapsedTime.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.lblElapsedTime.Location = New Point(601, 9)
 			Me.lblElapsedTime.Name = "lblElapsedTime"
 			Me.lblElapsedTime.Size = New Size(13, 17)
 			Me.lblElapsedTime.TabIndex = 7
 			Me.lblElapsedTime.Text = "-"
 			' 
 			' label4
 			' 
 			Me.label4.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.label4.AutoSize = True
 			Me.label4.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.label4.Location = New Point(454, 9)
 			Me.label4.Name = "label4"
 			Me.label4.Size = New Size(48, 17)
 			Me.label4.TabIndex = 6
 			Me.label4.Text = "Time
 			' 
 			' lblGenerations
 			' 
 			Me.lblGenerations.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.lblGenerations.AutoSize = True
 			Me.lblGenerations.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.lblGenerations.Location = New Point(601, 29)
 			Me.lblGenerations.Name = "lblGenerations"
 			Me.lblGenerations.Size = New Size(13, 17)
 			Me.lblGenerations.TabIndex = 5
 			Me.lblGenerations.Text = "-"
 			' 
 			' label2
 			' 
 			Me.label2.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.label2.AutoSize = True
 			Me.label2.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.label2.Location = New Point(454, 29)
 			Me.label2.Name = "label2"
 			Me.label2.Size = New Size(102, 17)
 			Me.label2.TabIndex = 4
 			Me.label2.Text = "Generations
 			' 
 			' splitContainer2
 			' 
 			Me.splitContainer2.Anchor = (CType((((AnchorStyles.Top Or AnchorStyles.Bottom) Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
 			Me.splitContainer2.Location = New Point(2, 68)
 			Me.splitContainer2.Name = "splitContainer2"
 			' 
 			' splitContainer2.Panel1
 			' 
 			Me.splitContainer2.Panel1.Controls.Add(Me.txtBestMatch)
 			' 
 			' splitContainer2.Panel2
 			' 
 			Me.splitContainer2.Panel2.Controls.Add(Me.txtTarget)
 			Me.splitContainer2.Size = New Size(666, 321)
 			Me.splitContainer2.SplitterDistance = 325
 			Me.splitContainer2.TabIndex = 3
 			' 
 			' txtBestMatch
 			' 
 			Me.txtBestMatch.Dock = DockStyle.Fill
 			Me.txtBestMatch.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.txtBestMatch.Location = New Point(0, 0)
 			Me.txtBestMatch.Multiline = True
 			Me.txtBestMatch.Name = "txtBestMatch"
 			Me.txtBestMatch.Size = New Size(325, 321)
 			Me.txtBestMatch.TabIndex = 3
 			' 
 			' txtTarget
 			' 
 			Me.txtTarget.Dock = DockStyle.Fill
 			Me.txtTarget.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.txtTarget.Location = New Point(0, 0)
 			Me.txtTarget.Multiline = True
 			Me.txtTarget.Name = "txtTarget"
 			Me.txtTarget.Size = New Size(337, 321)
 			Me.txtTarget.TabIndex = 0
 			' 
 			' btnRun
 			' 
 			Me.btnRun.Font = New Font("Microsoft Sans Serif", 11F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.btnRun.Location = New Point(17, 39)
 			Me.btnRun.Name = "btnRun"
 			Me.btnRun.Size = New Size(83, 26)
 			Me.btnRun.TabIndex = 2
 			Me.btnRun.Text = "Start"
 			Me.btnRun.UseVisualStyleBackColor = True
 '			Me.btnRun.Click += New System.EventHandler(Me.btnRun_Click)
 			' 
 			' txtMonkeysPerGeneration
 			' 
 			Me.txtMonkeysPerGeneration.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.txtMonkeysPerGeneration.Location = New Point(225, 12)
 			Me.txtMonkeysPerGeneration.Name = "txtMonkeysPerGeneration"
 			Me.txtMonkeysPerGeneration.Size = New Size(50, 26)
 			Me.txtMonkeysPerGeneration.TabIndex = 1
 			Me.txtMonkeysPerGeneration.Text = "2000"
 			' 
 			' label1
 			' 
 			Me.label1.AutoSize = True
 			Me.label1.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.label1.Location = New Point(13, 13)
 			Me.label1.Name = "label1"
 			Me.label1.Size = New Size(206, 20)
 			Me.label1.TabIndex = 0
 			Me.label1.Text = "Monkeys Per Generation"
 			' 
 			' timerElapsedTime
 			' 
 			Me.timerElapsedTime.Interval = 1000
 '			Me.timerElapsedTime.Tick += New System.EventHandler(Me.timerElapsedTime_Tick)
 			' 
 			' chkParallel
 			' 
 			Me.chkParallel.AutoSize = True
 			Me.chkParallel.Location = New Point(106, 45)
 			Me.chkParallel.Name = "chkParallel"
 			Me.chkParallel.Size = New Size(60, 17)
 			Me.chkParallel.TabIndex = 10
 			Me.chkParallel.Text = "Parallel"
 			Me.chkParallel.UseVisualStyleBackColor = True
 			' 
 			' pictureBox1
 			' 
 			Me.pictureBox1.BackColor = Color.Transparent
 			Me.pictureBox1.Dock = DockStyle.Fill
 			Me.pictureBox1.Image = My.Resources.HamletMonkey
 			Me.pictureBox1.Location = New Point(0, 0)
 			Me.pictureBox1.Name = "pictureBox1"
 			Me.pictureBox1.Size = New Size(301, 389)
 			Me.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom
 			Me.pictureBox1.TabIndex = 0
 			Me.pictureBox1.TabStop = False
 			' 
 			' MainForm
 			' 
 			Me.AutoScaleDimensions = New SizeF(6F, 13F)
 			Me.AutoScaleMode = AutoScaleMode.Font
 			Me.BackColor = Color.White
 			Me.ClientSize = New Size(973, 389)
 			Me.Controls.Add(Me.splitContainer1)
 			Me.Name = "MainForm"
 			Me.Text = "Shakespearean Monkeys"
 			Me.splitContainer1.Panel1.ResumeLayout(False)
 			Me.splitContainer1.Panel2.ResumeLayout(False)
 			Me.splitContainer1.Panel2.PerformLayout()
 			CType(Me.splitContainer1, System.ComponentModel.ISupportInitialize).EndInit()
 			Me.splitContainer1.ResumeLayout(False)
 			Me.splitContainer2.Panel1.ResumeLayout(False)
 			Me.splitContainer2.Panel1.PerformLayout()
 			Me.splitContainer2.Panel2.ResumeLayout(False)
 			Me.splitContainer2.Panel2.PerformLayout()
 			CType(Me.splitContainer2, System.ComponentModel.ISupportInitialize).EndInit()
 			Me.splitContainer2.ResumeLayout(False)
 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).EndInit()
 			Me.ResumeLayout(False)
 
 		End Sub
 
 		#End Region
 
         Private pictureBox1 As PictureBox
 		Private splitContainer1 As SplitContainer
 		Private label1 As Label
 		Private txtMonkeysPerGeneration As TextBox
 		Private WithEvents btnRun As Button
 		Private splitContainer2 As SplitContainer
 		Private txtBestMatch As TextBox
 		Private txtTarget As TextBox
 		Private lblElapsedTime As Label
 		Private label4 As Label
 		Private lblGenerations As Label
 		Private label2 As Label
 		Private WithEvents timerElapsedTime As Timer
 		Private lblGenPerSec As Label
 		Private label5 As Label
 		Private chkParallel As CheckBox
 	End Class
 End Namespace
 
 				components.Dispose()
 			End If
 			MyBase.Dispose(disposing)
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.Designer.vb" startline="18" endline="263"><![CDATA[
 
 		#Region "Windows Form Designer generated code"
 
 		''' <summary>
 		''' Required method for Designer support - do not modify
 		''' the contents of this method with the code editor.
 		''' </summary>
 		Private Sub InitializeComponent()
 			Me.splitContainer1 = New SplitContainer()
 			Me.lblGenPerSec = New Label()
 			Me.label5 = New Label()
 			Me.lblElapsedTime = New Label()
 			Me.label4 = New Label()
 			Me.lblGenerations = New Label()
 			Me.label2 = New Label()
 			Me.splitContainer2 = New SplitContainer()
 			Me.txtBestMatch = New TextBox()
 			Me.txtTarget = New TextBox()
 			Me.btnRun = New Button()
 			Me.txtMonkeysPerGeneration = New TextBox()
 			Me.label1 = New Label()
 			Me.timerElapsedTime = New Timer()
 			Me.chkParallel = New CheckBox()
 			Me.pictureBox1 = New PictureBox()
 			CType(Me.splitContainer1, System.ComponentModel.ISupportInitialize).BeginInit()
 			Me.splitContainer1.Panel1.SuspendLayout()
 			Me.splitContainer1.Panel2.SuspendLayout()
 			Me.splitContainer1.SuspendLayout()
 			CType(Me.splitContainer2, System.ComponentModel.ISupportInitialize).BeginInit()
 			Me.splitContainer2.Panel1.SuspendLayout()
 			Me.splitContainer2.Panel2.SuspendLayout()
 			Me.splitContainer2.SuspendLayout()
 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).BeginInit()
 			Me.SuspendLayout()
 			' 
 			' splitContainer1
 			' 
 			Me.splitContainer1.Dock = DockStyle.Fill
 			Me.splitContainer1.Location = New Point(0, 0)
 			Me.splitContainer1.Name = "splitContainer1"
 			' 
 			' splitContainer1.Panel1
 			' 
 			Me.splitContainer1.Panel1.Controls.Add(Me.pictureBox1)
 			' 
 			' splitContainer1.Panel2
 			' 
 			Me.splitContainer1.Panel2.Controls.Add(Me.chkParallel)
 			Me.splitContainer1.Panel2.Controls.Add(Me.lblGenPerSec)
 			Me.splitContainer1.Panel2.Controls.Add(Me.label5)
 			Me.splitContainer1.Panel2.Controls.Add(Me.lblElapsedTime)
 			Me.splitContainer1.Panel2.Controls.Add(Me.label4)
 			Me.splitContainer1.Panel2.Controls.Add(Me.lblGenerations)
 			Me.splitContainer1.Panel2.Controls.Add(Me.label2)
 			Me.splitContainer1.Panel2.Controls.Add(Me.splitContainer2)
 			Me.splitContainer1.Panel2.Controls.Add(Me.btnRun)
 			Me.splitContainer1.Panel2.Controls.Add(Me.txtMonkeysPerGeneration)
 			Me.splitContainer1.Panel2.Controls.Add(Me.label1)
 			Me.splitContainer1.Size = New Size(973, 389)
 			Me.splitContainer1.SplitterDistance = 301
 			Me.splitContainer1.TabIndex = 1
 			' 
 			' lblGenPerSec
 			' 
 			Me.lblGenPerSec.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.lblGenPerSec.AutoSize = True
 			Me.lblGenPerSec.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.lblGenPerSec.Location = New Point(601, 48)
 			Me.lblGenPerSec.Name = "lblGenPerSec"
 			Me.lblGenPerSec.Size = New Size(13, 17)
 			Me.lblGenPerSec.TabIndex = 9
 			Me.lblGenPerSec.Text = "-"
 			' 
 			' label5
 			' 
 			Me.label5.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.label5.AutoSize = True
 			Me.label5.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.label5.Location = New Point(454, 48)
 			Me.label5.Name = "label5"
 			Me.label5.Size = New Size(144, 17)
 			Me.label5.TabIndex = 8
 			Me.label5.Text = "Generations / Sec
 			' 
 			' lblElapsedTime
 			' 
 			Me.lblElapsedTime.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.lblElapsedTime.AutoSize = True
 			Me.lblElapsedTime.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.lblElapsedTime.Location = New Point(601, 9)
 			Me.lblElapsedTime.Name = "lblElapsedTime"
 			Me.lblElapsedTime.Size = New Size(13, 17)
 			Me.lblElapsedTime.TabIndex = 7
 			Me.lblElapsedTime.Text = "-"
 			' 
 			' label4
 			' 
 			Me.label4.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.label4.AutoSize = True
 			Me.label4.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.label4.Location = New Point(454, 9)
 			Me.label4.Name = "label4"
 			Me.label4.Size = New Size(48, 17)
 			Me.label4.TabIndex = 6
 			Me.label4.Text = "Time
 			' 
 			' lblGenerations
 			' 
 			Me.lblGenerations.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.lblGenerations.AutoSize = True
 			Me.lblGenerations.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.lblGenerations.Location = New Point(601, 29)
 			Me.lblGenerations.Name = "lblGenerations"
 			Me.lblGenerations.Size = New Size(13, 17)
 			Me.lblGenerations.TabIndex = 5
 			Me.lblGenerations.Text = "-"
 			' 
 			' label2
 			' 
 			Me.label2.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
 			Me.label2.AutoSize = True
 			Me.label2.Font = New Font("Microsoft Sans Serif", 10F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.label2.Location = New Point(454, 29)
 			Me.label2.Name = "label2"
 			Me.label2.Size = New Size(102, 17)
 			Me.label2.TabIndex = 4
 			Me.label2.Text = "Generations
 			' 
 			' splitContainer2
 			' 
 			Me.splitContainer2.Anchor = (CType((((AnchorStyles.Top Or AnchorStyles.Bottom) Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
 			Me.splitContainer2.Location = New Point(2, 68)
 			Me.splitContainer2.Name = "splitContainer2"
 			' 
 			' splitContainer2.Panel1
 			' 
 			Me.splitContainer2.Panel1.Controls.Add(Me.txtBestMatch)
 			' 
 			' splitContainer2.Panel2
 			' 
 			Me.splitContainer2.Panel2.Controls.Add(Me.txtTarget)
 			Me.splitContainer2.Size = New Size(666, 321)
 			Me.splitContainer2.SplitterDistance = 325
 			Me.splitContainer2.TabIndex = 3
 			' 
 			' txtBestMatch
 			' 
 			Me.txtBestMatch.Dock = DockStyle.Fill
 			Me.txtBestMatch.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.txtBestMatch.Location = New Point(0, 0)
 			Me.txtBestMatch.Multiline = True
 			Me.txtBestMatch.Name = "txtBestMatch"
 			Me.txtBestMatch.Size = New Size(325, 321)
 			Me.txtBestMatch.TabIndex = 3
 			' 
 			' txtTarget
 			' 
 			Me.txtTarget.Dock = DockStyle.Fill
 			Me.txtTarget.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Regular, GraphicsUnit.Point, (CByte(0)))
 			Me.txtTarget.Location = New Point(0, 0)
 			Me.txtTarget.Multiline = True
 			Me.txtTarget.Name = "txtTarget"
 			Me.txtTarget.Size = New Size(337, 321)
 			Me.txtTarget.TabIndex = 0
 			' 
 			' btnRun
 			' 
 			Me.btnRun.Font = New Font("Microsoft Sans Serif", 11F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.btnRun.Location = New Point(17, 39)
 			Me.btnRun.Name = "btnRun"
 			Me.btnRun.Size = New Size(83, 26)
 			Me.btnRun.TabIndex = 2
 			Me.btnRun.Text = "Start"
 			Me.btnRun.UseVisualStyleBackColor = True
 '			Me.btnRun.Click += New System.EventHandler(Me.btnRun_Click)
 			' 
 			' txtMonkeysPerGeneration
 			' 
 			Me.txtMonkeysPerGeneration.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.txtMonkeysPerGeneration.Location = New Point(225, 12)
 			Me.txtMonkeysPerGeneration.Name = "txtMonkeysPerGeneration"
 			Me.txtMonkeysPerGeneration.Size = New Size(50, 26)
 			Me.txtMonkeysPerGeneration.TabIndex = 1
 			Me.txtMonkeysPerGeneration.Text = "2000"
 			' 
 			' label1
 			' 
 			Me.label1.AutoSize = True
 			Me.label1.Font = New Font("Microsoft Sans Serif", 12F, FontStyle.Bold, GraphicsUnit.Point, (CByte(0)))
 			Me.label1.Location = New Point(13, 13)
 			Me.label1.Name = "label1"
 			Me.label1.Size = New Size(206, 20)
 			Me.label1.TabIndex = 0
 			Me.label1.Text = "Monkeys Per Generation"
 			' 
 			' timerElapsedTime
 			' 
 			Me.timerElapsedTime.Interval = 1000
 '			Me.timerElapsedTime.Tick += New System.EventHandler(Me.timerElapsedTime_Tick)
 			' 
 			' chkParallel
 			' 
 			Me.chkParallel.AutoSize = True
 			Me.chkParallel.Location = New Point(106, 45)
 			Me.chkParallel.Name = "chkParallel"
 			Me.chkParallel.Size = New Size(60, 17)
 			Me.chkParallel.TabIndex = 10
 			Me.chkParallel.Text = "Parallel"
 			Me.chkParallel.UseVisualStyleBackColor = True
 			' 
 			' pictureBox1
 			' 
 			Me.pictureBox1.BackColor = Color.Transparent
 			Me.pictureBox1.Dock = DockStyle.Fill
 			Me.pictureBox1.Image = My.Resources.HamletMonkey
 			Me.pictureBox1.Location = New Point(0, 0)
 			Me.pictureBox1.Name = "pictureBox1"
 			Me.pictureBox1.Size = New Size(301, 389)
 			Me.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom
 			Me.pictureBox1.TabIndex = 0
 			Me.pictureBox1.TabStop = False
 			' 
 			' MainForm
 			' 
 			Me.AutoScaleDimensions = New SizeF(6F, 13F)
 			Me.AutoScaleMode = AutoScaleMode.Font
 			Me.BackColor = Color.White
 			Me.ClientSize = New Size(973, 389)
 			Me.Controls.Add(Me.splitContainer1)
 			Me.Name = "MainForm"
 			Me.Text = "Shakespearean Monkeys"
 			Me.splitContainer1.Panel1.ResumeLayout(False)
 			Me.splitContainer1.Panel2.ResumeLayout(False)
 			Me.splitContainer1.Panel2.PerformLayout()
 			CType(Me.splitContainer1, System.ComponentModel.ISupportInitialize).EndInit()
 			Me.splitContainer1.ResumeLayout(False)
 			Me.splitContainer2.Panel1.ResumeLayout(False)
 			Me.splitContainer2.Panel1.PerformLayout()
 			Me.splitContainer2.Panel2.ResumeLayout(False)
 			Me.splitContainer2.Panel2.PerformLayout()
 			CType(Me.splitContainer2, System.ComponentModel.ISupportInitialize).EndInit()
 			Me.splitContainer2.ResumeLayout(False)
 			CType(Me.pictureBox1, System.ComponentModel.ISupportInitialize).EndInit()
 			Me.ResumeLayout(False)
 
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb" startline="264" endline="18"><![CDATA[
 
 		#End Region
 
         Private pictureBox1 As PictureBox
 		Private splitContainer1 As SplitContainer
 		Private label1 As Label
 		Private txtMonkeysPerGeneration As TextBox
 		Private WithEvents btnRun As Button
 		Private splitContainer2 As SplitContainer
 		Private txtBestMatch As TextBox
 		Private txtTarget As TextBox
 		Private lblElapsedTime As Label
 		Private label4 As Label
 		Private lblGenerations As Label
 		Private label2 As Label
 		Private WithEvents timerElapsedTime As Timer
 		Private lblGenPerSec As Label
 		Private label5 As Label
 		Private chkParallel As CheckBox
 	End Class
 End Namespace
 
         Private Shared _targetText As String =
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb" startline="19" endline="30"><![CDATA[
          "To be or not to be, that is the question;" & Environment.NewLine &
          "Whether 'tis nobler in the mind to suffer" & Environment.NewLine &
          "The slings and arrows of outrageous fortune," & Environment.NewLine & "Or to take arms against a sea of troubles," &
          Environment.NewLine & "And by opposing, end them."
         Private _uiTasks As TaskFactory
 
         Public Sub New()
             InitializeComponent()
 
             txtTarget.Text = _targetText
             _uiTasks = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
         End Sub
 
         Private _currentIteration As Integer
         Private _cancellation As CancellationTokenSource
 
         Private Sub btnRun_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnRun.Click
             If _cancellation Is Nothing Then
                 _cancellation = New CancellationTokenSource()
                 Dim settings = New GeneticAlgorithmSettings With {.PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text)}
 
                 txtBestMatch.BackColor = SystemColors.Window
                 lblGenerations.BackColor = SystemColors.Control
                 lblGenerations.Text = "-"
                 lblGenPerSec.Text = lblGenerations.Text
                 lblElapsedTime.Text = "0"
                 btnRun.Text = "Cancel"
                 chkParallel.Visible = False
 
                 _lastTime = DateTimeOffset.Now
                 _startTime = _lastTime
                 timerElapsedTime.Start()
 
                 ' Run the work in the background.
                 _cancellation = New CancellationTokenSource()
                 Dim token = _cancellation.Token
                 Dim runParallel = chkParallel.Checked
 
                 ' When the task completes, update the UI.
                 Task.Factory.StartNew(Sub()
                                           ' Create the new genetic algorithm.
                                           Dim ga = New TextMatchGeneticAlgorithm(runParallel, _targetText, settings)
                                           Dim bestGenome? As TextMatchGenome = Nothing
                                           _currentIteration = 1
                                           ' Iterate until a solution is found or until cancellation is requested.
                                           Do
                                               token.ThrowIfCancellationRequested()
 
                                               ' Move to the next generation.
                                               ga.MoveNext()
                                               ' If we've found the best solution thus far, update the UI.
                                               If bestGenome Is Nothing OrElse ga.CurrentBest.Fitness < bestGenome.Value.Fitness Then
                                                   bestGenome = ga.CurrentBest
                                                   _uiTasks.StartNew(Sub()
                                                                         txtBestMatch.Text = bestGenome.Value.Text
                                                                     End Sub)
                                                   ' If we've found the solution, bail.
                                                   If bestGenome.Value.Text = _targetText Then
                                                       Exit Do
                                                   End If
                                               End If
                                               _currentIteration += 1
                                           Loop
                                       End Sub, token).ContinueWith(Sub(t)
                                                                        timerElapsedTime.Stop()
                                                                        chkParallel.Visible = True
                                                                        btnRun.Text = "Start"
                                                                        _cancellation = Nothing
 
                                                                        Select Case t.Status
                                                                            Case TaskStatus.Faulted
                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
                                                                            Case TaskStatus.RanToCompletion
                                                                                txtBestMatch.BackColor = Color.LightGreen
                                                                                lblGenerations.BackColor = Color.LemonChiffon
                                                                        End Select
 
                                                                    End Sub, _uiTasks.Scheduler)
 
             Else
                 _cancellation.Cancel()
             End If
 
 
         End Sub
 
         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
 
         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
             Dim now = DateTimeOffset.Now
             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
 
             lblElapsedTime.Text = elapsed.ToString()
             lblGenerations.Text = _currentIteration.ToString()
 
             If elapsed > 2 Then
                 Dim diffSeconds = (now - _lastTime).TotalSeconds
                 If diffSeconds > 0 Then
                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
                 End If
             End If
         End Sub
     End Class
 End Namespace
         Private components As System.ComponentModel.IContainer = Nothing
         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
             InitializeComponent()
 
             txtTarget.Text = _targetText
             _uiTasks = New TaskFactory(TaskScheduler.FromCurrentSynchronizationContext())
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb" startline="31" endline="103"><![CDATA[
 
         Private _currentIteration As Integer
         Private _cancellation As CancellationTokenSource
 
         Private Sub btnRun_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnRun.Click
             If _cancellation Is Nothing Then
                 _cancellation = New CancellationTokenSource()
                 Dim settings = New GeneticAlgorithmSettings With {.PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text)}
 
                 txtBestMatch.BackColor = SystemColors.Window
                 lblGenerations.BackColor = SystemColors.Control
                 lblGenerations.Text = "-"
                 lblGenPerSec.Text = lblGenerations.Text
                 lblElapsedTime.Text = "0"
                 btnRun.Text = "Cancel"
                 chkParallel.Visible = False
 
                 _lastTime = DateTimeOffset.Now
                 _startTime = _lastTime
                 timerElapsedTime.Start()
 
                 ' Run the work in the background.
                 _cancellation = New CancellationTokenSource()
                 Dim token = _cancellation.Token
                 Dim runParallel = chkParallel.Checked
 
                 ' When the task completes, update the UI.
                 Task.Factory.StartNew(Sub()
                                           ' Create the new genetic algorithm.
                                           Dim ga = New TextMatchGeneticAlgorithm(runParallel, _targetText, settings)
                                           Dim bestGenome? As TextMatchGenome = Nothing
                                           _currentIteration = 1
                                           ' Iterate until a solution is found or until cancellation is requested.
                                           Do
                                               token.ThrowIfCancellationRequested()
 
                                               ' Move to the next generation.
                                               ga.MoveNext()
                                               ' If we've found the best solution thus far, update the UI.
                                               If bestGenome Is Nothing OrElse ga.CurrentBest.Fitness < bestGenome.Value.Fitness Then
                                                   bestGenome = ga.CurrentBest
                                                   _uiTasks.StartNew(Sub()
                                                                         txtBestMatch.Text = bestGenome.Value.Text
                                                                     End Sub)
                                                   ' If we've found the solution, bail.
                                                   If bestGenome.Value.Text = _targetText Then
                                                       Exit Do
                                                   End If
                                               End If
                                               _currentIteration += 1
                                           Loop
                                       End Sub, token).ContinueWith(Sub(t)
                                                                        timerElapsedTime.Stop()
                                                                        chkParallel.Visible = True
                                                                        btnRun.Text = "Start"
                                                                        _cancellation = Nothing
 
                                                                        Select Case t.Status
                                                                            Case TaskStatus.Faulted
                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
                                                                            Case TaskStatus.RanToCompletion
                                                                                txtBestMatch.BackColor = Color.LightGreen
                                                                                lblGenerations.BackColor = Color.LemonChiffon
                                                                        End Select
 
                                                                    End Sub, _uiTasks.Scheduler)
 
             Else
                 _cancellation.Cancel()
             End If
 
 
         End Sub
 
         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
 
         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
             Dim now = DateTimeOffset.Now
             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
 
             lblElapsedTime.Text = elapsed.ToString()
             lblGenerations.Text = _currentIteration.ToString()
 
             If elapsed > 2 Then
                 Dim diffSeconds = (now - _lastTime).TotalSeconds
                 If diffSeconds > 0 Then
                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
                 End If
             End If
         End Sub
     End Class
 End Namespace
                 _cancellation = New CancellationTokenSource()
                 Dim settings = New GeneticAlgorithmSettings With {.PopulationSize = Int32.Parse(txtMonkeysPerGeneration.Text)}
 
                 txtBestMatch.BackColor = SystemColors.Window
                 lblGenerations.BackColor = SystemColors.Control
                 lblGenerations.Text = "-"
                 lblGenPerSec.Text = lblGenerations.Text
                 lblElapsedTime.Text = "0"
                 btnRun.Text = "Cancel"
                 chkParallel.Visible = False
 
                 _lastTime = DateTimeOffset.Now
                 _startTime = _lastTime
                 timerElapsedTime.Start()
 
                 ' Run the work in the background.
                 _cancellation = New CancellationTokenSource()
                 Dim token = _cancellation.Token
                 Dim runParallel = chkParallel.Checked
 
                 ' When the task completes, update the UI.
                 Task.Factory.StartNew(Sub()
                                           ' Create the new genetic algorithm.
                                           Dim ga = New TextMatchGeneticAlgorithm(runParallel, _targetText, settings)
                                           Dim bestGenome? As TextMatchGenome = Nothing
                                           _currentIteration = 1
                                           ' Iterate until a solution is found or until cancellation is requested.
                                           Do
                                               token.ThrowIfCancellationRequested()
 
                                               ' Move to the next generation.
                                               ga.MoveNext()
                                               ' If we've found the best solution thus far, update the UI.
                                               If bestGenome Is Nothing OrElse ga.CurrentBest.Fitness < bestGenome.Value.Fitness Then
                                                   bestGenome = ga.CurrentBest
                                                   _uiTasks.StartNew(Sub()
                                                                         txtBestMatch.Text = bestGenome.Value.Text
                                                                     End Sub)
                                                   ' If we've found the solution, bail.
                                                   If bestGenome.Value.Text = _targetText Then
                                                       Exit Do
                                                   End If
                                               End If
                                               _currentIteration += 1
                                           Loop
                                       End Sub, token).ContinueWith(Sub(t)
                                                                        timerElapsedTime.Stop()
                                                                        chkParallel.Visible = True
                                                                        btnRun.Text = "Start"
                                                                        _cancellation = Nothing
 
                                                                        Select Case t.Status
                                                                            Case TaskStatus.Faulted
                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
                                                                            Case TaskStatus.RanToCompletion
                                                                                txtBestMatch.BackColor = Color.LightGreen
                                                                                lblGenerations.BackColor = Color.LemonChiffon
                                                                        End Select
 
                                                                    End Sub, _uiTasks.Scheduler)
 
             Else
                 _cancellation.Cancel()
             End If
 
 
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb" startline="104" endline="121"><![CDATA[
 
         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
 
         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
             Dim now = DateTimeOffset.Now
             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
 
             lblElapsedTime.Text = elapsed.ToString()
             lblGenerations.Text = _currentIteration.ToString()
 
             If elapsed > 2 Then
                 Dim diffSeconds = (now - _lastTime).TotalSeconds
                 If diffSeconds > 0 Then
                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
                 End If
             End If
         End Sub
     End Class
 End Namespace
                 Dim diffSeconds = (now - _lastTime).TotalSeconds
                 If diffSeconds > 0 Then
                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
                 End If
             End If
         End Sub
     End Class
 End Namespace
                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
                 End If
             End If
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\MainForm.vb" startline="82" endline="96"><![CDATA[
                                       End Sub, token).ContinueWith(Sub(t)
                                                                        timerElapsedTime.Stop()
                                                                        chkParallel.Visible = True
                                                                        btnRun.Text = "Start"
                                                                        _cancellation = Nothing
 
                                                                        Select Case t.Status
                                                                            Case TaskStatus.Faulted
                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
                                                                            Case TaskStatus.RanToCompletion
                                                                                txtBestMatch.BackColor = Color.LightGreen
                                                                                lblGenerations.BackColor = Color.LemonChiffon
                                                                        End Select
 
                                                                    End Sub, _uiTasks.Scheduler)
 
             Else
                 _cancellation.Cancel()
             End If
 
 
         End Sub
 
         Private _startTime As DateTimeOffset = DateTimeOffset.MinValue
         Private _lastTime As DateTimeOffset = DateTimeOffset.MinValue
 
         Private Sub timerElapsedTime_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles timerElapsedTime.Tick
             Dim now = DateTimeOffset.Now
             Dim elapsed = CInt(Fix((now - _startTime).TotalSeconds))
 
             lblElapsedTime.Text = elapsed.ToString()
             lblGenerations.Text = _currentIteration.ToString()
 
             If elapsed > 2 Then
                 Dim diffSeconds = (now - _lastTime).TotalSeconds
                 If diffSeconds > 0 Then
                     lblGenPerSec.Text = (CInt(Fix(_currentIteration / diffSeconds))).ToString()
                 End If
             End If
         End Sub
     End Class
 End Namespace
                                                                            Case TaskStatus.Faulted
                                                                                MsgBox(t.Exception.ToString(), MsgBoxStyle.Critical, "Error")
                                                                            Case TaskStatus.RanToCompletion
                                                                                txtBestMatch.BackColor = Color.LightGreen
                                                                                lblGenerations.BackColor = Color.LemonChiffon
                                                                        End Select
 
                                                                    End Sub, _uiTasks.Scheduler)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\Module1.vb" startline="15" endline="19"><![CDATA[
         Sub Main()
             Application.EnableVisualStyles()
             Application.SetCompatibleTextRenderingDefault(False)
             Application.Run(New MainForm())
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Resources.Designer.vb" startline="40" endline="46"><![CDATA[
 			Get
 				If Object.ReferenceEquals(resourceMan, Nothing) Then
 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
 					resourceMan = temp
 				End If
 				Return resourceMan
 			End Get
 		End Property
 
 		''' <summary>
 		'''   Overrides the current thread's CurrentUICulture property for all
 		'''   resource lookups using this strongly typed resource class.
 		''' </summary>
 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
 		Friend Property Culture() As Global.System.Globalization.CultureInfo
 			Get
 				Return resourceCulture
 			End Get
 			Set(ByVal value As System.Globalization.CultureInfo)
 				resourceCulture = value
 			End Set
 		End Property
 
 		Friend ReadOnly Property HamletMonkey() As Bitmap
 			Get
                 Dim obj = ResourceManager.GetObject("HamletMonkey", resourceCulture)
 				Return (CType(obj, Bitmap))
 			End Get
 		End Property
 	End Module
 End Namespace
 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
 					resourceMan = temp
 				End If
 				Return resourceMan
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Resources.Designer.vb" startline="47" endline="57"><![CDATA[
 		End Property
 
 		''' <summary>
 		'''   Overrides the current thread's CurrentUICulture property for all
 		'''   resource lookups using this strongly typed resource class.
 		''' </summary>
 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
 		Friend Property Culture() As Global.System.Globalization.CultureInfo
 			Get
 				Return resourceCulture
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Resources.Designer.vb" startline="58" endline="60"><![CDATA[
 			Set(ByVal value As System.Globalization.CultureInfo)
 				resourceCulture = value
 			End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Resources.Designer.vb" startline="61" endline="67"><![CDATA[
 		End Property
 
 		Friend ReadOnly Property HamletMonkey() As Bitmap
 			Get
                 Dim obj = ResourceManager.GetObject("HamletMonkey", resourceCulture)
 				Return (CType(obj, Bitmap))
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Settings.Designer.vb" startline="18" endline="18"><![CDATA[
         Private Shared defaultInstance As Settings = (CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New Settings()), Settings))
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\My Project\Settings.Designer.vb" startline="19" endline="23"><![CDATA[
 
 		Public Shared ReadOnly Property [Default]() As Settings
 			Get
 				Return defaultInstance
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="21" endline="33"><![CDATA[
 		Shared Sub New()
 		Private Shared _random As New ThreadSafeRandom()
 		Private Shared _validChars() As Char
 		Private _targetText As String
 		Private _settings As GeneticAlgorithmSettings
 		Private _currentPopulation() As TextMatchGenome
 		Private _runParallel As Boolean
 
 		Shared Sub New()
             ' Initialize the valid characters to newlines plus all the alphanumerics and symbols.
 			_validChars = New Char(2 + (127 - 32) - 1){}
 			_validChars(0) = ChrW(10)
 			_validChars(1) = ChrW(13)
             Dim i = 2
             Dim pos = 32
 			Do While i < _validChars.Length
 				_validChars(i) = ChrW(pos)
 				i += 1
 				pos += 1
 			Loop
 		End Sub
 
 		Public Sub New(ByVal runParallel As Boolean, ByVal targetText As String, ByVal settings As GeneticAlgorithmSettings)
 			If settings Is Nothing Then
 				Throw New ArgumentNullException("settings")
 			End If
 			If targetText Is Nothing Then
 				Throw New ArgumentNullException("targetText")
 			End If
 			_runParallel = runParallel
 			_settings = settings
 			_targetText = targetText
 		End Sub
 
 		Public Sub MoveNext()
             ' If this is the first iteration, create a random population.
 			If _currentPopulation Is Nothing Then
 				_currentPopulation = CreateRandomPopulation()
 			' Otherwise, iterate
 			Else
 				_currentPopulation = CreateNextGeneration()
 			End If
 		End Sub
 
 		Public ReadOnly Property CurrentBest() As TextMatchGenome
 			Get
 				Return _currentPopulation(0)
 			End Get
 		End Property
 
 		Private Function CreateRandomPopulation() As TextMatchGenome()
 			Return (
 			    From i In Enumerable.Range(0, _settings.PopulationSize)
 			    Select CreateRandomGenome(_random)).ToArray()
 		End Function
 
 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
 			Dim sb = New StringBuilder(_targetText.Length)
             For i = 0 To _targetText.Length - 1
                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
             Next i
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 				_validChars(i) = ChrW(pos)
 				i += 1
 				pos += 1
 			Loop
 			Do While i < _validChars.Length
 				_validChars(i) = ChrW(pos)
 				i += 1
 				pos += 1
 			Loop
 		End Sub
 
 		Public Sub New(ByVal runParallel As Boolean, ByVal targetText As String, ByVal settings As GeneticAlgorithmSettings)
 			If settings Is Nothing Then
 				Throw New ArgumentNullException("settings")
 			End If
 			If targetText Is Nothing Then
 				Throw New ArgumentNullException("targetText")
 			End If
 			_runParallel = runParallel
 			_settings = settings
 			_targetText = targetText
 		End Sub
 
 		Public Sub MoveNext()
             ' If this is the first iteration, create a random population.
 			If _currentPopulation Is Nothing Then
 				_currentPopulation = CreateRandomPopulation()
 			' Otherwise, iterate
 			Else
 				_currentPopulation = CreateNextGeneration()
 			End If
 		End Sub
 
 		Public ReadOnly Property CurrentBest() As TextMatchGenome
 			Get
 				Return _currentPopulation(0)
 			End Get
 		End Property
 
 		Private Function CreateRandomPopulation() As TextMatchGenome()
 			Return (
 			    From i In Enumerable.Range(0, _settings.PopulationSize)
 			    Select CreateRandomGenome(_random)).ToArray()
 		End Function
 
 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
 			Dim sb = New StringBuilder(_targetText.Length)
             For i = 0 To _targetText.Length - 1
                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
             Next i
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="34" endline="45"><![CDATA[
 
 		Public Sub New(ByVal runParallel As Boolean, ByVal targetText As String, ByVal settings As GeneticAlgorithmSettings)
 			If settings Is Nothing Then
 				Throw New ArgumentNullException("settings")
 			End If
 			If targetText Is Nothing Then
 				Throw New ArgumentNullException("targetText")
 			End If
 			_runParallel = runParallel
 			_settings = settings
 			_targetText = targetText
 		End Sub
 
 		Public Sub MoveNext()
             ' If this is the first iteration, create a random population.
 			If _currentPopulation Is Nothing Then
 				_currentPopulation = CreateRandomPopulation()
 			' Otherwise, iterate
 			Else
 				_currentPopulation = CreateNextGeneration()
 			End If
 		End Sub
 
 		Public ReadOnly Property CurrentBest() As TextMatchGenome
 			Get
 				Return _currentPopulation(0)
 			End Get
 		End Property
 
 		Private Function CreateRandomPopulation() As TextMatchGenome()
 			Return (
 			    From i In Enumerable.Range(0, _settings.PopulationSize)
 			    Select CreateRandomGenome(_random)).ToArray()
 		End Function
 
 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
 			Dim sb = New StringBuilder(_targetText.Length)
             For i = 0 To _targetText.Length - 1
                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
             Next i
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 			If settings Is Nothing Then
 				Throw New ArgumentNullException("settings")
 			End If
 			If targetText Is Nothing Then
 				Throw New ArgumentNullException("targetText")
 			End If
 			_runParallel = runParallel
 			_settings = settings
 			_targetText = targetText
 		End Sub
 
 		Public Sub MoveNext()
             ' If this is the first iteration, create a random population.
 			If _currentPopulation Is Nothing Then
 				_currentPopulation = CreateRandomPopulation()
 			' Otherwise, iterate
 			Else
 				_currentPopulation = CreateNextGeneration()
 			End If
 		End Sub
 
 		Public ReadOnly Property CurrentBest() As TextMatchGenome
 			Get
 				Return _currentPopulation(0)
 			End Get
 		End Property
 
 		Private Function CreateRandomPopulation() As TextMatchGenome()
 			Return (
 			    From i In Enumerable.Range(0, _settings.PopulationSize)
 			    Select CreateRandomGenome(_random)).ToArray()
 		End Function
 
 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
 			Dim sb = New StringBuilder(_targetText.Length)
             For i = 0 To _targetText.Length - 1
                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
             Next i
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 				Throw New ArgumentNullException("settings")
 			End If
 			If targetText Is Nothing Then
 				Throw New ArgumentNullException("targetText")
 			End If
 			_runParallel = runParallel
 			_settings = settings
 			_targetText = targetText
 		End Sub
 
 		Public Sub MoveNext()
             ' If this is the first iteration, create a random population.
 			If _currentPopulation Is Nothing Then
 				_currentPopulation = CreateRandomPopulation()
 			' Otherwise, iterate
 			Else
 				_currentPopulation = CreateNextGeneration()
 			End If
 		End Sub
 
 		Public ReadOnly Property CurrentBest() As TextMatchGenome
 			Get
 				Return _currentPopulation(0)
 			End Get
 		End Property
 
 		Private Function CreateRandomPopulation() As TextMatchGenome()
 			Return (
 			    From i In Enumerable.Range(0, _settings.PopulationSize)
 			    Select CreateRandomGenome(_random)).ToArray()
 		End Function
 
 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
 			Dim sb = New StringBuilder(_targetText.Length)
             For i = 0 To _targetText.Length - 1
                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
             Next i
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 				Throw New ArgumentNullException("targetText")
 			End If
 			_runParallel = runParallel
 			_settings = settings
 			_targetText = targetText
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="46" endline="55"><![CDATA[
 
 		Public Sub MoveNext()
             ' If this is the first iteration, create a random population.
 			If _currentPopulation Is Nothing Then
 				_currentPopulation = CreateRandomPopulation()
 			' Otherwise, iterate
 			Else
 				_currentPopulation = CreateNextGeneration()
 			End If
 		End Sub
 
 		Public ReadOnly Property CurrentBest() As TextMatchGenome
 			Get
 				Return _currentPopulation(0)
 			End Get
 		End Property
 
 		Private Function CreateRandomPopulation() As TextMatchGenome()
 			Return (
 			    From i In Enumerable.Range(0, _settings.PopulationSize)
 			    Select CreateRandomGenome(_random)).ToArray()
 		End Function
 
 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
 			Dim sb = New StringBuilder(_targetText.Length)
             For i = 0 To _targetText.Length - 1
                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
             Next i
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 				_currentPopulation = CreateRandomPopulation()
 			' Otherwise, iterate
 			Else
 				_currentPopulation = CreateNextGeneration()
 			End If
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="56" endline="60"><![CDATA[
 
 		Public ReadOnly Property CurrentBest() As TextMatchGenome
 			Get
 				Return _currentPopulation(0)
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="61" endline="67"><![CDATA[
 		End Property
 
 		Private Function CreateRandomPopulation() As TextMatchGenome()
 			Return (
 			    From i In Enumerable.Range(0, _settings.PopulationSize)
 			    Select CreateRandomGenome(_random)).ToArray()
 		End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="68" endline="75"><![CDATA[
 
 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
 			Dim sb = New StringBuilder(_targetText.Length)
             For i = 0 To _targetText.Length - 1
                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
             Next i
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="76" endline="94"><![CDATA[
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
 			End If
 		End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="95" endline="117"><![CDATA[
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="118" endline="129"><![CDATA[
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="130" endline="137"><![CDATA[
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="138" endline="143"><![CDATA[
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="66" endline="66"><![CDATA[
 			    Select CreateRandomGenome(_random)).ToArray()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="67" endline="78"><![CDATA[
 		End Function
 
 		Private Function CreateRandomGenome(ByVal rand As Random) As TextMatchGenome
 			Dim sb = New StringBuilder(_targetText.Length)
             For i = 0 To _targetText.Length - 1
                 sb.Append(_validChars(rand.Next(0, _validChars.Length)))
             Next i
 			Return New TextMatchGenome With {.Text = sb.ToString(), .TargetText = _targetText}
 		End Function
 
 		Private Function CreateNextGeneration() As TextMatchGenome()
 			Dim maxFitness = _currentPopulation.Max(Function(g) g.Fitness) + 1
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="79" endline="86"><![CDATA[
 			Dim sumOfMaxMinusFitness = _currentPopulation.Sum(Function(g) CLng(Fix(maxFitness - g.Fitness)))
 
 			If _runParallel Then
                 Return (
                     From i In ParallelEnumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="87" endline="92"><![CDATA[
 			Else
                 Return (
                     From i In Enumerable.Range(0, _settings.PopulationSize \ 2),
                     child In CreateChildren(FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness),
                                             FindRandomHighQualityParent(sumOfMaxMinusFitness, maxFitness))
                     Select child).ToArray()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="93" endline="153"><![CDATA[
 			End If
 		End Function
 
         Private Function CreateChildren(ByVal parent1 As TextMatchGenome, ByVal parent2 As TextMatchGenome) As TextMatchGenome()
             ' Crossover parents to create two children.
             Dim child1 As TextMatchGenome = Nothing
             Dim child2 As TextMatchGenome = Nothing
             If _random.NextDouble() < _settings.CrossoverProbability Then
                 Crossover(_random, parent1, parent2, child1, child2)
             Else
                 child1 = parent1
                 child2 = parent2
             End If
 
             ' Potentially mutate one or both children.
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child1)
             End If
             If _random.NextDouble() < _settings.MutationProbability Then
                 Mutate(_random, child2)
             End If
 
             ' Return the young'ens.
             Return {child1, child2}
         End Function
 
 		Private Function FindRandomHighQualityParent(ByVal sumOfMaxMinusFitness As Long, ByVal max As Integer) As TextMatchGenome
             Dim val = CLng(Fix(_random.NextDouble() * sumOfMaxMinusFitness))
             For i = 0 To _currentPopulation.Length - 1
                 Dim maxMinusFitness = max - _currentPopulation(i).Fitness
                 If val < maxMinusFitness Then
                     Return _currentPopulation(i)
                 End If
                 val -= maxMinusFitness
             Next i
 			Throw New InvalidOperationException("Not to be, apparently.")
 		End Function
 
         Private Sub Crossover(ByVal rand As Random, ByVal p1 As TextMatchGenome, ByVal p2 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child1 As TextMatchGenome,
                               <System.Runtime.InteropServices.Out()> ByRef child2 As TextMatchGenome)
             Dim crossoverPoint = rand.Next(1, p1.Text.Length)
             child1 = New TextMatchGenome With {.Text = p1.Text.Substring(0, crossoverPoint) & p2.Text.Substring(crossoverPoint), .TargetText = _targetText}
             child2 = New TextMatchGenome With {.Text = p2.Text.Substring(0, crossoverPoint) & p1.Text.Substring(crossoverPoint), .TargetText = _targetText}
         End Sub
 
 		Private Sub Mutate(ByVal rand As Random, ByRef genome As TextMatchGenome)
 			Dim sb = New StringBuilder(genome.Text)
 			sb(rand.Next(0, genome.Text.Length)) = _validChars(rand.Next(0, _validChars.Length))
 			genome.Text = sb.ToString()
 		End Sub
 	End Class
 
 	Public Structure TextMatchGenome
         Private _targetText As String
 		Private _text As String
 
 		Public Property Text() As String
 			Get
 				Return _text
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="154" endline="157"><![CDATA[
 			Set(ByVal value As String)
 				_text = value
 				RecomputeFitness()
 			End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="158" endline="163"><![CDATA[
 		End Property
 
 		Public Property TargetText() As String
 			Get
 				Return _targetText
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="164" endline="167"><![CDATA[
 			Set(ByVal value As String)
 				_targetText = value
 				RecomputeFitness()
 			End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="168" endline="182"><![CDATA[
 		End Property
 
 		Private Sub RecomputeFitness()
 			If _text IsNot Nothing AndAlso _targetText IsNot Nothing Then
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
                 Dim diffs = 0
                 For i = 0 To _targetText.Length - 1
                     If _targetText.Chars(i) <> _text.Chars(i) Then
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
                         diffs += 1
                     End If
                 Next i
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 				Fitness = diffs
 			Else
 				Fitness = Int32.MaxValue
 			End If
 		End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="183" endline="188"><![CDATA[
 
 		Private privateFitness As Integer
 		Public Property Fitness() As Integer
 			Get
 				Return privateFitness
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="189" endline="191"><![CDATA[
 			Private Set(ByVal value As Integer)
 				privateFitness = value
 			End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="192" endline="234"><![CDATA[
 		End Property
 	End Structure
 
 	Public Class GeneticAlgorithmSettings
 		Public Property PopulationSize() As Integer
 			Get
 				Return _populationSize
 			End Get
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="197" endline="199"><![CDATA[
 			Get
 				Return _populationSize
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="200" endline="205"><![CDATA[
 			Set(ByVal value As Integer)
 				If value < 1 OrElse value Mod 2 <> 0 Then
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 					Throw New ArgumentOutOfRangeException("PopulationSize")
 				End If
 				_populationSize = value
 			End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="206" endline="211"><![CDATA[
 		End Property
 
 		Public Property MutationProbability() As Double
 			Get
 				Return _mutationProbability
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="212" endline="217"><![CDATA[
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 					Throw New ArgumentOutOfRangeException("MutationProbability")
 				End If
 				_mutationProbability = value
 			End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="218" endline="223"><![CDATA[
 		End Property
 
 		Public Property CrossoverProbability() As Double
 			Get
 				Return _crossoverProbability
 			End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="224" endline="229"><![CDATA[
 			Set(ByVal value As Double)
 				If value < 0 OrElse value > 1 Then
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
 		End Property
 
         Private _populationSize As Integer = 30
         Private _mutationProbability As Double = 0.01
         Private _crossoverProbability As Double = 0.87
 	End Class
 End Namespace
 					Throw New ArgumentOutOfRangeException("CrossoverProbability")
 				End If
 				_crossoverProbability = value
 			End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ShakespeareanMonkeys\ShakespeareanMonkeys_VisualBasic\TextMatchGeneticAlgorithm.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
</source_elements></project>
