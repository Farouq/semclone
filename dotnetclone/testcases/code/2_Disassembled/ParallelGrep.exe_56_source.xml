<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="18" endline="60"><![CDATA[
     {
         // Parse command-line switches
         bool recursive = args.Contains("/s");
         bool ignoreCase = args.Contains("/i");
 
         // Get the regex and file wildcards from the command-line
         var nonSwitches = from arg in args where arg.FirstOrDefault() != '/' select arg;
         var regexString = nonSwitches.FirstOrDefault();
         var wildcards = nonSwitches.Skip(1);
 
         // Create thread-local Regex instances, to prevent contention on Regex's internal lock
         var regex = new ThreadLocal<Regex>(() =>
             new Regex(regexString, RegexOptions.Compiled | (ignoreCase ? RegexOptions.IgnoreCase 
 
         // Get the list of files to be examined
         var files = from wc in wildcards
                     let dirName = Path.GetDirectoryName(wc)
                     let fileName = Path.GetFileName(wc)
                     from file in Directory.EnumerateFiles(
                         String.IsNullOrWhiteSpace(dirName) ? "." 
                         String.IsNullOrWhiteSpace(fileName) ? "*.*" 
                         recursive ? SearchOption.AllDirectories 
                     select file;
 
         try
         {
             // Traverse the specified files in parallel, and run each line through the Regex, collecting line number info
             // for each match (the Zip call counts the lines in each file)
             var matches = from file in files.AsParallel().AsOrdered().WithMergeOptions(ParallelMergeOptions.NotBuffered)
                           from line in File.ReadLines(file).Zip(Enumerable.Range(1, int.MaxValue), (s, i) => new { Num = i, Text = s, File = file })
                           where regex.Value.IsMatch(line.Text)
                           select line;
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="24" endline="60"><![CDATA[
         var nonSwitches = from arg in args where arg.FirstOrDefault() != '/' select arg;
         var regexString = nonSwitches.FirstOrDefault();
         var wildcards = nonSwitches.Skip(1);
 
         // Create thread-local Regex instances, to prevent contention on Regex's internal lock
         var regex = new ThreadLocal<Regex>(() =>
             new Regex(regexString, RegexOptions.Compiled | (ignoreCase ? RegexOptions.IgnoreCase 
 
         // Get the list of files to be examined
         var files = from wc in wildcards
                     let dirName = Path.GetDirectoryName(wc)
                     let fileName = Path.GetFileName(wc)
                     from file in Directory.EnumerateFiles(
                         String.IsNullOrWhiteSpace(dirName) ? "." 
                         String.IsNullOrWhiteSpace(fileName) ? "*.*" 
                         recursive ? SearchOption.AllDirectories 
                     select file;
 
         try
         {
             // Traverse the specified files in parallel, and run each line through the Regex, collecting line number info
             // for each match (the Zip call counts the lines in each file)
             var matches = from file in files.AsParallel().AsOrdered().WithMergeOptions(ParallelMergeOptions.NotBuffered)
                           from line in File.ReadLines(file).Zip(Enumerable.Range(1, int.MaxValue), (s, i) => new { Num = i, Text = s, File = file })
                           where regex.Value.IsMatch(line.Text)
                           select line;
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="34" endline="60"><![CDATA[
                     let dirName = Path.GetDirectoryName(wc)
                     let fileName = Path.GetFileName(wc)
                     from file in Directory.EnumerateFiles(
                         String.IsNullOrWhiteSpace(dirName) ? "." 
                         String.IsNullOrWhiteSpace(fileName) ? "*.*" 
                         recursive ? SearchOption.AllDirectories 
                     select file;
 
         try
         {
             // Traverse the specified files in parallel, and run each line through the Regex, collecting line number info
             // for each match (the Zip call counts the lines in each file)
             var matches = from file in files.AsParallel().AsOrdered().WithMergeOptions(ParallelMergeOptions.NotBuffered)
                           from line in File.ReadLines(file).Zip(Enumerable.Range(1, int.MaxValue), (s, i) => new { Num = i, Text = s, File = file })
                           where regex.Value.IsMatch(line.Text)
                           select line;
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="35" endline="60"><![CDATA[
                     let fileName = Path.GetFileName(wc)
                     from file in Directory.EnumerateFiles(
                         String.IsNullOrWhiteSpace(dirName) ? "." 
                         String.IsNullOrWhiteSpace(fileName) ? "*.*" 
                         recursive ? SearchOption.AllDirectories 
                     select file;
 
         try
         {
             // Traverse the specified files in parallel, and run each line through the Regex, collecting line number info
             // for each match (the Zip call counts the lines in each file)
             var matches = from file in files.AsParallel().AsOrdered().WithMergeOptions(ParallelMergeOptions.NotBuffered)
                           from line in File.ReadLines(file).Zip(Enumerable.Range(1, int.MaxValue), (s, i) => new { Num = i, Text = s, File = file })
                           where regex.Value.IsMatch(line.Text)
                           select line;
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="40" endline="60"><![CDATA[
                     select file;
 
         try
         {
             // Traverse the specified files in parallel, and run each line through the Regex, collecting line number info
             // for each match (the Zip call counts the lines in each file)
             var matches = from file in files.AsParallel().AsOrdered().WithMergeOptions(ParallelMergeOptions.NotBuffered)
                           from line in File.ReadLines(file).Zip(Enumerable.Range(1, int.MaxValue), (s, i) => new { Num = i, Text = s, File = file })
                           where regex.Value.IsMatch(line.Text)
                           select line;
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="47" endline="60"><![CDATA[
                           from line in File.ReadLines(file).Zip(Enumerable.Range(1, int.MaxValue), (s, i) => new { Num = i, Text = s, File = file })
                           where regex.Value.IsMatch(line.Text)
                           select line;
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="47" endline="60"><![CDATA[
                           from line in File.ReadLines(file).Zip(Enumerable.Range(1, int.MaxValue), (s, i) => new { Num = i, Text = s, File = file })
                           where regex.Value.IsMatch(line.Text)
                           select line;
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="49" endline="60"><![CDATA[
                           select line;
             foreach (var line in matches)
             {
                 Console.WriteLine("{0}
             }
         }
         catch (AggregateException ae)
         {
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="57" endline="60"><![CDATA[
             ae.Handle(e => { Console.WriteLine(e.Message); return true; });
         }
     }
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\ParallelGrep\ParallelGrep_CSharp\ParallelGrep.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
</source_elements></project>
